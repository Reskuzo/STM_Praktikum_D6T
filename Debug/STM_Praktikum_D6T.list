
STM_Praktikum_D6T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b118  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800b2dc  0800b2dc  0000c2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2f8  0800b2f8  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2f8  0800b2f8  0000c2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b300  0800b300  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b300  0800b300  0000c300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b304  0800b304  0000c304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800b308  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b84  2000007c  0800b384  0000d07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  0800b384  0000dc00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0cb  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f3  00000000  00000000  0002a177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0002e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e6  00000000  00000000  0002fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241a1  00000000  00000000  00030e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020285  00000000  00000000  00055037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cde81  00000000  00000000  000752bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014313d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006584  00000000  00000000  00143180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00149704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800b2c4 	.word	0x0800b2c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000080 	.word	0x20000080
 8000200:	0800b2c4 	.word	0x0800b2c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 ff58 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f816 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f998 	bl	8000834 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000504:	f000 fb08 	bl	8000b18 <MX_FSMC_Init>
  MX_I2C1_Init();
 8000508:	f000 f884 	bl	8000614 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f8b0 	bl	8000670 <MX_I2C2_Init>
  MX_I2S3_Init();
 8000510:	f000 f8dc 	bl	80006cc <MX_I2S3_Init>
  MX_QUADSPI_Init();
 8000514:	f000 f908 	bl	8000728 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000518:	f000 f932 	bl	8000780 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f960 	bl	80007e0 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000520:	f00a fa72 	bl	800aa08 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000524:	f00a fa96 	bl	800aa54 <MX_USB_HOST_Process>
 8000528:	e7fc      	b.n	8000524 <main+0x30>
	...

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	2234      	movs	r2, #52	@ 0x34
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f00a fe34 	bl	800b1a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <SystemClock_Config+0xe0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a2c      	ldr	r2, [pc, #176]	@ (800060c <SystemClock_Config+0xe0>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <SystemClock_Config+0xe0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <SystemClock_Config+0xe4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a26      	ldr	r2, [pc, #152]	@ (8000610 <SystemClock_Config+0xe4>)
 8000576:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <SystemClock_Config+0xe4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000588:	2303      	movs	r3, #3
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000590:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005a8:	2348      	movs	r3, #72	@ 0x48
 80005aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005b0:	2303      	movs	r3, #3
 80005b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 ffe7 	bl	8005590 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005c8:	f000 fb08 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fa17 	bl	8004a1c <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80005f4:	f000 faf2 	bl	8000bdc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2000      	movs	r0, #0
 80005fe:	f004 faf3 	bl	8004be8 <HAL_RCC_MCOConfig>
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	@ 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f003 fb1b 	bl	8003c8c <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 fabe 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000098 	.word	0x20000098
 8000668:	40005400 	.word	0x40005400
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C2_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_I2C2_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C2_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <MX_I2C2_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C2_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2C2_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_I2C2_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_I2C2_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2C2_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_I2C2_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2C2_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2C2_Init+0x50>)
 80006ae:	f003 faed 	bl	8003c8c <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 fa90 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	40005800 	.word	0x40005800
 80006c8:	000186a0 	.word	0x000186a0

080006cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <MX_I2S3_Init+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006f4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80006f8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2S3_Init+0x54>)
 8000708:	2201      	movs	r2, #1
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_I2S3_Init+0x54>)
 800070e:	f003 fc01 	bl	8003f14 <HAL_I2S_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000718:	f000 fa60 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000140 	.word	0x20000140
 8000724:	40003c00 	.word	0x40003c00

08000728 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_QUADSPI_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 800073a:	2204      	movs	r2, #4
 800073c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 8000740:	2210      	movs	r2, #16
 8000742:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 8000746:	2218      	movs	r2, #24
 8000748:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 800074c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000750:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_QUADSPI_Init+0x50>)
 8000766:	f004 f897 	bl	8004898 <HAL_QSPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fa34 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000188 	.word	0x20000188
 800077c:	a0001000 	.word	0xa0001000

08000780 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <MX_SDIO_SD_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 800079e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007a2:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 80007b2:	f005 f971 	bl	8005a98 <HAL_SD_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 80007bc:	f000 fa0e 	bl	8000bdc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80007c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_SDIO_SD_Init+0x58>)
 80007c6:	f005 fbbb 	bl	8005f40 <HAL_SD_ConfigWideBusOperation>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SDIO_SD_Init+0x54>
  {
    Error_Handler();
 80007d0:	f000 fa04 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200001d4 	.word	0x200001d4
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART2_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000818:	f005 ff39 	bl	800668e <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f9db 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000258 	.word	0x20000258
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	@ 0x38
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	4baa      	ldr	r3, [pc, #680]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4aa9      	ldr	r2, [pc, #676]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4ba7      	ldr	r3, [pc, #668]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	623b      	str	r3, [r7, #32]
 8000864:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	4ba3      	ldr	r3, [pc, #652]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4aa2      	ldr	r2, [pc, #648]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4ba0      	ldr	r3, [pc, #640]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	4b9c      	ldr	r3, [pc, #624]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a9b      	ldr	r2, [pc, #620]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b99      	ldr	r3, [pc, #612]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0320 	and.w	r3, r3, #32
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	4b95      	ldr	r3, [pc, #596]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a94      	ldr	r2, [pc, #592]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b92      	ldr	r3, [pc, #584]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b8e      	ldr	r3, [pc, #568]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a8d      	ldr	r2, [pc, #564]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b8b      	ldr	r3, [pc, #556]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b87      	ldr	r3, [pc, #540]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a86      	ldr	r2, [pc, #536]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b84      	ldr	r3, [pc, #528]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b80      	ldr	r3, [pc, #512]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a7f      	ldr	r2, [pc, #508]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 80008fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b7d      	ldr	r3, [pc, #500]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b79      	ldr	r3, [pc, #484]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a78      	ldr	r2, [pc, #480]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b76      	ldr	r3, [pc, #472]	@ (8000af8 <MX_GPIO_Init+0x2c4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	4873      	ldr	r0, [pc, #460]	@ (8000afc <MX_GPIO_Init+0x2c8>)
 8000930:	f001 f878 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 800093a:	4871      	ldr	r0, [pc, #452]	@ (8000b00 <MX_GPIO_Init+0x2cc>)
 800093c:	f001 f872 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000946:	486f      	ldr	r0, [pc, #444]	@ (8000b04 <MX_GPIO_Init+0x2d0>)
 8000948:	f001 f86c 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000952:	486d      	ldr	r0, [pc, #436]	@ (8000b08 <MX_GPIO_Init+0x2d4>)
 8000954:	f001 f866 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8000958:	230f      	movs	r3, #15
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800095c:	2311      	movs	r3, #17
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4863      	ldr	r0, [pc, #396]	@ (8000afc <MX_GPIO_Init+0x2c8>)
 8000970:	f000 fec4 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 8000974:	2310      	movs	r3, #16
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000984:	2308      	movs	r3, #8
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	485b      	ldr	r0, [pc, #364]	@ (8000afc <MX_GPIO_Init+0x2c8>)
 8000990:	f000 feb4 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 8000994:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4854      	ldr	r0, [pc, #336]	@ (8000b00 <MX_GPIO_Init+0x2cc>)
 80009ae:	f000 fea5 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 80009b2:	2304      	movs	r3, #4
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80009c2:	2308      	movs	r3, #8
 80009c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	484f      	ldr	r0, [pc, #316]	@ (8000b0c <MX_GPIO_Init+0x2d8>)
 80009ce:	f000 fe95 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80009d2:	2301      	movs	r3, #1
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	484a      	ldr	r0, [pc, #296]	@ (8000b10 <MX_GPIO_Init+0x2dc>)
 80009e8:	f000 fe88 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80009fc:	2308      	movs	r3, #8
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4843      	ldr	r0, [pc, #268]	@ (8000b14 <MX_GPIO_Init+0x2e0>)
 8000a08:	f000 fe78 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 8000a0c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <MX_GPIO_Init+0x2cc>)
 8000a22:	f000 fe6b 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8000a26:	2393      	movs	r3, #147	@ 0x93
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4833      	ldr	r0, [pc, #204]	@ (8000b08 <MX_GPIO_Init+0x2d4>)
 8000a3a:	f000 fe5f 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 8000a3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a50:	2305      	movs	r3, #5
 8000a52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	482e      	ldr	r0, [pc, #184]	@ (8000b14 <MX_GPIO_Init+0x2e0>)
 8000a5c:	f000 fe4e 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000a60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4822      	ldr	r0, [pc, #136]	@ (8000b04 <MX_GPIO_Init+0x2d0>)
 8000a7a:	f000 fe3f 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 8000a7e:	2324      	movs	r3, #36	@ 0x24
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	481d      	ldr	r0, [pc, #116]	@ (8000b08 <MX_GPIO_Init+0x2d4>)
 8000a94:	f000 fe32 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 8000a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a9e:	2311      	movs	r3, #17
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4815      	ldr	r0, [pc, #84]	@ (8000b08 <MX_GPIO_Init+0x2d4>)
 8000ab2:	f000 fe23 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 8000ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480f      	ldr	r0, [pc, #60]	@ (8000b10 <MX_GPIO_Init+0x2dc>)
 8000ad4:	f000 fe12 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <MX_GPIO_Init+0x2d0>)
 8000aec:	f000 fe06 	bl	80016fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3738      	adds	r7, #56	@ 0x38
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40021400 	.word	0x40021400
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40021800 	.word	0x40021800
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400

08000b18 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]
 8000b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b32:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000b36:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000b38:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b3a:	4a27      	ldr	r2, [pc, #156]	@ (8000bd8 <MX_FSMC_Init+0xc0>)
 8000b3c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000b3e:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b44:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b50:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b52:	2210      	movs	r2, #16
 8000b54:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	641a      	str	r2, [r3, #64]	@ 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ba2:	23ff      	movs	r3, #255	@ 0xff
 8000ba4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000baa:	2310      	movs	r3, #16
 8000bac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000bae:	2311      	movs	r3, #17
 8000bb0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_FSMC_Init+0xbc>)
 8000bbe:	f005 fd1e 	bl	80065fe <HAL_SRAM_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8000bc8:	f000 f808 	bl	8000bdc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200002a0 	.word	0x200002a0
 8000bd8:	a0000104 	.word	0xa0000104

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <Error_Handler+0x8>

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	@ 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a3b      	ldr	r2, [pc, #236]	@ (8000d44 <HAL_I2C_MspInit+0x10c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12c      	bne.n	8000cb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a39      	ldr	r2, [pc, #228]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b37      	ldr	r3, [pc, #220]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c76:	23c0      	movs	r3, #192	@ 0xc0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7a:	2312      	movs	r3, #18
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c86:	2304      	movs	r3, #4
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482e      	ldr	r0, [pc, #184]	@ (8000d4c <HAL_I2C_MspInit+0x114>)
 8000c92:	f000 fd33 	bl	80016fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000ca0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cb2:	e042      	b.n	8000d3a <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a25      	ldr	r2, [pc, #148]	@ (8000d50 <HAL_I2C_MspInit+0x118>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d13d      	bne.n	8000d3a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a20      	ldr	r2, [pc, #128]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce0:	2312      	movs	r3, #18
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cec:	2304      	movs	r3, #4
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4815      	ldr	r0, [pc, #84]	@ (8000d4c <HAL_I2C_MspInit+0x114>)
 8000cf8:	f000 fd00 	bl	80016fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000cfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d02:	2312      	movs	r3, #18
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000d0e:	2309      	movs	r3, #9
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <HAL_I2C_MspInit+0x114>)
 8000d1a:	f000 fcef 	bl	80016fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000d28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_I2C_MspInit+0x110>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	@ 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40005400 	.word	0x40005400
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40005800 	.word	0x40005800

08000d54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09a      	sub	sp, #104	@ 0x68
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	223c      	movs	r2, #60	@ 0x3c
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00a fa17 	bl	800b1a8 <memset>
  if(hi2s->Instance==SPI3)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb0 <HAL_I2S_MspInit+0x15c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	f040 8091 	bne.w	8000ea8 <HAL_I2S_MspInit+0x154>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB1;
 8000d86:	2381      	movs	r3, #129	@ 0x81
 8000d88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000d8a:	2332      	movs	r3, #50	@ 0x32
 8000d8c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 f8c0 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 8000db2:	f7ff ff13 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b37      	ldr	r3, [pc, #220]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a36      	ldr	r2, [pc, #216]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b34      	ldr	r3, [pc, #208]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b29      	ldr	r3, [pc, #164]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a28      	ldr	r2, [pc, #160]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <HAL_I2S_MspInit+0x160>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S3_CK
    PC7     ------> I2S3_MCK
    PB4     ------> I2S3_ext_SD
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = CODEC_I2S3_WS_Pin;
 8000e26:	2310      	movs	r3, #16
 8000e28:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e36:	2306      	movs	r3, #6
 8000e38:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(CODEC_I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481d      	ldr	r0, [pc, #116]	@ (8000eb8 <HAL_I2S_MspInit+0x164>)
 8000e42:	f000 fc5b 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_SCK_Pin|CODEC_I2S3ext_SD_Pin;
 8000e46:	f241 0310 	movw	r3, #4112	@ 0x1010
 8000e4a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e60:	4619      	mov	r1, r3
 8000e62:	4816      	ldr	r0, [pc, #88]	@ (8000ebc <HAL_I2S_MspInit+0x168>)
 8000e64:	f000 fc4a 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_MCK_Pin;
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(CODEC_I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e80:	4619      	mov	r1, r3
 8000e82:	480f      	ldr	r0, [pc, #60]	@ (8000ec0 <HAL_I2S_MspInit+0x16c>)
 8000e84:	f000 fc3a 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_SD_Pin;
 8000e88:	2320      	movs	r3, #32
 8000e8a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(CODEC_I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <HAL_I2S_MspInit+0x168>)
 8000ea4:	f000 fc2a 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3768      	adds	r7, #104	@ 0x68
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40003c00 	.word	0x40003c00
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020800 	.word	0x40020800

08000ec4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a3f      	ldr	r2, [pc, #252]	@ (8000fe0 <HAL_QSPI_MspInit+0x11c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d178      	bne.n	8000fd8 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eee:	4a3d      	ldr	r2, [pc, #244]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b37      	ldr	r3, [pc, #220]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a36      	ldr	r2, [pc, #216]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b34      	ldr	r3, [pc, #208]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a28      	ldr	r2, [pc, #160]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <HAL_QSPI_MspInit+0x120>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8000f56:	23c0      	movs	r3, #192	@ 0xc0
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000f66:	2309      	movs	r3, #9
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481d      	ldr	r0, [pc, #116]	@ (8000fe8 <HAL_QSPI_MspInit+0x124>)
 8000f72:	f000 fbc3 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8000f76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f88:	230a      	movs	r3, #10
 8000f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4815      	ldr	r0, [pc, #84]	@ (8000fe8 <HAL_QSPI_MspInit+0x124>)
 8000f94:	f000 fbb2 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480e      	ldr	r0, [pc, #56]	@ (8000fec <HAL_QSPI_MspInit+0x128>)
 8000fb4:	f000 fba2 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000fb8:	2340      	movs	r3, #64	@ 0x40
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fc8:	230a      	movs	r3, #10
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <HAL_QSPI_MspInit+0x12c>)
 8000fd4:	f000 fb92 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	@ 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	a0001000 	.word	0xa0001000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40021400 	.word	0x40021400
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40021800 	.word	0x40021800

08000ff4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09a      	sub	sp, #104	@ 0x68
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	223c      	movs	r2, #60	@ 0x3c
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00a f8c7 	bl	800b1a8 <memset>
  if(hsd->Instance==SDIO)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a31      	ldr	r2, [pc, #196]	@ (80010e4 <HAL_SD_MspInit+0xf0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d15a      	bne.n	80010da <HAL_SD_MspInit+0xe6>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001024:	2360      	movs	r3, #96	@ 0x60
 8001026:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001028:	2300      	movs	r3, #0
 800102a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800102c:	2300      	movs	r3, #0
 800102e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	4618      	mov	r0, r3
 8001036:	f003 ff79 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001040:	f7ff fdcc 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104c:	4a26      	ldr	r2, [pc, #152]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 800104e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001052:	6453      	str	r3, [r2, #68]	@ 0x44
 8001054:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	4a1f      	ldr	r2, [pc, #124]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a18      	ldr	r2, [pc, #96]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_SD_MspInit+0xf4>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = uSD_D0_Pin|uSD_D1_Pin|uSD_D2_Pin|uSD_D3_Pin
 8001098:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800109c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |uSD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010aa:	230c      	movs	r3, #12
 80010ac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b2:	4619      	mov	r1, r3
 80010b4:	480d      	ldr	r0, [pc, #52]	@ (80010ec <HAL_SD_MspInit+0xf8>)
 80010b6:	f000 fb21 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80010ba:	2304      	movs	r3, #4
 80010bc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010ca:	230c      	movs	r3, #12
 80010cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d2:	4619      	mov	r1, r3
 80010d4:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <HAL_SD_MspInit+0xfc>)
 80010d6:	f000 fb11 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3768      	adds	r7, #104	@ 0x68
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <HAL_UART_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <HAL_UART_MspInit+0x88>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <HAL_UART_MspInit+0x88>)
 8001120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_UART_MspInit+0x88>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <HAL_UART_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <HAL_UART_MspInit+0x88>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_UART_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800114e:	230c      	movs	r3, #12
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115e:	2307      	movs	r3, #7
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <HAL_UART_MspInit+0x8c>)
 800116a:	f000 fac7 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40004400 	.word	0x40004400
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <HAL_FSMC_MspInit+0xa8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d140      	bne.n	8001222 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <HAL_FSMC_MspInit+0xa8>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <HAL_FSMC_MspInit+0xac>)
 80011ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ae:	4a20      	ldr	r2, [pc, #128]	@ (8001230 <HAL_FSMC_MspInit+0xac>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <HAL_FSMC_MspInit+0xac>)
 80011b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = A0_Pin;
 80011c2:	2301      	movs	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011d2:	230c      	movs	r3, #12
 80011d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4816      	ldr	r0, [pc, #88]	@ (8001234 <HAL_FSMC_MspInit+0xb0>)
 80011dc:	f000 fa8e 	bl	80016fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80011e0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80011e4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011f2:	230c      	movs	r3, #12
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	480f      	ldr	r0, [pc, #60]	@ (8001238 <HAL_FSMC_MspInit+0xb4>)
 80011fc:	f000 fa7e 	bl	80016fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001200:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8001204:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001212:	230c      	movs	r3, #12
 8001214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4619      	mov	r1, r3
 800121a:	4808      	ldr	r0, [pc, #32]	@ (800123c <HAL_FSMC_MspInit+0xb8>)
 800121c:	f000 fa6e 	bl	80016fc <HAL_GPIO_Init>
 8001220:	e000      	b.n	8001224 <HAL_FSMC_MspInit+0xa0>
    return;
 8001222:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200002f0 	.word	0x200002f0
 8001230:	40023800 	.word	0x40023800
 8001234:	40021400 	.word	0x40021400
 8001238:	40021000 	.word	0x40021000
 800123c:	40020c00 	.word	0x40020c00

08001240 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001248:	f7ff ff9c 	bl	8001184 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <NMI_Handler+0x4>

0800125c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <MemManage_Handler+0x4>

0800126c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <UsageFault_Handler+0x4>

0800127c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f000 f8d1 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <OTG_FS_IRQHandler+0x10>)
 80012ba:	f000 fead 	bl	8002018 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200006d8 	.word	0x200006d8

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f009 ff6e 	bl	800b1d8 <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20040000 	.word	0x20040000
 8001328:	00000400 	.word	0x00000400
 800132c:	200002f4 	.word	0x200002f4
 8001330:	20000c00 	.word	0x20000c00

08001334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001390 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800135c:	f7ff ffea 	bl	8001334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001360:	480c      	ldr	r0, [pc, #48]	@ (8001394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001362:	490d      	ldr	r1, [pc, #52]	@ (8001398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001364:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001378:	4c0a      	ldr	r4, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001386:	f009 ff2d 	bl	800b1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff f8b3 	bl	80004f4 <main>
  bx  lr    
 800138e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001390:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800139c:	0800b308 	.word	0x0800b308
  ldr r2, =_sbss
 80013a0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013a4:	20000c00 	.word	0x20000c00

080013a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <HAL_Init+0x40>)
 80013b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_Init+0x40>)
 80013c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <HAL_Init+0x40>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f94f 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fc02 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f967 	bl	80016e2 <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f92f 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	@ (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	200002f8 	.word	0x200002f8

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200002f8 	.word	0x200002f8

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffde 	bl	8001478 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	@ (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff3e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e165      	b.n	80019e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8154 	bne.w	80019de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	2b02      	cmp	r3, #2
 800174c:	d130      	bne.n	80017b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d017      	beq.n	80017ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d123      	bne.n	8001840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80ae 	beq.w	80019de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b5d      	ldr	r3, [pc, #372]	@ (80019fc <HAL_GPIO_Init+0x300>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a5c      	ldr	r2, [pc, #368]	@ (80019fc <HAL_GPIO_Init+0x300>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b5a      	ldr	r3, [pc, #360]	@ (80019fc <HAL_GPIO_Init+0x300>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189e:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a04 <HAL_GPIO_Init+0x308>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d025      	beq.n	8001916 <HAL_GPIO_Init+0x21a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a08 <HAL_GPIO_Init+0x30c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d01f      	beq.n	8001912 <HAL_GPIO_Init+0x216>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4d      	ldr	r2, [pc, #308]	@ (8001a0c <HAL_GPIO_Init+0x310>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d019      	beq.n	800190e <HAL_GPIO_Init+0x212>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001a10 <HAL_GPIO_Init+0x314>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001a14 <HAL_GPIO_Init+0x318>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00d      	beq.n	8001906 <HAL_GPIO_Init+0x20a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001a18 <HAL_GPIO_Init+0x31c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x206>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a49      	ldr	r2, [pc, #292]	@ (8001a1c <HAL_GPIO_Init+0x320>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_GPIO_Init+0x202>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00c      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 80018fe:	2307      	movs	r3, #7
 8001900:	e00a      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 8001902:	2305      	movs	r3, #5
 8001904:	e008      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 8001906:	2304      	movs	r3, #4
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 800190a:	2303      	movs	r3, #3
 800190c:	e004      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 800190e:	2302      	movs	r3, #2
 8001910:	e002      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x21c>
 8001916:	2300      	movs	r3, #0
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f002 0203 	and.w	r2, r2, #3
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	4093      	lsls	r3, r2
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001928:	4935      	ldr	r1, [pc, #212]	@ (8001a00 <HAL_GPIO_Init+0x304>)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001936:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195a:	4a31      	ldr	r2, [pc, #196]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001960:	4b2f      	ldr	r3, [pc, #188]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001984:	4a26      	ldr	r2, [pc, #152]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800198a:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3301      	adds	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	f67f ae96 	bls.w	8001718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40013800 	.word	0x40013800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	041a      	lsls	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	619a      	str	r2, [r3, #24]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af02      	add	r7, sp, #8
 8001a5c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e059      	b.n	8001b1c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f009 f81e 	bl	800aac4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a96:	d102      	bne.n	8001a9e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fedb 	bl	800785e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7c1a      	ldrb	r2, [r3, #16]
 8001ab0:	f88d 2000 	strb.w	r2, [sp]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab8:	f005 fe5c 	bl	8007774 <USB_CoreInit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e026      	b.n	8001b1c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 fed3 	bl	8007880 <USB_SetCurrentMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e017      	b.n	8001b1c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7c1a      	ldrb	r2, [r3, #16]
 8001af4:	f88d 2000 	strb.w	r2, [sp]
 8001af8:	3304      	adds	r3, #4
 8001afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afc:	f006 f876 	bl	8007bec <USB_HostInit>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e004      	b.n	8001b1c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b08b      	sub	sp, #44	@ 0x2c
 8001b28:	af04      	add	r7, sp, #16
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	70fb      	strb	r3, [r7, #3]
 8001b36:	460b      	mov	r3, r1
 8001b38:	70bb      	strb	r3, [r7, #2]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001b3e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b40:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_HCD_HC_Init+0x2c>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e09d      	b.n	8001c8c <HAL_HCD_HC_Init+0x168>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	3319      	adds	r3, #25
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	3314      	adds	r3, #20
 8001b7c:	787a      	ldrb	r2, [r7, #1]
 8001b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3315      	adds	r3, #21
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3326      	adds	r3, #38	@ 0x26
 8001ba4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001ba8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	78bb      	ldrb	r3, [r7, #2]
 8001bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bb2:	b2d8      	uxtb	r0, r3
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3316      	adds	r3, #22
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fbc8 	bl	8002360 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001bd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da0a      	bge.n	8001bee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3317      	adds	r3, #23
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e009      	b.n	8001c02 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3317      	adds	r3, #23
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f006 f938 	bl	8007e7c <USB_GetHostSpeed>
 8001c0c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10b      	bne.n	8001c2e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_HCD_HC_Init+0x10a>
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d104      	bne.n	8001c2e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2bbc      	cmp	r3, #188	@ 0xbc
 8001c28:	d901      	bls.n	8001c2e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001c2a:	23bc      	movs	r3, #188	@ 0xbc
 8001c2c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3318      	adds	r3, #24
 8001c3e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001c42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	b298      	uxth	r0, r3
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	3328      	adds	r3, #40	@ 0x28
 8001c58:	4602      	mov	r2, r0
 8001c5a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	787c      	ldrb	r4, [r7, #1]
 8001c66:	78ba      	ldrb	r2, [r7, #2]
 8001c68:	78f9      	ldrb	r1, [r7, #3]
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4623      	mov	r3, r4
 8001c7a:	f006 f927 	bl	8007ecc <USB_HC_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}

08001c94 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_HCD_HC_Halt+0x1e>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e00f      	b.n	8001cd2 <HAL_HCD_HC_Halt+0x3e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f006 fc6d 	bl	80085a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	70fb      	strb	r3, [r7, #3]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70bb      	strb	r3, [r7, #2]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3317      	adds	r3, #23
 8001d06:	78ba      	ldrb	r2, [r7, #2]
 8001d08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	3326      	adds	r3, #38	@ 0x26
 8001d1a:	787a      	ldrb	r2, [r7, #1]
 8001d1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d1e:	7c3b      	ldrb	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d114      	bne.n	8001d4e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	332a      	adds	r3, #42	@ 0x2a
 8001d34:	2203      	movs	r2, #3
 8001d36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	3319      	adds	r3, #25
 8001d48:	7f3a      	ldrb	r2, [r7, #28]
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e009      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	332a      	adds	r3, #42	@ 0x2a
 8001d5e:	2202      	movs	r2, #2
 8001d60:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d62:	787b      	ldrb	r3, [r7, #1]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	f200 8102 	bhi.w	8001f6e <HAL_HCD_HC_SubmitRequest+0x292>
 8001d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d70 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001d81 	.word	0x08001d81
 8001d74:	08001f59 	.word	0x08001f59
 8001d78:	08001e45 	.word	0x08001e45
 8001d7c:	08001ecf 	.word	0x08001ecf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001d80:	7c3b      	ldrb	r3, [r7, #16]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	f040 80f5 	bne.w	8001f72 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001d88:	78bb      	ldrb	r3, [r7, #2]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d12d      	bne.n	8001dea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001d8e:	8b3b      	ldrh	r3, [r7, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	333d      	adds	r3, #61	@ 0x3d
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	333d      	adds	r3, #61	@ 0x3d
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	332a      	adds	r3, #42	@ 0x2a
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001dd2:	e0ce      	b.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	332a      	adds	r3, #42	@ 0x2a
 8001de4:	2202      	movs	r2, #2
 8001de6:	701a      	strb	r2, [r3, #0]
      break;
 8001de8:	e0c3      	b.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	331a      	adds	r3, #26
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	f040 80b8 	bne.w	8001f72 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	333c      	adds	r3, #60	@ 0x3c
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10a      	bne.n	8001e2e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	332a      	adds	r3, #42	@ 0x2a
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
      break;
 8001e2c:	e0a1      	b.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	332a      	adds	r3, #42	@ 0x2a
 8001e3e:	2202      	movs	r2, #2
 8001e40:	701a      	strb	r2, [r3, #0]
      break;
 8001e42:	e096      	b.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e44:	78bb      	ldrb	r3, [r7, #2]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d120      	bne.n	8001e8c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	333d      	adds	r3, #61	@ 0x3d
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	332a      	adds	r3, #42	@ 0x2a
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e74:	e07e      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	332a      	adds	r3, #42	@ 0x2a
 8001e86:	2202      	movs	r2, #2
 8001e88:	701a      	strb	r2, [r3, #0]
      break;
 8001e8a:	e073      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	333c      	adds	r3, #60	@ 0x3c
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	332a      	adds	r3, #42	@ 0x2a
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
      break;
 8001eb6:	e05d      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	332a      	adds	r3, #42	@ 0x2a
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
      break;
 8001ecc:	e052      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ece:	78bb      	ldrb	r3, [r7, #2]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d120      	bne.n	8001f16 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	333d      	adds	r3, #61	@ 0x3d
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10a      	bne.n	8001f00 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	332a      	adds	r3, #42	@ 0x2a
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001efe:	e039      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	332a      	adds	r3, #42	@ 0x2a
 8001f10:	2202      	movs	r2, #2
 8001f12:	701a      	strb	r2, [r3, #0]
      break;
 8001f14:	e02e      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	333c      	adds	r3, #60	@ 0x3c
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	332a      	adds	r3, #42	@ 0x2a
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
      break;
 8001f40:	e018      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	332a      	adds	r3, #42	@ 0x2a
 8001f52:	2202      	movs	r2, #2
 8001f54:	701a      	strb	r2, [r3, #0]
      break;
 8001f56:	e00d      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	332a      	adds	r3, #42	@ 0x2a
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
      break;
 8001f6c:	e002      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001f72:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	332c      	adds	r3, #44	@ 0x2c
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	8b39      	ldrh	r1, [r7, #24]
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4403      	add	r3, r0
 8001f98:	3334      	adds	r3, #52	@ 0x34
 8001f9a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	334c      	adds	r3, #76	@ 0x4c
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3338      	adds	r3, #56	@ 0x38
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3315      	adds	r3, #21
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	334d      	adds	r3, #77	@ 0x4d
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3310      	adds	r3, #16
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	1d19      	adds	r1, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	799b      	ldrb	r3, [r3, #6]
 8002006:	461a      	mov	r2, r3
 8002008:	f006 f876 	bl	80080f8 <USB_HC_StartXfer>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop

08002018 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f005 fd9c 	bl	8007b6c <USB_GetMode>
 8002034:	4603      	mov	r3, r0
 8002036:	2b01      	cmp	r3, #1
 8002038:	f040 80fb 	bne.w	8002232 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f005 fd5f 	bl	8007b04 <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80f1 	beq.w	8002230 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f005 fd56 	bl	8007b04 <USB_ReadInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800205e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002062:	d104      	bne.n	800206e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800206c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f005 fd46 	bl	8007b04 <USB_ReadInterrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800207e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002082:	d104      	bne.n	800208e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800208c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f005 fd36 	bl	8007b04 <USB_ReadInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800209e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020a2:	d104      	bne.n	80020ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f005 fd26 	bl	8007b04 <USB_ReadInterrupts>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d103      	bne.n	80020ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2202      	movs	r2, #2
 80020c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 fd18 	bl	8007b04 <USB_ReadInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020de:	d120      	bne.n	8002122 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80020e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d113      	bne.n	8002122 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020fa:	2110      	movs	r1, #16
 80020fc:	6938      	ldr	r0, [r7, #16]
 80020fe:	f005 fc0b 	bl	8007918 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002102:	6938      	ldr	r0, [r7, #16]
 8002104:	f005 fc3a 	bl	800797c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7a5b      	ldrb	r3, [r3, #9]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d105      	bne.n	800211c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f005 fe10 	bl	8007d3c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f008 fd57 	bl	800abd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f005 fcec 	bl	8007b04 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002132:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002136:	d102      	bne.n	800213e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f001 fd33 	bl	8003ba4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f005 fcde 	bl	8007b04 <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d106      	bne.n	8002160 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f008 fd20 	bl	800ab98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2208      	movs	r2, #8
 800215e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f005 fccd 	bl	8007b04 <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002170:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002174:	d139      	bne.n	80021ea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f006 fa00 	bl	8008580 <USB_HC_ReadInterrupt>
 8002180:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e025      	b.n	80021d4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d018      	beq.n	80021ce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021b2:	d106      	bne.n	80021c2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f905 	bl	80023ca <HCD_HC_IN_IRQHandler>
 80021c0:	e005      	b.n	80021ce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 ff67 	bl	800309c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	795b      	ldrb	r3, [r3, #5]
 80021d8:	461a      	mov	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4293      	cmp	r3, r2
 80021de:	d3d3      	bcc.n	8002188 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f005 fc88 	bl	8007b04 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d101      	bne.n	8002202 <HAL_HCD_IRQHandler+0x1ea>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_HCD_IRQHandler+0x1ec>
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d014      	beq.n	8002232 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0210 	bic.w	r2, r2, #16
 8002216:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f001 fbe4 	bl	80039e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0210 	orr.w	r2, r2, #16
 800222c:	619a      	str	r2, [r3, #24]
 800222e:	e000      	b.n	8002232 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002230:	bf00      	nop
    }
  }
}
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_HCD_Start+0x16>
 800224a:	2302      	movs	r3, #2
 800224c:	e013      	b.n	8002276 <HAL_HCD_Start+0x3e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f005 fdd4 	bl	8007e0a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f005 fae8 	bl	800783c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_HCD_Stop+0x16>
 8002290:	2302      	movs	r3, #2
 8002292:	e00d      	b.n	80022b0 <HAL_HCD_Stop+0x32>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f006 fa9e 	bl	80087e2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f005 fd76 	bl	8007db6 <USB_ResetPort>
 80022ca:	4603      	mov	r3, r0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	334c      	adds	r3, #76	@ 0x4c
 80022f0:	781b      	ldrb	r3, [r3, #0]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3338      	adds	r3, #56	@ 0x38
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f005 fdb8 	bl	8007eaa <USB_GetCurrentFrame>
 800233a:	4603      	mov	r3, r0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f005 fd93 	bl	8007e7c <USB_GetHostSpeed>
 8002356:	4603      	mov	r3, r0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	331a      	adds	r3, #26
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	331b      	adds	r3, #27
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3325      	adds	r3, #37	@ 0x25
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3324      	adds	r3, #36	@ 0x24
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f005 fb9e 	bl	8007b2a <USB_ReadChInterrupts>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d11a      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	2304      	movs	r3, #4
 8002408:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	334d      	adds	r3, #77	@ 0x4d
 800241a:	2207      	movs	r2, #7
 800241c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f006 f8bb 	bl	80085a2 <USB_HC_Halt>
 800242c:	e09e      	b.n	800256c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f005 fb77 	bl	8007b2a <USB_ReadChInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002446:	d11b      	bne.n	8002480 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800245a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	334d      	adds	r3, #77	@ 0x4d
 800246c:	2208      	movs	r2, #8
 800246e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f006 f892 	bl	80085a2 <USB_HC_Halt>
 800247e:	e075      	b.n	800256c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f005 fb4e 	bl	8007b2a <USB_ReadChInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b08      	cmp	r3, #8
 8002496:	d11a      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	2308      	movs	r3, #8
 80024a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	334d      	adds	r3, #77	@ 0x4d
 80024ba:	2206      	movs	r2, #6
 80024bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f006 f86b 	bl	80085a2 <USB_HC_Halt>
 80024cc:	e04e      	b.n	800256c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 fb27 	bl	8007b2a <USB_ReadChInterrupts>
 80024dc:	4603      	mov	r3, r0
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e6:	d11b      	bne.n	8002520 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	334d      	adds	r3, #77	@ 0x4d
 800250c:	2209      	movs	r2, #9
 800250e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f006 f842 	bl	80085a2 <USB_HC_Halt>
 800251e:	e025      	b.n	800256c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f005 fafe 	bl	8007b2a <USB_ReadChInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002534:	2b80      	cmp	r3, #128	@ 0x80
 8002536:	d119      	bne.n	800256c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	2380      	movs	r3, #128	@ 0x80
 8002548:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	334d      	adds	r3, #77	@ 0x4d
 800255a:	2207      	movs	r2, #7
 800255c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f006 f81b 	bl	80085a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f005 fad8 	bl	8007b2a <USB_ReadChInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002584:	d112      	bne.n	80025ac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f006 f807 	bl	80085a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a0:	461a      	mov	r2, r3
 80025a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a6:	6093      	str	r3, [r2, #8]
 80025a8:	f000 bd75 	b.w	8003096 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f005 fab8 	bl	8007b2a <USB_ReadChInterrupts>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f040 8128 	bne.w	8002816 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d2:	461a      	mov	r2, r3
 80025d4:	2320      	movs	r3, #32
 80025d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	331b      	adds	r3, #27
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d119      	bne.n	8002622 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	331b      	adds	r3, #27
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	0151      	lsls	r1, r2, #5
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	440a      	add	r2, r1
 8002618:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800261c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002620:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	799b      	ldrb	r3, [r3, #6]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01b      	beq.n	8002662 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3330      	adds	r3, #48	@ 0x30
 800263a:	6819      	ldr	r1, [r3, #0]
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	1ac9      	subs	r1, r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4403      	add	r3, r0
 800265e:	3338      	adds	r3, #56	@ 0x38
 8002660:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	334d      	adds	r3, #77	@ 0x4d
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	3344      	adds	r3, #68	@ 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002696:	461a      	mov	r2, r3
 8002698:	2301      	movs	r3, #1
 800269a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3326      	adds	r3, #38	@ 0x26
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3326      	adds	r3, #38	@ 0x26
 80026c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d110      	bne.n	80026ea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f005 ff66 	bl	80085a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	2310      	movs	r3, #16
 80026e6:	6093      	str	r3, [r2, #8]
 80026e8:	e03d      	b.n	8002766 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	3326      	adds	r3, #38	@ 0x26
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d00a      	beq.n	8002716 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3326      	adds	r3, #38	@ 0x26
 8002710:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002712:	2b01      	cmp	r3, #1
 8002714:	d127      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	0151      	lsls	r1, r2, #5
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	440a      	add	r2, r1
 800272c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002730:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002734:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	334c      	adds	r3, #76	@ 0x4c
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	334c      	adds	r3, #76	@ 0x4c
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f008 fa43 	bl	800abec <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	799b      	ldrb	r3, [r3, #6]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d13b      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3338      	adds	r3, #56	@ 0x38
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4403      	add	r3, r0
 800278e:	3328      	adds	r3, #40	@ 0x28
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	440b      	add	r3, r1
 8002794:	1e59      	subs	r1, r3, #1
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4403      	add	r3, r0
 80027a4:	3328      	adds	r3, #40	@ 0x28
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8470 	beq.w	8003096 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	333c      	adds	r3, #60	@ 0x3c
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	f083 0301 	eor.w	r3, r3, #1
 80027ce:	b2d8      	uxtb	r0, r3
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	333c      	adds	r3, #60	@ 0x3c
 80027de:	4602      	mov	r2, r0
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	f000 bc58 	b.w	8003096 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	333c      	adds	r3, #60	@ 0x3c
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	f083 0301 	eor.w	r3, r3, #1
 80027fe:	b2d8      	uxtb	r0, r3
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	333c      	adds	r3, #60	@ 0x3c
 800280e:	4602      	mov	r2, r0
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	f000 bc40 	b.w	8003096 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f005 f983 	bl	8007b2a <USB_ReadChInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b20      	cmp	r3, #32
 800282c:	d131      	bne.n	8002892 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	2320      	movs	r3, #32
 800283e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	331a      	adds	r3, #26
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	f040 841f 	bne.w	8003096 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	331b      	adds	r3, #27
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	334d      	adds	r3, #77	@ 0x4d
 800287c:	2203      	movs	r2, #3
 800287e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f005 fe8a 	bl	80085a2 <USB_HC_Halt>
 800288e:	f000 bc02 	b.w	8003096 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f005 f945 	bl	8007b2a <USB_ReadChInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	f040 8305 	bne.w	8002eb6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b8:	461a      	mov	r2, r3
 80028ba:	2302      	movs	r3, #2
 80028bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	334d      	adds	r3, #77	@ 0x4d
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d114      	bne.n	80028fe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334d      	adds	r3, #77	@ 0x4d
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	334c      	adds	r3, #76	@ 0x4c
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e2cc      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	334d      	adds	r3, #77	@ 0x4d
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b06      	cmp	r3, #6
 8002912:	d114      	bne.n	800293e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	334c      	adds	r3, #76	@ 0x4c
 8002938:	2205      	movs	r2, #5
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e2ac      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	334d      	adds	r3, #77	@ 0x4d
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b07      	cmp	r3, #7
 8002952:	d00b      	beq.n	800296c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	334d      	adds	r3, #77	@ 0x4d
 8002964:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002966:	2b09      	cmp	r3, #9
 8002968:	f040 80a6 	bne.w	8002ab8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3344      	adds	r3, #68	@ 0x44
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4403      	add	r3, r0
 80029a0:	3344      	adds	r3, #68	@ 0x44
 80029a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3344      	adds	r3, #68	@ 0x44
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d943      	bls.n	8002a42 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3344      	adds	r3, #68	@ 0x44
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	331a      	adds	r3, #26
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d123      	bne.n	8002a2c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	331b      	adds	r3, #27
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	331c      	adds	r3, #28
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	0151      	lsls	r1, r2, #5
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	440a      	add	r2, r1
 8002a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	334c      	adds	r3, #76	@ 0x4c
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a40:	e229      	b.n	8002e96 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	334c      	adds	r3, #76	@ 0x4c
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3326      	adds	r3, #38	@ 0x26
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	3326      	adds	r3, #38	@ 0x26
 8002a7c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	f040 8209 	bne.w	8002e96 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a9a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002aa2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ab6:	e1ee      	b.n	8002e96 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334d      	adds	r3, #77	@ 0x4d
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	f040 80c8 	bne.w	8002c60 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	334d      	adds	r3, #77	@ 0x4d
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	331b      	adds	r3, #27
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	f040 81ce 	bne.w	8002e98 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3326      	adds	r3, #38	@ 0x26
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d16b      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3348      	adds	r3, #72	@ 0x48
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	1c59      	adds	r1, r3, #1
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4403      	add	r3, r0
 8002b32:	3348      	adds	r3, #72	@ 0x48
 8002b34:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3348      	adds	r3, #72	@ 0x48
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d943      	bls.n	8002bd4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3348      	adds	r3, #72	@ 0x48
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	331b      	adds	r3, #27
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3344      	adds	r3, #68	@ 0x44
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d809      	bhi.n	8002b9e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	331c      	adds	r3, #28
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	0151      	lsls	r1, r2, #5
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	440a      	add	r2, r1
 8002bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bbc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	334c      	adds	r3, #76	@ 0x4c
 8002bce:	2204      	movs	r2, #4
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e014      	b.n	8002bfe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334c      	adds	r3, #76	@ 0x4c
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e009      	b.n	8002bfe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	334c      	adds	r3, #76	@ 0x4c
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3326      	adds	r3, #38	@ 0x26
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3326      	adds	r3, #38	@ 0x26
 8002c24:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	f040 8136 	bne.w	8002e98 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c42:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c4a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e11b      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334d      	adds	r3, #77	@ 0x4d
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	f040 8081 	bne.w	8002d7a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	334d      	adds	r3, #77	@ 0x4d
 8002c88:	2202      	movs	r2, #2
 8002c8a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	331b      	adds	r3, #27
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	f040 80fa 	bne.w	8002e98 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	334c      	adds	r3, #76	@ 0x4c
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	0151      	lsls	r1, r2, #5
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	440a      	add	r2, r1
 8002cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cf6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	0151      	lsls	r1, r2, #5
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	440a      	add	r2, r1
 8002d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d12:	f023 0320 	bic.w	r3, r3, #32
 8002d16:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	3326      	adds	r3, #38	@ 0x26
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3326      	adds	r3, #38	@ 0x26
 8002d3e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	f040 80a9 	bne.w	8002e98 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d5c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d64:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e08e      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	334d      	adds	r3, #77	@ 0x4d
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d143      	bne.n	8002e18 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	334d      	adds	r3, #77	@ 0x4d
 8002da0:	2202      	movs	r2, #2
 8002da2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	334c      	adds	r3, #76	@ 0x4c
 8002db4:	2202      	movs	r2, #2
 8002db6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3326      	adds	r3, #38	@ 0x26
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	3326      	adds	r3, #38	@ 0x26
 8002dde:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d159      	bne.n	8002e98 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002dfa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e02:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e10:	461a      	mov	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e03f      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334d      	adds	r3, #77	@ 0x4d
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d126      	bne.n	8002e7c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	334d      	adds	r3, #77	@ 0x4d
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3344      	adds	r3, #68	@ 0x44
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1c59      	adds	r1, r3, #1
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4403      	add	r3, r0
 8002e62:	3344      	adds	r3, #68	@ 0x44
 8002e64:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334c      	adds	r3, #76	@ 0x4c
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e00d      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	@ 0x4d
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	f000 8100 	beq.w	8003094 <HCD_HC_IN_IRQHandler+0xcca>
 8002e94:	e000      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e96:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	334c      	adds	r3, #76	@ 0x4c
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f007 fe9c 	bl	800abec <HAL_HCD_HC_NotifyURBChange_Callback>
 8002eb4:	e0ef      	b.n	8003096 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f004 fe33 	bl	8007b2a <USB_ReadChInterrupts>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eca:	2b40      	cmp	r3, #64	@ 0x40
 8002ecc:	d12f      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eda:	461a      	mov	r2, r3
 8002edc:	2340      	movs	r3, #64	@ 0x40
 8002ede:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	334d      	adds	r3, #77	@ 0x4d
 8002ef0:	2205      	movs	r2, #5
 8002ef2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	331a      	adds	r3, #26
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3344      	adds	r3, #68	@ 0x44
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 fb3b 	bl	80085a2 <USB_HC_Halt>
 8002f2c:	e0b3      	b.n	8003096 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fdf7 	bl	8007b2a <USB_ReadChInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	f040 80a7 	bne.w	8003096 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3326      	adds	r3, #38	@ 0x26
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d11b      	bne.n	8002f96 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3344      	adds	r3, #68	@ 0x44
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334d      	adds	r3, #77	@ 0x4d
 8002f82:	2204      	movs	r2, #4
 8002f84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f005 fb07 	bl	80085a2 <USB_HC_Halt>
 8002f94:	e03f      	b.n	8003016 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3326      	adds	r3, #38	@ 0x26
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	3326      	adds	r3, #38	@ 0x26
 8002fbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d129      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3344      	adds	r3, #68	@ 0x44
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	799b      	ldrb	r3, [r3, #6]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HCD_HC_IN_IRQHandler+0xc2a>
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	331b      	adds	r3, #27
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d110      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	334d      	adds	r3, #77	@ 0x4d
 8003004:	2204      	movs	r2, #4
 8003006:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fac6 	bl	80085a2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	331b      	adds	r3, #27
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d129      	bne.n	8003080 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	331b      	adds	r3, #27
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	0151      	lsls	r1, r2, #5
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	440a      	add	r2, r1
 8003056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800305a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	0151      	lsls	r1, r2, #5
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	440a      	add	r2, r1
 8003076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800307a:	f043 0320 	orr.w	r3, r3, #32
 800307e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4413      	add	r3, r2
 8003088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800308c:	461a      	mov	r2, r3
 800308e:	2310      	movs	r3, #16
 8003090:	6093      	str	r3, [r2, #8]
 8003092:	e000      	b.n	8003096 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003094:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 fd35 	bl	8007b2a <USB_ReadChInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d11b      	bne.n	8003102 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d6:	461a      	mov	r2, r3
 80030d8:	2304      	movs	r3, #4
 80030da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	334d      	adds	r3, #77	@ 0x4d
 80030ec:	2207      	movs	r2, #7
 80030ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f005 fa52 	bl	80085a2 <USB_HC_Halt>
 80030fe:	f000 bc6f 	b.w	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fd0d 	bl	8007b2a <USB_ReadChInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b20      	cmp	r3, #32
 8003118:	f040 8082 	bne.w	8003220 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	2320      	movs	r3, #32
 800312c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3319      	adds	r3, #25
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d124      	bne.n	800318e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3319      	adds	r3, #25
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	334c      	adds	r3, #76	@ 0x4c
 8003168:	2202      	movs	r2, #2
 800316a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	2203      	movs	r2, #3
 800317e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f005 fa0a 	bl	80085a2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	331a      	adds	r3, #26
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	f040 841d 	bne.w	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	331b      	adds	r3, #27
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 8411 	bne.w	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3326      	adds	r3, #38	@ 0x26
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d009      	beq.n	80031e8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	331b      	adds	r3, #27
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	334d      	adds	r3, #77	@ 0x4d
 80031f8:	2203      	movs	r2, #3
 80031fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f005 f9cc 	bl	80085a2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3344      	adds	r3, #68	@ 0x44
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e3df      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f004 fc7e 	bl	8007b2a <USB_ReadChInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003238:	d111      	bne.n	800325e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003246:	461a      	mov	r2, r3
 8003248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800324c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f005 f9a3 	bl	80085a2 <USB_HC_Halt>
 800325c:	e3c0      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fc5f 	bl	8007b2a <USB_ReadChInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d168      	bne.n	8003348 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	3344      	adds	r3, #68	@ 0x44
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fc49 	bl	8007b2a <USB_ReadChInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	2b40      	cmp	r3, #64	@ 0x40
 80032a0:	d112      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3319      	adds	r3, #25
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	331b      	adds	r3, #27
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d019      	beq.n	8003312 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	331b      	adds	r3, #27
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	0151      	lsls	r1, r2, #5
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	440a      	add	r2, r1
 8003308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800330c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003310:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	2301      	movs	r3, #1
 8003322:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f005 f92e 	bl	80085a2 <USB_HC_Halt>
 8003346:	e34b      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f004 fbea 	bl	8007b2a <USB_ReadChInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335c:	2b40      	cmp	r3, #64	@ 0x40
 800335e:	d139      	bne.n	80033d4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	334d      	adds	r3, #77	@ 0x4d
 8003370:	2205      	movs	r2, #5
 8003372:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	331a      	adds	r3, #26
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3319      	adds	r3, #25
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3344      	adds	r3, #68	@ 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f005 f8f1 	bl	80085a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	2340      	movs	r3, #64	@ 0x40
 80033d0:	6093      	str	r3, [r2, #8]
 80033d2:	e305      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f004 fba4 	bl	8007b2a <USB_ReadChInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d11a      	bne.n	8003422 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f8:	461a      	mov	r2, r3
 80033fa:	2308      	movs	r3, #8
 80033fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	334d      	adds	r3, #77	@ 0x4d
 800340e:	2206      	movs	r2, #6
 8003410:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f005 f8c1 	bl	80085a2 <USB_HC_Halt>
 8003420:	e2de      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fb7d 	bl	8007b2a <USB_ReadChInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b10      	cmp	r3, #16
 8003438:	d144      	bne.n	80034c4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3344      	adds	r3, #68	@ 0x44
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	334d      	adds	r3, #77	@ 0x4d
 800345e:	2204      	movs	r2, #4
 8003460:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	3319      	adds	r3, #25
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d114      	bne.n	80034a2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3318      	adds	r3, #24
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3319      	adds	r3, #25
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f005 f879 	bl	80085a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034bc:	461a      	mov	r2, r3
 80034be:	2310      	movs	r3, #16
 80034c0:	6093      	str	r3, [r2, #8]
 80034c2:	e28d      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fb2c 	bl	8007b2a <USB_ReadChInterrupts>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d8:	2b80      	cmp	r3, #128	@ 0x80
 80034da:	d169      	bne.n	80035b0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	799b      	ldrb	r3, [r3, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d111      	bne.n	8003508 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	334d      	adds	r3, #77	@ 0x4d
 80034f4:	2207      	movs	r2, #7
 80034f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f005 f84e 	bl	80085a2 <USB_HC_Halt>
 8003506:	e049      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3344      	adds	r3, #68	@ 0x44
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1c59      	adds	r1, r3, #1
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4403      	add	r3, r0
 8003528:	3344      	adds	r3, #68	@ 0x44
 800352a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3344      	adds	r3, #68	@ 0x44
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d922      	bls.n	8003588 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3344      	adds	r3, #68	@ 0x44
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	334c      	adds	r3, #76	@ 0x4c
 8003566:	2204      	movs	r2, #4
 8003568:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	334c      	adds	r3, #76	@ 0x4c
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f007 fb33 	bl	800abec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003586:	e009      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	334c      	adds	r3, #76	@ 0x4c
 8003598:	2202      	movs	r2, #2
 800359a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a8:	461a      	mov	r2, r3
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	6093      	str	r3, [r2, #8]
 80035ae:	e217      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 fab6 	bl	8007b2a <USB_ReadChInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c8:	d11b      	bne.n	8003602 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	334d      	adds	r3, #77	@ 0x4d
 80035da:	2209      	movs	r2, #9
 80035dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 ffdb 	bl	80085a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035fe:	6093      	str	r3, [r2, #8]
 8003600:	e1ee      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f004 fa8d 	bl	8007b2a <USB_ReadChInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	f040 81df 	bne.w	80039da <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	2302      	movs	r3, #2
 800362c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334d      	adds	r3, #77	@ 0x4d
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	f040 8093 	bne.w	800376c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	334d      	adds	r3, #77	@ 0x4d
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	334c      	adds	r3, #76	@ 0x4c
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	3326      	adds	r3, #38	@ 0x26
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d00b      	beq.n	800369c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3326      	adds	r3, #38	@ 0x26
 8003694:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003696:	2b03      	cmp	r3, #3
 8003698:	f040 8190 	bne.w	80039bc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	799b      	ldrb	r3, [r3, #6]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d115      	bne.n	80036d0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	333d      	adds	r3, #61	@ 0x3d
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	f083 0301 	eor.w	r3, r3, #1
 80036bc:	b2d8      	uxtb	r0, r3
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	333d      	adds	r3, #61	@ 0x3d
 80036cc:	4602      	mov	r2, r0
 80036ce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	799b      	ldrb	r3, [r3, #6]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	f040 8171 	bne.w	80039bc <HCD_HC_OUT_IRQHandler+0x920>
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3334      	adds	r3, #52	@ 0x34
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8165 	beq.w	80039bc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3334      	adds	r3, #52	@ 0x34
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4403      	add	r3, r0
 8003712:	3328      	adds	r3, #40	@ 0x28
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	440b      	add	r3, r1
 8003718:	1e59      	subs	r1, r3, #1
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4403      	add	r3, r0
 8003728:	3328      	adds	r3, #40	@ 0x28
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003730:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 813f 	beq.w	80039bc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	333d      	adds	r3, #61	@ 0x3d
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	f083 0301 	eor.w	r3, r3, #1
 8003756:	b2d8      	uxtb	r0, r3
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	333d      	adds	r3, #61	@ 0x3d
 8003766:	4602      	mov	r2, r0
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e127      	b.n	80039bc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	334d      	adds	r3, #77	@ 0x4d
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d120      	bne.n	80037c4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	334d      	adds	r3, #77	@ 0x4d
 8003792:	2202      	movs	r2, #2
 8003794:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	331b      	adds	r3, #27
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 8107 	bne.w	80039bc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	334c      	adds	r3, #76	@ 0x4c
 80037be:	2202      	movs	r2, #2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e0fb      	b.n	80039bc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	334d      	adds	r3, #77	@ 0x4d
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d13a      	bne.n	8003850 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	334d      	adds	r3, #77	@ 0x4d
 80037ea:	2202      	movs	r2, #2
 80037ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	334c      	adds	r3, #76	@ 0x4c
 80037fe:	2202      	movs	r2, #2
 8003800:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	331b      	adds	r3, #27
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	f040 80d1 	bne.w	80039bc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	331b      	adds	r3, #27
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	440a      	add	r2, r1
 8003844:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800384c:	6053      	str	r3, [r2, #4]
 800384e:	e0b5      	b.n	80039bc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	334d      	adds	r3, #77	@ 0x4d
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b05      	cmp	r3, #5
 8003864:	d114      	bne.n	8003890 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	334d      	adds	r3, #77	@ 0x4d
 8003876:	2202      	movs	r2, #2
 8003878:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	334c      	adds	r3, #76	@ 0x4c
 800388a:	2202      	movs	r2, #2
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	e095      	b.n	80039bc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	334d      	adds	r3, #77	@ 0x4d
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d114      	bne.n	80038d0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	334d      	adds	r3, #77	@ 0x4d
 80038b6:	2202      	movs	r2, #2
 80038b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	334c      	adds	r3, #76	@ 0x4c
 80038ca:	2205      	movs	r2, #5
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e075      	b.n	80039bc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	334d      	adds	r3, #77	@ 0x4d
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b07      	cmp	r3, #7
 80038e4:	d00a      	beq.n	80038fc <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	334d      	adds	r3, #77	@ 0x4d
 80038f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038f8:	2b09      	cmp	r3, #9
 80038fa:	d170      	bne.n	80039de <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334d      	adds	r3, #77	@ 0x4d
 800390c:	2202      	movs	r2, #2
 800390e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	3344      	adds	r3, #68	@ 0x44
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1c59      	adds	r1, r3, #1
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4403      	add	r3, r0
 8003930:	3344      	adds	r3, #68	@ 0x44
 8003932:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	3344      	adds	r3, #68	@ 0x44
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d914      	bls.n	8003974 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3344      	adds	r3, #68	@ 0x44
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	334c      	adds	r3, #76	@ 0x4c
 800396e:	2204      	movs	r2, #4
 8003970:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003972:	e022      	b.n	80039ba <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	334c      	adds	r3, #76	@ 0x4c
 8003984:	2202      	movs	r2, #2
 8003986:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800399e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039a6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b4:	461a      	mov	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039ba:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334c      	adds	r3, #76	@ 0x4c
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f007 f90a 	bl	800abec <HAL_HCD_HC_NotifyURBChange_Callback>
 80039d8:	e002      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80039de:	bf00      	nop
  }
}
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b08a      	sub	sp, #40	@ 0x28
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	0c5b      	lsrs	r3, r3, #17
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a1a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d004      	beq.n	8003a2c <HCD_RXQLVL_IRQHandler+0x46>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	f000 80b6 	beq.w	8003b96 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a2a:	e0b7      	b.n	8003b9c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80b3 	beq.w	8003b9a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	332c      	adds	r3, #44	@ 0x2c
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80a7 	beq.w	8003b9a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3338      	adds	r3, #56	@ 0x38
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	18d1      	adds	r1, r2, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4403      	add	r3, r0
 8003a70:	3334      	adds	r3, #52	@ 0x34
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4299      	cmp	r1, r3
 8003a76:	f200 8083 	bhi.w	8003b80 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	332c      	adds	r3, #44	@ 0x2c
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	b292      	uxth	r2, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	f003 ffdd 	bl	8007a54 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	332c      	adds	r3, #44	@ 0x2c
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	18d1      	adds	r1, r2, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4403      	add	r3, r0
 8003abe:	332c      	adds	r3, #44	@ 0x2c
 8003ac0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3338      	adds	r3, #56	@ 0x38
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	18d1      	adds	r1, r2, r3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4403      	add	r3, r0
 8003ae6:	3338      	adds	r3, #56	@ 0x38
 8003ae8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	0cdb      	lsrs	r3, r3, #19
 8003afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003afe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3328      	adds	r3, #40	@ 0x28
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d13f      	bne.n	8003b9a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d03c      	beq.n	8003b9a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b36:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b3e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	333c      	adds	r3, #60	@ 0x3c
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	f083 0301 	eor.w	r3, r3, #1
 8003b68:	b2d8      	uxtb	r0, r3
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	333c      	adds	r3, #60	@ 0x3c
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	701a      	strb	r2, [r3, #0]
      break;
 8003b7e:	e00c      	b.n	8003b9a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4613      	mov	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	334c      	adds	r3, #76	@ 0x4c
 8003b90:	2204      	movs	r2, #4
 8003b92:	701a      	strb	r2, [r3, #0]
      break;
 8003b94:	e001      	b.n	8003b9a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003b96:	bf00      	nop
 8003b98:	e000      	b.n	8003b9c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003b9a:	bf00      	nop
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3728      	adds	r7, #40	@ 0x28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003bd0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d10b      	bne.n	8003bf4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d102      	bne.n	8003bec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f006 ffe4 	bl	800abb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f043 0302 	orr.w	r3, r3, #2
 8003bf2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d132      	bne.n	8003c64 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f043 0308 	orr.w	r3, r3, #8
 8003c04:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d126      	bne.n	8003c5e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7a5b      	ldrb	r3, [r3, #9]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d113      	bne.n	8003c40 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003c1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c22:	d106      	bne.n	8003c32 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 f886 	bl	8007d3c <USB_InitFSLSPClkSel>
 8003c30:	e011      	b.n	8003c56 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f004 f87f 	bl	8007d3c <USB_InitFSLSPClkSel>
 8003c3e:	e00a      	b.n	8003c56 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	79db      	ldrb	r3, [r3, #7]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003c54:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f006 ffd6 	bl	800ac08 <HAL_HCD_PortEnabled_Callback>
 8003c5c:	e002      	b.n	8003c64 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f006 ffe0 	bl	800ac24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d103      	bne.n	8003c76 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f043 0320 	orr.w	r3, r3, #32
 8003c74:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6013      	str	r3, [r2, #0]
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e12b      	b.n	8003ef6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fc ffc0 	bl	8000c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2224      	movs	r2, #36	@ 0x24
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f001 f8f4 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8003cf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4a81      	ldr	r2, [pc, #516]	@ (8003f00 <HAL_I2C_Init+0x274>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d807      	bhi.n	8003d10 <HAL_I2C_Init+0x84>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a80      	ldr	r2, [pc, #512]	@ (8003f04 <HAL_I2C_Init+0x278>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	bf94      	ite	ls
 8003d08:	2301      	movls	r3, #1
 8003d0a:	2300      	movhi	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e006      	b.n	8003d1e <HAL_I2C_Init+0x92>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a7d      	ldr	r2, [pc, #500]	@ (8003f08 <HAL_I2C_Init+0x27c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	bf94      	ite	ls
 8003d18:	2301      	movls	r3, #1
 8003d1a:	2300      	movhi	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0e7      	b.n	8003ef6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a78      	ldr	r2, [pc, #480]	@ (8003f0c <HAL_I2C_Init+0x280>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0c9b      	lsrs	r3, r3, #18
 8003d30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4a6a      	ldr	r2, [pc, #424]	@ (8003f00 <HAL_I2C_Init+0x274>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d802      	bhi.n	8003d60 <HAL_I2C_Init+0xd4>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	e009      	b.n	8003d74 <HAL_I2C_Init+0xe8>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	4a69      	ldr	r2, [pc, #420]	@ (8003f10 <HAL_I2C_Init+0x284>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	3301      	adds	r3, #1
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	495c      	ldr	r1, [pc, #368]	@ (8003f00 <HAL_I2C_Init+0x274>)
 8003d90:	428b      	cmp	r3, r1
 8003d92:	d819      	bhi.n	8003dc8 <HAL_I2C_Init+0x13c>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1e59      	subs	r1, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003da2:	1c59      	adds	r1, r3, #1
 8003da4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003da8:	400b      	ands	r3, r1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_I2C_Init+0x138>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1e59      	subs	r1, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	e051      	b.n	8003e68 <HAL_I2C_Init+0x1dc>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	e04f      	b.n	8003e68 <HAL_I2C_Init+0x1dc>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <HAL_I2C_Init+0x168>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	440b      	add	r3, r1
 8003dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e012      	b.n	8003e1a <HAL_I2C_Init+0x18e>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e58      	subs	r0, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	0099      	lsls	r1, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Init+0x196>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e022      	b.n	8003e68 <HAL_I2C_Init+0x1dc>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10e      	bne.n	8003e48 <HAL_I2C_Init+0x1bc>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1e58      	subs	r0, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	440b      	add	r3, r1
 8003e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e46:	e00f      	b.n	8003e68 <HAL_I2C_Init+0x1dc>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	6809      	ldr	r1, [r1, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6911      	ldr	r1, [r2, #16]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	000186a0 	.word	0x000186a0
 8003f04:	001e847f 	.word	0x001e847f
 8003f08:	003d08ff 	.word	0x003d08ff
 8003f0c:	431bde83 	.word	0x431bde83
 8003f10:	10624dd3 	.word	0x10624dd3

08003f14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e154      	b.n	80041d0 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a98      	ldr	r2, [pc, #608]	@ (80041a0 <HAL_I2S_Init+0x28c>)
 8003f3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fc ff07 	bl	8000d54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f5c:	f023 030f 	bic.w	r3, r3, #15
 8003f60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2202      	movs	r2, #2
 8003f68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d06f      	beq.n	8004052 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f7a:	2310      	movs	r3, #16
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e001      	b.n	8003f84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f80:	2320      	movs	r3, #32
 8003f82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d802      	bhi.n	8003f92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a83      	ldr	r2, [pc, #524]	@ (80041a4 <HAL_I2S_Init+0x290>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_I2S_Init+0x92>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a81      	ldr	r2, [pc, #516]	@ (80041a8 <HAL_I2S_Init+0x294>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d104      	bne.n	8003fb0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f001 f98e 	bl	80052c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	e003      	b.n	8003fb8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003fb0:	2002      	movs	r0, #2
 8003fb2:	f001 f989 	bl	80052c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fb6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc0:	d125      	bne.n	800400e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d010      	beq.n	8003fec <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	3305      	adds	r3, #5
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	e01f      	b.n	800402c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	3305      	adds	r3, #5
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e00e      	b.n	800402c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fbb2 f2f3 	udiv	r2, r2, r3
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	461a      	mov	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	3305      	adds	r3, #5
 800402a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4a5f      	ldr	r2, [pc, #380]	@ (80041ac <HAL_I2S_Init+0x298>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e003      	b.n	800405a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004052:	2302      	movs	r3, #2
 8004054:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d902      	bls.n	8004066 <HAL_I2S_Init+0x152>
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2bff      	cmp	r3, #255	@ 0xff
 8004064:	d907      	bls.n	8004076 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f043 0210 	orr.w	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0ac      	b.n	80041d0 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	ea42 0103 	orr.w	r1, r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	430a      	orrs	r2, r1
 8004088:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004094:	f023 030f 	bic.w	r3, r3, #15
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6851      	ldr	r1, [r2, #4]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	4311      	orrs	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68d2      	ldr	r2, [r2, #12]
 80040a6:	4311      	orrs	r1, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6992      	ldr	r2, [r2, #24]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b30      	cmp	r3, #48	@ 0x30
 80040c0:	d003      	beq.n	80040ca <HAL_I2S_Init+0x1b6>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2bb0      	cmp	r3, #176	@ 0xb0
 80040c8:	d107      	bne.n	80040da <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040d8:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d16e      	bne.n	80041c0 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a32      	ldr	r2, [pc, #200]	@ (80041b0 <HAL_I2S_Init+0x29c>)
 80040e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2d      	ldr	r2, [pc, #180]	@ (80041a4 <HAL_I2S_Init+0x290>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_I2S_Init+0x1e2>
 80040f2:	4b30      	ldr	r3, [pc, #192]	@ (80041b4 <HAL_I2S_Init+0x2a0>)
 80040f4:	e001      	b.n	80040fa <HAL_I2S_Init+0x1e6>
 80040f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	4928      	ldr	r1, [pc, #160]	@ (80041a4 <HAL_I2S_Init+0x290>)
 8004102:	428a      	cmp	r2, r1
 8004104:	d101      	bne.n	800410a <HAL_I2S_Init+0x1f6>
 8004106:	4a2b      	ldr	r2, [pc, #172]	@ (80041b4 <HAL_I2S_Init+0x2a0>)
 8004108:	e001      	b.n	800410e <HAL_I2S_Init+0x1fa>
 800410a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800410e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004112:	f023 030f 	bic.w	r3, r3, #15
 8004116:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a21      	ldr	r2, [pc, #132]	@ (80041a4 <HAL_I2S_Init+0x290>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d101      	bne.n	8004126 <HAL_I2S_Init+0x212>
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_I2S_Init+0x2a0>)
 8004124:	e001      	b.n	800412a <HAL_I2S_Init+0x216>
 8004126:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412a:	2202      	movs	r2, #2
 800412c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1c      	ldr	r2, [pc, #112]	@ (80041a4 <HAL_I2S_Init+0x290>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_I2S_Init+0x228>
 8004138:	4b1e      	ldr	r3, [pc, #120]	@ (80041b4 <HAL_I2S_Init+0x2a0>)
 800413a:	e001      	b.n	8004140 <HAL_I2S_Init+0x22c>
 800413c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800414c:	d003      	beq.n	8004156 <HAL_I2S_Init+0x242>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004156:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	e001      	b.n	8004162 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800416c:	4313      	orrs	r3, r2
 800416e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004176:	4313      	orrs	r3, r2
 8004178:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004180:	4313      	orrs	r3, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	897b      	ldrh	r3, [r7, #10]
 8004186:	4313      	orrs	r3, r2
 8004188:	b29b      	uxth	r3, r3
 800418a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800418e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a03      	ldr	r2, [pc, #12]	@ (80041a4 <HAL_I2S_Init+0x290>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10e      	bne.n	80041b8 <HAL_I2S_Init+0x2a4>
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_I2S_Init+0x2a0>)
 800419c:	e00e      	b.n	80041bc <HAL_I2S_Init+0x2a8>
 800419e:	bf00      	nop
 80041a0:	080042cf 	.word	0x080042cf
 80041a4:	40003800 	.word	0x40003800
 80041a8:	40003c00 	.word	0x40003c00
 80041ac:	cccccccd 	.word	0xcccccccd
 80041b0:	080043e5 	.word	0x080043e5
 80041b4:	40003400 	.word	0x40003400
 80041b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041bc:	897a      	ldrh	r2, [r7, #10]
 80041be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	1c9a      	adds	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10e      	bne.n	8004268 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004258:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ffb8 	bl	80041d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	b292      	uxth	r2, r2
 8004284:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	1c9a      	adds	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10e      	bne.n	80042c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff93 	bl	80041ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d13a      	bne.n	8004360 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d109      	bne.n	8004308 <I2S_IRQHandler+0x3a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b40      	cmp	r3, #64	@ 0x40
 8004300:	d102      	bne.n	8004308 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ffb4 	bl	8004270 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430e:	2b40      	cmp	r3, #64	@ 0x40
 8004310:	d126      	bne.n	8004360 <I2S_IRQHandler+0x92>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b20      	cmp	r3, #32
 800431e:	d11f      	bne.n	8004360 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800432e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	f043 0202 	orr.w	r2, r3, #2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ff50 	bl	8004200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b03      	cmp	r3, #3
 800436a:	d136      	bne.n	80043da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b02      	cmp	r3, #2
 8004374:	d109      	bne.n	800438a <I2S_IRQHandler+0xbc>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004380:	2b80      	cmp	r3, #128	@ 0x80
 8004382:	d102      	bne.n	800438a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff45 	bl	8004214 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d122      	bne.n	80043da <I2S_IRQHandler+0x10c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d11b      	bne.n	80043da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043cc:	f043 0204 	orr.w	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ff13 	bl	8004200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043da:	bf00      	nop
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a92      	ldr	r2, [pc, #584]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80043fe:	4b92      	ldr	r3, [pc, #584]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004400:	e001      	b.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004402:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a8b      	ldr	r2, [pc, #556]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800441c:	4b8a      	ldr	r3, [pc, #552]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800441e:	e001      	b.n	8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004420:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004430:	d004      	beq.n	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f040 8099 	bne.w	800456e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	d107      	bne.n	8004456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f925 	bl	80046a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f9c8 	bl	8004800 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d13a      	bne.n	80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d035      	beq.n	80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a6e      	ldr	r2, [pc, #440]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800448e:	4b6e      	ldr	r3, [pc, #440]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004490:	e001      	b.n	8004496 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004492:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4969      	ldr	r1, [pc, #420]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800449e:	428b      	cmp	r3, r1
 80044a0:	d101      	bne.n	80044a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80044a2:	4b69      	ldr	r3, [pc, #420]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044a4:	e001      	b.n	80044aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80044a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	f043 0202 	orr.w	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fe88 	bl	8004200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	f040 80c3 	bne.w	8004682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80bd 	beq.w	8004682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004516:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a49      	ldr	r2, [pc, #292]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004522:	4b49      	ldr	r3, [pc, #292]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004524:	e001      	b.n	800452a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004526:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4944      	ldr	r1, [pc, #272]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004532:	428b      	cmp	r3, r1
 8004534:	d101      	bne.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004536:	4b44      	ldr	r3, [pc, #272]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004538:	e001      	b.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800453a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800453e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004542:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	f043 0204 	orr.w	r2, r3, #4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fe4a 	bl	8004200 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800456c:	e089      	b.n	8004682 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d107      	bne.n	8004588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8be 	bl	8004704 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d107      	bne.n	80045a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8fd 	bl	800479c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a8:	2b40      	cmp	r3, #64	@ 0x40
 80045aa:	d12f      	bne.n	800460c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d02a      	beq.n	800460c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045d2:	e001      	b.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4919      	ldr	r1, [pc, #100]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045e0:	428b      	cmp	r3, r1
 80045e2:	d101      	bne.n	80045e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045e4:	4b18      	ldr	r3, [pc, #96]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045e6:	e001      	b.n	80045ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f043 0202 	orr.w	r2, r3, #2
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fdfa 	bl	8004200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b08      	cmp	r3, #8
 8004614:	d136      	bne.n	8004684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d031      	beq.n	8004684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a07      	ldr	r2, [pc, #28]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800462c:	e001      	b.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800462e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4902      	ldr	r1, [pc, #8]	@ (8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800463a:	428b      	cmp	r3, r1
 800463c:	d106      	bne.n	800464c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800463e:	4b02      	ldr	r3, [pc, #8]	@ (8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004640:	e006      	b.n	8004650 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004642:	bf00      	nop
 8004644:	40003800 	.word	0x40003800
 8004648:	40003400 	.word	0x40003400
 800464c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004650:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004654:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004664:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004672:	f043 0204 	orr.w	r2, r3, #4
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fdc0 	bl	8004200 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004680:	e000      	b.n	8004684 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004682:	bf00      	nop
}
 8004684:	bf00      	nop
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	1c99      	adds	r1, r3, #2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6251      	str	r1, [r2, #36]	@ 0x24
 80046b2:	881a      	ldrh	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d113      	bne.n	80046fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ffc9 	bl	800468c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	1c99      	adds	r1, r3, #2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6251      	str	r1, [r2, #36]	@ 0x24
 8004716:	8819      	ldrh	r1, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <I2SEx_TxISR_I2SExt+0x90>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <I2SEx_TxISR_I2SExt+0x22>
 8004722:	4b1d      	ldr	r3, [pc, #116]	@ (8004798 <I2SEx_TxISR_I2SExt+0x94>)
 8004724:	e001      	b.n	800472a <I2SEx_TxISR_I2SExt+0x26>
 8004726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800472a:	460a      	mov	r2, r1
 800472c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d121      	bne.n	800478a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <I2SEx_TxISR_I2SExt+0x90>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d101      	bne.n	8004754 <I2SEx_TxISR_I2SExt+0x50>
 8004750:	4b11      	ldr	r3, [pc, #68]	@ (8004798 <I2SEx_TxISR_I2SExt+0x94>)
 8004752:	e001      	b.n	8004758 <I2SEx_TxISR_I2SExt+0x54>
 8004754:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	490d      	ldr	r1, [pc, #52]	@ (8004794 <I2SEx_TxISR_I2SExt+0x90>)
 8004760:	428b      	cmp	r3, r1
 8004762:	d101      	bne.n	8004768 <I2SEx_TxISR_I2SExt+0x64>
 8004764:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <I2SEx_TxISR_I2SExt+0x94>)
 8004766:	e001      	b.n	800476c <I2SEx_TxISR_I2SExt+0x68>
 8004768:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800476c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004770:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff81 	bl	800468c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40003800 	.word	0x40003800
 8004798:	40003400 	.word	0x40003400

0800479c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68d8      	ldr	r0, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	1c99      	adds	r1, r3, #2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80047b4:	b282      	uxth	r2, r0
 80047b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d113      	bne.n	80047f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff ff4a 	bl	800468c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a20      	ldr	r2, [pc, #128]	@ (8004890 <I2SEx_RxISR_I2SExt+0x90>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <I2SEx_RxISR_I2SExt+0x16>
 8004812:	4b20      	ldr	r3, [pc, #128]	@ (8004894 <I2SEx_RxISR_I2SExt+0x94>)
 8004814:	e001      	b.n	800481a <I2SEx_RxISR_I2SExt+0x1a>
 8004816:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800481a:	68d8      	ldr	r0, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	1c99      	adds	r1, r3, #2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004826:	b282      	uxth	r2, r0
 8004828:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d121      	bne.n	8004886 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a12      	ldr	r2, [pc, #72]	@ (8004890 <I2SEx_RxISR_I2SExt+0x90>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <I2SEx_RxISR_I2SExt+0x50>
 800484c:	4b11      	ldr	r3, [pc, #68]	@ (8004894 <I2SEx_RxISR_I2SExt+0x94>)
 800484e:	e001      	b.n	8004854 <I2SEx_RxISR_I2SExt+0x54>
 8004850:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	490d      	ldr	r1, [pc, #52]	@ (8004890 <I2SEx_RxISR_I2SExt+0x90>)
 800485c:	428b      	cmp	r3, r1
 800485e:	d101      	bne.n	8004864 <I2SEx_RxISR_I2SExt+0x64>
 8004860:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <I2SEx_RxISR_I2SExt+0x94>)
 8004862:	e001      	b.n	8004868 <I2SEx_RxISR_I2SExt+0x68>
 8004864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004868:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800486c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff03 	bl	800468c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40003800 	.word	0x40003800
 8004894:	40003400 	.word	0x40003400

08004898 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048a0:	f7fc fdea 	bl	8001478 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e069      	b.n	8004984 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc fafd 	bl	8000ec4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80048ca:	f241 3188 	movw	r1, #5000	@ 0x1388
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f85e 	bl	8004990 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	021a      	lsls	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2120      	movs	r1, #32
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f856 	bl	80049ac <QSPI_WaitFlagStateUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004904:	7afb      	ldrb	r3, [r7, #11]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d137      	bne.n	800497a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004914:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6852      	ldr	r2, [r2, #4]
 800491c:	0611      	lsls	r1, r2, #24
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	4311      	orrs	r1, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	69d2      	ldr	r2, [r2, #28]
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a12      	ldr	r2, [r2, #32]
 800492e:	4311      	orrs	r1, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	430b      	orrs	r3, r1
 8004936:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	4b13      	ldr	r3, [pc, #76]	@ (800498c <HAL_QSPI_Init+0xf4>)
 8004940:	4013      	ands	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6912      	ldr	r2, [r2, #16]
 8004946:	0411      	lsls	r1, r2, #16
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6952      	ldr	r2, [r2, #20]
 800494c:	4311      	orrs	r1, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6992      	ldr	r2, [r2, #24]
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	430b      	orrs	r3, r1
 800495a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004982:	7afb      	ldrb	r3, [r7, #11]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	ffe0f8fe 	.word	0xffe0f8fe

08004990 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049bc:	e01a      	b.n	80049f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d016      	beq.n	80049f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c6:	f7fc fd57 	bl	8001478 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d302      	bcc.n	80049dc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2204      	movs	r2, #4
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e00e      	b.n	8004a12 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d1d6      	bne.n	80049be <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0cc      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a30:	4b68      	ldr	r3, [pc, #416]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d90c      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b65      	ldr	r3, [pc, #404]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b63      	ldr	r3, [pc, #396]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0b8      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a70:	4b59      	ldr	r3, [pc, #356]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a58      	ldr	r2, [pc, #352]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a88:	4b53      	ldr	r3, [pc, #332]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a52      	ldr	r2, [pc, #328]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	4b50      	ldr	r3, [pc, #320]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	494d      	ldr	r1, [pc, #308]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d044      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b47      	ldr	r3, [pc, #284]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d119      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d003      	beq.n	8004ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ada:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e06f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aea:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e067      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afa:	4b37      	ldr	r3, [pc, #220]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4934      	ldr	r1, [pc, #208]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7fc fcb4 	bl	8001478 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b14:	f7fc fcb0 	bl	8001478 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e04f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 020c 	and.w	r2, r3, #12
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d1eb      	bne.n	8004b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d20c      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b22      	ldr	r3, [pc, #136]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e032      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b70:	4b19      	ldr	r3, [pc, #100]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4916      	ldr	r1, [pc, #88]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8e:	4b12      	ldr	r3, [pc, #72]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	490e      	ldr	r1, [pc, #56]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ba2:	f000 f889 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	490a      	ldr	r1, [pc, #40]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c0>)
 8004bb4:	5ccb      	ldrb	r3, [r1, r3]
 8004bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bba:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bbe:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc fc14 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023c00 	.word	0x40023c00
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800b2e0 	.word	0x0800b2e0
 8004be0:	20000000 	.word	0x20000000
 8004be4:	20000004 	.word	0x20000004

08004be8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	@ 0x30
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d129      	bne.n	8004c4e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	4a2a      	ldr	r2, [pc, #168]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c0a:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	61bb      	str	r3, [r7, #24]
 8004c14:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004c16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c20:	2303      	movs	r3, #3
 8004c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004c2c:	f107 031c 	add.w	r3, r7, #28
 8004c30:	4619      	mov	r1, r3
 8004c32:	481f      	ldr	r0, [pc, #124]	@ (8004cb0 <HAL_RCC_MCOConfig+0xc8>)
 8004c34:	f7fc fd62 	bl	80016fc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004c38:	4b1c      	ldr	r3, [pc, #112]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	4919      	ldr	r1, [pc, #100]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004c4c:	e029      	b.n	8004ca2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	4b16      	ldr	r3, [pc, #88]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	4a15      	ldr	r2, [pc, #84]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c58:	f043 0304 	orr.w	r3, r3, #4
 8004c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5e:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004c6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c70:	2302      	movs	r3, #2
 8004c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c74:	2303      	movs	r3, #3
 8004c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004c80:	f107 031c 	add.w	r3, r7, #28
 8004c84:	4619      	mov	r1, r3
 8004c86:	480b      	ldr	r0, [pc, #44]	@ (8004cb4 <HAL_RCC_MCOConfig+0xcc>)
 8004c88:	f7fc fd38 	bl	80016fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004c8c:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	00d9      	lsls	r1, r3, #3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	4903      	ldr	r1, [pc, #12]	@ (8004cac <HAL_RCC_MCOConfig+0xc4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
}
 8004ca2:	bf00      	nop
 8004ca4:	3730      	adds	r7, #48	@ 0x30
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40020000 	.word	0x40020000
 8004cb4:	40020800 	.word	0x40020800

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	b094      	sub	sp, #80	@ 0x50
 8004cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cc8:	2300      	movs	r3, #0
 8004cca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd0:	4b79      	ldr	r3, [pc, #484]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d00d      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	f200 80e1 	bhi.w	8004ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x34>
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cea:	e0db      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b73      	ldr	r3, [pc, #460]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004cf0:	e0db      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf2:	4b73      	ldr	r3, [pc, #460]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cf6:	e0d8      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d00:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d02:	4b6d      	ldr	r3, [pc, #436]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d063      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	2200      	movs	r2, #0
 8004d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d22:	2300      	movs	r3, #0
 8004d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	f04f 0000 	mov.w	r0, #0
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	0159      	lsls	r1, r3, #5
 8004d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d3c:	0150      	lsls	r0, r2, #5
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4621      	mov	r1, r4
 8004d44:	1a51      	subs	r1, r2, r1
 8004d46:	6139      	str	r1, [r7, #16]
 8004d48:	4629      	mov	r1, r5
 8004d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	018b      	lsls	r3, r1, #6
 8004d60:	4651      	mov	r1, sl
 8004d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d66:	4651      	mov	r1, sl
 8004d68:	018a      	lsls	r2, r1, #6
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d70:	4659      	mov	r1, fp
 8004d72:	eb63 0901 	sbc.w	r9, r3, r1
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d8a:	4690      	mov	r8, r2
 8004d8c:	4699      	mov	r9, r3
 8004d8e:	4623      	mov	r3, r4
 8004d90:	eb18 0303 	adds.w	r3, r8, r3
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	462b      	mov	r3, r5
 8004d98:	eb49 0303 	adc.w	r3, r9, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004daa:	4629      	mov	r1, r5
 8004dac:	024b      	lsls	r3, r1, #9
 8004dae:	4621      	mov	r1, r4
 8004db0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004db4:	4621      	mov	r1, r4
 8004db6:	024a      	lsls	r2, r1, #9
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dc8:	f7fb fa1c 	bl	8000204 <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dd4:	e058      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd6:	4b38      	ldr	r3, [pc, #224]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4618      	mov	r0, r3
 8004de0:	4611      	mov	r1, r2
 8004de2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	f04f 0000 	mov.w	r0, #0
 8004df8:	f04f 0100 	mov.w	r1, #0
 8004dfc:	0159      	lsls	r1, r3, #5
 8004dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e02:	0150      	lsls	r0, r2, #5
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4641      	mov	r1, r8
 8004e0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e0e:	4649      	mov	r1, r9
 8004e10:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e28:	ebb2 040a 	subs.w	r4, r2, sl
 8004e2c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	00eb      	lsls	r3, r5, #3
 8004e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3e:	00e2      	lsls	r2, r4, #3
 8004e40:	4614      	mov	r4, r2
 8004e42:	461d      	mov	r5, r3
 8004e44:	4643      	mov	r3, r8
 8004e46:	18e3      	adds	r3, r4, r3
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	eb45 0303 	adc.w	r3, r5, r3
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	028b      	lsls	r3, r1, #10
 8004e62:	4621      	mov	r1, r4
 8004e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e68:	4621      	mov	r1, r4
 8004e6a:	028a      	lsls	r2, r1, #10
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e72:	2200      	movs	r2, #0
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	61fa      	str	r2, [r7, #28]
 8004e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e7c:	f7fb f9c2 	bl	8000204 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	3301      	adds	r3, #1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004e98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ea2:	e002      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3750      	adds	r7, #80	@ 0x50
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00f42400 	.word	0x00f42400
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000000 	.word	0x20000000

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a9b      	lsrs	r3, r3, #10
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4903      	ldr	r1, [pc, #12]	@ (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	0800b2f0 	.word	0x0800b2f0

08004f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f08:	f7ff ffdc 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0b5b      	lsrs	r3, r3, #13
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	@ (8004f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	0800b2f0 	.word	0x0800b2f0

08004f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d010      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f4c:	4b87      	ldr	r3, [pc, #540]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f52:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4984      	ldr	r1, [pc, #528]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d010      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f80:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	4978      	ldr	r1, [pc, #480]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8083 	beq.w	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	4b6f      	ldr	r3, [pc, #444]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fba:	4b6c      	ldr	r3, [pc, #432]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a69      	ldr	r2, [pc, #420]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fd2:	f7fc fa51 	bl	8001478 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fda:	f7fc fa4d 	bl	8001478 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e162      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fec:	4b60      	ldr	r3, [pc, #384]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff8:	4b5c      	ldr	r3, [pc, #368]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005000:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02f      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	429a      	cmp	r2, r3
 8005014:	d028      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005016:	4b55      	ldr	r3, [pc, #340]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005020:	4b54      	ldr	r3, [pc, #336]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005022:	2201      	movs	r2, #1
 8005024:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005026:	4b53      	ldr	r3, [pc, #332]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800502c:	4a4f      	ldr	r2, [pc, #316]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005032:	4b4e      	ldr	r3, [pc, #312]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d114      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800503e:	f7fc fa1b 	bl	8001478 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005044:	e00a      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fc fa17 	bl	8001478 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e12a      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505c:	4b43      	ldr	r3, [pc, #268]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0ee      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005070:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005074:	d10d      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005076:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508a:	4938      	ldr	r1, [pc, #224]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]
 8005090:	e005      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005092:	4b36      	ldr	r3, [pc, #216]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	4a35      	ldr	r2, [pc, #212]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005098:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800509c:	6093      	str	r3, [r2, #8]
 800509e:	4b33      	ldr	r3, [pc, #204]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050aa:	4930      	ldr	r1, [pc, #192]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80050c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80050c4:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80050d2:	4b26      	ldr	r3, [pc, #152]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	4922      	ldr	r1, [pc, #136]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d011      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050f4:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050fa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	491a      	ldr	r1, [pc, #104]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005112:	d101      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8005114:	2301      	movs	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005124:	4b11      	ldr	r3, [pc, #68]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800512a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	490e      	ldr	r1, [pc, #56]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d004      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b80      	cmp	r3, #128	@ 0x80
 8005146:	f040 8091 	bne.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800514a:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005150:	f7fc f992 	bl	8001478 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005156:	e013      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005158:	f7fc f98e 	bl	8001478 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d90c      	bls.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0a3      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	40007000 	.word	0x40007000
 8005174:	42470e40 	.word	0x42470e40
 8005178:	424711e0 	.word	0x424711e0
 800517c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005180:	4b4e      	ldr	r3, [pc, #312]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e5      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800518c:	4a4c      	ldr	r2, [pc, #304]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005192:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d023      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d019      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d0:	d00e      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d019      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d115      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ee:	d110      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	061b      	lsls	r3, r3, #24
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	492c      	ldr	r1, [pc, #176]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d010      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	019b      	lsls	r3, r3, #6
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	061b      	lsls	r3, r3, #24
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	071b      	lsls	r3, r3, #28
 8005238:	4920      	ldr	r1, [pc, #128]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005240:	4b20      	ldr	r3, [pc, #128]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005242:	2201      	movs	r2, #1
 8005244:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005246:	f7fc f917 	bl	8001478 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800524e:	f7fc f913 	bl	8001478 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e028      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005260:	4b16      	ldr	r3, [pc, #88]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005278:	4b10      	ldr	r3, [pc, #64]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800527a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800527e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	490d      	ldr	r1, [pc, #52]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800529a:	4b08      	ldr	r3, [pc, #32]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800529c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052a0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	4904      	ldr	r1, [pc, #16]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
 80052c0:	424710d8 	.word	0x424710d8
 80052c4:	42470068 	.word	0x42470068

080052c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d004      	beq.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	f000 80a1 	beq.w	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      }
      break;
    }
  default:
    {
       break;
 80052ee:	e13f      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80052f0:	4ba3      	ldr	r3, [pc, #652]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80052f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052f6:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8005302:	f000 8084 	beq.w	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800530c:	f200 808c 	bhi.w	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005316:	d04f      	beq.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800531e:	f200 8083 	bhi.w	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800532e:	d17b      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005330:	4b94      	ldr	r3, [pc, #592]	@ (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005332:	617b      	str	r3, [r7, #20]
          break;
 8005334:	e07b      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005336:	4b92      	ldr	r3, [pc, #584]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800533c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005344:	d109      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005346:	4b8e      	ldr	r3, [pc, #568]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800534c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005350:	4a8c      	ldr	r2, [pc, #560]	@ (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	e019      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800535a:	4b89      	ldr	r3, [pc, #548]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005366:	d109      	bne.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005368:	4b85      	ldr	r3, [pc, #532]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800536a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800536e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005372:	4a85      	ldr	r2, [pc, #532]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	e008      	b.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800537c:	4b80      	ldr	r3, [pc, #512]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800537e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005386:	4a81      	ldr	r2, [pc, #516]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	613b      	str	r3, [r7, #16]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800538e:	4b7c      	ldr	r3, [pc, #496]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005394:	099b      	lsrs	r3, r3, #6
 8005396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	fb02 f303 	mul.w	r3, r2, r3
 80053a0:	60bb      	str	r3, [r7, #8]
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80053a2:	4b77      	ldr	r3, [pc, #476]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a8:	0f1b      	lsrs	r3, r3, #28
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
          break;
 80053b6:	e03a      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053b8:	4b71      	ldr	r3, [pc, #452]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c4:	d108      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ce:	4a6e      	ldr	r2, [pc, #440]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e007      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053d8:	4b69      	ldr	r3, [pc, #420]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e0:	4a6a      	ldr	r2, [pc, #424]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	613b      	str	r3, [r7, #16]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80053e8:	4b65      	ldr	r3, [pc, #404]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	099b      	lsrs	r3, r3, #6
 80053ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
 80053f8:	60bb      	str	r3, [r7, #8]
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80053fa:	4b61      	ldr	r3, [pc, #388]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	0f1b      	lsrs	r3, r3, #28
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	617b      	str	r3, [r7, #20]
          break;
 800540c:	e00f      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800540e:	4b5c      	ldr	r3, [pc, #368]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800541a:	d102      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
            frequency = HSE_VALUE;
 800541c:	4b5a      	ldr	r3, [pc, #360]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800541e:	617b      	str	r3, [r7, #20]
          break;
 8005420:	e005      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8005422:	4b5a      	ldr	r3, [pc, #360]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005424:	617b      	str	r3, [r7, #20]
          break;
 8005426:	e002      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          frequency = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]
          break;
 800542c:	bf00      	nop
      break;
 800542e:	e09f      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005430:	4b53      	ldr	r3, [pc, #332]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005436:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005442:	f000 8084 	beq.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800544c:	f200 808c 	bhi.w	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005456:	d04f      	beq.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800545e:	f200 8083 	bhi.w	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d006      	beq.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800546e:	d17b      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005470:	4b44      	ldr	r3, [pc, #272]	@ (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005472:	617b      	str	r3, [r7, #20]
          break;
 8005474:	e07b      	b.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005476:	4b42      	ldr	r3, [pc, #264]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005484:	d109      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005486:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800548c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005490:	4a3c      	ldr	r2, [pc, #240]	@ (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e019      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800549a:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a6:	d109      	bne.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054a8:	4b35      	ldr	r3, [pc, #212]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054b2:	4a35      	ldr	r2, [pc, #212]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e008      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054bc:	4b30      	ldr	r3, [pc, #192]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054c6:	4a31      	ldr	r2, [pc, #196]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	613b      	str	r3, [r7, #16]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80054ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054d4:	099b      	lsrs	r3, r3, #6
 80054d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	fb02 f303 	mul.w	r3, r2, r3
 80054e0:	60bb      	str	r3, [r7, #8]
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80054e2:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054e8:	0f1b      	lsrs	r3, r3, #28
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]
          break;
 80054f6:	e03a      	b.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054f8:	4b21      	ldr	r3, [pc, #132]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005504:	d108      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005506:	4b1e      	ldr	r3, [pc, #120]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800550e:	4a1e      	ldr	r2, [pc, #120]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e007      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005518:	4b19      	ldr	r3, [pc, #100]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005520:	4a1a      	ldr	r2, [pc, #104]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	613b      	str	r3, [r7, #16]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	099b      	lsrs	r3, r3, #6
 800552e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	60bb      	str	r3, [r7, #8]
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800553a:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	0f1b      	lsrs	r3, r3, #28
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	fbb2 f3f3 	udiv	r3, r2, r3
 800554a:	617b      	str	r3, [r7, #20]
          break;
 800554c:	e00f      	b.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800554e:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800555a:	d102      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
            frequency = HSE_VALUE;
 800555c:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800555e:	617b      	str	r3, [r7, #20]
          break;
 8005560:	e005      	b.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8005562:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005564:	617b      	str	r3, [r7, #20]
          break;
 8005566:	e002      	b.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
          frequency = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
          break;
 800556c:	bf00      	nop
      break;
 800556e:	bf00      	nop
    }
  }
  return frequency;
 8005570:	697b      	ldr	r3, [r7, #20]
}
 8005572:	4618      	mov	r0, r3
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
 8005584:	00bb8000 	.word	0x00bb8000
 8005588:	007a1200 	.word	0x007a1200
 800558c:	00f42400 	.word	0x00f42400

08005590 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e273      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d075      	beq.n	800569a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055ae:	4b88      	ldr	r3, [pc, #544]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d00c      	beq.n	80055d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ba:	4b85      	ldr	r3, [pc, #532]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d112      	bne.n	80055ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055c6:	4b82      	ldr	r3, [pc, #520]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055d2:	d10b      	bne.n	80055ec <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d4:	4b7e      	ldr	r3, [pc, #504]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d05b      	beq.n	8005698 <HAL_RCC_OscConfig+0x108>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d157      	bne.n	8005698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e24e      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f4:	d106      	bne.n	8005604 <HAL_RCC_OscConfig+0x74>
 80055f6:	4b76      	ldr	r3, [pc, #472]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a75      	ldr	r2, [pc, #468]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e01d      	b.n	8005640 <HAL_RCC_OscConfig+0xb0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800560c:	d10c      	bne.n	8005628 <HAL_RCC_OscConfig+0x98>
 800560e:	4b70      	ldr	r3, [pc, #448]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6f      	ldr	r2, [pc, #444]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	4b6d      	ldr	r3, [pc, #436]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6c      	ldr	r2, [pc, #432]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	e00b      	b.n	8005640 <HAL_RCC_OscConfig+0xb0>
 8005628:	4b69      	ldr	r3, [pc, #420]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a68      	ldr	r2, [pc, #416]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 800562e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	4b66      	ldr	r3, [pc, #408]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a65      	ldr	r2, [pc, #404]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 800563a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800563e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d013      	beq.n	8005670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fb ff16 	bl	8001478 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005650:	f7fb ff12 	bl	8001478 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	@ 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e213      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005662:	4b5b      	ldr	r3, [pc, #364]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0xc0>
 800566e:	e014      	b.n	800569a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fb ff02 	bl	8001478 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005678:	f7fb fefe 	bl	8001478 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	@ 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e1ff      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568a:	4b51      	ldr	r3, [pc, #324]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0xe8>
 8005696:	e000      	b.n	800569a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d063      	beq.n	800576e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056a6:	4b4a      	ldr	r3, [pc, #296]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 030c 	and.w	r3, r3, #12
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056b2:	4b47      	ldr	r3, [pc, #284]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d11c      	bne.n	80056f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056be:	4b44      	ldr	r3, [pc, #272]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d116      	bne.n	80056f8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ca:	4b41      	ldr	r3, [pc, #260]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_RCC_OscConfig+0x152>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d001      	beq.n	80056e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e1d3      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e2:	4b3b      	ldr	r3, [pc, #236]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4937      	ldr	r1, [pc, #220]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f6:	e03a      	b.n	800576e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d020      	beq.n	8005742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005700:	4b34      	ldr	r3, [pc, #208]	@ (80057d4 <HAL_RCC_OscConfig+0x244>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fb feb7 	bl	8001478 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800570e:	f7fb feb3 	bl	8001478 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e1b4      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005720:	4b2b      	ldr	r3, [pc, #172]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572c:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4925      	ldr	r1, [pc, #148]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 800573c:	4313      	orrs	r3, r2
 800573e:	600b      	str	r3, [r1, #0]
 8005740:	e015      	b.n	800576e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005742:	4b24      	ldr	r3, [pc, #144]	@ (80057d4 <HAL_RCC_OscConfig+0x244>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005748:	f7fb fe96 	bl	8001478 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005750:	f7fb fe92 	bl	8001478 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e193      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005762:	4b1b      	ldr	r3, [pc, #108]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	d036      	beq.n	80057e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d016      	beq.n	80057b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005782:	4b15      	ldr	r3, [pc, #84]	@ (80057d8 <HAL_RCC_OscConfig+0x248>)
 8005784:	2201      	movs	r2, #1
 8005786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fb fe76 	bl	8001478 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005790:	f7fb fe72 	bl	8001478 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e173      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a2:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <HAL_RCC_OscConfig+0x240>)
 80057a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x200>
 80057ae:	e01b      	b.n	80057e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057b0:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <HAL_RCC_OscConfig+0x248>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b6:	f7fb fe5f 	bl	8001478 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057bc:	e00e      	b.n	80057dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057be:	f7fb fe5b 	bl	8001478 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d907      	bls.n	80057dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e15c      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
 80057d0:	40023800 	.word	0x40023800
 80057d4:	42470000 	.word	0x42470000
 80057d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 80057de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1ea      	bne.n	80057be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8097 	beq.w	8005924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057fa:	4b83      	ldr	r3, [pc, #524]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10f      	bne.n	8005826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005814:	6413      	str	r3, [r2, #64]	@ 0x40
 8005816:	4b7c      	ldr	r3, [pc, #496]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800581e:	60bb      	str	r3, [r7, #8]
 8005820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005822:	2301      	movs	r3, #1
 8005824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005826:	4b79      	ldr	r3, [pc, #484]	@ (8005a0c <HAL_RCC_OscConfig+0x47c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d118      	bne.n	8005864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005832:	4b76      	ldr	r3, [pc, #472]	@ (8005a0c <HAL_RCC_OscConfig+0x47c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a75      	ldr	r2, [pc, #468]	@ (8005a0c <HAL_RCC_OscConfig+0x47c>)
 8005838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800583c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800583e:	f7fb fe1b 	bl	8001478 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005846:	f7fb fe17 	bl	8001478 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e118      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005858:	4b6c      	ldr	r3, [pc, #432]	@ (8005a0c <HAL_RCC_OscConfig+0x47c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d106      	bne.n	800587a <HAL_RCC_OscConfig+0x2ea>
 800586c:	4b66      	ldr	r3, [pc, #408]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005870:	4a65      	ldr	r2, [pc, #404]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	6713      	str	r3, [r2, #112]	@ 0x70
 8005878:	e01c      	b.n	80058b4 <HAL_RCC_OscConfig+0x324>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b05      	cmp	r3, #5
 8005880:	d10c      	bne.n	800589c <HAL_RCC_OscConfig+0x30c>
 8005882:	4b61      	ldr	r3, [pc, #388]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005886:	4a60      	ldr	r2, [pc, #384]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005888:	f043 0304 	orr.w	r3, r3, #4
 800588c:	6713      	str	r3, [r2, #112]	@ 0x70
 800588e:	4b5e      	ldr	r3, [pc, #376]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005892:	4a5d      	ldr	r2, [pc, #372]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	6713      	str	r3, [r2, #112]	@ 0x70
 800589a:	e00b      	b.n	80058b4 <HAL_RCC_OscConfig+0x324>
 800589c:	4b5a      	ldr	r3, [pc, #360]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a0:	4a59      	ldr	r2, [pc, #356]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a8:	4b57      	ldr	r3, [pc, #348]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ac:	4a56      	ldr	r2, [pc, #344]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 80058ae:	f023 0304 	bic.w	r3, r3, #4
 80058b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d015      	beq.n	80058e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058bc:	f7fb fddc 	bl	8001478 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c2:	e00a      	b.n	80058da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c4:	f7fb fdd8 	bl	8001478 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e0d7      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058da:	4b4b      	ldr	r3, [pc, #300]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0ee      	beq.n	80058c4 <HAL_RCC_OscConfig+0x334>
 80058e6:	e014      	b.n	8005912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fb fdc6 	bl	8001478 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f0:	f7fb fdc2 	bl	8001478 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e0c1      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005906:	4b40      	ldr	r3, [pc, #256]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1ee      	bne.n	80058f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005912:	7dfb      	ldrb	r3, [r7, #23]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d105      	bne.n	8005924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005918:	4b3b      	ldr	r3, [pc, #236]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	4a3a      	ldr	r2, [pc, #232]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 800591e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005922:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80ad 	beq.w	8005a88 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800592e:	4b36      	ldr	r3, [pc, #216]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b08      	cmp	r3, #8
 8005938:	d060      	beq.n	80059fc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d145      	bne.n	80059ce <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005942:	4b33      	ldr	r3, [pc, #204]	@ (8005a10 <HAL_RCC_OscConfig+0x480>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fb fd96 	bl	8001478 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005950:	f7fb fd92 	bl	8001478 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e093      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005962:	4b29      	ldr	r3, [pc, #164]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69da      	ldr	r2, [r3, #28]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	019b      	lsls	r3, r3, #6
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	3b01      	subs	r3, #1
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	071b      	lsls	r3, r3, #28
 800599a:	491b      	ldr	r1, [pc, #108]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a10 <HAL_RCC_OscConfig+0x480>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a6:	f7fb fd67 	bl	8001478 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ae:	f7fb fd63 	bl	8001478 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e064      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c0:	4b11      	ldr	r3, [pc, #68]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_OscConfig+0x41e>
 80059cc:	e05c      	b.n	8005a88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ce:	4b10      	ldr	r3, [pc, #64]	@ (8005a10 <HAL_RCC_OscConfig+0x480>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fb fd50 	bl	8001478 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fb fd4c 	bl	8001478 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e04d      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ee:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <HAL_RCC_OscConfig+0x478>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x44c>
 80059fa:	e045      	b.n	8005a88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e040      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40007000 	.word	0x40007000
 8005a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a14:	4b1f      	ldr	r3, [pc, #124]	@ (8005a94 <HAL_RCC_OscConfig+0x504>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d030      	beq.n	8005a84 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d129      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d122      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a44:	4013      	ands	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d119      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d10f      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40023800 	.word	0x40023800

08005a98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e022      	b.n	8005af0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d105      	bne.n	8005ac2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fb fa99 	bl	8000ff4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f814 	bl	8005af8 <HAL_SD_InitCard>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e00a      	b.n	8005af0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005af8:	b5b0      	push	{r4, r5, r7, lr}
 8005afa:	b08e      	sub	sp, #56	@ 0x38
 8005afc:	af04      	add	r7, sp, #16
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005b14:	2376      	movs	r3, #118	@ 0x76
 8005b16:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681d      	ldr	r5, [r3, #0]
 8005b1c:	466c      	mov	r4, sp
 8005b1e:	f107 0314 	add.w	r3, r7, #20
 8005b22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b2a:	f107 0308 	add.w	r3, r7, #8
 8005b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b30:	4628      	mov	r0, r5
 8005b32:	f001 f989 	bl	8006e48 <SDIO_Init>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e04f      	b.n	8005be8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005b48:	4b29      	ldr	r3, [pc, #164]	@ (8005bf0 <HAL_SD_InitCard+0xf8>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 f9b0 	bl	8006eb8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005b58:	4b25      	ldr	r3, [pc, #148]	@ (8005bf0 <HAL_SD_InitCard+0xf8>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005b5e:	2002      	movs	r0, #2
 8005b60:	f7fb fc96 	bl	8001490 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fb53 	bl	8006210 <SD_PowerON>
 8005b6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e02e      	b.n	8005be8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa72 	bl	8006074 <SD_InitCard>
 8005b90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e01b      	b.n	8005be8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 fa0f 	bl	8006fdc <SDMMC_CmdBlockLength>
 8005bbe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00f      	beq.n	8005be6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf4 <HAL_SD_InitCard+0xfc>)
 8005bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3728      	adds	r7, #40	@ 0x28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf0:	422580a0 	.word	0x422580a0
 8005bf4:	004005ff 	.word	0x004005ff

08005bf8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c06:	0f9b      	lsrs	r3, r3, #30
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c12:	0e9b      	lsrs	r3, r3, #26
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c24:	0e1b      	lsrs	r3, r3, #24
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c58:	0d1b      	lsrs	r3, r3, #20
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c76:	0bdb      	lsrs	r3, r3, #15
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c88:	0b9b      	lsrs	r3, r3, #14
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c9a:	0b5b      	lsrs	r3, r3, #13
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cac:	0b1b      	lsrs	r3, r3, #12
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d163      	bne.n	8005d90 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ccc:	009a      	lsls	r2, r3, #2
 8005cce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005cd8:	0f92      	lsrs	r2, r2, #30
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ce4:	0edb      	lsrs	r3, r3, #27
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cf6:	0e1b      	lsrs	r3, r3, #24
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d08:	0d5b      	lsrs	r3, r3, #21
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d1a:	0c9b      	lsrs	r3, r3, #18
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d2c:	0bdb      	lsrs	r3, r3, #15
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	7e1b      	ldrb	r3, [r3, #24]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	3302      	adds	r3, #2
 8005d50:	2201      	movs	r2, #1
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d5a:	fb03 f202 	mul.w	r2, r3, r2
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	7a1b      	ldrb	r3, [r3, #8]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005d7c:	0a52      	lsrs	r2, r2, #9
 8005d7e:	fb03 f202 	mul.w	r2, r3, r2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d8c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005d8e:	e031      	b.n	8005df4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d11d      	bne.n	8005dd4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d9c:	041b      	lsls	r3, r3, #16
 8005d9e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da6:	0c1b      	lsrs	r3, r3, #16
 8005da8:	431a      	orrs	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	3301      	adds	r3, #1
 8005db4:	029a      	lsls	r2, r3, #10
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dc8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	661a      	str	r2, [r3, #96]	@ 0x60
 8005dd2:	e00f      	b.n	8005df4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a58      	ldr	r2, [pc, #352]	@ (8005f3c <HAL_SD_GetCardCSD+0x344>)
 8005dda:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e09d      	b.n	8005f30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005df8:	0b9b      	lsrs	r3, r3, #14
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e0a:	09db      	lsrs	r3, r3, #7
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2c:	0fdb      	lsrs	r3, r3, #31
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e38:	0f5b      	lsrs	r3, r3, #29
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4a:	0e9b      	lsrs	r3, r3, #26
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e5c:	0d9b      	lsrs	r3, r3, #22
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6e:	0d5b      	lsrs	r3, r3, #21
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9e:	0bdb      	lsrs	r3, r3, #15
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb2:	0b9b      	lsrs	r3, r3, #14
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	0b5b      	lsrs	r3, r3, #13
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eda:	0b1b      	lsrs	r3, r3, #12
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eee:	0a9b      	lsrs	r3, r3, #10
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	004005ff 	.word	0x004005ff

08005f40 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005f40:	b5b0      	push	{r4, r5, r7, lr}
 8005f42:	b08e      	sub	sp, #56	@ 0x38
 8005f44:	af04      	add	r7, sp, #16
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2203      	movs	r2, #3
 8005f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d02e      	beq.n	8005fbe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f66:	d106      	bne.n	8005f76 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f74:	e029      	b.n	8005fca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f7c:	d10a      	bne.n	8005f94 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9d4 	bl	800632c <SD_WideBus_Enable>
 8005f84:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f92:	e01a      	b.n	8005fca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa11 	bl	80063c2 <SD_WideBus_Disable>
 8005fa0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fae:	e00c      	b.n	8005fca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fbc:	e005      	b.n	8005fca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a26      	ldr	r2, [pc, #152]	@ (8006070 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005fe8:	e01f      	b.n	800602a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681d      	ldr	r5, [r3, #0]
 8006010:	466c      	mov	r4, sp
 8006012:	f107 0314 	add.w	r3, r7, #20
 8006016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800601a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800601e:	f107 0308 	add.w	r3, r7, #8
 8006022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006024:	4628      	mov	r0, r5
 8006026:	f000 ff0f 	bl	8006e48 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006032:	4618      	mov	r0, r3
 8006034:	f000 ffd2 	bl	8006fdc <SDMMC_CmdBlockLength>
 8006038:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00c      	beq.n	800605a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0a      	ldr	r2, [pc, #40]	@ (8006070 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006046:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8006062:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006066:	4618      	mov	r0, r3
 8006068:	3728      	adds	r7, #40	@ 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bdb0      	pop	{r4, r5, r7, pc}
 800606e:	bf00      	nop
 8006070:	004005ff 	.word	0x004005ff

08006074 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006074:	b5b0      	push	{r4, r5, r7, lr}
 8006076:	b094      	sub	sp, #80	@ 0x50
 8006078:	af04      	add	r7, sp, #16
 800607a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800607c:	2301      	movs	r3, #1
 800607e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 ff25 	bl	8006ed4 <SDIO_GetPowerState>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006090:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006094:	e0b8      	b.n	8006208 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	2b03      	cmp	r3, #3
 800609c:	d02f      	beq.n	80060fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 f8a4 	bl	80071f0 <SDMMC_CmdSendCID>
 80060a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80060b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b2:	e0a9      	b.n	8006208 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 ff4f 	bl	8006f5e <SDIO_GetResponse>
 80060c0:	4602      	mov	r2, r0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2104      	movs	r1, #4
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 ff46 	bl	8006f5e <SDIO_GetResponse>
 80060d2:	4602      	mov	r2, r0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2108      	movs	r1, #8
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 ff3d 	bl	8006f5e <SDIO_GetResponse>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	210c      	movs	r1, #12
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 ff34 	bl	8006f5e <SDIO_GetResponse>
 80060f6:	4602      	mov	r2, r0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006102:	2b03      	cmp	r3, #3
 8006104:	d00d      	beq.n	8006122 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f107 020e 	add.w	r2, r7, #14
 800610e:	4611      	mov	r1, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f001 f8aa 	bl	800726a <SDMMC_CmdSetRelAdd>
 8006116:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <SD_InitCard+0xae>
    {
      return errorstate;
 800611e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006120:	e072      	b.n	8006208 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006126:	2b03      	cmp	r3, #3
 8006128:	d036      	beq.n	8006198 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800612a:	89fb      	ldrh	r3, [r7, #14]
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f001 f874 	bl	800722c <SDMMC_CmdSendCSD>
 8006144:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <SD_InitCard+0xdc>
    {
      return errorstate;
 800614c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614e:	e05b      	b.n	8006208 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f000 ff01 	bl	8006f5e <SDIO_GetResponse>
 800615c:	4602      	mov	r2, r0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2104      	movs	r1, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fef8 	bl	8006f5e <SDIO_GetResponse>
 800616e:	4602      	mov	r2, r0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2108      	movs	r1, #8
 800617a:	4618      	mov	r0, r3
 800617c:	f000 feef 	bl	8006f5e <SDIO_GetResponse>
 8006180:	4602      	mov	r2, r0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	210c      	movs	r1, #12
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fee6 	bl	8006f5e <SDIO_GetResponse>
 8006192:	4602      	mov	r2, r0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2104      	movs	r1, #4
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fedd 	bl	8006f5e <SDIO_GetResponse>
 80061a4:	4603      	mov	r3, r0
 80061a6:	0d1a      	lsrs	r2, r3, #20
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fd20 	bl	8005bf8 <HAL_SD_GetCardCSD>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80061c2:	e021      	b.n	8006208 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6819      	ldr	r1, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	2200      	movs	r2, #0
 80061d0:	461c      	mov	r4, r3
 80061d2:	4615      	mov	r5, r2
 80061d4:	4622      	mov	r2, r4
 80061d6:	462b      	mov	r3, r5
 80061d8:	4608      	mov	r0, r1
 80061da:	f000 ff21 	bl	8007020 <SDMMC_CmdSelDesel>
 80061de:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80061e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <SD_InitCard+0x176>
  {
    return errorstate;
 80061e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e8:	e00e      	b.n	8006208 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681d      	ldr	r5, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	466c      	mov	r4, sp
 80061f2:	f103 0210 	add.w	r2, r3, #16
 80061f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80061f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061fc:	3304      	adds	r3, #4
 80061fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006200:	4628      	mov	r0, r5
 8006202:	f000 fe21 	bl	8006e48 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3740      	adds	r7, #64	@ 0x40
 800620c:	46bd      	mov	sp, r7
 800620e:	bdb0      	pop	{r4, r5, r7, pc}

08006210 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 ff1c 	bl	8007066 <SDMMC_CmdGoIdleState>
 800622e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	e072      	b.n	8006320 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f000 ff2f 	bl	80070a2 <SDMMC_CmdOperCond>
 8006244:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 ff05 	bl	8007066 <SDMMC_CmdGoIdleState>
 800625c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	e05b      	b.n	8006320 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006272:	2b01      	cmp	r3, #1
 8006274:	d137      	bne.n	80062e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f000 ff2f 	bl	80070e0 <SDMMC_CmdAppCommand>
 8006282:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02d      	beq.n	80062e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800628a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800628e:	e047      	b.n	8006320 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f000 ff22 	bl	80070e0 <SDMMC_CmdAppCommand>
 800629c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	e03b      	b.n	8006320 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	491e      	ldr	r1, [pc, #120]	@ (8006328 <SD_PowerON+0x118>)
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 ff38 	bl	8007124 <SDMMC_CmdAppOperCommand>
 80062b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062bc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80062c0:	e02e      	b.n	8006320 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fe48 	bl	8006f5e <SDIO_GetResponse>
 80062ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	0fdb      	lsrs	r3, r3, #31
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <SD_PowerON+0xcc>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <SD_PowerON+0xce>
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]

    count++;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d802      	bhi.n	80062f6 <SD_PowerON+0xe6>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0cc      	beq.n	8006290 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d902      	bls.n	8006306 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006304:	e00c      	b.n	8006320 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44
 8006316:	e002      	b.n	800631e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	c1100000 	.word	0xc1100000

0800632c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2100      	movs	r1, #0
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fe0b 	bl	8006f5e <SDIO_GetResponse>
 8006348:	4603      	mov	r3, r0
 800634a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006352:	d102      	bne.n	800635a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006354:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006358:	e02f      	b.n	80063ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800635a:	f107 030c 	add.w	r3, r7, #12
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f879 	bl	8006458 <SD_FindSCR>
 8006366:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	e023      	b.n	80063ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01c      	beq.n	80063b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f000 fea9 	bl	80070e0 <SDMMC_CmdAppCommand>
 800638e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	e00f      	b.n	80063ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2102      	movs	r1, #2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fee2 	bl	800716a <SDMMC_CmdBusWidth>
 80063a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	e003      	b.n	80063ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e001      	b.n	80063ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fdc0 	bl	8006f5e <SDIO_GetResponse>
 80063de:	4603      	mov	r3, r0
 80063e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063e8:	d102      	bne.n	80063f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80063ee:	e02f      	b.n	8006450 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80063f0:	f107 030c 	add.w	r3, r7, #12
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f82e 	bl	8006458 <SD_FindSCR>
 80063fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	e023      	b.n	8006450 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01c      	beq.n	800644c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f000 fe5e 	bl	80070e0 <SDMMC_CmdAppCommand>
 8006424:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	e00f      	b.n	8006450 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2100      	movs	r1, #0
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fe97 	bl	800716a <SDMMC_CmdBusWidth>
 800643c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	e003      	b.n	8006450 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006448:	2300      	movs	r3, #0
 800644a:	e001      	b.n	8006450 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800644c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006458:	b590      	push	{r4, r7, lr}
 800645a:	b08f      	sub	sp, #60	@ 0x3c
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006462:	f7fb f809 	bl	8001478 <HAL_GetTick>
 8006466:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800646c:	2300      	movs	r3, #0
 800646e:	60bb      	str	r3, [r7, #8]
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2108      	movs	r1, #8
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fdac 	bl	8006fdc <SDMMC_CmdBlockLength>
 8006484:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <SD_FindSCR+0x38>
  {
    return errorstate;
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	e0b2      	b.n	80065f6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006498:	041b      	lsls	r3, r3, #16
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f000 fe1f 	bl	80070e0 <SDMMC_CmdAppCommand>
 80064a2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <SD_FindSCR+0x56>
  {
    return errorstate;
 80064aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ac:	e0a3      	b.n	80065f6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064ae:	f04f 33ff 	mov.w	r3, #4294967295
 80064b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80064b4:	2308      	movs	r3, #8
 80064b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80064b8:	2330      	movs	r3, #48	@ 0x30
 80064ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80064bc:	2302      	movs	r3, #2
 80064be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f107 0210 	add.w	r2, r7, #16
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fd56 	bl	8006f84 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fe66 	bl	80071ae <SDMMC_CmdSendSCR>
 80064e2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d02a      	beq.n	8006540 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80064ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ec:	e083      	b.n	80065f6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00f      	beq.n	800651c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	f107 0208 	add.w	r2, r7, #8
 8006508:	18d4      	adds	r4, r2, r3
 800650a:	4608      	mov	r0, r1
 800650c:	f000 fcc7 	bl	8006e9e <SDIO_ReadFIFO>
 8006510:	4603      	mov	r3, r0
 8006512:	6023      	str	r3, [r4, #0]
      index++;
 8006514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006516:	3301      	adds	r3, #1
 8006518:	637b      	str	r3, [r7, #52]	@ 0x34
 800651a:	e006      	b.n	800652a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d012      	beq.n	8006550 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800652a:	f7fa ffa5 	bl	8001478 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d102      	bne.n	8006540 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800653a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800653e:	e05a      	b.n	80065f6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006546:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0cf      	beq.n	80064ee <SD_FindSCR+0x96>
 800654e:	e000      	b.n	8006552 <SD_FindSCR+0xfa>
      break;
 8006550:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2208      	movs	r2, #8
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006568:	2308      	movs	r3, #8
 800656a:	e044      	b.n	80065f6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2202      	movs	r2, #2
 8006580:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006582:	2302      	movs	r3, #2
 8006584:	e037      	b.n	80065f6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2220      	movs	r2, #32
 800659a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800659c:	2320      	movs	r3, #32
 800659e:	e02a      	b.n	80065f6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	061a      	lsls	r2, r3, #24
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065c0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	0e1b      	lsrs	r3, r3, #24
 80065c6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ca:	601a      	str	r2, [r3, #0]
    scr++;
 80065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ce:	3304      	adds	r3, #4
 80065d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	061a      	lsls	r2, r3, #24
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065e8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	0e1b      	lsrs	r3, r3, #24
 80065ee:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	373c      	adds	r7, #60	@ 0x3c
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd90      	pop	{r4, r7, pc}

080065fe <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e038      	b.n	8006686 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7fa fe09 	bl	8001240 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3308      	adds	r3, #8
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f000 faed 	bl	8006c18 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	461a      	mov	r2, r3
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	f000 fb75 	bl	8006d38 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6858      	ldr	r0, [r3, #4]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	f000 fbbc 	bl	8006dd8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	6892      	ldr	r2, [r2, #8]
 8006668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	6892      	ldr	r2, [r2, #8]
 8006674:	f041 0101 	orr.w	r1, r1, #1
 8006678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e042      	b.n	8006726 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fa fd1d 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2224      	movs	r2, #36	@ 0x24
 80066be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f82c 	bl	8006730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006706:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006734:	b0c0      	sub	sp, #256	@ 0x100
 8006736:	af00      	add	r7, sp, #0
 8006738:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674c:	68d9      	ldr	r1, [r3, #12]
 800674e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	ea40 0301 	orr.w	r3, r0, r1
 8006758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	431a      	orrs	r2, r3
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	431a      	orrs	r2, r3
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006788:	f021 010c 	bic.w	r1, r1, #12
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006796:	430b      	orrs	r3, r1
 8006798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80067a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067aa:	6999      	ldr	r1, [r3, #24]
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	ea40 0301 	orr.w	r3, r0, r1
 80067b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4b8f      	ldr	r3, [pc, #572]	@ (80069fc <UART_SetConfig+0x2cc>)
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d005      	beq.n	80067d0 <UART_SetConfig+0xa0>
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006a00 <UART_SetConfig+0x2d0>)
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d104      	bne.n	80067da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067d0:	f7fe fb98 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 80067d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80067d8:	e003      	b.n	80067e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067da:	f7fe fb7f 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80067de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ec:	f040 810c 	bne.w	8006a08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80067fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006802:	4622      	mov	r2, r4
 8006804:	462b      	mov	r3, r5
 8006806:	1891      	adds	r1, r2, r2
 8006808:	65b9      	str	r1, [r7, #88]	@ 0x58
 800680a:	415b      	adcs	r3, r3
 800680c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800680e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006812:	4621      	mov	r1, r4
 8006814:	eb12 0801 	adds.w	r8, r2, r1
 8006818:	4629      	mov	r1, r5
 800681a:	eb43 0901 	adc.w	r9, r3, r1
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800682a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800682e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006832:	4690      	mov	r8, r2
 8006834:	4699      	mov	r9, r3
 8006836:	4623      	mov	r3, r4
 8006838:	eb18 0303 	adds.w	r3, r8, r3
 800683c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006840:	462b      	mov	r3, r5
 8006842:	eb49 0303 	adc.w	r3, r9, r3
 8006846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006856:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800685a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800685e:	460b      	mov	r3, r1
 8006860:	18db      	adds	r3, r3, r3
 8006862:	653b      	str	r3, [r7, #80]	@ 0x50
 8006864:	4613      	mov	r3, r2
 8006866:	eb42 0303 	adc.w	r3, r2, r3
 800686a:	657b      	str	r3, [r7, #84]	@ 0x54
 800686c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006874:	f7f9 fcc6 	bl	8000204 <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4b61      	ldr	r3, [pc, #388]	@ (8006a04 <UART_SetConfig+0x2d4>)
 800687e:	fba3 2302 	umull	r2, r3, r3, r2
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	011c      	lsls	r4, r3, #4
 8006886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800688a:	2200      	movs	r2, #0
 800688c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006890:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	1891      	adds	r1, r2, r2
 800689e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068a0:	415b      	adcs	r3, r3
 80068a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80068a8:	4641      	mov	r1, r8
 80068aa:	eb12 0a01 	adds.w	sl, r2, r1
 80068ae:	4649      	mov	r1, r9
 80068b0:	eb43 0b01 	adc.w	fp, r3, r1
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c8:	4692      	mov	sl, r2
 80068ca:	469b      	mov	fp, r3
 80068cc:	4643      	mov	r3, r8
 80068ce:	eb1a 0303 	adds.w	r3, sl, r3
 80068d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068d6:	464b      	mov	r3, r9
 80068d8:	eb4b 0303 	adc.w	r3, fp, r3
 80068dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80068f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068f4:	460b      	mov	r3, r1
 80068f6:	18db      	adds	r3, r3, r3
 80068f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80068fa:	4613      	mov	r3, r2
 80068fc:	eb42 0303 	adc.w	r3, r2, r3
 8006900:	647b      	str	r3, [r7, #68]	@ 0x44
 8006902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800690a:	f7f9 fc7b 	bl	8000204 <__aeabi_uldivmod>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4611      	mov	r1, r2
 8006914:	4b3b      	ldr	r3, [pc, #236]	@ (8006a04 <UART_SetConfig+0x2d4>)
 8006916:	fba3 2301 	umull	r2, r3, r3, r1
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	2264      	movs	r2, #100	@ 0x64
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	1acb      	subs	r3, r1, r3
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800692a:	4b36      	ldr	r3, [pc, #216]	@ (8006a04 <UART_SetConfig+0x2d4>)
 800692c:	fba3 2302 	umull	r2, r3, r3, r2
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006938:	441c      	add	r4, r3
 800693a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800693e:	2200      	movs	r2, #0
 8006940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006944:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	1891      	adds	r1, r2, r2
 8006952:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006954:	415b      	adcs	r3, r3
 8006956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800695c:	4641      	mov	r1, r8
 800695e:	1851      	adds	r1, r2, r1
 8006960:	6339      	str	r1, [r7, #48]	@ 0x30
 8006962:	4649      	mov	r1, r9
 8006964:	414b      	adcs	r3, r1
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006974:	4659      	mov	r1, fp
 8006976:	00cb      	lsls	r3, r1, #3
 8006978:	4651      	mov	r1, sl
 800697a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800697e:	4651      	mov	r1, sl
 8006980:	00ca      	lsls	r2, r1, #3
 8006982:	4610      	mov	r0, r2
 8006984:	4619      	mov	r1, r3
 8006986:	4603      	mov	r3, r0
 8006988:	4642      	mov	r2, r8
 800698a:	189b      	adds	r3, r3, r2
 800698c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006990:	464b      	mov	r3, r9
 8006992:	460a      	mov	r2, r1
 8006994:	eb42 0303 	adc.w	r3, r2, r3
 8006998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80069ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069b0:	460b      	mov	r3, r1
 80069b2:	18db      	adds	r3, r3, r3
 80069b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069b6:	4613      	mov	r3, r2
 80069b8:	eb42 0303 	adc.w	r3, r2, r3
 80069bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80069c6:	f7f9 fc1d 	bl	8000204 <__aeabi_uldivmod>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <UART_SetConfig+0x2d4>)
 80069d0:	fba3 1302 	umull	r1, r3, r3, r2
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	2164      	movs	r1, #100	@ 0x64
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	3332      	adds	r3, #50	@ 0x32
 80069e2:	4a08      	ldr	r2, [pc, #32]	@ (8006a04 <UART_SetConfig+0x2d4>)
 80069e4:	fba2 2303 	umull	r2, r3, r2, r3
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	f003 0207 	and.w	r2, r3, #7
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4422      	add	r2, r4
 80069f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069f8:	e106      	b.n	8006c08 <UART_SetConfig+0x4d8>
 80069fa:	bf00      	nop
 80069fc:	40011000 	.word	0x40011000
 8006a00:	40011400 	.word	0x40011400
 8006a04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a1a:	4642      	mov	r2, r8
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	1891      	adds	r1, r2, r2
 8006a20:	6239      	str	r1, [r7, #32]
 8006a22:	415b      	adcs	r3, r3
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	1854      	adds	r4, r2, r1
 8006a2e:	4649      	mov	r1, r9
 8006a30:	eb43 0501 	adc.w	r5, r3, r1
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	00eb      	lsls	r3, r5, #3
 8006a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a42:	00e2      	lsls	r2, r4, #3
 8006a44:	4614      	mov	r4, r2
 8006a46:	461d      	mov	r5, r3
 8006a48:	4643      	mov	r3, r8
 8006a4a:	18e3      	adds	r3, r4, r3
 8006a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a50:	464b      	mov	r3, r9
 8006a52:	eb45 0303 	adc.w	r3, r5, r3
 8006a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a76:	4629      	mov	r1, r5
 8006a78:	008b      	lsls	r3, r1, #2
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a80:	4621      	mov	r1, r4
 8006a82:	008a      	lsls	r2, r1, #2
 8006a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a88:	f7f9 fbbc 	bl	8000204 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4b60      	ldr	r3, [pc, #384]	@ (8006c14 <UART_SetConfig+0x4e4>)
 8006a92:	fba3 2302 	umull	r2, r3, r3, r2
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	011c      	lsls	r4, r3, #4
 8006a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006aa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006aa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006aac:	4642      	mov	r2, r8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	1891      	adds	r1, r2, r2
 8006ab2:	61b9      	str	r1, [r7, #24]
 8006ab4:	415b      	adcs	r3, r3
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006abc:	4641      	mov	r1, r8
 8006abe:	1851      	adds	r1, r2, r1
 8006ac0:	6139      	str	r1, [r7, #16]
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	414b      	adcs	r3, r1
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ad4:	4659      	mov	r1, fp
 8006ad6:	00cb      	lsls	r3, r1, #3
 8006ad8:	4651      	mov	r1, sl
 8006ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ade:	4651      	mov	r1, sl
 8006ae0:	00ca      	lsls	r2, r1, #3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4642      	mov	r2, r8
 8006aea:	189b      	adds	r3, r3, r2
 8006aec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006af0:	464b      	mov	r3, r9
 8006af2:	460a      	mov	r2, r1
 8006af4:	eb42 0303 	adc.w	r3, r2, r3
 8006af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b14:	4649      	mov	r1, r9
 8006b16:	008b      	lsls	r3, r1, #2
 8006b18:	4641      	mov	r1, r8
 8006b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b1e:	4641      	mov	r1, r8
 8006b20:	008a      	lsls	r2, r1, #2
 8006b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b26:	f7f9 fb6d 	bl	8000204 <__aeabi_uldivmod>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	4b38      	ldr	r3, [pc, #224]	@ (8006c14 <UART_SetConfig+0x4e4>)
 8006b32:	fba3 2301 	umull	r2, r3, r3, r1
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	2264      	movs	r2, #100	@ 0x64
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	1acb      	subs	r3, r1, r3
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	3332      	adds	r3, #50	@ 0x32
 8006b44:	4a33      	ldr	r2, [pc, #204]	@ (8006c14 <UART_SetConfig+0x4e4>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b50:	441c      	add	r4, r3
 8006b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b56:	2200      	movs	r2, #0
 8006b58:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	1891      	adds	r1, r2, r2
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	415b      	adcs	r3, r3
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b70:	4641      	mov	r1, r8
 8006b72:	1851      	adds	r1, r2, r1
 8006b74:	6039      	str	r1, [r7, #0]
 8006b76:	4649      	mov	r1, r9
 8006b78:	414b      	adcs	r3, r1
 8006b7a:	607b      	str	r3, [r7, #4]
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b88:	4659      	mov	r1, fp
 8006b8a:	00cb      	lsls	r3, r1, #3
 8006b8c:	4651      	mov	r1, sl
 8006b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b92:	4651      	mov	r1, sl
 8006b94:	00ca      	lsls	r2, r1, #3
 8006b96:	4610      	mov	r0, r2
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	189b      	adds	r3, r3, r2
 8006ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	460a      	mov	r2, r1
 8006ba6:	eb42 0303 	adc.w	r3, r2, r3
 8006baa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	008b      	lsls	r3, r1, #2
 8006bc8:	4641      	mov	r1, r8
 8006bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bce:	4641      	mov	r1, r8
 8006bd0:	008a      	lsls	r2, r1, #2
 8006bd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006bd6:	f7f9 fb15 	bl	8000204 <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <UART_SetConfig+0x4e4>)
 8006be0:	fba3 1302 	umull	r1, r3, r3, r2
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	2164      	movs	r1, #100	@ 0x64
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	3332      	adds	r3, #50	@ 0x32
 8006bf2:	4a08      	ldr	r2, [pc, #32]	@ (8006c14 <UART_SetConfig+0x4e4>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	f003 020f 	and.w	r2, r3, #15
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4422      	add	r2, r4
 8006c06:	609a      	str	r2, [r3, #8]
}
 8006c08:	bf00      	nop
 8006c0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c14:	51eb851f 	.word	0x51eb851f

08006c18 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	f023 0101 	bic.w	r1, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d102      	bne.n	8006c48 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006c42:	2340      	movs	r3, #64	@ 0x40
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	e001      	b.n	8006c4c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006c58:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006c5e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006c64:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006c6a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006c70:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006c76:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006c7c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006c82:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006c88:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006cb0:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <FSMC_NORSRAM_Init+0x11c>)
 8006cb2:	60fb      	str	r3, [r7, #12]

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  mask |= FSMC_BCR1_CCLKEN;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cba:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cc2:	60fb      	str	r3, [r7, #12]
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006cca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	ea02 0103 	and.w	r1, r2, r3
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4319      	orrs	r1, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cf4:	d10c      	bne.n	8006d10 <FSMC_NORSRAM_Init+0xf8>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d008      	beq.n	8006d10 <FSMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
  }
#endif
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d006      	beq.n	8006d26 <FSMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	601a      	str	r2, [r3, #0]
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	0008fb7f 	.word	0x0008fb7f

08006d38 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	431a      	orrs	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	051b      	lsls	r3, r3, #20
 8006d76:	431a      	orrs	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	3b02      	subs	r3, #2
 8006d7e:	061b      	lsls	r3, r3, #24
 8006d80:	431a      	orrs	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	3201      	adds	r2, #1
 8006d8c:	4319      	orrs	r1, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006da0:	d113      	bne.n	8006dca <FSMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006daa:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	051b      	lsls	r3, r3, #20
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dec:	d11d      	bne.n	8006e2a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006df6:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	6811      	ldr	r1, [r2, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	6852      	ldr	r2, [r2, #4]
 8006e02:	0112      	lsls	r2, r2, #4
 8006e04:	4311      	orrs	r1, r2
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	6892      	ldr	r2, [r2, #8]
 8006e0a:	0212      	lsls	r2, r2, #8
 8006e0c:	4311      	orrs	r1, r2
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	6992      	ldr	r2, [r2, #24]
 8006e12:	4311      	orrs	r1, r2
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	68d2      	ldr	r2, [r2, #12]
 8006e18:	0412      	lsls	r2, r2, #16
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	ea43 0102 	orr.w	r1, r3, r2
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e28:	e005      	b.n	8006e36 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	cff00000 	.word	0xcff00000

08006e48 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006e48:	b084      	sub	sp, #16
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	f107 001c 	add.w	r0, r7, #28
 8006e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006e5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006e60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006e62:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006e66:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006e6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006e6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8006e72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8006e82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	b004      	add	sp, #16
 8006e9c:	4770      	bx	lr

08006e9e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0303 	and.w	r3, r3, #3
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f0e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006f14:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006f1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006f2a:	f023 030f 	bic.w	r3, r3, #15
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	b2db      	uxtb	r3, r3
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3314      	adds	r3, #20
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	4413      	add	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
}  
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006faa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006fb0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006fb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0

}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006fea:	2310      	movs	r3, #16
 8006fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fee:	2340      	movs	r3, #64	@ 0x40
 8006ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ffa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ffc:	f107 0308 	add.w	r3, r7, #8
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff ff74 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800700c:	2110      	movs	r1, #16
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f94c 	bl	80072ac <SDMMC_GetCmdResp1>
 8007014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007016:	69fb      	ldr	r3, [r7, #28]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3720      	adds	r7, #32
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	@ 0x28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007030:	2307      	movs	r3, #7
 8007032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007034:	2340      	movs	r3, #64	@ 0x40
 8007036:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007038:	2300      	movs	r3, #0
 800703a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800703c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007040:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007042:	f107 0310 	add.w	r3, r7, #16
 8007046:	4619      	mov	r1, r3
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff ff51 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800704e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007052:	2107      	movs	r1, #7
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f929 	bl	80072ac <SDMMC_GetCmdResp1>
 800705a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800705e:	4618      	mov	r0, r3
 8007060:	3728      	adds	r7, #40	@ 0x28
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b088      	sub	sp, #32
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007076:	2300      	movs	r3, #0
 8007078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800707e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007082:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007084:	f107 0308 	add.w	r3, r7, #8
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff ff30 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb43 	bl	800771c <SDMMC_GetCmdError>
 8007096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007098:	69fb      	ldr	r3, [r7, #28]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b088      	sub	sp, #32
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80070aa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80070ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80070b0:	2308      	movs	r3, #8
 80070b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070b4:	2340      	movs	r3, #64	@ 0x40
 80070b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070c2:	f107 0308 	add.w	r3, r7, #8
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff11 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fad6 	bl	8007680 <SDMMC_GetCmdResp7>
 80070d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070d6:	69fb      	ldr	r3, [r7, #28]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80070ee:	2337      	movs	r3, #55	@ 0x37
 80070f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070f2:	2340      	movs	r3, #64	@ 0x40
 80070f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007100:	f107 0308 	add.w	r3, r7, #8
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fef2 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800710c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007110:	2137      	movs	r1, #55	@ 0x37
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8ca 	bl	80072ac <SDMMC_GetCmdResp1>
 8007118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800711a:	69fb      	ldr	r3, [r7, #28]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800713a:	2329      	movs	r3, #41	@ 0x29
 800713c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800713e:	2340      	movs	r3, #64	@ 0x40
 8007140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800714a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800714c:	f107 0308 	add.w	r3, r7, #8
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fecc 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f9dd 	bl	8007518 <SDMMC_GetCmdResp3>
 800715e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007160:	69fb      	ldr	r3, [r7, #28]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b088      	sub	sp, #32
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007178:	2306      	movs	r3, #6
 800717a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800717c:	2340      	movs	r3, #64	@ 0x40
 800717e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007188:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800718a:	f107 0308 	add.w	r3, r7, #8
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fead 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719a:	2106      	movs	r1, #6
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f885 	bl	80072ac <SDMMC_GetCmdResp1>
 80071a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071a4:	69fb      	ldr	r3, [r7, #28]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3720      	adds	r7, #32
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b088      	sub	sp, #32
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80071ba:	2333      	movs	r3, #51	@ 0x33
 80071bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071be:	2340      	movs	r3, #64	@ 0x40
 80071c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071c2:	2300      	movs	r3, #0
 80071c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071cc:	f107 0308 	add.w	r3, r7, #8
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff fe8c 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80071d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071dc:	2133      	movs	r1, #51	@ 0x33
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f864 	bl	80072ac <SDMMC_GetCmdResp1>
 80071e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071e6:	69fb      	ldr	r3, [r7, #28]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3720      	adds	r7, #32
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80071fc:	2302      	movs	r3, #2
 80071fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007200:	23c0      	movs	r3, #192	@ 0xc0
 8007202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800720c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800720e:	f107 0308 	add.w	r3, r7, #8
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff fe6b 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f934 	bl	8007488 <SDMMC_GetCmdResp2>
 8007220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007222:	69fb      	ldr	r3, [r7, #28]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800723a:	2309      	movs	r3, #9
 800723c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800723e:	23c0      	movs	r3, #192	@ 0xc0
 8007240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800724a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800724c:	f107 0308 	add.w	r3, r7, #8
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff fe4c 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f915 	bl	8007488 <SDMMC_GetCmdResp2>
 800725e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007260:	69fb      	ldr	r3, [r7, #28]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b088      	sub	sp, #32
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007278:	2303      	movs	r3, #3
 800727a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800727c:	2340      	movs	r3, #64	@ 0x40
 800727e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007288:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff fe2d 	bl	8006ef0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	2103      	movs	r1, #3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f97a 	bl	8007594 <SDMMC_GetCmdResp6>
 80072a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072a2:	69fb      	ldr	r3, [r7, #28]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	460b      	mov	r3, r1
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072ba:	4b70      	ldr	r3, [pc, #448]	@ (800747c <SDMMC_GetCmdResp1+0x1d0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a70      	ldr	r2, [pc, #448]	@ (8007480 <SDMMC_GetCmdResp1+0x1d4>)
 80072c0:	fba2 2303 	umull	r2, r3, r2, r3
 80072c4:	0a5a      	lsrs	r2, r3, #9
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	fb02 f303 	mul.w	r3, r2, r3
 80072cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	1e5a      	subs	r2, r3, #1
 80072d2:	61fa      	str	r2, [r7, #28]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80072dc:	e0c9      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0ef      	beq.n	80072ce <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1ea      	bne.n	80072ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2204      	movs	r2, #4
 8007308:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800730a:	2304      	movs	r3, #4
 800730c:	e0b1      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007320:	2301      	movs	r3, #1
 8007322:	e0a6      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	22c5      	movs	r2, #197	@ 0xc5
 8007328:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7ff fe0a 	bl	8006f44 <SDIO_GetCommandResponse>
 8007330:	4603      	mov	r3, r0
 8007332:	461a      	mov	r2, r3
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	4293      	cmp	r3, r2
 8007338:	d001      	beq.n	800733e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800733a:	2301      	movs	r3, #1
 800733c:	e099      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800733e:	2100      	movs	r1, #0
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff fe0c 	bl	8006f5e <SDIO_GetResponse>
 8007346:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4b4e      	ldr	r3, [pc, #312]	@ (8007484 <SDMMC_GetCmdResp1+0x1d8>)
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007352:	2300      	movs	r3, #0
 8007354:	e08d      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	da02      	bge.n	8007362 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800735c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007360:	e087      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800736c:	2340      	movs	r3, #64	@ 0x40
 800736e:	e080      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800737a:	2380      	movs	r3, #128	@ 0x80
 800737c:	e079      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800738c:	e071      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800739c:	e069      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80073a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073ac:	e061      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80073b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80073bc:	e059      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80073c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073cc:	e051      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80073d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80073dc:	e049      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80073e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80073ec:	e041      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80073f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073fc:	e039      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007408:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800740c:	e031      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007418:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800741c:	e029      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007428:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800742c:	e021      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007438:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800743c:	e019      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007448:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800744c:	e011      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007458:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800745c:	e009      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007468:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800746c:	e001      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800746e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000000 	.word	0x20000000
 8007480:	10624dd3 	.word	0x10624dd3
 8007484:	fdffe008 	.word	0xfdffe008

08007488 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007490:	4b1f      	ldr	r3, [pc, #124]	@ (8007510 <SDMMC_GetCmdResp2+0x88>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1f      	ldr	r2, [pc, #124]	@ (8007514 <SDMMC_GetCmdResp2+0x8c>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	0a5b      	lsrs	r3, r3, #9
 800749c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a0:	fb02 f303 	mul.w	r3, r2, r3
 80074a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1e5a      	subs	r2, r3, #1
 80074aa:	60fa      	str	r2, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80074b4:	e026      	b.n	8007504 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0ef      	beq.n	80074a6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1ea      	bne.n	80074a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2204      	movs	r2, #4
 80074e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074e2:	2304      	movs	r3, #4
 80074e4:	e00e      	b.n	8007504 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e003      	b.n	8007504 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	22c5      	movs	r2, #197	@ 0xc5
 8007500:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	20000000 	.word	0x20000000
 8007514:	10624dd3 	.word	0x10624dd3

08007518 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007520:	4b1a      	ldr	r3, [pc, #104]	@ (800758c <SDMMC_GetCmdResp3+0x74>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a1a      	ldr	r2, [pc, #104]	@ (8007590 <SDMMC_GetCmdResp3+0x78>)
 8007526:	fba2 2303 	umull	r2, r3, r2, r3
 800752a:	0a5b      	lsrs	r3, r3, #9
 800752c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007530:	fb02 f303 	mul.w	r3, r2, r3
 8007534:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	1e5a      	subs	r2, r3, #1
 800753a:	60fa      	str	r2, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d102      	bne.n	8007546 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007540:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007544:	e01b      	b.n	800757e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800754a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0ef      	beq.n	8007536 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1ea      	bne.n	8007536 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2204      	movs	r2, #4
 8007570:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007572:	2304      	movs	r3, #4
 8007574:	e003      	b.n	800757e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	22c5      	movs	r2, #197	@ 0xc5
 800757a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	20000000 	.word	0x20000000
 8007590:	10624dd3 	.word	0x10624dd3

08007594 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	460b      	mov	r3, r1
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075a2:	4b35      	ldr	r3, [pc, #212]	@ (8007678 <SDMMC_GetCmdResp6+0xe4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a35      	ldr	r2, [pc, #212]	@ (800767c <SDMMC_GetCmdResp6+0xe8>)
 80075a8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ac:	0a5b      	lsrs	r3, r3, #9
 80075ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075b2:	fb02 f303 	mul.w	r3, r2, r3
 80075b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	1e5a      	subs	r2, r3, #1
 80075bc:	61fa      	str	r2, [r7, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d102      	bne.n	80075c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80075c6:	e052      	b.n	800766e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0ef      	beq.n	80075b8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1ea      	bne.n	80075b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2204      	movs	r2, #4
 80075f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075f4:	2304      	movs	r3, #4
 80075f6:	e03a      	b.n	800766e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800760a:	2301      	movs	r3, #1
 800760c:	e02f      	b.n	800766e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff fc98 	bl	8006f44 <SDIO_GetCommandResponse>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	4293      	cmp	r3, r2
 800761c:	d001      	beq.n	8007622 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800761e:	2301      	movs	r3, #1
 8007620:	e025      	b.n	800766e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	22c5      	movs	r2, #197	@ 0xc5
 8007626:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007628:	2100      	movs	r1, #0
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff fc97 	bl	8006f5e <SDIO_GetResponse>
 8007630:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	b29a      	uxth	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007646:	2300      	movs	r3, #0
 8007648:	e011      	b.n	800766e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007654:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007658:	e009      	b.n	800766e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007668:	e001      	b.n	800766e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800766a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000000 	.word	0x20000000
 800767c:	10624dd3 	.word	0x10624dd3

08007680 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007688:	4b22      	ldr	r3, [pc, #136]	@ (8007714 <SDMMC_GetCmdResp7+0x94>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a22      	ldr	r2, [pc, #136]	@ (8007718 <SDMMC_GetCmdResp7+0x98>)
 800768e:	fba2 2303 	umull	r2, r3, r2, r3
 8007692:	0a5b      	lsrs	r3, r3, #9
 8007694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007698:	fb02 f303 	mul.w	r3, r2, r3
 800769c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1e5a      	subs	r2, r3, #1
 80076a2:	60fa      	str	r2, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076ac:	e02c      	b.n	8007708 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ef      	beq.n	800769e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1ea      	bne.n	800769e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2204      	movs	r2, #4
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076da:	2304      	movs	r3, #4
 80076dc:	e014      	b.n	8007708 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e009      	b.n	8007708 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2240      	movs	r2, #64	@ 0x40
 8007704:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007706:	2300      	movs	r3, #0
  
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20000000 	.word	0x20000000
 8007718:	10624dd3 	.word	0x10624dd3

0800771c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007724:	4b11      	ldr	r3, [pc, #68]	@ (800776c <SDMMC_GetCmdError+0x50>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a11      	ldr	r2, [pc, #68]	@ (8007770 <SDMMC_GetCmdError+0x54>)
 800772a:	fba2 2303 	umull	r2, r3, r2, r3
 800772e:	0a5b      	lsrs	r3, r3, #9
 8007730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007734:	fb02 f303 	mul.w	r3, r2, r3
 8007738:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	1e5a      	subs	r2, r3, #1
 800773e:	60fa      	str	r2, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007744:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007748:	e009      	b.n	800775e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800774e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f1      	beq.n	800773a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	22c5      	movs	r2, #197	@ 0xc5
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	20000000 	.word	0x20000000
 8007770:	10624dd3 	.word	0x10624dd3

08007774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007774:	b084      	sub	sp, #16
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	f107 001c 	add.w	r0, r7, #28
 8007782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007786:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800778a:	2b01      	cmp	r3, #1
 800778c:	d123      	bne.n	80077d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007792:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80077a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d105      	bne.n	80077ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f9dc 	bl	8007b88 <USB_CoreReset>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
 80077d4:	e01b      	b.n	800780e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9d0 	bl	8007b88 <USB_CoreReset>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007800:	e005      	b.n	800780e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800780e:	7fbb      	ldrb	r3, [r7, #30]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d10b      	bne.n	800782c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f043 0206 	orr.w	r2, r3, #6
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f043 0220 	orr.w	r2, r3, #32
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007838:	b004      	add	sp, #16
 800783a:	4770      	bx	lr

0800783c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f043 0201 	orr.w	r2, r3, #1
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f023 0201 	bic.w	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d115      	bne.n	80078ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078ae:	200a      	movs	r0, #10
 80078b0:	f7f9 fdee 	bl	8001490 <HAL_Delay>
      ms += 10U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	330a      	adds	r3, #10
 80078b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f956 	bl	8007b6c <USB_GetMode>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d01e      	beq.n	8007904 <USB_SetCurrentMode+0x84>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80078ca:	d9f0      	bls.n	80078ae <USB_SetCurrentMode+0x2e>
 80078cc:	e01a      	b.n	8007904 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d115      	bne.n	8007900 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078e0:	200a      	movs	r0, #10
 80078e2:	f7f9 fdd5 	bl	8001490 <HAL_Delay>
      ms += 10U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	330a      	adds	r3, #10
 80078ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f93d 	bl	8007b6c <USB_GetMode>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <USB_SetCurrentMode+0x84>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80078fc:	d9f0      	bls.n	80078e0 <USB_SetCurrentMode+0x60>
 80078fe:	e001      	b.n	8007904 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e005      	b.n	8007910 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2bc8      	cmp	r3, #200	@ 0xc8
 8007908:	d101      	bne.n	800790e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007932:	d901      	bls.n	8007938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e01b      	b.n	8007970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	daf2      	bge.n	8007926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007940:	2300      	movs	r3, #0
 8007942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	019b      	lsls	r3, r3, #6
 8007948:	f043 0220 	orr.w	r2, r3, #32
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800795c:	d901      	bls.n	8007962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e006      	b.n	8007970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b20      	cmp	r3, #32
 800796c:	d0f0      	beq.n	8007950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007994:	d901      	bls.n	800799a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e018      	b.n	80079cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	daf2      	bge.n	8007988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2210      	movs	r2, #16
 80079aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079b8:	d901      	bls.n	80079be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e006      	b.n	80079cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0310 	and.w	r3, r3, #16
 80079c6:	2b10      	cmp	r3, #16
 80079c8:	d0f0      	beq.n	80079ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079d8:	b480      	push	{r7}
 80079da:	b089      	sub	sp, #36	@ 0x24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4611      	mov	r1, r2
 80079e4:	461a      	mov	r2, r3
 80079e6:	460b      	mov	r3, r1
 80079e8:	71fb      	strb	r3, [r7, #7]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d123      	bne.n	8007a46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079fe:	88bb      	ldrh	r3, [r7, #4]
 8007a00:	3303      	adds	r3, #3
 8007a02:	089b      	lsrs	r3, r3, #2
 8007a04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a06:	2300      	movs	r3, #0
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	e018      	b.n	8007a3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	031a      	lsls	r2, r3, #12
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a18:	461a      	mov	r2, r3
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d3e2      	bcc.n	8007a0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3724      	adds	r7, #36	@ 0x24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b08b      	sub	sp, #44	@ 0x2c
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	089b      	lsrs	r3, r3, #2
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	f003 0303 	and.w	r3, r3, #3
 8007a78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	623b      	str	r3, [r7, #32]
 8007a7e:	e014      	b.n	8007aaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8e:	3301      	adds	r3, #1
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	3301      	adds	r3, #1
 8007a96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	623b      	str	r3, [r7, #32]
 8007aaa:	6a3a      	ldr	r2, [r7, #32]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d3e6      	bcc.n	8007a80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ab2:	8bfb      	ldrh	r3, [r7, #30]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01e      	beq.n	8007af6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f107 0310 	add.w	r3, r7, #16
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	701a      	strb	r2, [r3, #0]
      i++;
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007aea:	8bfb      	ldrh	r3, [r7, #30]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007af0:	8bfb      	ldrh	r3, [r7, #30]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1ea      	bne.n	8007acc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	372c      	adds	r7, #44	@ 0x2c
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	f003 0301 	and.w	r3, r3, #1
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ba0:	d901      	bls.n	8007ba6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e01b      	b.n	8007bde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	daf2      	bge.n	8007b94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f043 0201 	orr.w	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bca:	d901      	bls.n	8007bd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e006      	b.n	8007bde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d0f0      	beq.n	8007bbe <USB_CoreReset+0x36>

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bec:	b084      	sub	sp, #16
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2300      	movs	r3, #0
 8007c10:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	639a      	str	r2, [r3, #56]	@ 0x38
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) \
 || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d119      	bne.n	8007c6a <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d10a      	bne.n	8007c54 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c4c:	f043 0304 	orr.w	r3, r3, #4
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	e014      	b.n	8007c7e <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c62:	f023 0304 	bic.w	r3, r3, #4
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	e009      	b.n	8007c7e <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c78:	f023 0304 	bic.w	r3, r3, #4
 8007c7c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c7e:	2110      	movs	r1, #16
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fe49 	bl	8007918 <USB_FlushTxFifo>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fe73 	bl	800797c <USB_FlushRxFifo>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	e015      	b.n	8007cd2 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d3e3      	bcc.n	8007ca6 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2280      	movs	r2, #128	@ 0x80
 8007cf0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8007d30 <USB_HostInit+0x144>)
 8007cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8007d34 <USB_HostInit+0x148>)
 8007cfc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d105      	bne.n	8007d14 <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f043 0210 	orr.w	r2, r3, #16
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	4b07      	ldr	r3, [pc, #28]	@ (8007d38 <USB_HostInit+0x14c>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d2c:	b004      	add	sp, #16
 8007d2e:	4770      	bx	lr
 8007d30:	00600080 	.word	0x00600080
 8007d34:	004000e0 	.word	0x004000e0
 8007d38:	a3200008 	.word	0xa3200008

08007d3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d5a:	f023 0303 	bic.w	r3, r3, #3
 8007d5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007d74:	4313      	orrs	r3, r2
 8007d76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d107      	bne.n	8007d8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d84:	461a      	mov	r2, r3
 8007d86:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007d8a:	6053      	str	r3, [r2, #4]
 8007d8c:	e00c      	b.n	8007da8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d107      	bne.n	8007da4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007da0:	6053      	str	r3, [r2, #4]
 8007da2:	e001      	b.n	8007da8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e000      	b.n	8007daa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007dd6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007de4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007de6:	2064      	movs	r0, #100	@ 0x64
 8007de8:	f7f9 fb52 	bl	8001490 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007dfa:	200a      	movs	r0, #10
 8007dfc:	f7f9 fb48 	bl	8001490 <HAL_Delay>

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b085      	sub	sp, #20
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007e2e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <USB_DriveVbus+0x44>
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d106      	bne.n	8007e4e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e4c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e58:	d109      	bne.n	8007e6e <USB_DriveVbus+0x64>
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e6c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	0c5b      	lsrs	r3, r3, #17
 8007e9a:	f003 0303 	and.w	r3, r3, #3
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	b29b      	uxth	r3, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4603      	mov	r3, r0
 8007edc:	70fb      	strb	r3, [r7, #3]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70bb      	strb	r3, [r7, #2]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007efa:	461a      	mov	r2, r3
 8007efc:	f04f 33ff 	mov.w	r3, #4294967295
 8007f00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007f02:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d867      	bhi.n	8007fda <USB_HC_Init+0x10e>
 8007f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f10 <USB_HC_Init+0x44>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f9d 	.word	0x08007f9d
 8007f18:	08007f21 	.word	0x08007f21
 8007f1c:	08007f5f 	.word	0x08007f5f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007f32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007f34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da51      	bge.n	8007fe0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	0151      	lsls	r1, r2, #5
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	440a      	add	r2, r1
 8007f52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f5a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007f5c:	e040      	b.n	8007fe0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007f70:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da34      	bge.n	8007fe4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	78fa      	ldrb	r2, [r7, #3]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f98:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007f9a:	e023      	b.n	8007fe4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f240 2325 	movw	r3, #549	@ 0x225
 8007fae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007fb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	da17      	bge.n	8007fe8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd2:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007fd6:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007fd8:	e006      	b.n	8007fe8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	77fb      	strb	r3, [r7, #31]
      break;
 8007fde:	e004      	b.n	8007fea <USB_HC_Init+0x11e>
      break;
 8007fe0:	bf00      	nop
 8007fe2:	e002      	b.n	8007fea <USB_HC_Init+0x11e>
      break;
 8007fe4:	bf00      	nop
 8007fe6:	e000      	b.n	8007fea <USB_HC_Init+0x11e>
      break;
 8007fe8:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	4413      	add	r3, r2
 8008004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	0151      	lsls	r1, r2, #5
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	440a      	add	r2, r1
 8008012:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008016:	f043 0302 	orr.w	r3, r3, #2
 800801a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	2101      	movs	r1, #1
 800802c:	fa01 f303 	lsl.w	r3, r1, r3
 8008030:	6939      	ldr	r1, [r7, #16]
 8008032:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008036:	4313      	orrs	r3, r2
 8008038:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008046:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800804a:	2b00      	cmp	r3, #0
 800804c:	da03      	bge.n	8008056 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800804e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008052:	61bb      	str	r3, [r7, #24]
 8008054:	e001      	b.n	800805a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff ff0e 	bl	8007e7c <USB_GetHostSpeed>
 8008060:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008062:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008066:	2b02      	cmp	r3, #2
 8008068:	d106      	bne.n	8008078 <USB_HC_Init+0x1ac>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d003      	beq.n	8008078 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008070:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	e001      	b.n	800807c <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800807c:	787b      	ldrb	r3, [r7, #1]
 800807e:	059b      	lsls	r3, r3, #22
 8008080:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008084:	78bb      	ldrb	r3, [r7, #2]
 8008086:	02db      	lsls	r3, r3, #11
 8008088:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800808c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800808e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008092:	049b      	lsls	r3, r3, #18
 8008094:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008098:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800809a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800809c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080a0:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	431a      	orrs	r2, r3
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	0151      	lsls	r1, r2, #5
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	440a      	add	r2, r1
 80080b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80080b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080ba:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80080bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d003      	beq.n	80080cc <USB_HC_Init+0x200>
 80080c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d10f      	bne.n	80080ec <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	78fa      	ldrb	r2, [r7, #3]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080ea:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80080ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop

080080f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08c      	sub	sp, #48	@ 0x30
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008114:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	799b      	ldrb	r3, [r3, #6]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d158      	bne.n	80081d0 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800811e:	2301      	movs	r3, #1
 8008120:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800812a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	8a92      	ldrh	r2, [r2, #20]
 8008130:	fb03 f202 	mul.w	r2, r3, r2
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	61da      	str	r2, [r3, #28]
 8008138:	e079      	b.n	800822e <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	7c9b      	ldrb	r3, [r3, #18]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d130      	bne.n	80081a4 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	2bbc      	cmp	r3, #188	@ 0xbc
 8008148:	d918      	bls.n	800817c <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	8a9b      	ldrh	r3, [r3, #20]
 800814e:	461a      	mov	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	69da      	ldr	r2, [r3, #28]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d003      	beq.n	800816c <USB_HC_StartXfer+0x74>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d103      	bne.n	8008174 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2202      	movs	r2, #2
 8008170:	60da      	str	r2, [r3, #12]
 8008172:	e05c      	b.n	800822e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2201      	movs	r2, #1
 8008178:	60da      	str	r2, [r3, #12]
 800817a:	e058      	b.n	800822e <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	6a1a      	ldr	r2, [r3, #32]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d007      	beq.n	800819c <USB_HC_StartXfer+0xa4>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d003      	beq.n	800819c <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2204      	movs	r2, #4
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	e048      	b.n	800822e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2203      	movs	r2, #3
 80081a0:	60da      	str	r2, [r3, #12]
 80081a2:	e044      	b.n	800822e <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d10d      	bne.n	80081c6 <USB_HC_StartXfer+0xce>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	8a92      	ldrh	r2, [r2, #20]
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d907      	bls.n	80081c6 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	8a92      	ldrh	r2, [r2, #20]
 80081bc:	fb03 f202 	mul.w	r2, r3, r2
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	61da      	str	r2, [r3, #28]
 80081c4:	e033      	b.n	800822e <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	6a1a      	ldr	r2, [r3, #32]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	61da      	str	r2, [r3, #28]
 80081ce:	e02e      	b.n	800822e <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d018      	beq.n	800820a <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	8a92      	ldrh	r2, [r2, #20]
 80081e0:	4413      	add	r3, r2
 80081e2:	3b01      	subs	r3, #1
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	8a92      	ldrh	r2, [r2, #20]
 80081e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80081ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80081f0:	8b7b      	ldrh	r3, [r7, #26]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d90b      	bls.n	800820e <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80081f6:	8b7b      	ldrh	r3, [r7, #26]
 80081f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	8a92      	ldrh	r2, [r2, #20]
 8008200:	fb03 f202 	mul.w	r2, r3, r2
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	61da      	str	r2, [r3, #28]
 8008208:	e001      	b.n	800820e <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800820a:	2301      	movs	r3, #1
 800820c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	78db      	ldrb	r3, [r3, #3]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008216:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	8a92      	ldrh	r2, [r2, #20]
 800821c:	fb03 f202 	mul.w	r2, r3, r2
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	61da      	str	r2, [r3, #28]
 8008224:	e003      	b.n	800822e <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	6a1a      	ldr	r2, [r3, #32]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008236:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008238:	04d9      	lsls	r1, r3, #19
 800823a:	4ba4      	ldr	r3, [pc, #656]	@ (80084cc <USB_HC_StartXfer+0x3d4>)
 800823c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800823e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	7d9b      	ldrb	r3, [r3, #22]
 8008244:	075b      	lsls	r3, r3, #29
 8008246:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800824a:	69f9      	ldr	r1, [r7, #28]
 800824c:	0148      	lsls	r0, r1, #5
 800824e:	6a39      	ldr	r1, [r7, #32]
 8008250:	4401      	add	r1, r0
 8008252:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008256:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008258:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d009      	beq.n	8008274 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	6999      	ldr	r1, [r3, #24]
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	4413      	add	r3, r2
 800826c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008270:	460a      	mov	r2, r1
 8008272:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	bf0c      	ite	eq
 8008284:	2301      	moveq	r3, #1
 8008286:	2300      	movne	r3, #0
 8008288:	b2db      	uxtb	r3, r3
 800828a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	4413      	add	r3, r2
 8008294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	6a3a      	ldr	r2, [r7, #32]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80082aa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	7e7b      	ldrb	r3, [r7, #25]
 80082bc:	075b      	lsls	r3, r3, #29
 80082be:	69f9      	ldr	r1, [r7, #28]
 80082c0:	0148      	lsls	r0, r1, #5
 80082c2:	6a39      	ldr	r1, [r7, #32]
 80082c4:	4401      	add	r1, r0
 80082c6:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80082ca:	4313      	orrs	r3, r2
 80082cc:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	799b      	ldrb	r3, [r3, #6]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	f040 80c4 	bne.w	8008460 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	7c5b      	ldrb	r3, [r3, #17]
 80082dc:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80082e2:	4313      	orrs	r3, r2
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80082f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80082f4:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	0151      	lsls	r1, r2, #5
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	440a      	add	r2, r1
 800830c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008310:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008314:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	79db      	ldrb	r3, [r3, #7]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d123      	bne.n	8008366 <USB_HC_StartXfer+0x26e>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	78db      	ldrb	r3, [r3, #3]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d11f      	bne.n	8008366 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	4413      	add	r3, r2
 800832e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	6a3a      	ldr	r2, [r7, #32]
 800833a:	440a      	add	r2, r1
 800833c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008344:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	4413      	add	r3, r2
 800834e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	6a3a      	ldr	r2, [r7, #32]
 800835a:	440a      	add	r2, r1
 800835c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008364:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	7c9b      	ldrb	r3, [r3, #18]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d003      	beq.n	8008376 <USB_HC_StartXfer+0x27e>
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	7c9b      	ldrb	r3, [r3, #18]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d117      	bne.n	80083a6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800837a:	2b01      	cmp	r3, #1
 800837c:	d113      	bne.n	80083a6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	78db      	ldrb	r3, [r3, #3]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d10f      	bne.n	80083a6 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	4413      	add	r3, r2
 800838e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	0151      	lsls	r1, r2, #5
 8008398:	6a3a      	ldr	r2, [r7, #32]
 800839a:	440a      	add	r2, r1
 800839c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083a4:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	7c9b      	ldrb	r3, [r3, #18]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d163      	bne.n	8008476 <USB_HC_StartXfer+0x37e>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	78db      	ldrb	r3, [r3, #3]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d15f      	bne.n	8008476 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d859      	bhi.n	8008474 <USB_HC_StartXfer+0x37c>
 80083c0:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <USB_HC_StartXfer+0x2d0>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083fb 	.word	0x080083fb
 80083d0:	0800841d 	.word	0x0800841d
 80083d4:	0800843f 	.word	0x0800843f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	6a3a      	ldr	r2, [r7, #32]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083f6:	6053      	str	r3, [r2, #4]
          break;
 80083f8:	e03d      	b.n	8008476 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	4413      	add	r3, r2
 8008402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	0151      	lsls	r1, r2, #5
 800840c:	6a3a      	ldr	r2, [r7, #32]
 800840e:	440a      	add	r2, r1
 8008410:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008414:	f043 030e 	orr.w	r3, r3, #14
 8008418:	6053      	str	r3, [r2, #4]
          break;
 800841a:	e02c      	b.n	8008476 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	4413      	add	r3, r2
 8008424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	6a3a      	ldr	r2, [r7, #32]
 8008430:	440a      	add	r2, r1
 8008432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800843a:	6053      	str	r3, [r2, #4]
          break;
 800843c:	e01b      	b.n	8008476 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	4413      	add	r3, r2
 8008446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	0151      	lsls	r1, r2, #5
 8008450:	6a3a      	ldr	r2, [r7, #32]
 8008452:	440a      	add	r2, r1
 8008454:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800845c:	6053      	str	r3, [r2, #4]
          break;
 800845e:	e00a      	b.n	8008476 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	4413      	add	r3, r2
 8008468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800846c:	461a      	mov	r2, r3
 800846e:	2300      	movs	r3, #0
 8008470:	6053      	str	r3, [r2, #4]
 8008472:	e000      	b.n	8008476 <USB_HC_StartXfer+0x37e>
          break;
 8008474:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	4413      	add	r3, r2
 800847e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800848c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	78db      	ldrb	r3, [r3, #3]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	e003      	b.n	80084a8 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084a6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084ae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084bc:	461a      	mov	r2, r3
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	e055      	b.n	8008578 <USB_HC_StartXfer+0x480>
 80084cc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	78db      	ldrb	r3, [r3, #3]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d14e      	bne.n	8008576 <USB_HC_StartXfer+0x47e>
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d04a      	beq.n	8008576 <USB_HC_StartXfer+0x47e>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	79db      	ldrb	r3, [r3, #7]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d146      	bne.n	8008576 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	7c9b      	ldrb	r3, [r3, #18]
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d831      	bhi.n	8008554 <USB_HC_StartXfer+0x45c>
 80084f0:	a201      	add	r2, pc, #4	@ (adr r2, 80084f8 <USB_HC_StartXfer+0x400>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008509 	.word	0x08008509
 80084fc:	0800852d 	.word	0x0800852d
 8008500:	08008509 	.word	0x08008509
 8008504:	0800852d 	.word	0x0800852d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	3303      	adds	r3, #3
 800850e:	089b      	lsrs	r3, r3, #2
 8008510:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008512:	8afa      	ldrh	r2, [r7, #22]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008518:	b29b      	uxth	r3, r3
 800851a:	429a      	cmp	r2, r3
 800851c:	d91c      	bls.n	8008558 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	f043 0220 	orr.w	r2, r3, #32
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	619a      	str	r2, [r3, #24]
        }
        break;
 800852a:	e015      	b.n	8008558 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	3303      	adds	r3, #3
 8008532:	089b      	lsrs	r3, r3, #2
 8008534:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008536:	8afa      	ldrh	r2, [r7, #22]
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	b29b      	uxth	r3, r3
 8008542:	429a      	cmp	r2, r3
 8008544:	d90a      	bls.n	800855c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	619a      	str	r2, [r3, #24]
        }
        break;
 8008552:	e003      	b.n	800855c <USB_HC_StartXfer+0x464>

      default:
        break;
 8008554:	bf00      	nop
 8008556:	e002      	b.n	800855e <USB_HC_StartXfer+0x466>
        break;
 8008558:	bf00      	nop
 800855a:	e000      	b.n	800855e <USB_HC_StartXfer+0x466>
        break;
 800855c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	6999      	ldr	r1, [r3, #24]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	785a      	ldrb	r2, [r3, #1]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	b29b      	uxth	r3, r3
 800856c:	2000      	movs	r0, #0
 800856e:	9000      	str	r0, [sp, #0]
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7ff fa31 	bl	80079d8 <USB_WritePacket>
  }

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3728      	adds	r7, #40	@ 0x28
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	b29b      	uxth	r3, r3
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b089      	sub	sp, #36	@ 0x24
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	0c9b      	lsrs	r3, r3, #18
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	0fdb      	lsrs	r3, r3, #31
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	0fdb      	lsrs	r3, r3, #31
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f003 0320 	and.w	r3, r3, #32
 8008604:	2b20      	cmp	r3, #32
 8008606:	d10d      	bne.n	8008624 <USB_HC_Halt+0x82>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <USB_HC_Halt+0x82>
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d002      	beq.n	8008620 <USB_HC_Halt+0x7e>
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b03      	cmp	r3, #3
 800861e:	d101      	bne.n	8008624 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	e0d8      	b.n	80087d6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <USB_HC_Halt+0x8e>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2b02      	cmp	r3, #2
 800862e:	d173      	bne.n	8008718 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	4413      	add	r3, r2
 8008638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	440a      	add	r2, r1
 8008646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800864a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800864e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 0320 	and.w	r3, r3, #32
 8008658:	2b00      	cmp	r3, #0
 800865a:	d14a      	bne.n	80086f2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008660:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d133      	bne.n	80086d0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	4413      	add	r3, r2
 8008670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	0151      	lsls	r1, r2, #5
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	440a      	add	r2, r1
 800867e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008682:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008686:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	4413      	add	r3, r2
 8008690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	69fa      	ldr	r2, [r7, #28]
 800869c:	440a      	add	r2, r1
 800869e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086a6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086b4:	d82e      	bhi.n	8008714 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086cc:	d0ec      	beq.n	80086a8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086ce:	e081      	b.n	80087d4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086ee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086f0:	e070      	b.n	80087d4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	69fa      	ldr	r2, [r7, #28]
 8008706:	440a      	add	r2, r1
 8008708:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800870c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008710:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008712:	e05f      	b.n	80087d4 <USB_HC_Halt+0x232>
            break;
 8008714:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008716:	e05d      	b.n	80087d4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	440a      	add	r2, r1
 800872e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008732:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008736:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d133      	bne.n	80087b0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	440a      	add	r2, r1
 800875e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008762:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008766:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	440a      	add	r2, r1
 800877e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008786:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	3301      	adds	r3, #1
 800878c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008794:	d81d      	bhi.n	80087d2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	4413      	add	r3, r2
 800879e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ac:	d0ec      	beq.n	8008788 <USB_HC_Halt+0x1e6>
 80087ae:	e011      	b.n	80087d4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	e000      	b.n	80087d4 <USB_HC_Halt+0x232>
          break;
 80087d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3724      	adds	r7, #36	@ 0x24
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b088      	sub	sp, #32
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff f831 	bl	800785e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087fc:	2110      	movs	r1, #16
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff f88a 	bl	8007918 <USB_FlushTxFifo>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff f8b4 	bl	800797c <USB_FlushRxFifo>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800881e:	2300      	movs	r3, #0
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	e01f      	b.n	8008864 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	4413      	add	r3, r2
 800882c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800883a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008842:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800884a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008858:	461a      	mov	r2, r3
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	3301      	adds	r3, #1
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	2b0f      	cmp	r3, #15
 8008868:	d9dc      	bls.n	8008824 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800886a:	2300      	movs	r3, #0
 800886c:	61bb      	str	r3, [r7, #24]
 800886e:	e034      	b.n	80088da <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008886:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800888e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008896:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a4:	461a      	mov	r2, r3
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088b6:	d80c      	bhi.n	80088d2 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088ce:	d0ec      	beq.n	80088aa <USB_StopHost+0xc8>
 80088d0:	e000      	b.n	80088d4 <USB_StopHost+0xf2>
        break;
 80088d2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	3301      	adds	r3, #1
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b0f      	cmp	r3, #15
 80088de:	d9c7      	bls.n	8008870 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088e6:	461a      	mov	r2, r3
 80088e8:	f04f 33ff 	mov.w	r3, #4294967295
 80088ec:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f04f 32ff 	mov.w	r2, #4294967295
 80088f4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7fe ffa0 	bl	800783c <USB_EnableGlobalInt>

  return ret;
 80088fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3720      	adds	r7, #32
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008906:	b590      	push	{r4, r7, lr}
 8008908:	b089      	sub	sp, #36	@ 0x24
 800890a:	af04      	add	r7, sp, #16
 800890c:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800890e:	2301      	movs	r3, #1
 8008910:	2202      	movs	r2, #2
 8008912:	2102      	movs	r1, #2
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fc86 	bl	8009226 <USBH_FindInterface>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	2bff      	cmp	r3, #255	@ 0xff
 8008922:	d002      	beq.n	800892a <USBH_CDC_InterfaceInit+0x24>
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d901      	bls.n	800892e <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800892a:	2302      	movs	r3, #2
 800892c:	e13d      	b.n	8008baa <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fc5b 	bl	80091ee <USBH_SelectInterface>
 8008938:	4603      	mov	r3, r0
 800893a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008942:	2302      	movs	r3, #2
 8008944:	e131      	b.n	8008baa <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800894c:	2050      	movs	r0, #80	@ 0x50
 800894e:	f002 fb6d 	bl	800b02c <malloc>
 8008952:	4603      	mov	r3, r0
 8008954:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008966:	2302      	movs	r3, #2
 8008968:	e11f      	b.n	8008baa <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800896a:	2250      	movs	r2, #80	@ 0x50
 800896c:	2100      	movs	r1, #0
 800896e:	68b8      	ldr	r0, [r7, #8]
 8008970:	f002 fc1a 	bl	800b1a8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	211a      	movs	r1, #26
 800897a:	fb01 f303 	mul.w	r3, r1, r3
 800897e:	4413      	add	r3, r2
 8008980:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	b25b      	sxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	da15      	bge.n	80089b8 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	211a      	movs	r1, #26
 8008992:	fb01 f303 	mul.w	r3, r1, r3
 8008996:	4413      	add	r3, r2
 8008998:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	211a      	movs	r1, #26
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80089b2:	881a      	ldrh	r2, [r3, #0]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	785b      	ldrb	r3, [r3, #1]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 ffbf 	bl	800a942 <USBH_AllocPipe>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	7819      	ldrb	r1, [r3, #0]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	7858      	ldrb	r0, [r3, #1]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	8952      	ldrh	r2, [r2, #10]
 80089e4:	9202      	str	r2, [sp, #8]
 80089e6:	2203      	movs	r2, #3
 80089e8:	9201      	str	r2, [sp, #4]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	4623      	mov	r3, r4
 80089ee:	4602      	mov	r2, r0
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 ff77 	bl	800a8e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2200      	movs	r2, #0
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f002 fa8e 	bl	800af20 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008a04:	2300      	movs	r3, #0
 8008a06:	2200      	movs	r2, #0
 8008a08:	210a      	movs	r1, #10
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fc0b 	bl	8009226 <USBH_FindInterface>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	2bff      	cmp	r3, #255	@ 0xff
 8008a18:	d002      	beq.n	8008a20 <USBH_CDC_InterfaceInit+0x11a>
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d901      	bls.n	8008a24 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a20:	2302      	movs	r3, #2
 8008a22:	e0c2      	b.n	8008baa <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	211a      	movs	r1, #26
 8008a2a:	fb01 f303 	mul.w	r3, r1, r3
 8008a2e:	4413      	add	r3, r2
 8008a30:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b25b      	sxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	da16      	bge.n	8008a6a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	211a      	movs	r1, #26
 8008a42:	fb01 f303 	mul.w	r3, r1, r3
 8008a46:	4413      	add	r3, r2
 8008a48:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	211a      	movs	r1, #26
 8008a58:	fb01 f303 	mul.w	r3, r1, r3
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a62:	881a      	ldrh	r2, [r3, #0]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	835a      	strh	r2, [r3, #26]
 8008a68:	e015      	b.n	8008a96 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	211a      	movs	r1, #26
 8008a70:	fb01 f303 	mul.w	r3, r1, r3
 8008a74:	4413      	add	r3, r2
 8008a76:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	211a      	movs	r1, #26
 8008a86:	fb01 f303 	mul.w	r3, r1, r3
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a90:	881a      	ldrh	r2, [r3, #0]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	211a      	movs	r1, #26
 8008a9c:	fb01 f303 	mul.w	r3, r1, r3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	da16      	bge.n	8008adc <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	211a      	movs	r1, #26
 8008ab4:	fb01 f303 	mul.w	r3, r1, r3
 8008ab8:	4413      	add	r3, r2
 8008aba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008abe:	781a      	ldrb	r2, [r3, #0]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	211a      	movs	r1, #26
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008ad4:	881a      	ldrh	r2, [r3, #0]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	835a      	strh	r2, [r3, #26]
 8008ada:	e015      	b.n	8008b08 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	211a      	movs	r1, #26
 8008ae2:	fb01 f303 	mul.w	r3, r1, r3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008aec:	781a      	ldrb	r2, [r3, #0]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	211a      	movs	r1, #26
 8008af8:	fb01 f303 	mul.w	r3, r1, r3
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008b02:	881a      	ldrh	r2, [r3, #0]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	7b9b      	ldrb	r3, [r3, #14]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f001 ff17 	bl	800a942 <USBH_AllocPipe>
 8008b14:	4603      	mov	r3, r0
 8008b16:	461a      	mov	r2, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	7bdb      	ldrb	r3, [r3, #15]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 ff0d 	bl	800a942 <USBH_AllocPipe>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	7b59      	ldrb	r1, [r3, #13]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	7b98      	ldrb	r0, [r3, #14]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	8b12      	ldrh	r2, [r2, #24]
 8008b48:	9202      	str	r2, [sp, #8]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	9201      	str	r2, [sp, #4]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	4623      	mov	r3, r4
 8008b52:	4602      	mov	r2, r0
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 fec5 	bl	800a8e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	7b19      	ldrb	r1, [r3, #12]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	7bd8      	ldrb	r0, [r3, #15]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	8b52      	ldrh	r2, [r2, #26]
 8008b72:	9202      	str	r2, [sp, #8]
 8008b74:	2202      	movs	r2, #2
 8008b76:	9201      	str	r2, [sp, #4]
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 feb0 	bl	800a8e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	7b5b      	ldrb	r3, [r3, #13]
 8008b90:	2200      	movs	r2, #0
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f002 f9c3 	bl	800af20 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	7b1b      	ldrb	r3, [r3, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f002 f9bc 	bl	800af20 <USBH_LL_SetToggle>

  return USBH_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd90      	pop	{r4, r7, pc}

08008bb2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00e      	beq.n	8008bea <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 fea5 	bl	800a922 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fed0 	bl	800a984 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	7b1b      	ldrb	r3, [r3, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00e      	beq.n	8008c10 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	7b1b      	ldrb	r3, [r3, #12]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 fe92 	bl	800a922 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7b1b      	ldrb	r3, [r3, #12]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 febd 	bl	800a984 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	7b5b      	ldrb	r3, [r3, #13]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00e      	beq.n	8008c36 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	7b5b      	ldrb	r3, [r3, #13]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 fe7f 	bl	800a922 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	7b5b      	ldrb	r3, [r3, #13]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 feaa 	bl	800a984 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00b      	beq.n	8008c5a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f002 f9f6 	bl	800b03c <free>
    phost->pActiveClass->pData = 0U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c56:	2200      	movs	r2, #0
 8008c58:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3340      	adds	r3, #64	@ 0x40
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f8b2 	bl	8008de6 <GetLineCoding>
 8008c82:	4603      	mov	r3, r0
 8008c84:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d105      	bne.n	8008c98 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c92:	2102      	movs	r1, #2
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d877      	bhi.n	8008db8 <USBH_CDC_Process+0x114>
 8008cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd0 <USBH_CDC_Process+0x2c>)
 8008cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cce:	bf00      	nop
 8008cd0:	08008ce5 	.word	0x08008ce5
 8008cd4:	08008ceb 	.word	0x08008ceb
 8008cd8:	08008d1b 	.word	0x08008d1b
 8008cdc:	08008d8f 	.word	0x08008d8f
 8008ce0:	08008d9d 	.word	0x08008d9d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce8:	e06d      	b.n	8008dc6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f897 	bl	8008e24 <SetLineCoding>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d104      	bne.n	8008d0a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008d08:	e058      	b.n	8008dbc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d055      	beq.n	8008dbc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2204      	movs	r2, #4
 8008d14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008d18:	e050      	b.n	8008dbc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	3340      	adds	r3, #64	@ 0x40
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f860 	bl	8008de6 <GetLineCoding>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d126      	bne.n	8008d7e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d42:	791b      	ldrb	r3, [r3, #4]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d13b      	bne.n	8008dc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d52:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d133      	bne.n	8008dc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d62:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d12b      	bne.n	8008dc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d70:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d124      	bne.n	8008dc0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f958 	bl	800902c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008d7c:	e020      	b.n	8008dc0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d01d      	beq.n	8008dc0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2204      	movs	r2, #4
 8008d88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008d8c:	e018      	b.n	8008dc0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f867 	bl	8008e62 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f8da 	bl	8008f4e <CDC_ProcessReception>
      break;
 8008d9a:	e014      	b.n	8008dc6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 f81a 	bl	8009dd8 <USBH_ClrFeature>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008db6:	e005      	b.n	8008dc4 <USBH_CDC_Process+0x120>

    default:
      break;
 8008db8:	bf00      	nop
 8008dba:	e004      	b.n	8008dc6 <USBH_CDC_Process+0x122>
      break;
 8008dbc:	bf00      	nop
 8008dbe:	e002      	b.n	8008dc6 <USBH_CDC_Process+0x122>
      break;
 8008dc0:	bf00      	nop
 8008dc2:	e000      	b.n	8008dc6 <USBH_CDC_Process+0x122>
      break;
 8008dc4:	bf00      	nop

  }

  return status;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	22a1      	movs	r2, #161	@ 0xa1
 8008df4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2221      	movs	r2, #33	@ 0x21
 8008dfa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2207      	movs	r2, #7
 8008e0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2207      	movs	r2, #7
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 fb14 	bl	800a442 <USBH_CtlReq>
 8008e1a:	4603      	mov	r3, r0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2221      	movs	r2, #33	@ 0x21
 8008e32:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2207      	movs	r2, #7
 8008e4a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2207      	movs	r2, #7
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 faf5 	bl	800a442 <USBH_CtlReq>
 8008e58:	4603      	mov	r3, r0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af02      	add	r7, sp, #8
 8008e68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d002      	beq.n	8008e88 <CDC_ProcessTransmission+0x26>
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d023      	beq.n	8008ece <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008e86:	e05e      	b.n	8008f46 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	8b12      	ldrh	r2, [r2, #24]
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d90b      	bls.n	8008eac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	69d9      	ldr	r1, [r3, #28]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8b1a      	ldrh	r2, [r3, #24]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	7b5b      	ldrb	r3, [r3, #13]
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	9000      	str	r0, [sp, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 fcda 	bl	800a85e <USBH_BulkSendData>
 8008eaa:	e00b      	b.n	8008ec4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	7b5b      	ldrb	r3, [r3, #13]
 8008eba:	2001      	movs	r0, #1
 8008ebc:	9000      	str	r0, [sp, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 fccd 	bl	800a85e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ecc:	e03b      	b.n	8008f46 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	7b5b      	ldrb	r3, [r3, #13]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 fff9 	bl	800aecc <USBH_LL_GetURBState>
 8008eda:	4603      	mov	r3, r0
 8008edc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d128      	bne.n	8008f36 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	8b12      	ldrh	r2, [r2, #24]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d90e      	bls.n	8008f0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	8b12      	ldrh	r2, [r2, #24]
 8008ef8:	1a9a      	subs	r2, r3, r2
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	8b12      	ldrh	r2, [r2, #24]
 8008f06:	441a      	add	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	61da      	str	r2, [r3, #28]
 8008f0c:	e002      	b.n	8008f14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008f24:	e00e      	b.n	8008f44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f868 	bl	8009004 <USBH_CDC_TransmitCallback>
      break;
 8008f34:	e006      	b.n	8008f44 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008f36:	7afb      	ldrb	r3, [r7, #11]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d103      	bne.n	8008f44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008f44:	bf00      	nop
  }
}
 8008f46:	bf00      	nop
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f60:	2300      	movs	r3, #0
 8008f62:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d002      	beq.n	8008f74 <CDC_ProcessReception+0x26>
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d00e      	beq.n	8008f90 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008f72:	e043      	b.n	8008ffc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	6a19      	ldr	r1, [r3, #32]
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	8b5a      	ldrh	r2, [r3, #26]
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	7b1b      	ldrb	r3, [r3, #12]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 fc91 	bl	800a8a8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2204      	movs	r2, #4
 8008f8a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008f8e:	e035      	b.n	8008ffc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	7b1b      	ldrb	r3, [r3, #12]
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 ff98 	bl	800aecc <USBH_LL_GetURBState>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008fa0:	7cfb      	ldrb	r3, [r7, #19]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d129      	bne.n	8008ffa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	7b1b      	ldrb	r3, [r3, #12]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 fefb 	bl	800ada8 <USBH_LL_GetLastXferSize>
 8008fb2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d016      	beq.n	8008fec <CDC_ProcessReception+0x9e>
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	8b5b      	ldrh	r3, [r3, #26]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d910      	bls.n	8008fec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	1ad2      	subs	r2, r2, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	6a1a      	ldr	r2, [r3, #32]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	441a      	add	r2, r3
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008fea:	e006      	b.n	8008ffa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f80f 	bl	8009018 <USBH_CDC_ReceiveCallback>
      break;
 8008ffa:	bf00      	nop
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009054:	2302      	movs	r3, #2
 8009056:	e029      	b.n	80090ac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	79fa      	ldrb	r2, [r7, #7]
 800905c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 f81f 	bl	80090b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f001 fdcb 	bl	800ac40 <USBH_LL_Init>

  return USBH_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80090c0:	2300      	movs	r3, #0
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e009      	b.n	80090da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	33e0      	adds	r3, #224	@ 0xe0
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	2200      	movs	r2, #0
 80090d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3301      	adds	r3, #1
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b0f      	cmp	r3, #15
 80090de:	d9f2      	bls.n	80090c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e009      	b.n	80090fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090f0:	2200      	movs	r2, #0
 80090f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009100:	d3f1      	bcc.n	80090e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2240      	movs	r2, #64	@ 0x40
 8009126:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	331c      	adds	r3, #28
 8009152:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009156:	2100      	movs	r1, #0
 8009158:	4618      	mov	r0, r3
 800915a:	f002 f825 	bl	800b1a8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009168:	2100      	movs	r1, #0
 800916a:	4618      	mov	r0, r3
 800916c:	f002 f81c 	bl	800b1a8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009176:	2212      	movs	r2, #18
 8009178:	2100      	movs	r1, #0
 800917a:	4618      	mov	r0, r3
 800917c:	f002 f814 	bl	800b1a8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009186:	223e      	movs	r2, #62	@ 0x3e
 8009188:	2100      	movs	r1, #0
 800918a:	4618      	mov	r0, r3
 800918c:	f002 f80c 	bl	800b1a8 <memset>

  return USBH_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800919a:	b480      	push	{r7}
 800919c:	b085      	sub	sp, #20
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d016      	beq.n	80091dc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10e      	bne.n	80091d6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80091be:	1c59      	adds	r1, r3, #1
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	33de      	adds	r3, #222	@ 0xde
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
 80091d4:	e004      	b.n	80091e0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80091d6:	2302      	movs	r3, #2
 80091d8:	73fb      	strb	r3, [r7, #15]
 80091da:	e001      	b.n	80091e0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80091dc:	2302      	movs	r3, #2
 80091de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	429a      	cmp	r2, r3
 8009208:	d204      	bcs.n	8009214 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009212:	e001      	b.n	8009218 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009214:	2302      	movs	r3, #2
 8009216:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009226:	b480      	push	{r7}
 8009228:	b087      	sub	sp, #28
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	4608      	mov	r0, r1
 8009230:	4611      	mov	r1, r2
 8009232:	461a      	mov	r2, r3
 8009234:	4603      	mov	r3, r0
 8009236:	70fb      	strb	r3, [r7, #3]
 8009238:	460b      	mov	r3, r1
 800923a:	70bb      	strb	r3, [r7, #2]
 800923c:	4613      	mov	r3, r2
 800923e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800924e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009250:	e025      	b.n	800929e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	221a      	movs	r2, #26
 8009256:	fb02 f303 	mul.w	r3, r2, r3
 800925a:	3308      	adds	r3, #8
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	3302      	adds	r3, #2
 8009262:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	795b      	ldrb	r3, [r3, #5]
 8009268:	78fa      	ldrb	r2, [r7, #3]
 800926a:	429a      	cmp	r2, r3
 800926c:	d002      	beq.n	8009274 <USBH_FindInterface+0x4e>
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	2bff      	cmp	r3, #255	@ 0xff
 8009272:	d111      	bne.n	8009298 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009278:	78ba      	ldrb	r2, [r7, #2]
 800927a:	429a      	cmp	r2, r3
 800927c:	d002      	beq.n	8009284 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800927e:	78bb      	ldrb	r3, [r7, #2]
 8009280:	2bff      	cmp	r3, #255	@ 0xff
 8009282:	d109      	bne.n	8009298 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009288:	787a      	ldrb	r2, [r7, #1]
 800928a:	429a      	cmp	r2, r3
 800928c:	d002      	beq.n	8009294 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800928e:	787b      	ldrb	r3, [r7, #1]
 8009290:	2bff      	cmp	r3, #255	@ 0xff
 8009292:	d101      	bne.n	8009298 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	e006      	b.n	80092a6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	3301      	adds	r3, #1
 800929c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d9d6      	bls.n	8009252 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80092a4:	23ff      	movs	r3, #255	@ 0xff
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 fcfc 	bl	800acb8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80092c0:	2101      	movs	r1, #1
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 fe15 	bl	800aef2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af04      	add	r7, sp, #16
 80092da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80092dc:	2302      	movs	r3, #2
 80092de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d102      	bne.n	80092f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2203      	movs	r2, #3
 80092f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b0b      	cmp	r3, #11
 80092fe:	f200 81bb 	bhi.w	8009678 <USBH_Process+0x3a4>
 8009302:	a201      	add	r2, pc, #4	@ (adr r2, 8009308 <USBH_Process+0x34>)
 8009304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009308:	08009339 	.word	0x08009339
 800930c:	0800936b 	.word	0x0800936b
 8009310:	080093d3 	.word	0x080093d3
 8009314:	08009613 	.word	0x08009613
 8009318:	08009679 	.word	0x08009679
 800931c:	08009473 	.word	0x08009473
 8009320:	080095b9 	.word	0x080095b9
 8009324:	080094a9 	.word	0x080094a9
 8009328:	080094c9 	.word	0x080094c9
 800932c:	080094e7 	.word	0x080094e7
 8009330:	0800952b 	.word	0x0800952b
 8009334:	080095fb 	.word	0x080095fb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 819b 	beq.w	800967c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800934c:	20c8      	movs	r0, #200	@ 0xc8
 800934e:	f001 fe1a 	bl	800af86 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fd0d 	bl	800ad72 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009368:	e188      	b.n	800967c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009370:	2b01      	cmp	r3, #1
 8009372:	d107      	bne.n	8009384 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009382:	e18a      	b.n	800969a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800938a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800938e:	d914      	bls.n	80093ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009396:	3301      	adds	r3, #1
 8009398:	b2da      	uxtb	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d903      	bls.n	80093b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	220d      	movs	r2, #13
 80093ae:	701a      	strb	r2, [r3, #0]
      break;
 80093b0:	e173      	b.n	800969a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]
      break;
 80093b8:	e16f      	b.n	800969a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80093c0:	f103 020a 	add.w	r2, r3, #10
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80093ca:	200a      	movs	r0, #10
 80093cc:	f001 fddb 	bl	800af86 <USBH_Delay>
      break;
 80093d0:	e163      	b.n	800969a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093e2:	2104      	movs	r1, #4
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80093e8:	2064      	movs	r0, #100	@ 0x64
 80093ea:	f001 fdcc 	bl	800af86 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fc98 	bl	800ad24 <USBH_LL_GetSpeed>
 80093f4:	4603      	mov	r3, r0
 80093f6:	461a      	mov	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2205      	movs	r2, #5
 8009402:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009404:	2100      	movs	r1, #0
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 fa9b 	bl	800a942 <USBH_AllocPipe>
 800940c:	4603      	mov	r3, r0
 800940e:	461a      	mov	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009414:	2180      	movs	r1, #128	@ 0x80
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 fa93 	bl	800a942 <USBH_AllocPipe>
 800941c:	4603      	mov	r3, r0
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7919      	ldrb	r1, [r3, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009438:	9202      	str	r2, [sp, #8]
 800943a:	2200      	movs	r2, #0
 800943c:	9201      	str	r2, [sp, #4]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	4603      	mov	r3, r0
 8009442:	2280      	movs	r2, #128	@ 0x80
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 fa4d 	bl	800a8e4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	7959      	ldrb	r1, [r3, #5]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800945e:	9202      	str	r2, [sp, #8]
 8009460:	2200      	movs	r2, #0
 8009462:	9201      	str	r2, [sp, #4]
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	4603      	mov	r3, r0
 8009468:	2200      	movs	r2, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fa3a 	bl	800a8e4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009470:	e113      	b.n	800969a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f916 	bl	80096a4 <USBH_HandleEnum>
 8009478:	4603      	mov	r3, r0
 800947a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	f040 80fd 	bne.w	8009680 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009494:	2b01      	cmp	r3, #1
 8009496:	d103      	bne.n	80094a0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2208      	movs	r2, #8
 800949c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800949e:	e0ef      	b.n	8009680 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2207      	movs	r2, #7
 80094a4:	701a      	strb	r2, [r3, #0]
      break;
 80094a6:	e0eb      	b.n	8009680 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 80e8 	beq.w	8009684 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80094ba:	2101      	movs	r1, #1
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2208      	movs	r2, #8
 80094c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80094c6:	e0dd      	b.n	8009684 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fc3a 	bl	8009d4a <USBH_SetCfg>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f040 80d5 	bne.w	8009688 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2209      	movs	r2, #9
 80094e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094e4:	e0d0      	b.n	8009688 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80094ec:	f003 0320 	and.w	r3, r3, #32
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d016      	beq.n	8009522 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80094f4:	2101      	movs	r1, #1
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fc4a 	bl	8009d90 <USBH_SetFeature>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d103      	bne.n	8009510 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	220a      	movs	r2, #10
 800950c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800950e:	e0bd      	b.n	800968c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b03      	cmp	r3, #3
 8009516:	f040 80b9 	bne.w	800968c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	220a      	movs	r2, #10
 800951e:	701a      	strb	r2, [r3, #0]
      break;
 8009520:	e0b4      	b.n	800968c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	220a      	movs	r2, #10
 8009526:	701a      	strb	r2, [r3, #0]
      break;
 8009528:	e0b0      	b.n	800968c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 80ad 	beq.w	8009690 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
 8009542:	e016      	b.n	8009572 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009544:	7bfa      	ldrb	r2, [r7, #15]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	32de      	adds	r2, #222	@ 0xde
 800954a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954e:	791a      	ldrb	r2, [r3, #4]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009556:	429a      	cmp	r2, r3
 8009558:	d108      	bne.n	800956c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800955a:	7bfa      	ldrb	r2, [r7, #15]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	32de      	adds	r2, #222	@ 0xde
 8009560:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800956a:	e005      	b.n	8009578 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	3301      	adds	r3, #1
 8009570:	73fb      	strb	r3, [r7, #15]
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0e5      	beq.n	8009544 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d016      	beq.n	80095b0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2206      	movs	r2, #6
 8009598:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095a0:	2103      	movs	r1, #3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095a6:	e073      	b.n	8009690 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	220d      	movs	r2, #13
 80095ac:	701a      	strb	r2, [r3, #0]
      break;
 80095ae:	e06f      	b.n	8009690 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	220d      	movs	r2, #13
 80095b4:	701a      	strb	r2, [r3, #0]
      break;
 80095b6:	e06b      	b.n	8009690 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d017      	beq.n	80095f2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4798      	blx	r3
 80095ce:	4603      	mov	r3, r0
 80095d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d103      	bne.n	80095e2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	220b      	movs	r2, #11
 80095de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095e0:	e058      	b.n	8009694 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d154      	bne.n	8009694 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	220d      	movs	r2, #13
 80095ee:	701a      	strb	r2, [r3, #0]
      break;
 80095f0:	e050      	b.n	8009694 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	220d      	movs	r2, #13
 80095f6:	701a      	strb	r2, [r3, #0]
      break;
 80095f8:	e04c      	b.n	8009694 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009600:	2b00      	cmp	r3, #0
 8009602:	d049      	beq.n	8009698 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	4798      	blx	r3
      }
      break;
 8009610:	e042      	b.n	8009698 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff fd4a 	bl	80090b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800964e:	2105      	movs	r1, #5
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b01      	cmp	r3, #1
 800965e:	d107      	bne.n	8009670 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff fe22 	bl	80092b2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800966e:	e014      	b.n	800969a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 fb21 	bl	800acb8 <USBH_LL_Start>
      break;
 8009676:	e010      	b.n	800969a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009678:	bf00      	nop
 800967a:	e00e      	b.n	800969a <USBH_Process+0x3c6>
      break;
 800967c:	bf00      	nop
 800967e:	e00c      	b.n	800969a <USBH_Process+0x3c6>
      break;
 8009680:	bf00      	nop
 8009682:	e00a      	b.n	800969a <USBH_Process+0x3c6>
    break;
 8009684:	bf00      	nop
 8009686:	e008      	b.n	800969a <USBH_Process+0x3c6>
      break;
 8009688:	bf00      	nop
 800968a:	e006      	b.n	800969a <USBH_Process+0x3c6>
      break;
 800968c:	bf00      	nop
 800968e:	e004      	b.n	800969a <USBH_Process+0x3c6>
      break;
 8009690:	bf00      	nop
 8009692:	e002      	b.n	800969a <USBH_Process+0x3c6>
      break;
 8009694:	bf00      	nop
 8009696:	e000      	b.n	800969a <USBH_Process+0x3c6>
      break;
 8009698:	bf00      	nop
  }
  return USBH_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af04      	add	r7, sp, #16
 80096aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80096ac:	2301      	movs	r3, #1
 80096ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80096b0:	2301      	movs	r3, #1
 80096b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	785b      	ldrb	r3, [r3, #1]
 80096b8:	2b07      	cmp	r3, #7
 80096ba:	f200 81bd 	bhi.w	8009a38 <USBH_HandleEnum+0x394>
 80096be:	a201      	add	r2, pc, #4	@ (adr r2, 80096c4 <USBH_HandleEnum+0x20>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	080096e5 	.word	0x080096e5
 80096c8:	0800979f 	.word	0x0800979f
 80096cc:	08009809 	.word	0x08009809
 80096d0:	08009893 	.word	0x08009893
 80096d4:	080098fd 	.word	0x080098fd
 80096d8:	0800996d 	.word	0x0800996d
 80096dc:	080099b3 	.word	0x080099b3
 80096e0:	080099f9 	.word	0x080099f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80096e4:	2108      	movs	r1, #8
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa4c 	bl	8009b84 <USBH_Get_DevDesc>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d12e      	bne.n	8009754 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	7919      	ldrb	r1, [r3, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800971a:	9202      	str	r2, [sp, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	9201      	str	r2, [sp, #4]
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4603      	mov	r3, r0
 8009724:	2280      	movs	r2, #128	@ 0x80
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 f8dc 	bl	800a8e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	7959      	ldrb	r1, [r3, #5]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009740:	9202      	str	r2, [sp, #8]
 8009742:	2200      	movs	r2, #0
 8009744:	9201      	str	r2, [sp, #4]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	4603      	mov	r3, r0
 800974a:	2200      	movs	r2, #0
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 f8c9 	bl	800a8e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009752:	e173      	b.n	8009a3c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	2b03      	cmp	r3, #3
 8009758:	f040 8170 	bne.w	8009a3c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009762:	3301      	adds	r3, #1
 8009764:	b2da      	uxtb	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009772:	2b03      	cmp	r3, #3
 8009774:	d903      	bls.n	800977e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	220d      	movs	r2, #13
 800977a:	701a      	strb	r2, [r3, #0]
      break;
 800977c:	e15e      	b.n	8009a3c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	795b      	ldrb	r3, [r3, #5]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f8fd 	bl	800a984 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	791b      	ldrb	r3, [r3, #4]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f001 f8f7 	bl	800a984 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
      break;
 800979c:	e14e      	b.n	8009a3c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800979e:	2112      	movs	r1, #18
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f9ef 	bl	8009b84 <USBH_Get_DevDesc>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d103      	bne.n	80097b8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097b6:	e143      	b.n	8009a40 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	f040 8140 	bne.w	8009a40 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80097c6:	3301      	adds	r3, #1
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d903      	bls.n	80097e2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	220d      	movs	r2, #13
 80097de:	701a      	strb	r2, [r3, #0]
      break;
 80097e0:	e12e      	b.n	8009a40 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	795b      	ldrb	r3, [r3, #5]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f001 f8cb 	bl	800a984 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	791b      	ldrb	r3, [r3, #4]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 f8c5 	bl	800a984 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	701a      	strb	r2, [r3, #0]
      break;
 8009806:	e11b      	b.n	8009a40 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009808:	2101      	movs	r1, #1
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa79 	bl	8009d02 <USBH_SetAddress>
 8009810:	4603      	mov	r3, r0
 8009812:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d130      	bne.n	800987c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800981a:	2002      	movs	r0, #2
 800981c:	f001 fbb3 	bl	800af86 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2203      	movs	r2, #3
 800982c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	7919      	ldrb	r1, [r3, #4]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009842:	9202      	str	r2, [sp, #8]
 8009844:	2200      	movs	r2, #0
 8009846:	9201      	str	r2, [sp, #4]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	4603      	mov	r3, r0
 800984c:	2280      	movs	r2, #128	@ 0x80
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 f848 	bl	800a8e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7959      	ldrb	r1, [r3, #5]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009868:	9202      	str	r2, [sp, #8]
 800986a:	2200      	movs	r2, #0
 800986c:	9201      	str	r2, [sp, #4]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	4603      	mov	r3, r0
 8009872:	2200      	movs	r2, #0
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f001 f835 	bl	800a8e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800987a:	e0e3      	b.n	8009a44 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	2b03      	cmp	r3, #3
 8009880:	f040 80e0 	bne.w	8009a44 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	220d      	movs	r2, #13
 8009888:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	705a      	strb	r2, [r3, #1]
      break;
 8009890:	e0d8      	b.n	8009a44 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009892:	2109      	movs	r1, #9
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f9a1 	bl	8009bdc <USBH_Get_CfgDesc>
 800989a:	4603      	mov	r3, r0
 800989c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d103      	bne.n	80098ac <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2204      	movs	r2, #4
 80098a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098aa:	e0cd      	b.n	8009a48 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	f040 80ca 	bne.w	8009a48 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80098ba:	3301      	adds	r3, #1
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	d903      	bls.n	80098d6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	220d      	movs	r2, #13
 80098d2:	701a      	strb	r2, [r3, #0]
      break;
 80098d4:	e0b8      	b.n	8009a48 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	795b      	ldrb	r3, [r3, #5]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f851 	bl	800a984 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	791b      	ldrb	r3, [r3, #4]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 f84b 	bl	800a984 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]
      break;
 80098fa:	e0a5      	b.n	8009a48 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f969 	bl	8009bdc <USBH_Get_CfgDesc>
 800990a:	4603      	mov	r3, r0
 800990c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d103      	bne.n	800991c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2205      	movs	r2, #5
 8009918:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800991a:	e097      	b.n	8009a4c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b03      	cmp	r3, #3
 8009920:	f040 8094 	bne.w	8009a4c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800992a:	3301      	adds	r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800993a:	2b03      	cmp	r3, #3
 800993c:	d903      	bls.n	8009946 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	220d      	movs	r2, #13
 8009942:	701a      	strb	r2, [r3, #0]
      break;
 8009944:	e082      	b.n	8009a4c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	795b      	ldrb	r3, [r3, #5]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 f819 	bl	800a984 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	791b      	ldrb	r3, [r3, #4]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f001 f813 	bl	800a984 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	701a      	strb	r2, [r3, #0]
      break;
 800996a:	e06f      	b.n	8009a4c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009972:	2b00      	cmp	r3, #0
 8009974:	d019      	beq.n	80099aa <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009982:	23ff      	movs	r3, #255	@ 0xff
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f953 	bl	8009c30 <USBH_Get_StringDesc>
 800998a:	4603      	mov	r3, r0
 800998c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d103      	bne.n	800999c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2206      	movs	r2, #6
 8009998:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800999a:	e059      	b.n	8009a50 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d156      	bne.n	8009a50 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2206      	movs	r2, #6
 80099a6:	705a      	strb	r2, [r3, #1]
      break;
 80099a8:	e052      	b.n	8009a50 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2206      	movs	r2, #6
 80099ae:	705a      	strb	r2, [r3, #1]
      break;
 80099b0:	e04e      	b.n	8009a50 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d019      	beq.n	80099f0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80099c8:	23ff      	movs	r3, #255	@ 0xff
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f930 	bl	8009c30 <USBH_Get_StringDesc>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2207      	movs	r2, #7
 80099de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80099e0:	e038      	b.n	8009a54 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d135      	bne.n	8009a54 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2207      	movs	r2, #7
 80099ec:	705a      	strb	r2, [r3, #1]
      break;
 80099ee:	e031      	b.n	8009a54 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2207      	movs	r2, #7
 80099f4:	705a      	strb	r2, [r3, #1]
      break;
 80099f6:	e02d      	b.n	8009a54 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d017      	beq.n	8009a32 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009a0e:	23ff      	movs	r3, #255	@ 0xff
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f90d 	bl	8009c30 <USBH_Get_StringDesc>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d102      	bne.n	8009a26 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009a24:	e018      	b.n	8009a58 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d115      	bne.n	8009a58 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a30:	e012      	b.n	8009a58 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
      break;
 8009a36:	e00f      	b.n	8009a58 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009a38:	bf00      	nop
 8009a3a:	e00e      	b.n	8009a5a <USBH_HandleEnum+0x3b6>
      break;
 8009a3c:	bf00      	nop
 8009a3e:	e00c      	b.n	8009a5a <USBH_HandleEnum+0x3b6>
      break;
 8009a40:	bf00      	nop
 8009a42:	e00a      	b.n	8009a5a <USBH_HandleEnum+0x3b6>
      break;
 8009a44:	bf00      	nop
 8009a46:	e008      	b.n	8009a5a <USBH_HandleEnum+0x3b6>
      break;
 8009a48:	bf00      	nop
 8009a4a:	e006      	b.n	8009a5a <USBH_HandleEnum+0x3b6>
      break;
 8009a4c:	bf00      	nop
 8009a4e:	e004      	b.n	8009a5a <USBH_HandleEnum+0x3b6>
      break;
 8009a50:	bf00      	nop
 8009a52:	e002      	b.n	8009a5a <USBH_HandleEnum+0x3b6>
      break;
 8009a54:	bf00      	nop
 8009a56:	e000      	b.n	8009a5a <USBH_HandleEnum+0x3b6>
      break;
 8009a58:	bf00      	nop
  }
  return Status;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f804 	bl	8009aa6 <USBH_HandleSof>
}
 8009a9e:	bf00      	nop
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b0b      	cmp	r3, #11
 8009ab6:	d10a      	bne.n	8009ace <USBH_HandleSof+0x28>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d005      	beq.n	8009ace <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
  }
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009ae6:	bf00      	nop
}
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009b02:	bf00      	nop
}
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b083      	sub	sp, #12
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 f8c6 	bl	800acee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	791b      	ldrb	r3, [r3, #4]
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 ff0b 	bl	800a984 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	795b      	ldrb	r3, [r3, #5]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 ff05 	bl	800a984 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af02      	add	r7, sp, #8
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009b90:	887b      	ldrh	r3, [r7, #2]
 8009b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b96:	d901      	bls.n	8009b9c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e01b      	b.n	8009bd4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009ba2:	887b      	ldrh	r3, [r7, #2]
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bac:	2100      	movs	r1, #0
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f872 	bl	8009c98 <USBH_GetDescriptor>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d109      	bne.n	8009bd2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009bc4:	887a      	ldrh	r2, [r7, #2]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f929 	bl	8009e20 <USBH_ParseDevDesc>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	331c      	adds	r3, #28
 8009bec:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009bee:	887b      	ldrh	r3, [r7, #2]
 8009bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bf4:	d901      	bls.n	8009bfa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e016      	b.n	8009c28 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009bfa:	887b      	ldrh	r3, [r7, #2]
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c04:	2100      	movs	r1, #0
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f846 	bl	8009c98 <USBH_GetDescriptor>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d107      	bne.n	8009c26 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009c16:	887b      	ldrh	r3, [r7, #2]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	68b9      	ldr	r1, [r7, #8]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f9af 	bl	8009f80 <USBH_ParseCfgDesc>
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b088      	sub	sp, #32
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	72fb      	strb	r3, [r7, #11]
 8009c40:	4613      	mov	r3, r2
 8009c42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009c44:	893b      	ldrh	r3, [r7, #8]
 8009c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c4a:	d802      	bhi.n	8009c52 <USBH_Get_StringDesc+0x22>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e01c      	b.n	8009c90 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009c5e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009c66:	893b      	ldrh	r3, [r7, #8]
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 f812 	bl	8009c98 <USBH_GetDescriptor>
 8009c74:	4603      	mov	r3, r0
 8009c76:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d107      	bne.n	8009c8e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c84:	893a      	ldrh	r2, [r7, #8]
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 fb8d 	bl	800a3a8 <USBH_ParseStringDesc>
  }

  return status;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3718      	adds	r7, #24
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	607b      	str	r3, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	72fb      	strb	r3, [r7, #11]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	789b      	ldrb	r3, [r3, #2]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d11c      	bne.n	8009cec <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009cb2:	7afb      	ldrb	r3, [r7, #11]
 8009cb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2206      	movs	r2, #6
 8009cc2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	893a      	ldrh	r2, [r7, #8]
 8009cc8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009cca:	893b      	ldrh	r3, [r7, #8]
 8009ccc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009cd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cd4:	d104      	bne.n	8009ce0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f240 4209 	movw	r2, #1033	@ 0x409
 8009cdc:	829a      	strh	r2, [r3, #20]
 8009cde:	e002      	b.n	8009ce6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	8b3a      	ldrh	r2, [r7, #24]
 8009cea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009cec:	8b3b      	ldrh	r3, [r7, #24]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	6879      	ldr	r1, [r7, #4]
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 fba5 	bl	800a442 <USBH_CtlReq>
 8009cf8:	4603      	mov	r3, r0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	789b      	ldrb	r3, [r3, #2]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d10f      	bne.n	8009d36 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2205      	movs	r2, #5
 8009d20:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d36:	2200      	movs	r2, #0
 8009d38:	2100      	movs	r1, #0
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fb81 	bl	800a442 <USBH_CtlReq>
 8009d40:	4603      	mov	r3, r0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	460b      	mov	r3, r1
 8009d54:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	789b      	ldrb	r3, [r3, #2]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d10e      	bne.n	8009d7c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2209      	movs	r2, #9
 8009d68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	887a      	ldrh	r2, [r7, #2]
 8009d6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2100      	movs	r1, #0
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fb5e 	bl	800a442 <USBH_CtlReq>
 8009d86:	4603      	mov	r3, r0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	789b      	ldrb	r3, [r3, #2]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d10f      	bne.n	8009dc4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2203      	movs	r2, #3
 8009dae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fb3a 	bl	800a442 <USBH_CtlReq>
 8009dce:	4603      	mov	r3, r0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	789b      	ldrb	r3, [r3, #2]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d10f      	bne.n	8009e0c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2202      	movs	r2, #2
 8009df0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009dfe:	78fb      	ldrb	r3, [r7, #3]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2100      	movs	r1, #0
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fb16 	bl	800a442 <USBH_CtlReq>
 8009e16:	4603      	mov	r3, r0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009e34:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009e40:	2302      	movs	r3, #2
 8009e42:	e094      	b.n	8009f6e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	781a      	ldrb	r2, [r3, #0]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	785a      	ldrb	r2, [r3, #1]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	3302      	adds	r3, #2
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	3303      	adds	r3, #3
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	021b      	lsls	r3, r3, #8
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	4313      	orrs	r3, r2
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	791a      	ldrb	r2, [r3, #4]
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	795a      	ldrb	r2, [r3, #5]
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	799a      	ldrb	r2, [r3, #6]
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	79da      	ldrb	r2, [r3, #7]
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d004      	beq.n	8009ea2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d11b      	bne.n	8009eda <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	79db      	ldrb	r3, [r3, #7]
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	dc0f      	bgt.n	8009eca <USBH_ParseDevDesc+0xaa>
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	db0f      	blt.n	8009ece <USBH_ParseDevDesc+0xae>
 8009eae:	3b08      	subs	r3, #8
 8009eb0:	4a32      	ldr	r2, [pc, #200]	@ (8009f7c <USBH_ParseDevDesc+0x15c>)
 8009eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	bf14      	ite	ne
 8009ebe:	2301      	movne	r3, #1
 8009ec0:	2300      	moveq	r3, #0
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d106      	bne.n	8009ed6 <USBH_ParseDevDesc+0xb6>
 8009ec8:	e001      	b.n	8009ece <USBH_ParseDevDesc+0xae>
 8009eca:	2b40      	cmp	r3, #64	@ 0x40
 8009ecc:	d003      	beq.n	8009ed6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2208      	movs	r2, #8
 8009ed2:	71da      	strb	r2, [r3, #7]
        break;
 8009ed4:	e000      	b.n	8009ed8 <USBH_ParseDevDesc+0xb8>
        break;
 8009ed6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009ed8:	e00e      	b.n	8009ef8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d107      	bne.n	8009ef4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	79db      	ldrb	r3, [r3, #7]
 8009ee8:	2b08      	cmp	r3, #8
 8009eea:	d005      	beq.n	8009ef8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	2208      	movs	r2, #8
 8009ef0:	71da      	strb	r2, [r3, #7]
 8009ef2:	e001      	b.n	8009ef8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009ef8:	88fb      	ldrh	r3, [r7, #6]
 8009efa:	2b08      	cmp	r3, #8
 8009efc:	d936      	bls.n	8009f6c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	3308      	adds	r3, #8
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	461a      	mov	r2, r3
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	3309      	adds	r3, #9
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	4313      	orrs	r3, r2
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	330a      	adds	r3, #10
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	330b      	adds	r3, #11
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	330c      	adds	r3, #12
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	330d      	adds	r3, #13
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	021b      	lsls	r3, r3, #8
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	4313      	orrs	r3, r2
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	7b9a      	ldrb	r2, [r3, #14]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	7bda      	ldrb	r2, [r3, #15]
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	7c1a      	ldrb	r2, [r3, #16]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	7c5a      	ldrb	r2, [r3, #17]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	371c      	adds	r7, #28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	01000101 	.word	0x01000101

08009f80 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08c      	sub	sp, #48	@ 0x30
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009f94:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009fae:	2302      	movs	r3, #2
 8009fb0:	e0da      	b.n	800a168 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	785a      	ldrb	r2, [r3, #1]
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	3302      	adds	r3, #2
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	3303      	adds	r3, #3
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	021b      	lsls	r3, r3, #8
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fe0:	bf28      	it	cs
 8009fe2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	791a      	ldrb	r2, [r3, #4]
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	795a      	ldrb	r2, [r3, #5]
 8009ff8:	6a3b      	ldr	r3, [r7, #32]
 8009ffa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	799a      	ldrb	r2, [r3, #6]
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	79da      	ldrb	r2, [r3, #7]
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	7a1a      	ldrb	r2, [r3, #8]
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	2b09      	cmp	r3, #9
 800a01a:	d002      	beq.n	800a022 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	2209      	movs	r2, #9
 800a020:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a022:	88fb      	ldrh	r3, [r7, #6]
 800a024:	2b09      	cmp	r3, #9
 800a026:	f240 809d 	bls.w	800a164 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a02a:	2309      	movs	r3, #9
 800a02c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a032:	e081      	b.n	800a138 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a034:	f107 0316 	add.w	r3, r7, #22
 800a038:	4619      	mov	r1, r3
 800a03a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a03c:	f000 f9e7 	bl	800a40e <USBH_GetNextDesc>
 800a040:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	2b04      	cmp	r3, #4
 800a048:	d176      	bne.n	800a138 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b09      	cmp	r3, #9
 800a050:	d002      	beq.n	800a058 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a054:	2209      	movs	r2, #9
 800a056:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a05c:	221a      	movs	r2, #26
 800a05e:	fb02 f303 	mul.w	r3, r2, r3
 800a062:	3308      	adds	r3, #8
 800a064:	6a3a      	ldr	r2, [r7, #32]
 800a066:	4413      	add	r3, r2
 800a068:	3302      	adds	r3, #2
 800a06a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a06c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a06e:	69f8      	ldr	r0, [r7, #28]
 800a070:	f000 f87e 	bl	800a170 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a07e:	e043      	b.n	800a108 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a080:	f107 0316 	add.w	r3, r7, #22
 800a084:	4619      	mov	r1, r3
 800a086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a088:	f000 f9c1 	bl	800a40e <USBH_GetNextDesc>
 800a08c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a090:	785b      	ldrb	r3, [r3, #1]
 800a092:	2b05      	cmp	r3, #5
 800a094:	d138      	bne.n	800a108 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	795b      	ldrb	r3, [r3, #5]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d113      	bne.n	800a0c6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d003      	beq.n	800a0ae <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	799b      	ldrb	r3, [r3, #6]
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d10b      	bne.n	800a0c6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	79db      	ldrb	r3, [r3, #7]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10b      	bne.n	800a0ce <USBH_ParseCfgDesc+0x14e>
 800a0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b09      	cmp	r3, #9
 800a0bc:	d007      	beq.n	800a0ce <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c0:	2209      	movs	r2, #9
 800a0c2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0c4:	e003      	b.n	800a0ce <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	2207      	movs	r2, #7
 800a0ca:	701a      	strb	r2, [r3, #0]
 800a0cc:	e000      	b.n	800a0d0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0ce:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a0d8:	3201      	adds	r2, #1
 800a0da:	00d2      	lsls	r2, r2, #3
 800a0dc:	211a      	movs	r1, #26
 800a0de:	fb01 f303 	mul.w	r3, r1, r3
 800a0e2:	4413      	add	r3, r2
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	6a3a      	ldr	r2, [r7, #32]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a0ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0f0:	69b9      	ldr	r1, [r7, #24]
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 f870 	bl	800a1d8 <USBH_ParseEPDesc>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a0fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a102:	3301      	adds	r3, #1
 800a104:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	791b      	ldrb	r3, [r3, #4]
 800a10c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a110:	429a      	cmp	r2, r3
 800a112:	d204      	bcs.n	800a11e <USBH_ParseCfgDesc+0x19e>
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	885a      	ldrh	r2, [r3, #2]
 800a118:	8afb      	ldrh	r3, [r7, #22]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d8b0      	bhi.n	800a080 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	791b      	ldrb	r3, [r3, #4]
 800a122:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a126:	429a      	cmp	r2, r3
 800a128:	d201      	bcs.n	800a12e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e01c      	b.n	800a168 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a12e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a132:	3301      	adds	r3, #1
 800a134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d805      	bhi.n	800a14c <USBH_ParseCfgDesc+0x1cc>
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	885a      	ldrh	r2, [r3, #2]
 800a144:	8afb      	ldrh	r3, [r7, #22]
 800a146:	429a      	cmp	r2, r3
 800a148:	f63f af74 	bhi.w	800a034 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	791b      	ldrb	r3, [r3, #4]
 800a150:	2b02      	cmp	r3, #2
 800a152:	bf28      	it	cs
 800a154:	2302      	movcs	r3, #2
 800a156:	b2db      	uxtb	r3, r3
 800a158:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d201      	bcs.n	800a164 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a160:	2303      	movs	r3, #3
 800a162:	e001      	b.n	800a168 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a164:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3730      	adds	r7, #48	@ 0x30
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781a      	ldrb	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	785a      	ldrb	r2, [r3, #1]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	789a      	ldrb	r2, [r3, #2]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	78da      	ldrb	r2, [r3, #3]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	3304      	adds	r3, #4
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	bf28      	it	cs
 800a1a4:	2302      	movcs	r3, #2
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	795a      	ldrb	r2, [r3, #5]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	799a      	ldrb	r2, [r3, #6]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	79da      	ldrb	r2, [r3, #7]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	7a1a      	ldrb	r2, [r3, #8]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	721a      	strb	r2, [r3, #8]
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	785a      	ldrb	r2, [r3, #1]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	789a      	ldrb	r2, [r3, #2]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	78da      	ldrb	r2, [r3, #3]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3304      	adds	r3, #4
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3305      	adds	r3, #5
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4313      	orrs	r3, r2
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	799a      	ldrb	r2, [r3, #6]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	889b      	ldrh	r3, [r3, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d009      	beq.n	800a246 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a23a:	d804      	bhi.n	800a246 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a244:	d901      	bls.n	800a24a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a246:	2303      	movs	r3, #3
 800a248:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a250:	2b00      	cmp	r3, #0
 800a252:	d136      	bne.n	800a2c2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	78db      	ldrb	r3, [r3, #3]
 800a258:	f003 0303 	and.w	r3, r3, #3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d108      	bne.n	800a272 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	889b      	ldrh	r3, [r3, #4]
 800a264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a268:	f240 8097 	bls.w	800a39a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a26c:	2303      	movs	r3, #3
 800a26e:	75fb      	strb	r3, [r7, #23]
 800a270:	e093      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	78db      	ldrb	r3, [r3, #3]
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d107      	bne.n	800a28e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	889b      	ldrh	r3, [r3, #4]
 800a282:	2b40      	cmp	r3, #64	@ 0x40
 800a284:	f240 8089 	bls.w	800a39a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a288:	2303      	movs	r3, #3
 800a28a:	75fb      	strb	r3, [r7, #23]
 800a28c:	e085      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	78db      	ldrb	r3, [r3, #3]
 800a292:	f003 0303 	and.w	r3, r3, #3
 800a296:	2b01      	cmp	r3, #1
 800a298:	d005      	beq.n	800a2a6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	78db      	ldrb	r3, [r3, #3]
 800a29e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d10a      	bne.n	800a2bc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	799b      	ldrb	r3, [r3, #6]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <USBH_ParseEPDesc+0xde>
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	799b      	ldrb	r3, [r3, #6]
 800a2b2:	2b10      	cmp	r3, #16
 800a2b4:	d970      	bls.n	800a398 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a2ba:	e06d      	b.n	800a398 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	75fb      	strb	r3, [r7, #23]
 800a2c0:	e06b      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d13c      	bne.n	800a346 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	78db      	ldrb	r3, [r3, #3]
 800a2d0:	f003 0303 	and.w	r3, r3, #3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d005      	beq.n	800a2e4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	78db      	ldrb	r3, [r3, #3]
 800a2dc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d106      	bne.n	800a2f2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	889b      	ldrh	r3, [r3, #4]
 800a2e8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ea:	d956      	bls.n	800a39a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a2f0:	e053      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	78db      	ldrb	r3, [r3, #3]
 800a2f6:	f003 0303 	and.w	r3, r3, #3
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d10e      	bne.n	800a31c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	799b      	ldrb	r3, [r3, #6]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d007      	beq.n	800a316 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	d803      	bhi.n	800a316 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a312:	2b40      	cmp	r3, #64	@ 0x40
 800a314:	d941      	bls.n	800a39a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a316:	2303      	movs	r3, #3
 800a318:	75fb      	strb	r3, [r7, #23]
 800a31a:	e03e      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	78db      	ldrb	r3, [r3, #3]
 800a320:	f003 0303 	and.w	r3, r3, #3
 800a324:	2b03      	cmp	r3, #3
 800a326:	d10b      	bne.n	800a340 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	799b      	ldrb	r3, [r3, #6]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d004      	beq.n	800a33a <USBH_ParseEPDesc+0x162>
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	889b      	ldrh	r3, [r3, #4]
 800a334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a338:	d32f      	bcc.n	800a39a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a33a:	2303      	movs	r3, #3
 800a33c:	75fb      	strb	r3, [r7, #23]
 800a33e:	e02c      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a340:	2303      	movs	r3, #3
 800a342:	75fb      	strb	r3, [r7, #23]
 800a344:	e029      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d120      	bne.n	800a392 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	78db      	ldrb	r3, [r3, #3]
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d106      	bne.n	800a36a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	889b      	ldrh	r3, [r3, #4]
 800a360:	2b08      	cmp	r3, #8
 800a362:	d01a      	beq.n	800a39a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a364:	2303      	movs	r3, #3
 800a366:	75fb      	strb	r3, [r7, #23]
 800a368:	e017      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	78db      	ldrb	r3, [r3, #3]
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	2b03      	cmp	r3, #3
 800a374:	d10a      	bne.n	800a38c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	799b      	ldrb	r3, [r3, #6]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <USBH_ParseEPDesc+0x1ae>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	889b      	ldrh	r3, [r3, #4]
 800a382:	2b08      	cmp	r3, #8
 800a384:	d909      	bls.n	800a39a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a386:	2303      	movs	r3, #3
 800a388:	75fb      	strb	r3, [r7, #23]
 800a38a:	e006      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a38c:	2303      	movs	r3, #3
 800a38e:	75fb      	strb	r3, [r7, #23]
 800a390:	e003      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a392:	2303      	movs	r3, #3
 800a394:	75fb      	strb	r3, [r7, #23]
 800a396:	e000      	b.n	800a39a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a398:	bf00      	nop
  }

  return status;
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d120      	bne.n	800a402 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	1e9a      	subs	r2, r3, #2
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	bf28      	it	cs
 800a3cc:	4613      	movcs	r3, r2
 800a3ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	82fb      	strh	r3, [r7, #22]
 800a3da:	e00b      	b.n	800a3f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a3dc:	8afb      	ldrh	r3, [r7, #22]
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	781a      	ldrb	r2, [r3, #0]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a3ee:	8afb      	ldrh	r3, [r7, #22]
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	82fb      	strh	r3, [r7, #22]
 800a3f4:	8afa      	ldrh	r2, [r7, #22]
 800a3f6:	8abb      	ldrh	r3, [r7, #20]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d3ef      	bcc.n	800a3dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	2200      	movs	r2, #0
 800a400:	701a      	strb	r2, [r3, #0]
  }
}
 800a402:	bf00      	nop
 800a404:	371c      	adds	r7, #28
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a40e:	b480      	push	{r7}
 800a410:	b085      	sub	sp, #20
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	7812      	ldrb	r2, [r2, #0]
 800a420:	4413      	add	r3, r2
 800a422:	b29a      	uxth	r2, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4413      	add	r3, r2
 800a432:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a434:	68fb      	ldr	r3, [r7, #12]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b086      	sub	sp, #24
 800a446:	af00      	add	r7, sp, #0
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	4613      	mov	r3, r2
 800a44e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a450:	2301      	movs	r3, #1
 800a452:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	789b      	ldrb	r3, [r3, #2]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d002      	beq.n	800a462 <USBH_CtlReq+0x20>
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d00f      	beq.n	800a480 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a460:	e027      	b.n	800a4b2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	88fa      	ldrh	r2, [r7, #6]
 800a46c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2202      	movs	r2, #2
 800a478:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a47a:	2301      	movs	r3, #1
 800a47c:	75fb      	strb	r3, [r7, #23]
      break;
 800a47e:	e018      	b.n	800a4b2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 f81b 	bl	800a4bc <USBH_HandleControl>
 800a486:	4603      	mov	r3, r0
 800a488:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <USBH_CtlReq+0x54>
 800a490:	7dfb      	ldrb	r3, [r7, #23]
 800a492:	2b03      	cmp	r3, #3
 800a494:	d106      	bne.n	800a4a4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2201      	movs	r2, #1
 800a49a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	761a      	strb	r2, [r3, #24]
      break;
 800a4a2:	e005      	b.n	800a4b0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d102      	bne.n	800a4b0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	709a      	strb	r2, [r3, #2]
      break;
 800a4b0:	bf00      	nop
  }
  return status;
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7e1b      	ldrb	r3, [r3, #24]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	2b0a      	cmp	r3, #10
 800a4d4:	f200 8156 	bhi.w	800a784 <USBH_HandleControl+0x2c8>
 800a4d8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e0 <USBH_HandleControl+0x24>)
 800a4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4de:	bf00      	nop
 800a4e0:	0800a50d 	.word	0x0800a50d
 800a4e4:	0800a527 	.word	0x0800a527
 800a4e8:	0800a591 	.word	0x0800a591
 800a4ec:	0800a5b7 	.word	0x0800a5b7
 800a4f0:	0800a5ef 	.word	0x0800a5ef
 800a4f4:	0800a619 	.word	0x0800a619
 800a4f8:	0800a66b 	.word	0x0800a66b
 800a4fc:	0800a68d 	.word	0x0800a68d
 800a500:	0800a6c9 	.word	0x0800a6c9
 800a504:	0800a6ef 	.word	0x0800a6ef
 800a508:	0800a72d 	.word	0x0800a72d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f103 0110 	add.w	r1, r3, #16
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	795b      	ldrb	r3, [r3, #5]
 800a516:	461a      	mov	r2, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f943 	bl	800a7a4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2202      	movs	r2, #2
 800a522:	761a      	strb	r2, [r3, #24]
      break;
 800a524:	e139      	b.n	800a79a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	795b      	ldrb	r3, [r3, #5]
 800a52a:	4619      	mov	r1, r3
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fccd 	bl	800aecc <USBH_LL_GetURBState>
 800a532:	4603      	mov	r3, r0
 800a534:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d11e      	bne.n	800a57a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7c1b      	ldrb	r3, [r3, #16]
 800a540:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a544:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	8adb      	ldrh	r3, [r3, #22]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a54e:	7b7b      	ldrb	r3, [r7, #13]
 800a550:	2b80      	cmp	r3, #128	@ 0x80
 800a552:	d103      	bne.n	800a55c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2203      	movs	r2, #3
 800a558:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a55a:	e115      	b.n	800a788 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2205      	movs	r2, #5
 800a560:	761a      	strb	r2, [r3, #24]
      break;
 800a562:	e111      	b.n	800a788 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a564:	7b7b      	ldrb	r3, [r7, #13]
 800a566:	2b80      	cmp	r3, #128	@ 0x80
 800a568:	d103      	bne.n	800a572 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2209      	movs	r2, #9
 800a56e:	761a      	strb	r2, [r3, #24]
      break;
 800a570:	e10a      	b.n	800a788 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2207      	movs	r2, #7
 800a576:	761a      	strb	r2, [r3, #24]
      break;
 800a578:	e106      	b.n	800a788 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	d003      	beq.n	800a588 <USBH_HandleControl+0xcc>
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	2b02      	cmp	r3, #2
 800a584:	f040 8100 	bne.w	800a788 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	220b      	movs	r2, #11
 800a58c:	761a      	strb	r2, [r3, #24]
      break;
 800a58e:	e0fb      	b.n	800a788 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a596:	b29a      	uxth	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6899      	ldr	r1, [r3, #8]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	899a      	ldrh	r2, [r3, #12]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	791b      	ldrb	r3, [r3, #4]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f93a 	bl	800a822 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2204      	movs	r2, #4
 800a5b2:	761a      	strb	r2, [r3, #24]
      break;
 800a5b4:	e0f1      	b.n	800a79a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	791b      	ldrb	r3, [r3, #4]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fc85 	bl	800aecc <USBH_LL_GetURBState>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d102      	bne.n	800a5d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2209      	movs	r2, #9
 800a5d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	2b05      	cmp	r3, #5
 800a5d6:	d102      	bne.n	800a5de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5dc:	e0d6      	b.n	800a78c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	f040 80d3 	bne.w	800a78c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	220b      	movs	r2, #11
 800a5ea:	761a      	strb	r2, [r3, #24]
      break;
 800a5ec:	e0ce      	b.n	800a78c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6899      	ldr	r1, [r3, #8]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	899a      	ldrh	r2, [r3, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	795b      	ldrb	r3, [r3, #5]
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	9000      	str	r0, [sp, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f8ea 	bl	800a7d8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2206      	movs	r2, #6
 800a614:	761a      	strb	r2, [r3, #24]
      break;
 800a616:	e0c0      	b.n	800a79a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	795b      	ldrb	r3, [r3, #5]
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fc54 	bl	800aecc <USBH_LL_GetURBState>
 800a624:	4603      	mov	r3, r0
 800a626:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a628:	7bbb      	ldrb	r3, [r7, #14]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d103      	bne.n	800a636 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2207      	movs	r2, #7
 800a632:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a634:	e0ac      	b.n	800a790 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b05      	cmp	r3, #5
 800a63a:	d105      	bne.n	800a648 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	220c      	movs	r2, #12
 800a640:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a642:	2303      	movs	r3, #3
 800a644:	73fb      	strb	r3, [r7, #15]
      break;
 800a646:	e0a3      	b.n	800a790 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d103      	bne.n	800a656 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2205      	movs	r2, #5
 800a652:	761a      	strb	r2, [r3, #24]
      break;
 800a654:	e09c      	b.n	800a790 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a656:	7bbb      	ldrb	r3, [r7, #14]
 800a658:	2b04      	cmp	r3, #4
 800a65a:	f040 8099 	bne.w	800a790 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	220b      	movs	r2, #11
 800a662:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a664:	2302      	movs	r3, #2
 800a666:	73fb      	strb	r3, [r7, #15]
      break;
 800a668:	e092      	b.n	800a790 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	791b      	ldrb	r3, [r3, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	2100      	movs	r1, #0
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f8d5 	bl	800a822 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2208      	movs	r2, #8
 800a688:	761a      	strb	r2, [r3, #24]

      break;
 800a68a:	e086      	b.n	800a79a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	791b      	ldrb	r3, [r3, #4]
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fc1a 	bl	800aecc <USBH_LL_GetURBState>
 800a698:	4603      	mov	r3, r0
 800a69a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d105      	bne.n	800a6ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	220d      	movs	r2, #13
 800a6a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6ac:	e072      	b.n	800a794 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	2b04      	cmp	r3, #4
 800a6b2:	d103      	bne.n	800a6bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	220b      	movs	r2, #11
 800a6b8:	761a      	strb	r2, [r3, #24]
      break;
 800a6ba:	e06b      	b.n	800a794 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a6bc:	7bbb      	ldrb	r3, [r7, #14]
 800a6be:	2b05      	cmp	r3, #5
 800a6c0:	d168      	bne.n	800a794 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c6:	e065      	b.n	800a794 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	795b      	ldrb	r3, [r3, #5]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	9200      	str	r2, [sp, #0]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f87f 	bl	800a7d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	220a      	movs	r2, #10
 800a6ea:	761a      	strb	r2, [r3, #24]
      break;
 800a6ec:	e055      	b.n	800a79a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	795b      	ldrb	r3, [r3, #5]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fbe9 	bl	800aecc <USBH_LL_GetURBState>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d105      	bne.n	800a710 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	220d      	movs	r2, #13
 800a70c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a70e:	e043      	b.n	800a798 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	2b02      	cmp	r3, #2
 800a714:	d103      	bne.n	800a71e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2209      	movs	r2, #9
 800a71a:	761a      	strb	r2, [r3, #24]
      break;
 800a71c:	e03c      	b.n	800a798 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
 800a720:	2b04      	cmp	r3, #4
 800a722:	d139      	bne.n	800a798 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	220b      	movs	r2, #11
 800a728:	761a      	strb	r2, [r3, #24]
      break;
 800a72a:	e035      	b.n	800a798 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7e5b      	ldrb	r3, [r3, #25]
 800a730:	3301      	adds	r3, #1
 800a732:	b2da      	uxtb	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	765a      	strb	r2, [r3, #25]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	7e5b      	ldrb	r3, [r3, #25]
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d806      	bhi.n	800a74e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a74c:	e025      	b.n	800a79a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a754:	2106      	movs	r1, #6
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	795b      	ldrb	r3, [r3, #5]
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f90c 	bl	800a984 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	791b      	ldrb	r3, [r3, #4]
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f906 	bl	800a984 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a77e:	2302      	movs	r3, #2
 800a780:	73fb      	strb	r3, [r7, #15]
      break;
 800a782:	e00a      	b.n	800a79a <USBH_HandleControl+0x2de>

    default:
      break;
 800a784:	bf00      	nop
 800a786:	e008      	b.n	800a79a <USBH_HandleControl+0x2de>
      break;
 800a788:	bf00      	nop
 800a78a:	e006      	b.n	800a79a <USBH_HandleControl+0x2de>
      break;
 800a78c:	bf00      	nop
 800a78e:	e004      	b.n	800a79a <USBH_HandleControl+0x2de>
      break;
 800a790:	bf00      	nop
 800a792:	e002      	b.n	800a79a <USBH_HandleControl+0x2de>
      break;
 800a794:	bf00      	nop
 800a796:	e000      	b.n	800a79a <USBH_HandleControl+0x2de>
      break;
 800a798:	bf00      	nop
  }

  return status;
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af04      	add	r7, sp, #16
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7b2:	79f9      	ldrb	r1, [r7, #7]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9303      	str	r3, [sp, #12]
 800a7b8:	2308      	movs	r3, #8
 800a7ba:	9302      	str	r3, [sp, #8]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 fb4e 	bl	800ae6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af04      	add	r7, sp, #16
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	80fb      	strh	r3, [r7, #6]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7fc:	7979      	ldrb	r1, [r7, #5]
 800a7fe:	7e3b      	ldrb	r3, [r7, #24]
 800a800:	9303      	str	r3, [sp, #12]
 800a802:	88fb      	ldrh	r3, [r7, #6]
 800a804:	9302      	str	r3, [sp, #8]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	2301      	movs	r3, #1
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	2300      	movs	r3, #0
 800a810:	2200      	movs	r2, #0
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f000 fb29 	bl	800ae6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b088      	sub	sp, #32
 800a826:	af04      	add	r7, sp, #16
 800a828:	60f8      	str	r0, [r7, #12]
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	4611      	mov	r1, r2
 800a82e:	461a      	mov	r2, r3
 800a830:	460b      	mov	r3, r1
 800a832:	80fb      	strh	r3, [r7, #6]
 800a834:	4613      	mov	r3, r2
 800a836:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a838:	7979      	ldrb	r1, [r7, #5]
 800a83a:	2300      	movs	r3, #0
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	88fb      	ldrh	r3, [r7, #6]
 800a840:	9302      	str	r3, [sp, #8]
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	9301      	str	r3, [sp, #4]
 800a846:	2301      	movs	r3, #1
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	2300      	movs	r3, #0
 800a84c:	2201      	movs	r2, #1
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 fb0b 	bl	800ae6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a854:	2300      	movs	r3, #0

}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b088      	sub	sp, #32
 800a862:	af04      	add	r7, sp, #16
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	4611      	mov	r1, r2
 800a86a:	461a      	mov	r2, r3
 800a86c:	460b      	mov	r3, r1
 800a86e:	80fb      	strh	r3, [r7, #6]
 800a870:	4613      	mov	r3, r2
 800a872:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a87e:	2300      	movs	r3, #0
 800a880:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a882:	7979      	ldrb	r1, [r7, #5]
 800a884:	7e3b      	ldrb	r3, [r7, #24]
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	88fb      	ldrh	r3, [r7, #6]
 800a88a:	9302      	str	r3, [sp, #8]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	2301      	movs	r3, #1
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	2302      	movs	r3, #2
 800a896:	2200      	movs	r2, #0
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 fae6 	bl	800ae6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af04      	add	r7, sp, #16
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	80fb      	strh	r3, [r7, #6]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8be:	7979      	ldrb	r1, [r7, #5]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9303      	str	r3, [sp, #12]
 800a8c4:	88fb      	ldrh	r3, [r7, #6]
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 fac8 	bl	800ae6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af04      	add	r7, sp, #16
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	70fb      	strb	r3, [r7, #3]
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	70bb      	strb	r3, [r7, #2]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a8fe:	7878      	ldrb	r0, [r7, #1]
 800a900:	78ba      	ldrb	r2, [r7, #2]
 800a902:	78f9      	ldrb	r1, [r7, #3]
 800a904:	8b3b      	ldrh	r3, [r7, #24]
 800a906:	9302      	str	r3, [sp, #8]
 800a908:	7d3b      	ldrb	r3, [r7, #20]
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	7c3b      	ldrb	r3, [r7, #16]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	4603      	mov	r3, r0
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fa5b 	bl	800adce <USBH_LL_OpenPipe>

  return USBH_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b082      	sub	sp, #8
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	460b      	mov	r3, r1
 800a92c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a92e:	78fb      	ldrb	r3, [r7, #3]
 800a930:	4619      	mov	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fa7a 	bl	800ae2c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	460b      	mov	r3, r1
 800a94c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f836 	bl	800a9c0 <USBH_GetFreePipe>
 800a954:	4603      	mov	r3, r0
 800a956:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a958:	89fb      	ldrh	r3, [r7, #14]
 800a95a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a95e:	4293      	cmp	r3, r2
 800a960:	d00a      	beq.n	800a978 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a962:	78fa      	ldrb	r2, [r7, #3]
 800a964:	89fb      	ldrh	r3, [r7, #14]
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	33e0      	adds	r3, #224	@ 0xe0
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	440b      	add	r3, r1
 800a976:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a978:	89fb      	ldrh	r3, [r7, #14]
 800a97a:	b2db      	uxtb	r3, r3
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a990:	78fb      	ldrb	r3, [r7, #3]
 800a992:	2b0f      	cmp	r3, #15
 800a994:	d80d      	bhi.n	800a9b2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a996:	78fb      	ldrb	r3, [r7, #3]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	33e0      	adds	r3, #224	@ 0xe0
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	78fb      	ldrb	r3, [r7, #3]
 800a9a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	33e0      	adds	r3, #224	@ 0xe0
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	440b      	add	r3, r1
 800a9b0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
 800a9d0:	e00f      	b.n	800a9f2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	33e0      	adds	r3, #224	@ 0xe0
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d102      	bne.n	800a9ec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	e007      	b.n	800a9fc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	73fb      	strb	r3, [r7, #15]
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
 800a9f4:	2b0f      	cmp	r3, #15
 800a9f6:	d9ec      	bls.n	800a9d2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a9f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	490e      	ldr	r1, [pc, #56]	@ (800aa48 <MX_USB_HOST_Init+0x40>)
 800aa10:	480e      	ldr	r0, [pc, #56]	@ (800aa4c <MX_USB_HOST_Init+0x44>)
 800aa12:	f7fe fb15 	bl	8009040 <USBH_Init>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa1c:	f7f6 f8de 	bl	8000bdc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aa20:	490b      	ldr	r1, [pc, #44]	@ (800aa50 <MX_USB_HOST_Init+0x48>)
 800aa22:	480a      	ldr	r0, [pc, #40]	@ (800aa4c <MX_USB_HOST_Init+0x44>)
 800aa24:	f7fe fbb9 	bl	800919a <USBH_RegisterClass>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa2e:	f7f6 f8d5 	bl	8000bdc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aa32:	4806      	ldr	r0, [pc, #24]	@ (800aa4c <MX_USB_HOST_Init+0x44>)
 800aa34:	f7fe fc3d 	bl	80092b2 <USBH_Start>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa3e:	f7f6 f8cd 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa42:	bf00      	nop
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	0800aa69 	.word	0x0800aa69
 800aa4c:	200002fc 	.word	0x200002fc
 800aa50:	2000000c 	.word	0x2000000c

0800aa54 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aa58:	4802      	ldr	r0, [pc, #8]	@ (800aa64 <MX_USB_HOST_Process+0x10>)
 800aa5a:	f7fe fc3b 	bl	80092d4 <USBH_Process>
}
 800aa5e:	bf00      	nop
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	200002fc 	.word	0x200002fc

0800aa68 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	2b04      	cmp	r3, #4
 800aa7a:	d819      	bhi.n	800aab0 <USBH_UserProcess+0x48>
 800aa7c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa84 <USBH_UserProcess+0x1c>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aab1 	.word	0x0800aab1
 800aa88:	0800aaa1 	.word	0x0800aaa1
 800aa8c:	0800aab1 	.word	0x0800aab1
 800aa90:	0800aaa9 	.word	0x0800aaa9
 800aa94:	0800aa99 	.word	0x0800aa99
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa98:	4b09      	ldr	r3, [pc, #36]	@ (800aac0 <USBH_UserProcess+0x58>)
 800aa9a:	2203      	movs	r2, #3
 800aa9c:	701a      	strb	r2, [r3, #0]
  break;
 800aa9e:	e008      	b.n	800aab2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aaa0:	4b07      	ldr	r3, [pc, #28]	@ (800aac0 <USBH_UserProcess+0x58>)
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	701a      	strb	r2, [r3, #0]
  break;
 800aaa6:	e004      	b.n	800aab2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aaa8:	4b05      	ldr	r3, [pc, #20]	@ (800aac0 <USBH_UserProcess+0x58>)
 800aaaa:	2201      	movs	r2, #1
 800aaac:	701a      	strb	r2, [r3, #0]
  break;
 800aaae:	e000      	b.n	800aab2 <USBH_UserProcess+0x4a>

  default:
  break;
 800aab0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aab2:	bf00      	nop
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	200006d4 	.word	0x200006d4

0800aac4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b098      	sub	sp, #96	@ 0x60
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aacc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800aad0:	2200      	movs	r2, #0
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	605a      	str	r2, [r3, #4]
 800aad6:	609a      	str	r2, [r3, #8]
 800aad8:	60da      	str	r2, [r3, #12]
 800aada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aadc:	f107 0310 	add.w	r3, r7, #16
 800aae0:	223c      	movs	r2, #60	@ 0x3c
 800aae2:	2100      	movs	r1, #0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fb5f 	bl	800b1a8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aaf2:	d148      	bne.n	800ab86 <HAL_HCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800aaf4:	2320      	movs	r3, #32
 800aaf6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800aafc:	f107 0310 	add.w	r3, r7, #16
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fa fa13 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <HAL_HCD_MspInit+0x4c>
    {
      Error_Handler();
 800ab0c:	f7f6 f866 	bl	8000bdc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	4b1e      	ldr	r3, [pc, #120]	@ (800ab90 <HAL_HCD_MspInit+0xcc>)
 800ab16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab18:	4a1d      	ldr	r2, [pc, #116]	@ (800ab90 <HAL_HCD_MspInit+0xcc>)
 800ab1a:	f043 0301 	orr.w	r3, r3, #1
 800ab1e:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab20:	4b1b      	ldr	r3, [pc, #108]	@ (800ab90 <HAL_HCD_MspInit+0xcc>)
 800ab22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_DP_Pin;
 800ab2c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ab30:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab32:	2302      	movs	r3, #2
 800ab34:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab3e:	230a      	movs	r3, #10
 800ab40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ab46:	4619      	mov	r1, r3
 800ab48:	4812      	ldr	r0, [pc, #72]	@ (800ab94 <HAL_HCD_MspInit+0xd0>)
 800ab4a:	f7f6 fdd7 	bl	80016fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab4e:	4b10      	ldr	r3, [pc, #64]	@ (800ab90 <HAL_HCD_MspInit+0xcc>)
 800ab50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab52:	4a0f      	ldr	r2, [pc, #60]	@ (800ab90 <HAL_HCD_MspInit+0xcc>)
 800ab54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab58:	6353      	str	r3, [r2, #52]	@ 0x34
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60bb      	str	r3, [r7, #8]
 800ab5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ab90 <HAL_HCD_MspInit+0xcc>)
 800ab60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab62:	4a0b      	ldr	r2, [pc, #44]	@ (800ab90 <HAL_HCD_MspInit+0xcc>)
 800ab64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab68:	6453      	str	r3, [r2, #68]	@ 0x44
 800ab6a:	4b09      	ldr	r3, [pc, #36]	@ (800ab90 <HAL_HCD_MspInit+0xcc>)
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab72:	60bb      	str	r3, [r7, #8]
 800ab74:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab76:	2200      	movs	r2, #0
 800ab78:	2100      	movs	r1, #0
 800ab7a:	2043      	movs	r0, #67	@ 0x43
 800ab7c:	f7f6 fd87 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab80:	2043      	movs	r0, #67	@ 0x43
 800ab82:	f7f6 fda0 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab86:	bf00      	nop
 800ab88:	3760      	adds	r7, #96	@ 0x60
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	40023800 	.word	0x40023800
 800ab94:	40020000 	.word	0x40020000

0800ab98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe ff6b 	bl	8009a82 <USBH_LL_IncTimer>
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe ffa3 	bl	8009b0e <USBH_LL_Connect>
}
 800abc8:	bf00      	nop
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe ffac 	bl	8009b3c <USBH_LL_Disconnect>
}
 800abe4:	bf00      	nop
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]
 800abf8:	4613      	mov	r3, r2
 800abfa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe ff5d 	bl	8009ad6 <USBH_LL_PortEnabled>
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe ff5d 	bl	8009af2 <USBH_LL_PortDisabled>
}
 800ac38:	bf00      	nop
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d12a      	bne.n	800aca8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ac52:	4a18      	ldr	r2, [pc, #96]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a15      	ldr	r2, [pc, #84]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac5e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac62:	4b14      	ldr	r3, [pc, #80]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac68:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ac6a:	4b12      	ldr	r3, [pc, #72]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac6c:	2208      	movs	r2, #8
 800ac6e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ac70:	4b10      	ldr	r3, [pc, #64]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac72:	2201      	movs	r2, #1
 800ac74:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac76:	4b0f      	ldr	r3, [pc, #60]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ac7c:	4b0d      	ldr	r3, [pc, #52]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac7e:	2202      	movs	r2, #2
 800ac80:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac82:	4b0c      	ldr	r3, [pc, #48]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac88:	480a      	ldr	r0, [pc, #40]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac8a:	f7f6 fee4 	bl	8001a56 <HAL_HCD_Init>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac94:	f7f5 ffa2 	bl	8000bdc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac98:	4806      	ldr	r0, [pc, #24]	@ (800acb4 <USBH_LL_Init+0x74>)
 800ac9a:	f7f7 fb45 	bl	8002328 <HAL_HCD_GetCurrentFrame>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7fe fede 	bl	8009a64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200006d8 	.word	0x200006d8

0800acb8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800acce:	4618      	mov	r0, r3
 800acd0:	f7f7 fab2 	bl	8002238 <HAL_HCD_Start>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 f95e 	bl	800af9c <USBH_Get_USB_Status>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7f7 faba 	bl	800227e <HAL_HCD_Stop>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 f943 	bl	800af9c <USBH_Get_USB_Status>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f7 fb04 	bl	8002344 <HAL_HCD_GetCurrentSpeed>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d00c      	beq.n	800ad5c <USBH_LL_GetSpeed+0x38>
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d80d      	bhi.n	800ad62 <USBH_LL_GetSpeed+0x3e>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d002      	beq.n	800ad50 <USBH_LL_GetSpeed+0x2c>
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d003      	beq.n	800ad56 <USBH_LL_GetSpeed+0x32>
 800ad4e:	e008      	b.n	800ad62 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73fb      	strb	r3, [r7, #15]
    break;
 800ad54:	e008      	b.n	800ad68 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ad56:	2301      	movs	r3, #1
 800ad58:	73fb      	strb	r3, [r7, #15]
    break;
 800ad5a:	e005      	b.n	800ad68 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad60:	e002      	b.n	800ad68 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ad62:	2301      	movs	r3, #1
 800ad64:	73fb      	strb	r3, [r7, #15]
    break;
 800ad66:	bf00      	nop
  }
  return  speed;
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7f7 fa95 	bl	80022b8 <HAL_HCD_ResetPort>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f901 	bl	800af9c <USBH_Get_USB_Status>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800adba:	78fa      	ldrb	r2, [r7, #3]
 800adbc:	4611      	mov	r1, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f7 fa9d 	bl	80022fe <HAL_HCD_HC_GetXferCount>
 800adc4:	4603      	mov	r3, r0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800adce:	b590      	push	{r4, r7, lr}
 800add0:	b089      	sub	sp, #36	@ 0x24
 800add2:	af04      	add	r7, sp, #16
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	4608      	mov	r0, r1
 800add8:	4611      	mov	r1, r2
 800adda:	461a      	mov	r2, r3
 800addc:	4603      	mov	r3, r0
 800adde:	70fb      	strb	r3, [r7, #3]
 800ade0:	460b      	mov	r3, r1
 800ade2:	70bb      	strb	r3, [r7, #2]
 800ade4:	4613      	mov	r3, r2
 800ade6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800adf6:	787c      	ldrb	r4, [r7, #1]
 800adf8:	78ba      	ldrb	r2, [r7, #2]
 800adfa:	78f9      	ldrb	r1, [r7, #3]
 800adfc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800adfe:	9302      	str	r3, [sp, #8]
 800ae00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	4623      	mov	r3, r4
 800ae0e:	f7f6 fe89 	bl	8001b24 <HAL_HCD_HC_Init>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 f8bf 	bl	800af9c <USBH_Get_USB_Status>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd90      	pop	{r4, r7, pc}

0800ae2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae46:	78fa      	ldrb	r2, [r7, #3]
 800ae48:	4611      	mov	r1, r2
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7f6 ff22 	bl	8001c94 <HAL_HCD_HC_Halt>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 f8a0 	bl	800af9c <USBH_Get_USB_Status>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae6a:	b590      	push	{r4, r7, lr}
 800ae6c:	b089      	sub	sp, #36	@ 0x24
 800ae6e:	af04      	add	r7, sp, #16
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	4608      	mov	r0, r1
 800ae74:	4611      	mov	r1, r2
 800ae76:	461a      	mov	r2, r3
 800ae78:	4603      	mov	r3, r0
 800ae7a:	70fb      	strb	r3, [r7, #3]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70bb      	strb	r3, [r7, #2]
 800ae80:	4613      	mov	r3, r2
 800ae82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ae92:	787c      	ldrb	r4, [r7, #1]
 800ae94:	78ba      	ldrb	r2, [r7, #2]
 800ae96:	78f9      	ldrb	r1, [r7, #3]
 800ae98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae9c:	9303      	str	r3, [sp, #12]
 800ae9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aea0:	9302      	str	r3, [sp, #8]
 800aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	4623      	mov	r3, r4
 800aeae:	f7f6 ff15 	bl	8001cdc <HAL_HCD_HC_SubmitRequest>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f000 f86f 	bl	800af9c <USBH_Get_USB_Status>
 800aebe:	4603      	mov	r3, r0
 800aec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd90      	pop	{r4, r7, pc}

0800aecc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aede:	78fa      	ldrb	r2, [r7, #3]
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7f7 f9f6 	bl	80022d4 <HAL_HCD_HC_GetURBState>
 800aee8:	4603      	mov	r3, r0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	460b      	mov	r3, r1
 800aefc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800af04:	2b01      	cmp	r3, #1
 800af06:	d103      	bne.n	800af10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 f872 	bl	800aff4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800af10:	20c8      	movs	r0, #200	@ 0xc8
 800af12:	f7f6 fabd 	bl	8001490 <HAL_Delay>
  return USBH_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
 800af2c:	4613      	mov	r3, r2
 800af2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af38:	78fa      	ldrb	r2, [r7, #3]
 800af3a:	68f9      	ldr	r1, [r7, #12]
 800af3c:	4613      	mov	r3, r2
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	440b      	add	r3, r1
 800af46:	3317      	adds	r3, #23
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800af4e:	78fa      	ldrb	r2, [r7, #3]
 800af50:	68f9      	ldr	r1, [r7, #12]
 800af52:	4613      	mov	r3, r2
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	1a9b      	subs	r3, r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	440b      	add	r3, r1
 800af5c:	333c      	adds	r3, #60	@ 0x3c
 800af5e:	78ba      	ldrb	r2, [r7, #2]
 800af60:	701a      	strb	r2, [r3, #0]
 800af62:	e009      	b.n	800af78 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800af64:	78fa      	ldrb	r2, [r7, #3]
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	4613      	mov	r3, r2
 800af6a:	011b      	lsls	r3, r3, #4
 800af6c:	1a9b      	subs	r3, r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	440b      	add	r3, r1
 800af72:	333d      	adds	r3, #61	@ 0x3d
 800af74:	78ba      	ldrb	r2, [r7, #2]
 800af76:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b082      	sub	sp, #8
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7f6 fa7e 	bl	8001490 <HAL_Delay>
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	2b03      	cmp	r3, #3
 800afae:	d817      	bhi.n	800afe0 <USBH_Get_USB_Status+0x44>
 800afb0:	a201      	add	r2, pc, #4	@ (adr r2, 800afb8 <USBH_Get_USB_Status+0x1c>)
 800afb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb6:	bf00      	nop
 800afb8:	0800afc9 	.word	0x0800afc9
 800afbc:	0800afcf 	.word	0x0800afcf
 800afc0:	0800afd5 	.word	0x0800afd5
 800afc4:	0800afdb 	.word	0x0800afdb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]
    break;
 800afcc:	e00b      	b.n	800afe6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800afce:	2302      	movs	r3, #2
 800afd0:	73fb      	strb	r3, [r7, #15]
    break;
 800afd2:	e008      	b.n	800afe6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800afd4:	2301      	movs	r3, #1
 800afd6:	73fb      	strb	r3, [r7, #15]
    break;
 800afd8:	e005      	b.n	800afe6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800afda:	2302      	movs	r3, #2
 800afdc:	73fb      	strb	r3, [r7, #15]
    break;
 800afde:	e002      	b.n	800afe6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800afe0:	2302      	movs	r3, #2
 800afe2:	73fb      	strb	r3, [r7, #15]
    break;
 800afe4:	bf00      	nop
  }
  return usb_status;
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	4603      	mov	r3, r0
 800affc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b002:	79fb      	ldrb	r3, [r7, #7]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d102      	bne.n	800b00e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b008:	2300      	movs	r3, #0
 800b00a:	73fb      	strb	r3, [r7, #15]
 800b00c:	e001      	b.n	800b012 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b00e:	2301      	movs	r3, #1
 800b010:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800b012:	7bfb      	ldrb	r3, [r7, #15]
 800b014:	461a      	mov	r2, r3
 800b016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b01a:	4803      	ldr	r0, [pc, #12]	@ (800b028 <MX_DriverVbusFS+0x34>)
 800b01c:	f7f6 fd02 	bl	8001a24 <HAL_GPIO_WritePin>
}
 800b020:	bf00      	nop
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	40021800 	.word	0x40021800

0800b02c <malloc>:
 800b02c:	4b02      	ldr	r3, [pc, #8]	@ (800b038 <malloc+0xc>)
 800b02e:	4601      	mov	r1, r0
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	f000 b82d 	b.w	800b090 <_malloc_r>
 800b036:	bf00      	nop
 800b038:	2000002c 	.word	0x2000002c

0800b03c <free>:
 800b03c:	4b02      	ldr	r3, [pc, #8]	@ (800b048 <free+0xc>)
 800b03e:	4601      	mov	r1, r0
 800b040:	6818      	ldr	r0, [r3, #0]
 800b042:	f000 b8f5 	b.w	800b230 <_free_r>
 800b046:	bf00      	nop
 800b048:	2000002c 	.word	0x2000002c

0800b04c <sbrk_aligned>:
 800b04c:	b570      	push	{r4, r5, r6, lr}
 800b04e:	4e0f      	ldr	r6, [pc, #60]	@ (800b08c <sbrk_aligned+0x40>)
 800b050:	460c      	mov	r4, r1
 800b052:	6831      	ldr	r1, [r6, #0]
 800b054:	4605      	mov	r5, r0
 800b056:	b911      	cbnz	r1, 800b05e <sbrk_aligned+0x12>
 800b058:	f000 f8ae 	bl	800b1b8 <_sbrk_r>
 800b05c:	6030      	str	r0, [r6, #0]
 800b05e:	4621      	mov	r1, r4
 800b060:	4628      	mov	r0, r5
 800b062:	f000 f8a9 	bl	800b1b8 <_sbrk_r>
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	d103      	bne.n	800b072 <sbrk_aligned+0x26>
 800b06a:	f04f 34ff 	mov.w	r4, #4294967295
 800b06e:	4620      	mov	r0, r4
 800b070:	bd70      	pop	{r4, r5, r6, pc}
 800b072:	1cc4      	adds	r4, r0, #3
 800b074:	f024 0403 	bic.w	r4, r4, #3
 800b078:	42a0      	cmp	r0, r4
 800b07a:	d0f8      	beq.n	800b06e <sbrk_aligned+0x22>
 800b07c:	1a21      	subs	r1, r4, r0
 800b07e:	4628      	mov	r0, r5
 800b080:	f000 f89a 	bl	800b1b8 <_sbrk_r>
 800b084:	3001      	adds	r0, #1
 800b086:	d1f2      	bne.n	800b06e <sbrk_aligned+0x22>
 800b088:	e7ef      	b.n	800b06a <sbrk_aligned+0x1e>
 800b08a:	bf00      	nop
 800b08c:	20000ab8 	.word	0x20000ab8

0800b090 <_malloc_r>:
 800b090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b094:	1ccd      	adds	r5, r1, #3
 800b096:	f025 0503 	bic.w	r5, r5, #3
 800b09a:	3508      	adds	r5, #8
 800b09c:	2d0c      	cmp	r5, #12
 800b09e:	bf38      	it	cc
 800b0a0:	250c      	movcc	r5, #12
 800b0a2:	2d00      	cmp	r5, #0
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	db01      	blt.n	800b0ac <_malloc_r+0x1c>
 800b0a8:	42a9      	cmp	r1, r5
 800b0aa:	d904      	bls.n	800b0b6 <_malloc_r+0x26>
 800b0ac:	230c      	movs	r3, #12
 800b0ae:	6033      	str	r3, [r6, #0]
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b18c <_malloc_r+0xfc>
 800b0ba:	f000 f869 	bl	800b190 <__malloc_lock>
 800b0be:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c2:	461c      	mov	r4, r3
 800b0c4:	bb44      	cbnz	r4, 800b118 <_malloc_r+0x88>
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f7ff ffbf 	bl	800b04c <sbrk_aligned>
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	d158      	bne.n	800b186 <_malloc_r+0xf6>
 800b0d4:	f8d8 4000 	ldr.w	r4, [r8]
 800b0d8:	4627      	mov	r7, r4
 800b0da:	2f00      	cmp	r7, #0
 800b0dc:	d143      	bne.n	800b166 <_malloc_r+0xd6>
 800b0de:	2c00      	cmp	r4, #0
 800b0e0:	d04b      	beq.n	800b17a <_malloc_r+0xea>
 800b0e2:	6823      	ldr	r3, [r4, #0]
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	eb04 0903 	add.w	r9, r4, r3
 800b0ec:	f000 f864 	bl	800b1b8 <_sbrk_r>
 800b0f0:	4581      	cmp	r9, r0
 800b0f2:	d142      	bne.n	800b17a <_malloc_r+0xea>
 800b0f4:	6821      	ldr	r1, [r4, #0]
 800b0f6:	1a6d      	subs	r5, r5, r1
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ffa6 	bl	800b04c <sbrk_aligned>
 800b100:	3001      	adds	r0, #1
 800b102:	d03a      	beq.n	800b17a <_malloc_r+0xea>
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	442b      	add	r3, r5
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	f8d8 3000 	ldr.w	r3, [r8]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	bb62      	cbnz	r2, 800b16c <_malloc_r+0xdc>
 800b112:	f8c8 7000 	str.w	r7, [r8]
 800b116:	e00f      	b.n	800b138 <_malloc_r+0xa8>
 800b118:	6822      	ldr	r2, [r4, #0]
 800b11a:	1b52      	subs	r2, r2, r5
 800b11c:	d420      	bmi.n	800b160 <_malloc_r+0xd0>
 800b11e:	2a0b      	cmp	r2, #11
 800b120:	d917      	bls.n	800b152 <_malloc_r+0xc2>
 800b122:	1961      	adds	r1, r4, r5
 800b124:	42a3      	cmp	r3, r4
 800b126:	6025      	str	r5, [r4, #0]
 800b128:	bf18      	it	ne
 800b12a:	6059      	strne	r1, [r3, #4]
 800b12c:	6863      	ldr	r3, [r4, #4]
 800b12e:	bf08      	it	eq
 800b130:	f8c8 1000 	streq.w	r1, [r8]
 800b134:	5162      	str	r2, [r4, r5]
 800b136:	604b      	str	r3, [r1, #4]
 800b138:	4630      	mov	r0, r6
 800b13a:	f000 f82f 	bl	800b19c <__malloc_unlock>
 800b13e:	f104 000b 	add.w	r0, r4, #11
 800b142:	1d23      	adds	r3, r4, #4
 800b144:	f020 0007 	bic.w	r0, r0, #7
 800b148:	1ac2      	subs	r2, r0, r3
 800b14a:	bf1c      	itt	ne
 800b14c:	1a1b      	subne	r3, r3, r0
 800b14e:	50a3      	strne	r3, [r4, r2]
 800b150:	e7af      	b.n	800b0b2 <_malloc_r+0x22>
 800b152:	6862      	ldr	r2, [r4, #4]
 800b154:	42a3      	cmp	r3, r4
 800b156:	bf0c      	ite	eq
 800b158:	f8c8 2000 	streq.w	r2, [r8]
 800b15c:	605a      	strne	r2, [r3, #4]
 800b15e:	e7eb      	b.n	800b138 <_malloc_r+0xa8>
 800b160:	4623      	mov	r3, r4
 800b162:	6864      	ldr	r4, [r4, #4]
 800b164:	e7ae      	b.n	800b0c4 <_malloc_r+0x34>
 800b166:	463c      	mov	r4, r7
 800b168:	687f      	ldr	r7, [r7, #4]
 800b16a:	e7b6      	b.n	800b0da <_malloc_r+0x4a>
 800b16c:	461a      	mov	r2, r3
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	42a3      	cmp	r3, r4
 800b172:	d1fb      	bne.n	800b16c <_malloc_r+0xdc>
 800b174:	2300      	movs	r3, #0
 800b176:	6053      	str	r3, [r2, #4]
 800b178:	e7de      	b.n	800b138 <_malloc_r+0xa8>
 800b17a:	230c      	movs	r3, #12
 800b17c:	6033      	str	r3, [r6, #0]
 800b17e:	4630      	mov	r0, r6
 800b180:	f000 f80c 	bl	800b19c <__malloc_unlock>
 800b184:	e794      	b.n	800b0b0 <_malloc_r+0x20>
 800b186:	6005      	str	r5, [r0, #0]
 800b188:	e7d6      	b.n	800b138 <_malloc_r+0xa8>
 800b18a:	bf00      	nop
 800b18c:	20000abc 	.word	0x20000abc

0800b190 <__malloc_lock>:
 800b190:	4801      	ldr	r0, [pc, #4]	@ (800b198 <__malloc_lock+0x8>)
 800b192:	f000 b84b 	b.w	800b22c <__retarget_lock_acquire_recursive>
 800b196:	bf00      	nop
 800b198:	20000bfc 	.word	0x20000bfc

0800b19c <__malloc_unlock>:
 800b19c:	4801      	ldr	r0, [pc, #4]	@ (800b1a4 <__malloc_unlock+0x8>)
 800b19e:	f000 b846 	b.w	800b22e <__retarget_lock_release_recursive>
 800b1a2:	bf00      	nop
 800b1a4:	20000bfc 	.word	0x20000bfc

0800b1a8 <memset>:
 800b1a8:	4402      	add	r2, r0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d100      	bne.n	800b1b2 <memset+0xa>
 800b1b0:	4770      	bx	lr
 800b1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1b6:	e7f9      	b.n	800b1ac <memset+0x4>

0800b1b8 <_sbrk_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d06      	ldr	r5, [pc, #24]	@ (800b1d4 <_sbrk_r+0x1c>)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	f7f6 f880 	bl	80012c8 <_sbrk>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	d102      	bne.n	800b1d2 <_sbrk_r+0x1a>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	b103      	cbz	r3, 800b1d2 <_sbrk_r+0x1a>
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	20000bf8 	.word	0x20000bf8

0800b1d8 <__errno>:
 800b1d8:	4b01      	ldr	r3, [pc, #4]	@ (800b1e0 <__errno+0x8>)
 800b1da:	6818      	ldr	r0, [r3, #0]
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	2000002c 	.word	0x2000002c

0800b1e4 <__libc_init_array>:
 800b1e4:	b570      	push	{r4, r5, r6, lr}
 800b1e6:	4d0d      	ldr	r5, [pc, #52]	@ (800b21c <__libc_init_array+0x38>)
 800b1e8:	4c0d      	ldr	r4, [pc, #52]	@ (800b220 <__libc_init_array+0x3c>)
 800b1ea:	1b64      	subs	r4, r4, r5
 800b1ec:	10a4      	asrs	r4, r4, #2
 800b1ee:	2600      	movs	r6, #0
 800b1f0:	42a6      	cmp	r6, r4
 800b1f2:	d109      	bne.n	800b208 <__libc_init_array+0x24>
 800b1f4:	4d0b      	ldr	r5, [pc, #44]	@ (800b224 <__libc_init_array+0x40>)
 800b1f6:	4c0c      	ldr	r4, [pc, #48]	@ (800b228 <__libc_init_array+0x44>)
 800b1f8:	f000 f864 	bl	800b2c4 <_init>
 800b1fc:	1b64      	subs	r4, r4, r5
 800b1fe:	10a4      	asrs	r4, r4, #2
 800b200:	2600      	movs	r6, #0
 800b202:	42a6      	cmp	r6, r4
 800b204:	d105      	bne.n	800b212 <__libc_init_array+0x2e>
 800b206:	bd70      	pop	{r4, r5, r6, pc}
 800b208:	f855 3b04 	ldr.w	r3, [r5], #4
 800b20c:	4798      	blx	r3
 800b20e:	3601      	adds	r6, #1
 800b210:	e7ee      	b.n	800b1f0 <__libc_init_array+0xc>
 800b212:	f855 3b04 	ldr.w	r3, [r5], #4
 800b216:	4798      	blx	r3
 800b218:	3601      	adds	r6, #1
 800b21a:	e7f2      	b.n	800b202 <__libc_init_array+0x1e>
 800b21c:	0800b300 	.word	0x0800b300
 800b220:	0800b300 	.word	0x0800b300
 800b224:	0800b300 	.word	0x0800b300
 800b228:	0800b304 	.word	0x0800b304

0800b22c <__retarget_lock_acquire_recursive>:
 800b22c:	4770      	bx	lr

0800b22e <__retarget_lock_release_recursive>:
 800b22e:	4770      	bx	lr

0800b230 <_free_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4605      	mov	r5, r0
 800b234:	2900      	cmp	r1, #0
 800b236:	d041      	beq.n	800b2bc <_free_r+0x8c>
 800b238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b23c:	1f0c      	subs	r4, r1, #4
 800b23e:	2b00      	cmp	r3, #0
 800b240:	bfb8      	it	lt
 800b242:	18e4      	addlt	r4, r4, r3
 800b244:	f7ff ffa4 	bl	800b190 <__malloc_lock>
 800b248:	4a1d      	ldr	r2, [pc, #116]	@ (800b2c0 <_free_r+0x90>)
 800b24a:	6813      	ldr	r3, [r2, #0]
 800b24c:	b933      	cbnz	r3, 800b25c <_free_r+0x2c>
 800b24e:	6063      	str	r3, [r4, #4]
 800b250:	6014      	str	r4, [r2, #0]
 800b252:	4628      	mov	r0, r5
 800b254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b258:	f7ff bfa0 	b.w	800b19c <__malloc_unlock>
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	d908      	bls.n	800b272 <_free_r+0x42>
 800b260:	6820      	ldr	r0, [r4, #0]
 800b262:	1821      	adds	r1, r4, r0
 800b264:	428b      	cmp	r3, r1
 800b266:	bf01      	itttt	eq
 800b268:	6819      	ldreq	r1, [r3, #0]
 800b26a:	685b      	ldreq	r3, [r3, #4]
 800b26c:	1809      	addeq	r1, r1, r0
 800b26e:	6021      	streq	r1, [r4, #0]
 800b270:	e7ed      	b.n	800b24e <_free_r+0x1e>
 800b272:	461a      	mov	r2, r3
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	b10b      	cbz	r3, 800b27c <_free_r+0x4c>
 800b278:	42a3      	cmp	r3, r4
 800b27a:	d9fa      	bls.n	800b272 <_free_r+0x42>
 800b27c:	6811      	ldr	r1, [r2, #0]
 800b27e:	1850      	adds	r0, r2, r1
 800b280:	42a0      	cmp	r0, r4
 800b282:	d10b      	bne.n	800b29c <_free_r+0x6c>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	4401      	add	r1, r0
 800b288:	1850      	adds	r0, r2, r1
 800b28a:	4283      	cmp	r3, r0
 800b28c:	6011      	str	r1, [r2, #0]
 800b28e:	d1e0      	bne.n	800b252 <_free_r+0x22>
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	6053      	str	r3, [r2, #4]
 800b296:	4408      	add	r0, r1
 800b298:	6010      	str	r0, [r2, #0]
 800b29a:	e7da      	b.n	800b252 <_free_r+0x22>
 800b29c:	d902      	bls.n	800b2a4 <_free_r+0x74>
 800b29e:	230c      	movs	r3, #12
 800b2a0:	602b      	str	r3, [r5, #0]
 800b2a2:	e7d6      	b.n	800b252 <_free_r+0x22>
 800b2a4:	6820      	ldr	r0, [r4, #0]
 800b2a6:	1821      	adds	r1, r4, r0
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	bf04      	itt	eq
 800b2ac:	6819      	ldreq	r1, [r3, #0]
 800b2ae:	685b      	ldreq	r3, [r3, #4]
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	bf04      	itt	eq
 800b2b4:	1809      	addeq	r1, r1, r0
 800b2b6:	6021      	streq	r1, [r4, #0]
 800b2b8:	6054      	str	r4, [r2, #4]
 800b2ba:	e7ca      	b.n	800b252 <_free_r+0x22>
 800b2bc:	bd38      	pop	{r3, r4, r5, pc}
 800b2be:	bf00      	nop
 800b2c0:	20000abc 	.word	0x20000abc

0800b2c4 <_init>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	bf00      	nop
 800b2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ca:	bc08      	pop	{r3}
 800b2cc:	469e      	mov	lr, r3
 800b2ce:	4770      	bx	lr

0800b2d0 <_fini>:
 800b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d2:	bf00      	nop
 800b2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2d6:	bc08      	pop	{r3}
 800b2d8:	469e      	mov	lr, r3
 800b2da:	4770      	bx	lr
