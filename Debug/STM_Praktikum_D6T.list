
STM_Praktikum_D6T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d48  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f44  08006f0c  08006f0c  00007f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e50  08008e50  0000a094  2**0
                  CONTENTS
  4 .ARM          00000008  08008e50  08008e50  00009e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e58  08008e58  0000a094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e58  08008e58  00009e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e5c  08008e5c  00009e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08008e60  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000094  08008ef4  0000a094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08008ef4  0000a558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f45  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369d  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  000236a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8a  00000000  00000000  00024870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d35  00000000  00000000  000255fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cb8  00000000  00000000  0004932f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce5e8  00000000  00000000  00061fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001305cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004954  00000000  00000000  00130614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00134f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000094 	.word	0x20000094
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006ef4 	.word	0x08006ef4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000098 	.word	0x20000098
 8000200:	08006ef4 	.word	0x08006ef4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <d6t_reading_to_lcd>:
#include "render.h"
#include "communication.h"



static void d6t_reading_to_lcd(I2C_HandleTypeDef* hi2c2){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	f5ad 5dc0 	sub.w	sp, sp, #6144	@ 0x1800
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000502:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8000506:	6018      	str	r0, [r3, #0]
	/// set configuration
	BSP_LCD_Init();
 8000508:	f001 ff92 	bl	8002430 <BSP_LCD_Init>
	BSP_LCD_Clear(0xffff);
 800050c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000510:	f002 f854 	bl	80025bc <BSP_LCD_Clear>
	// create buffer for temperature values (raw, processed)
	uint8_t buffer[TEMP_VALUE_COUNT*2 + 3];
	int temp[TEMP_VALUE_COUNT+1];

	while (1){
		 read_sensor_data(buffer, hi2c2);
 8000514:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000518:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 800051c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000520:	f102 020c 	add.w	r2, r2, #12
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	4610      	mov	r0, r2
 8000528:	f000 fbdc 	bl	8000ce4 <read_sensor_data>
	     sensor_data_to_temperatures(buffer, temp);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	3b08      	subs	r3, #8
 8000532:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000536:	f102 020c 	add.w	r2, r2, #12
 800053a:	4619      	mov	r1, r3
 800053c:	4610      	mov	r0, r2
 800053e:	f000 fc1d 	bl	8000d7c <sensor_data_to_temperatures>
	     display_data_on_lcd(temp);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	3b08      	subs	r3, #8
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fd3d 	bl	8000fc8 <display_data_on_lcd>
		 read_sensor_data(buffer, hi2c2);
 800054e:	bf00      	nop
 8000550:	e7e0      	b.n	8000514 <d6t_reading_to_lcd+0x20>
	...

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f002 f942 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f810 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f8de 	bl	8000720 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000564:	f000 f880 	bl	8000668 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000568:	f000 f8ac 	bl	80006c4 <MX_I2C2_Init>
  HAL_I2C_Init(&hi2c2);
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <main+0x28>)
 800056e:	f004 f9ed 	bl	800494c <HAL_I2C_Init>

  /* USER CODE BEGIN 2 */
  d6t_reading_to_lcd(&hi2c2);
 8000572:	4802      	ldr	r0, [pc, #8]	@ (800057c <main+0x28>)
 8000574:	f7ff ffbe 	bl	80004f4 <d6t_reading_to_lcd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x24>
 800057c:	20000104 	.word	0x20000104

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2234      	movs	r2, #52	@ 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 fc84 	bl	8006e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <SystemClock_Config+0xe0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a2c      	ldr	r2, [pc, #176]	@ (8000660 <SystemClock_Config+0xe0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <SystemClock_Config+0xe0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <SystemClock_Config+0xe4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a26      	ldr	r2, [pc, #152]	@ (8000664 <SystemClock_Config+0xe4>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <SystemClock_Config+0xe4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005dc:	2303      	movs	r3, #3
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	2301      	movs	r3, #1
 80005e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	2310      	movs	r3, #16
 80005ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005fc:	2348      	movs	r3, #72	@ 0x48
 80005fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000604:	2303      	movs	r3, #3
 8000606:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fc09 	bl	8005e28 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800061c:	f000 f9f2 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f005 f97f 	bl	8005940 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000648:	f000 f9dc 	bl	8000a04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2000      	movs	r0, #0
 8000652:	f005 fa5b 	bl	8005b0c <HAL_RCC_MCOConfig>
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	@ 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	@ (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f004 f951 	bl	800494c <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f9a8 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000b0 	.word	0x200000b0
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <MX_I2C2_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	@ (800071c <MX_I2C2_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_I2C2_Init+0x50>)
 8000702:	f004 f923 	bl	800494c <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f97a 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000104 	.word	0x20000104
 8000718:	40005800 	.word	0x40005800
 800071c:	000186a0 	.word	0x000186a0

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	@ 0x38
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	4baa      	ldr	r3, [pc, #680]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4aa9      	ldr	r2, [pc, #676]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4ba7      	ldr	r3, [pc, #668]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	623b      	str	r3, [r7, #32]
 8000750:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	4ba3      	ldr	r3, [pc, #652]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4aa2      	ldr	r2, [pc, #648]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4ba0      	ldr	r3, [pc, #640]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	61fb      	str	r3, [r7, #28]
 800076c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b9c      	ldr	r3, [pc, #624]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a9b      	ldr	r2, [pc, #620]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b99      	ldr	r3, [pc, #612]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b95      	ldr	r3, [pc, #596]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a94      	ldr	r2, [pc, #592]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b92      	ldr	r3, [pc, #584]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b8e      	ldr	r3, [pc, #568]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a8d      	ldr	r2, [pc, #564]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b8b      	ldr	r3, [pc, #556]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b87      	ldr	r3, [pc, #540]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a86      	ldr	r2, [pc, #536]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b84      	ldr	r3, [pc, #528]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b80      	ldr	r3, [pc, #512]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a7f      	ldr	r2, [pc, #508]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b7d      	ldr	r3, [pc, #500]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b79      	ldr	r3, [pc, #484]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a78      	ldr	r2, [pc, #480]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b76      	ldr	r3, [pc, #472]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	4873      	ldr	r0, [pc, #460]	@ (80009e8 <MX_GPIO_Init+0x2c8>)
 800081c:	f002 faf0 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000826:	4871      	ldr	r0, [pc, #452]	@ (80009ec <MX_GPIO_Init+0x2cc>)
 8000828:	f002 faea 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000832:	486f      	ldr	r0, [pc, #444]	@ (80009f0 <MX_GPIO_Init+0x2d0>)
 8000834:	f002 fae4 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083e:	486d      	ldr	r0, [pc, #436]	@ (80009f4 <MX_GPIO_Init+0x2d4>)
 8000840:	f002 fade 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8000844:	230f      	movs	r3, #15
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000848:	2311      	movs	r3, #17
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4863      	ldr	r0, [pc, #396]	@ (80009e8 <MX_GPIO_Init+0x2c8>)
 800085c:	f002 f93c 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 8000860:	2310      	movs	r3, #16
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000870:	2308      	movs	r3, #8
 8000872:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	485b      	ldr	r0, [pc, #364]	@ (80009e8 <MX_GPIO_Init+0x2c8>)
 800087c:	f002 f92c 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 8000880:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4854      	ldr	r0, [pc, #336]	@ (80009ec <MX_GPIO_Init+0x2cc>)
 800089a:	f002 f91d 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800089e:	2304      	movs	r3, #4
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008ae:	2308      	movs	r3, #8
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	484f      	ldr	r0, [pc, #316]	@ (80009f8 <MX_GPIO_Init+0x2d8>)
 80008ba:	f002 f90d 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	484a      	ldr	r0, [pc, #296]	@ (80009fc <MX_GPIO_Init+0x2dc>)
 80008d4:	f002 f900 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 80008d8:	2302      	movs	r3, #2
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008e8:	2308      	movs	r3, #8
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	4843      	ldr	r0, [pc, #268]	@ (8000a00 <MX_GPIO_Init+0x2e0>)
 80008f4:	f002 f8f0 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 80008f8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	4837      	ldr	r0, [pc, #220]	@ (80009ec <MX_GPIO_Init+0x2cc>)
 800090e:	f002 f8e3 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8000912:	2393      	movs	r3, #147	@ 0x93
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	4833      	ldr	r0, [pc, #204]	@ (80009f4 <MX_GPIO_Init+0x2d4>)
 8000926:	f002 f8d7 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 800092a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800093c:	2305      	movs	r3, #5
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	482e      	ldr	r0, [pc, #184]	@ (8000a00 <MX_GPIO_Init+0x2e0>)
 8000948:	f002 f8c6 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800094c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <MX_GPIO_Init+0x2d0>)
 8000966:	f002 f8b7 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 800096a:	2324      	movs	r3, #36	@ 0x24
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	481d      	ldr	r0, [pc, #116]	@ (80009f4 <MX_GPIO_Init+0x2d4>)
 8000980:	f002 f8aa 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 8000984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800098a:	2311      	movs	r3, #17
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <MX_GPIO_Init+0x2d4>)
 800099e:	f002 f89b 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 80009a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	480f      	ldr	r0, [pc, #60]	@ (80009fc <MX_GPIO_Init+0x2dc>)
 80009c0:	f002 f88a 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 80009c4:	2308      	movs	r3, #8
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <MX_GPIO_Init+0x2d0>)
 80009d8:	f002 f87e 	bl	8002ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3738      	adds	r7, #56	@ 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40021400 	.word	0x40021400
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40021800 	.word	0x40021800
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020400 	.word	0x40020400

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	@ 0x30
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b6c <HAL_I2C_MspInit+0x10c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12c      	bne.n	8000adc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a39      	ldr	r2, [pc, #228]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a9e:	23c0      	movs	r3, #192	@ 0xc0
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa2:	2312      	movs	r3, #18
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482e      	ldr	r0, [pc, #184]	@ (8000b74 <HAL_I2C_MspInit+0x114>)
 8000aba:	f002 f80d 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000ac8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ada:	e042      	b.n	8000b62 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a25      	ldr	r2, [pc, #148]	@ (8000b78 <HAL_I2C_MspInit+0x118>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d13d      	bne.n	8000b62 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a20      	ldr	r2, [pc, #128]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b08:	2312      	movs	r3, #18
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b14:	2304      	movs	r3, #4
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4815      	ldr	r0, [pc, #84]	@ (8000b74 <HAL_I2C_MspInit+0x114>)
 8000b20:	f001 ffda 	bl	8002ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2a:	2312      	movs	r3, #18
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000b36:	2309      	movs	r3, #9
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <HAL_I2C_MspInit+0x114>)
 8000b42:	f001 ffc9 	bl	8002ad8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000b50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	@ 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40005800 	.word	0x40005800

08000b7c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000b90:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <HAL_FSMC_MspInit+0xa8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d140      	bne.n	8000c1a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <HAL_FSMC_MspInit+0xa8>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <HAL_FSMC_MspInit+0xac>)
 8000ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ba6:	4a20      	ldr	r2, [pc, #128]	@ (8000c28 <HAL_FSMC_MspInit+0xac>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <HAL_FSMC_MspInit+0xac>)
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = A0_Pin;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <HAL_FSMC_MspInit+0xb0>)
 8000bd4:	f001 ff80 	bl	8002ad8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000bd8:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000bdc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <HAL_FSMC_MspInit+0xb4>)
 8000bf4:	f001 ff70 	bl	8002ad8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000bf8:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000bfc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <HAL_FSMC_MspInit+0xb8>)
 8000c14:	f001 ff60 	bl	8002ad8 <HAL_GPIO_Init>
 8000c18:	e000      	b.n	8000c1c <HAL_FSMC_MspInit+0xa0>
    return;
 8000c1a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000158 	.word	0x20000158
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40021400 	.word	0x40021400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40020c00 	.word	0x40020c00

08000c38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000c40:	f7ff ff9c 	bl	8000b7c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f001 fdef 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <OTG_FS_IRQHandler+0x10>)
 8000cb2:	f002 f8be 	bl	8002e32 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000178 	.word	0x20000178

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <read_sensor_data>:

/**
 * reads the raw temperature readings from the sensor into the readbuffer
 * Returns 0 if no sensor could be detected (else 1)
 */
int read_sensor_data(uint8_t* readbuffer, I2C_HandleTypeDef* hi2c2 ){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	 /// Each temperature reading consists of 2 8-Bit value (LOW-/HIGH-bit)
	 /// Additionally one PTAT reading and one Checksuum value is transmitted
	 int size = TEMP_VALUE_COUNT * 2 + 3;
 8000cee:	f640 0303 	movw	r3, #2051	@ 0x803
 8000cf2:	613b      	str	r3, [r7, #16]

	 /// Command for telling the sensor we want to read data
	 uint8_t cmd = 0x4c;
 8000cf4:	234c      	movs	r3, #76	@ 0x4c
 8000cf6:	73bb      	strb	r3, [r7, #14]

	 /// applying I2C settings to the external I2C port
	  HAL_StatusTypeDef status = HAL_I2C_Init(hi2c2);
 8000cf8:	6838      	ldr	r0, [r7, #0]
 8000cfa:	f003 fe27 	bl	800494c <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]

	  int fails = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
	  do {
		  /// send command for preparing transmission
		  status = HAL_I2C_Master_Transmit(hi2c2, 0x14, &cmd, 1, 100);
 8000d06:	f107 020e 	add.w	r2, r7, #14
 8000d0a:	2364      	movs	r3, #100	@ 0x64
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	2114      	movs	r1, #20
 8000d12:	6838      	ldr	r0, [r7, #0]
 8000d14:	f003 ff5e 	bl	8004bd4 <HAL_I2C_Master_Transmit>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(10);
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f001 fdd1 	bl	80028c4 <HAL_Delay>

		  /// if the connection failed more than 10 times in a row, return connection lost
		  if (status != HAL_OK && fails++ > CONNECTION_TRYS) return NO_CONNECTION;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <read_sensor_data+0x52>
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	617a      	str	r2, [r7, #20]
 8000d2e:	2b0a      	cmp	r3, #10
 8000d30:	dd01      	ble.n	8000d36 <read_sensor_data+0x52>
 8000d32:	2300      	movs	r3, #0
 8000d34:	e01e      	b.n	8000d74 <read_sensor_data+0x90>

		  /// receive the data from Sensor at port 0x14
		  status = HAL_I2C_Master_Receive(hi2c2, 0x14, readbuffer, size, HAL_MAX_DELAY);
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3e:	9200      	str	r2, [sp, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	2114      	movs	r1, #20
 8000d44:	6838      	ldr	r0, [r7, #0]
 8000d46:	f004 f843 	bl	8004dd0 <HAL_I2C_Master_Receive>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]

		  /// if everything was successful, end the function else wait and try again
		  if (status == HAL_OK && !(readbuffer[5] == 0xff && readbuffer[6] == 0xff)) break;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <read_sensor_data+0x84>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3305      	adds	r3, #5
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2bff      	cmp	r3, #255	@ 0xff
 8000d5c:	d109      	bne.n	8000d72 <read_sensor_data+0x8e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3306      	adds	r3, #6
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2bff      	cmp	r3, #255	@ 0xff
 8000d66:	d104      	bne.n	8000d72 <read_sensor_data+0x8e>
		  HAL_Delay(550);
 8000d68:	f240 2026 	movw	r0, #550	@ 0x226
 8000d6c:	f001 fdaa 	bl	80028c4 <HAL_Delay>
		  status = HAL_I2C_Master_Transmit(hi2c2, 0x14, &cmd, 1, 100);
 8000d70:	e7c9      	b.n	8000d06 <read_sensor_data+0x22>
	  } while(1);
	  return SUCCESS;
 8000d72:	2301      	movs	r3, #1
  };
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <sensor_data_to_temperatures>:

/// converts the raw sensor readings into sensor data in 10*degrees celsius
int sensor_data_to_temperatures(uint8_t* sensor_data, int* temperatures){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	/// each reading consists of a high reading and a low reading,
	/// with high reading * 256 (max value 4 Bit) + low bits = temperature * 10
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e016      	b.n	8000dba <sensor_data_to_temperatures+0x3e>
	 	  temperatures[temp_index/2] = sensor_data[temp_index+1] * 256 + sensor_data[temp_index];
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	021a      	lsls	r2, r3, #8
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	440b      	add	r3, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	0fd9      	lsrs	r1, r3, #31
 8000da6:	440b      	add	r3, r1
 8000da8:	105b      	asrs	r3, r3, #1
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	440b      	add	r3, r1
 8000db0:	4402      	add	r2, r0
 8000db2:	601a      	str	r2, [r3, #0]
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3302      	adds	r3, #2
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f640 0201 	movw	r2, #2049	@ 0x801
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	dde3      	ble.n	8000d8c <sensor_data_to_temperatures+0x10>
	   }
	   return SUCCESS;
 8000dc4:	2301      	movs	r3, #1
};
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <pick_gradient_color>:
#include "render.h"


// perform linear uint16_terpolation between two colors
// source stackoverflow (with own adjustments, so no GPL License  needed)
uint16_t pick_gradient_color(uint16_t color1, uint16_t color2, float temperature_gradient) {
 8000dd2:	b480      	push	{r7}
 8000dd4:	b089      	sub	sp, #36	@ 0x24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460a      	mov	r2, r1
 8000ddc:	ed87 0a00 	vstr	s0, [r7]
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	4613      	mov	r3, r2
 8000de4:	80bb      	strh	r3, [r7, #4]

	/// convert rgb uint16_to rgb565:
	/// as in rgb the always 2 digit are one color #rrggbb,
	// but here the second and third bit overlapp from r-g and g-b
	uint16_t r1 = (color1 >> 11) & 0x1F;
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	0adb      	lsrs	r3, r3, #11
 8000dea:	83fb      	strh	r3, [r7, #30]
    uint16_t g1 = (color1 >> 5) & 0x3F;
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000df6:	83bb      	strh	r3, [r7, #28]
    uint16_t b1 = color1 & 0x1F;
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	837b      	strh	r3, [r7, #26]

    uint16_t r2 = (color2 >> 11) & 0x1F;
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	0adb      	lsrs	r3, r3, #11
 8000e04:	833b      	strh	r3, [r7, #24]
    uint16_t g2 = (color2 >> 5) & 0x3F;
 8000e06:	88bb      	ldrh	r3, [r7, #4]
 8000e08:	095b      	lsrs	r3, r3, #5
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e10:	82fb      	strh	r3, [r7, #22]
    uint16_t b2 = color2 & 0x1F;
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	82bb      	strh	r3, [r7, #20]

    /// apply ratios between the two colors by using the temperature gradient
    uint16_t r = (uint16_t)(r1 + temperature_gradient * (r2 - r1));
 8000e1a:	8bfb      	ldrh	r3, [r7, #30]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e24:	8b3a      	ldrh	r2, [r7, #24]
 8000e26:	8bfb      	ldrh	r3, [r7, #30]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e32:	edd7 7a00 	vldr	s15, [r7]
 8000e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e42:	ee17 3a90 	vmov	r3, s15
 8000e46:	827b      	strh	r3, [r7, #18]
    uint16_t g = (uint16_t)(g1 + temperature_gradient * (g2 - g1));
 8000e48:	8bbb      	ldrh	r3, [r7, #28]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e52:	8afa      	ldrh	r2, [r7, #22]
 8000e54:	8bbb      	ldrh	r3, [r7, #28]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e60:	edd7 7a00 	vldr	s15, [r7]
 8000e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e70:	ee17 3a90 	vmov	r3, s15
 8000e74:	823b      	strh	r3, [r7, #16]
    uint16_t b = (uint16_t)(b1 + temperature_gradient * (b2 - b1));
 8000e76:	8b7b      	ldrh	r3, [r7, #26]
 8000e78:	ee07 3a90 	vmov	s15, r3
 8000e7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e80:	8aba      	ldrh	r2, [r7, #20]
 8000e82:	8b7b      	ldrh	r3, [r7, #26]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e8e:	edd7 7a00 	vldr	s15, [r7]
 8000e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 3a90 	vmov	r3, s15
 8000ea2:	81fb      	strh	r3, [r7, #14]

    return ((r & 0x1F) << 11) | ((g & 0x3F) << 5) | (b & 0x1F);
 8000ea4:	8a7b      	ldrh	r3, [r7, #18]
 8000ea6:	02db      	lsls	r3, r3, #11
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	8a3b      	ldrh	r3, [r7, #16]
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	b29b      	uxth	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <convert_temp_to_color>:

/// convert the temperature values of the sensor [-10,70] to a color in the spectrum
///[-10,22]-> [blue, white],
///[ 22,36]-> [white, orange], (high change in color as its the mainly used area)
///[ 36,70]-> [orange, red]
uint16_t convert_temp_to_color(float temp) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	ed87 0a01 	vstr	s0, [r7, #4]
	// the sensor can operate with temperatures in [-10, 70]

    if (temp <= -10)
 8000ee2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee6:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8000eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	d801      	bhi.n	8000ef8 <convert_temp_to_color+0x20>
        return DARK_BLUE;
 8000ef4:	231f      	movs	r3, #31
 8000ef6:	e05d      	b.n	8000fb4 <convert_temp_to_color+0xdc>

    if (temp >= 70)
 8000ef8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000efc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000fbc <convert_temp_to_color+0xe4>
 8000f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	db02      	blt.n	8000f10 <convert_temp_to_color+0x38>
    	return DARK_RED;
 8000f0a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f0e:	e051      	b.n	8000fb4 <convert_temp_to_color+0xdc>

    if (temp < ROOM_TEMP) {
 8000f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f14:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8000f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	d514      	bpl.n	8000f4c <convert_temp_to_color+0x74>
    	// map temperature from ]-10, 22[ to [0, 1] for the blue to white gradient
    	float temp_gradient = (temp + 10.f) / (ROOM_TEMP+10.f);
 8000f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f26:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000f2e:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000fc0 <convert_temp_to_color+0xe8>
 8000f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f36:	edc7 7a03 	vstr	s15, [r7, #12]
    	return pick_gradient_color(DARK_BLUE, WHITE, temp_gradient);
 8000f3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f42:	201f      	movs	r0, #31
 8000f44:	f7ff ff45 	bl	8000dd2 <pick_gradient_color>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	e033      	b.n	8000fb4 <convert_temp_to_color+0xdc>
    }

    if (temp < BODY_TEMP) {
 8000f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f50:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000fc0 <convert_temp_to_color+0xe8>
 8000f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	d515      	bpl.n	8000f8a <convert_temp_to_color+0xb2>
        	// map temperature from [-22, 36[ to [0, 1] for the blue to white gradient
        	float temp_gradient = (temp - ROOM_TEMP) / (BODY_TEMP-ROOM_TEMP);
 8000f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f62:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8000f66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f6a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f72:	edc7 7a04 	vstr	s15, [r7, #16]
        	return pick_gradient_color(WHITE, ORANGE, temp_gradient);
 8000f76:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f7a:	f64f 4147 	movw	r1, #64583	@ 0xfc47
 8000f7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f82:	f7ff ff26 	bl	8000dd2 <pick_gradient_color>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e014      	b.n	8000fb4 <convert_temp_to_color+0xdc>
        }


    // map temperature from [36, 70] to [0, 1] for the orange to red gradient
    float temp_gradient = (temp - BODY_TEMP) / (70.f-BODY_TEMP);
 8000f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000fc0 <convert_temp_to_color+0xe8>
 8000f92:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f96:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000fc4 <convert_temp_to_color+0xec>
 8000f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9e:	edc7 7a05 	vstr	s15, [r7, #20]
    return pick_gradient_color(ORANGE, DARK_RED, temp_gradient);
 8000fa2:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fa6:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000faa:	f64f 4047 	movw	r0, #64583	@ 0xfc47
 8000fae:	f7ff ff10 	bl	8000dd2 <pick_gradient_color>
 8000fb2:	4603      	mov	r3, r0

}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	428c0000 	.word	0x428c0000
 8000fc0:	42100000 	.word	0x42100000
 8000fc4:	42080000 	.word	0x42080000

08000fc8 <display_data_on_lcd>:

/// display the temperature values as an image on the LCD screen
/// make sure to initiate BSP_lcd before calling
void display_data_on_lcd(int* temperatures){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	  /// get params of the screen
	  int width = BSP_LCD_GetXSize()+10; // +10 for rounding errors
 8000fd0:	f001 fabc 	bl	800254c <BSP_LCD_GetXSize>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	330a      	adds	r3, #10
 8000fd8:	617b      	str	r3, [r7, #20]
	  int height = BSP_LCD_GetYSize() +10;
 8000fda:	f001 fac3 	bl	8002564 <BSP_LCD_GetYSize>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	330a      	adds	r3, #10
 8000fe2:	613b      	str	r3, [r7, #16]

	  /// calculate Height / with of cells

	  int cell_width = width / H_CELL_COUNT;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	da00      	bge.n	8000fec <display_data_on_lcd+0x24>
 8000fea:	331f      	adds	r3, #31
 8000fec:	115b      	asrs	r3, r3, #5
 8000fee:	60fb      	str	r3, [r7, #12]
	  int cell_hight = height/ V_CELL_COUNT;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da00      	bge.n	8000ff8 <display_data_on_lcd+0x30>
 8000ff6:	331f      	adds	r3, #31
 8000ff8:	115b      	asrs	r3, r3, #5
 8000ffa:	60bb      	str	r3, [r7, #8]

	  /// iterate over rows/columns
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	e03c      	b.n	800107c <display_data_on_lcd+0xb4>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	e033      	b.n	8001070 <display_data_on_lcd+0xa8>
			  BSP_LCD_SetTextColor(
					  convert_temp_to_color(
							  /// +1 because of the PTAT temperature value at temperatures[0]
							  (float)temperatures[row * 32 + col+1] / 10.f
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	015a      	lsls	r2, r3, #5
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	4413      	add	r3, r2
 8001010:	3301      	adds	r3, #1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			  BSP_LCD_SetTextColor(
 8001022:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001026:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800102a:	eeb0 0a47 	vmov.f32	s0, s14
 800102e:	f7ff ff53 	bl	8000ed8 <convert_temp_to_color>
 8001032:	4603      	mov	r3, r0
 8001034:	4618      	mov	r0, r3
 8001036:	f001 faa1 	bl	800257c <BSP_LCD_SetTextColor>
										   )
							  );
			  BSP_LCD_FillRect(col * cell_width+10, row * cell_hight+10, cell_width, cell_hight);
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	b29a      	uxth	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	b29b      	uxth	r3, r3
 8001042:	fb12 f303 	smulbb	r3, r2, r3
 8001046:	b29b      	uxth	r3, r3
 8001048:	330a      	adds	r3, #10
 800104a:	b298      	uxth	r0, r3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	b29a      	uxth	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	b29b      	uxth	r3, r3
 8001054:	fb12 f303 	smulbb	r3, r2, r3
 8001058:	b29b      	uxth	r3, r3
 800105a:	330a      	adds	r3, #10
 800105c:	b299      	uxth	r1, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	b29a      	uxth	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	b29b      	uxth	r3, r3
 8001066:	f001 fb35 	bl	80026d4 <BSP_LCD_FillRect>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	3301      	adds	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b1f      	cmp	r3, #31
 8001074:	ddc8      	ble.n	8001008 <display_data_on_lcd+0x40>
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b1f      	cmp	r3, #31
 8001080:	ddbf      	ble.n	8001002 <display_data_on_lcd+0x3a>
			  // +20 = centering as the screen doesn't start by 0 and its better with a border on every side
		  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001090:	f7ff fe16 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	@ (80010d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f005 fef7 	bl	8006eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fa49 	bl	8000554 <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010c4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80010d0:	08008e60 	.word	0x08008e60
  ldr r2, =_sbss
 80010d4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80010d8:	20000558 	.word	0x20000558

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>

080010de <ls016b8uy_Init>:
  * @brief  Initialize the LS016B8UY LCD Component.
  * @param  None
  * @retval None
  */
void ls016b8uy_Init(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
  uint8_t   parameter[4];

  /* Initialize LS016B8UY low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80010e4:	f001 f972 	bl	80023cc <LCD_IO_Init>
  
  parameter[0] = 0x00;     /* VSYNC output */
 80010e8:	2300      	movs	r3, #0
 80010ea:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_VSYNC_OUTPUT, parameter, 1);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	2035      	movs	r0, #53	@ 0x35
 80010f4:	f000 f9a6 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x06;     /* 18 bits color mode */
 80010f8:	2306      	movs	r3, #6
 80010fa:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_COLOR_MODE, parameter, 1);
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2201      	movs	r2, #1
 8001100:	4619      	mov	r1, r3
 8001102:	203a      	movs	r0, #58	@ 0x3a
 8001104:	f000 f99e 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x01;     /* Panel setting command <No.1 UN-Lock> */
 8001108:	2301      	movs	r3, #1
 800110a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0xFE;
 800110c:	23fe      	movs	r3, #254	@ 0xfe
 800110e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_1, parameter, 2);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2202      	movs	r2, #2
 8001114:	4619      	mov	r1, r3
 8001116:	20b0      	movs	r0, #176	@ 0xb0
 8001118:	f000 f994 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0xDE;     /* Panel setting command <No.2 UN-Lock> */
 800111c:	23de      	movs	r3, #222	@ 0xde
 800111e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x21;
 8001120:	2321      	movs	r3, #33	@ 0x21
 8001122:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_2, parameter, 2);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2202      	movs	r2, #2
 8001128:	4619      	mov	r1, r3
 800112a:	20b1      	movs	r0, #177	@ 0xb1
 800112c:	f000 f98a 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* V-Porch setting */
 8001130:	2305      	movs	r3, #5
 8001132:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 8001134:	2333      	movs	r3, #51	@ 0x33
 8001136:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_V_PORCH, parameter, 2);
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2202      	movs	r2, #2
 800113c:	4619      	mov	r1, r3
 800113e:	20b7      	movs	r0, #183	@ 0xb7
 8001140:	f000 f980 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* Idle mode V-Porch setting */
 8001144:	2305      	movs	r3, #5
 8001146:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 8001148:	2333      	movs	r3, #51	@ 0x33
 800114a:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_IDLE_V_PORCH, parameter, 2);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2202      	movs	r2, #2
 8001150:	4619      	mov	r1, r3
 8001152:	20b8      	movs	r0, #184	@ 0xb8
 8001154:	f000 f976 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x04;     /* panel timing setting */
 8001158:	2304      	movs	r3, #4
 800115a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x03;
 800115c:	2303      	movs	r3, #3
 800115e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_1, parameter, 2);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2202      	movs	r2, #2
 8001164:	4619      	mov	r1, r3
 8001166:	20c8      	movs	r0, #200	@ 0xc8
 8001168:	f000 f96c 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x5E;     /* panel timing setting */
 800116c:	235e      	movs	r3, #94	@ 0x5e
 800116e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x08;
 8001170:	2308      	movs	r3, #8
 8001172:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_2, parameter, 2);
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2202      	movs	r2, #2
 8001178:	4619      	mov	r1, r3
 800117a:	20c9      	movs	r0, #201	@ 0xc9
 800117c:	f000 f962 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x0A;     /* panel timing setting */
 8001180:	230a      	movs	r3, #10
 8001182:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x0C;
 8001184:	230c      	movs	r3, #12
 8001186:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x02;
 8001188:	2302      	movs	r3, #2
 800118a:	71bb      	strb	r3, [r7, #6]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_3, parameter, 3);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2203      	movs	r2, #3
 8001190:	4619      	mov	r1, r3
 8001192:	20ca      	movs	r0, #202	@ 0xca
 8001194:	f000 f956 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* panel timing setting */
 8001198:	2303      	movs	r3, #3
 800119a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x04;
 800119c:	2304      	movs	r3, #4
 800119e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_4, parameter, 2);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2202      	movs	r2, #2
 80011a4:	4619      	mov	r1, r3
 80011a6:	20cc      	movs	r0, #204	@ 0xcc
 80011a8:	f000 f94c 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x0C;     /* panel power setting */
 80011ac:	230c      	movs	r3, #12
 80011ae:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_POWER, parameter, 1);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	20d0      	movs	r0, #208	@ 0xd0
 80011b8:	f000 f944 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x02;     /* Oscillator Setting = 2MHz */
 80011bc:	2302      	movs	r3, #2
 80011be:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_OSCILLATOR, parameter, 1);
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	20b3      	movs	r0, #179	@ 0xb3
 80011c8:	f000 f93c 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x53;     /* GVDD = 4.76V setting */
 80011cc:	2353      	movs	r3, #83	@ 0x53
 80011ce:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_GVDD, parameter, 1);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2201      	movs	r2, #1
 80011d4:	4619      	mov	r1, r3
 80011d6:	20c0      	movs	r0, #192	@ 0xc0
 80011d8:	f000 f934 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Reload MTP After SLPOUT */
 80011dc:	2300      	movs	r3, #0
 80011de:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x45;     /* VCOMH=3.76V */
 80011e0:	2345      	movs	r3, #69	@ 0x45
 80011e2:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_RELOAD_MTP_VCOMH, parameter, 2);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2202      	movs	r2, #2
 80011e8:	4619      	mov	r1, r3
 80011ea:	20c5      	movs	r0, #197	@ 0xc5
 80011ec:	f000 f92a 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* OP-Amp Ability. (Normal) */
 80011f0:	2303      	movs	r3, #3
 80011f2:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x12;     /* Step-up Cycle for AVDD Booster Freq./4 */
 80011f4:	2312      	movs	r3, #18
 80011f6:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_OPAMP, parameter, 2);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2202      	movs	r2, #2
 80011fc:	4619      	mov	r1, r3
 80011fe:	20c2      	movs	r0, #194	@ 0xc2
 8001200:	f000 f920 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Tearing Effect Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
 8001204:	2300      	movs	r3, #0
 8001206:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_TEARING_EFFECT, parameter, 1);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2201      	movs	r2, #1
 800120c:	4619      	mov	r1, r3
 800120e:	20dd      	movs	r0, #221	@ 0xdd
 8001210:	f000 f918 	bl	8001444 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_LOCK, parameter, 0);   /* Panel setting command <Lock> */
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	20b4      	movs	r0, #180	@ 0xb4
 800121c:	f000 f912 	bl	8001444 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_OUT, parameter, 0);            /* Sleep Out Command */
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	2011      	movs	r0, #17
 8001228:	f000 f90c 	bl	8001444 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 800122c:	2096      	movs	r0, #150	@ 0x96
 800122e:	f001 f8f4 	bl	800241a <LCD_IO_Delay>

  parameter[0] = 0x00;     /* CASET */
 8001232:	2300      	movs	r3, #0
 8001234:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x1E;
 8001236:	231e      	movs	r3, #30
 8001238:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xD1;
 800123e:	23d1      	movs	r3, #209	@ 0xd1
 8001240:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2204      	movs	r2, #4
 8001246:	4619      	mov	r1, r3
 8001248:	202a      	movs	r0, #42	@ 0x2a
 800124a:	f000 f8fb 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 800124e:	2300      	movs	r3, #0
 8001250:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x00;
 8001252:	2300      	movs	r3, #0
 8001254:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xB3;
 800125a:	23b3      	movs	r3, #179	@ 0xb3
 800125c:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2204      	movs	r2, #4
 8001262:	4619      	mov	r1, r3
 8001264:	202b      	movs	r0, #43	@ 0x2b
 8001266:	f000 f8ed 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x83;     /* Normal display for Driver Down side */
 800126a:	2383      	movs	r3, #131	@ 0x83
 800126c:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_NORMAL_DISPLAY, parameter, 1);
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2201      	movs	r2, #1
 8001272:	4619      	mov	r1, r3
 8001274:	2036      	movs	r0, #54	@ 0x36
 8001276:	f000 f8e5 	bl	8001444 <ls016b8uy_WriteReg>

  ls016b8uy_DisplayOn();   /* Display ON command */
 800127a:	f000 f804 	bl	8001286 <ls016b8uy_DisplayOn>

}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <ls016b8uy_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOn(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_ON, (uint8_t*)NULL, 0);    /* Display ON command */
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2029      	movs	r0, #41	@ 0x29
 8001290:	f000 f8d8 	bl	8001444 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_IDLE_MODE_OFF, (uint8_t*)NULL, 0); /* Idle mode OFF command */
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2038      	movs	r0, #56	@ 0x38
 800129a:	f000 f8d3 	bl	8001444 <ls016b8uy_WriteReg>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <ls016b8uy_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOff(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_OFF, (uint8_t*)NULL, 0);   /* Display OFF command */
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2028      	movs	r0, #40	@ 0x28
 80012ac:	f000 f8ca 	bl	8001444 <ls016b8uy_WriteReg>
  LCD_IO_Delay(20);   /* Wait for 20ms */
 80012b0:	2014      	movs	r0, #20
 80012b2:	f001 f8b2 	bl	800241a <LCD_IO_Delay>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_IN, (uint8_t*)NULL, 0);      /* Sleep In Command */
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2010      	movs	r0, #16
 80012bc:	f000 f8c2 	bl	8001444 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 80012c0:	2096      	movs	r0, #150	@ 0x96
 80012c2:	f001 f8aa 	bl	800241a <LCD_IO_Delay>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}

080012ca <ls016b8uy_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ls016b8uy_GetLcdPixelWidth(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_WIDTH;
 80012ce:	23b4      	movs	r3, #180	@ 0xb4
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <ls016b8uy_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ls016b8uy_GetLcdPixelHeight(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_HEIGHT;
 80012de:	23b4      	movs	r3, #180	@ 0xb4
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <ls016b8uy_ReadID>:
  * @brief  Get the LS016B8UY ID.
  * @param  None
  * @retval The LS016B8UY ID 
  */
uint16_t ls016b8uy_ReadID(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 80012ee:	f001 f86d 	bl	80023cc <LCD_IO_Init>
  /* TODO : LCD read ID command not known for now, so assumption that the connected LCD is LS016B8UY */
  return (LS016B8UY_ID);
 80012f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}

080012fa <ls016b8uy_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ls016b8uy_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	460a      	mov	r2, r1
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	4613      	mov	r3, r2
 8001308:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];

  parameter[0] = 0x00;     /* CASET */
 800130a:	2300      	movs	r3, #0
 800130c:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x1E + Xpos;
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	331e      	adds	r3, #30
 8001314:	b2db      	uxtb	r3, r3
 8001316:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001318:	2300      	movs	r3, #0
 800131a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xD1 + Xpos;
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	3b2f      	subs	r3, #47	@ 0x2f
 8001322:	b2db      	uxtb	r3, r3
 8001324:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2204      	movs	r2, #4
 800132c:	4619      	mov	r1, r3
 800132e:	202a      	movs	r0, #42	@ 0x2a
 8001330:	f000 f888 	bl	8001444 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 8001334:	2300      	movs	r3, #0
 8001336:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xB3 + Ypos;
 8001342:	88bb      	ldrh	r3, [r7, #4]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	3b4d      	subs	r3, #77	@ 0x4d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2204      	movs	r2, #4
 8001352:	4619      	mov	r1, r3
 8001354:	202b      	movs	r0, #43	@ 0x2b
 8001356:	f000 f875 	bl	8001444 <ls016b8uy_WriteReg>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <ls016b8uy_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ls016b8uy_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	460b      	mov	r3, r1
 800136e:	80bb      	strh	r3, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	807b      	strh	r3, [r7, #2]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2;

  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	0adb      	lsrs	r3, r3, #11
 8001378:	82fb      	strh	r3, [r7, #22]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	115b      	asrs	r3, r3, #5
 800137e:	b29b      	uxth	r3, r3
 8001380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001384:	82bb      	strh	r3, [r7, #20]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	827b      	strh	r3, [r7, #18]

  /* Prepare data to write with new pixel components and read old pixel component */
  rgb888_part1 = (r << 11) + (g << 2);
 800138e:	8afb      	ldrh	r3, [r7, #22]
 8001390:	02db      	lsls	r3, r3, #11
 8001392:	b29a      	uxth	r2, r3
 8001394:	8abb      	ldrh	r3, [r7, #20]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	b29b      	uxth	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	823b      	strh	r3, [r7, #16]
  rgb888_part2 = (b << 11);
 800139e:	8a7b      	ldrh	r3, [r7, #18]
 80013a0:	02db      	lsls	r3, r3, #11
 80013a2:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80013a4:	88ba      	ldrh	r2, [r7, #4]
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ffa5 	bl	80012fa <ls016b8uy_SetCursor>

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	202c      	movs	r0, #44	@ 0x2c
 80013b6:	f000 f845 	bl	8001444 <ls016b8uy_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(rgb888_part1);
 80013ba:	8a3b      	ldrh	r3, [r7, #16]
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 f80b 	bl	80023d8 <LCD_IO_WriteData>
  LCD_IO_WriteData(rgb888_part2);
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 f807 	bl	80023d8 <LCD_IO_WriteData>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <ls016b8uy_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ls016b8uy_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	460a      	mov	r2, r1
 80013dc:	80fb      	strh	r3, [r7, #6]
 80013de:	4613      	mov	r3, r2
 80013e0:	80bb      	strh	r3, [r7, #4]
  LS016B8UY_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80013e2:	88ba      	ldrh	r2, [r7, #4]
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff86 	bl	80012fa <ls016b8uy_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ls016b8uy_ReadPixel_rgb888(Xpos, Ypos);
 80013ee:	88ba      	ldrh	r2, [r7, #4]
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f9e1 	bl	80017bc <ls016b8uy_ReadPixel_rgb888>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	733a      	strb	r2, [r7, #12]
 8001400:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001404:	737a      	strb	r2, [r7, #13]
 8001406:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800140a:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800140c:	7b3b      	ldrb	r3, [r7, #12]
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	08db      	lsrs	r3, r3, #3
 800141c:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	b29b      	uxth	r3, r3
 8001422:	02db      	lsls	r3, r3, #11
 8001424:	b29a      	uxth	r2, r3
 8001426:	7dbb      	ldrb	r3, [r7, #22]
 8001428:	b29b      	uxth	r3, r3
 800142a:	015b      	lsls	r3, r3, #5
 800142c:	b29b      	uxth	r3, r3
 800142e:	4413      	add	r3, r2
 8001430:	b29a      	uxth	r2, r3
 8001432:	7d7b      	ldrb	r3, [r7, #21]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4413      	add	r3, r2
 8001438:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800143a:	8a7b      	ldrh	r3, [r7, #18]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <ls016b8uy_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ls016b8uy_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4613      	mov	r3, r2
 8001452:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 ffcb 	bl	80023f2 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e009      	b.n	8001476 <ls016b8uy_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 ffb4 	bl	80023d8 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	3301      	adds	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	429a      	cmp	r2, r3
 800147c:	d3f1      	bcc.n	8001462 <ls016b8uy_WriteReg+0x1e>
  }
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <ls016b8uy_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ls016b8uy_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001488:	b490      	push	{r4, r7}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4623      	mov	r3, r4
 8001498:	80fb      	strh	r3, [r7, #6]
 800149a:	4603      	mov	r3, r0
 800149c:	80bb      	strh	r3, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	807b      	strh	r3, [r7, #2]
 80014a2:	4613      	mov	r3, r2
 80014a4:	803b      	strh	r3, [r7, #0]
  if (Xpos < LS016B8UY_LCD_PIXEL_WIDTH)
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	2bb3      	cmp	r3, #179	@ 0xb3
 80014aa:	d803      	bhi.n	80014b4 <ls016b8uy_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80014ac:	4a1b      	ldr	r2, [pc, #108]	@ (800151c <ls016b8uy_SetDisplayWindow+0x94>)
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	8013      	strh	r3, [r2, #0]
 80014b2:	e002      	b.n	80014ba <ls016b8uy_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <ls016b8uy_SetDisplayWindow+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < LS016B8UY_LCD_PIXEL_HEIGHT)
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	2bb3      	cmp	r3, #179	@ 0xb3
 80014be:	d803      	bhi.n	80014c8 <ls016b8uy_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80014c0:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <ls016b8uy_SetDisplayWindow+0x98>)
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	8013      	strh	r3, [r2, #0]
 80014c6:	e002      	b.n	80014ce <ls016b8uy_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <ls016b8uy_SetDisplayWindow+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= LS016B8UY_LCD_PIXEL_WIDTH)
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4413      	add	r3, r2
 80014d4:	2bb4      	cmp	r3, #180	@ 0xb4
 80014d6:	dc08      	bgt.n	80014ea <ls016b8uy_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80014d8:	887a      	ldrh	r2, [r7, #2]
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	4413      	add	r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <ls016b8uy_SetDisplayWindow+0x9c>)
 80014e6:	801a      	strh	r2, [r3, #0]
 80014e8:	e002      	b.n	80014f0 <ls016b8uy_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = LS016B8UY_LCD_PIXEL_WIDTH - 1;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <ls016b8uy_SetDisplayWindow+0x9c>)
 80014ec:	22b3      	movs	r2, #179	@ 0xb3
 80014ee:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= LS016B8UY_LCD_PIXEL_HEIGHT)
 80014f0:	883a      	ldrh	r2, [r7, #0]
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	2bb4      	cmp	r3, #180	@ 0xb4
 80014f8:	dc08      	bgt.n	800150c <ls016b8uy_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80014fa:	883a      	ldrh	r2, [r7, #0]
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	b29b      	uxth	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <ls016b8uy_SetDisplayWindow+0xa0>)
 8001508:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
  }
}
 800150a:	e002      	b.n	8001512 <ls016b8uy_SetDisplayWindow+0x8a>
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <ls016b8uy_SetDisplayWindow+0xa0>)
 800150e:	22b3      	movs	r2, #179	@ 0xb3
 8001510:	801a      	strh	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bc90      	pop	{r4, r7}
 800151a:	4770      	bx	lr
 800151c:	2000015c 	.word	0x2000015c
 8001520:	2000015e 	.word	0x2000015e
 8001524:	2000003c 	.word	0x2000003c
 8001528:	2000003e 	.word	0x2000003e

0800152c <ls016b8uy_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	82fb      	strh	r3, [r7, #22]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2, rgb888_part3;
  
  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	0adb      	lsrs	r3, r3, #11
 8001552:	82bb      	strh	r3, [r7, #20]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	115b      	asrs	r3, r3, #5
 8001558:	b29b      	uxth	r3, r3
 800155a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800155e:	827b      	strh	r3, [r7, #18]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	823b      	strh	r3, [r7, #16]

  rgb888_part1 = (r << 11) + (g << 2); /* Build pattern first part to write in LCD RAM */
 8001568:	8abb      	ldrh	r3, [r7, #20]
 800156a:	02db      	lsls	r3, r3, #11
 800156c:	b29a      	uxth	r2, r3
 800156e:	8a7b      	ldrh	r3, [r7, #18]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	b29b      	uxth	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	81fb      	strh	r3, [r7, #14]
  rgb888_part2 = (b << 11) + (r << 3); /* Build pattern second part to write in LCD RAM */
 8001578:	8a3b      	ldrh	r3, [r7, #16]
 800157a:	02db      	lsls	r3, r3, #11
 800157c:	b29a      	uxth	r2, r3
 800157e:	8abb      	ldrh	r3, [r7, #20]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	81bb      	strh	r3, [r7, #12]
  rgb888_part3 = (g << 10) + (b << 3); /* Build pattern third part to write in LCD RAM */
 8001588:	8a7b      	ldrh	r3, [r7, #18]
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	b29a      	uxth	r2, r3
 800158e:	8a3b      	ldrh	r3, [r7, #16]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	b29b      	uxth	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	817b      	strh	r3, [r7, #10]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos); 
 8001598:	887a      	ldrh	r2, [r7, #2]
 800159a:	88bb      	ldrh	r3, [r7, #4]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff feab 	bl	80012fa <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	202c      	movs	r0, #44	@ 0x2c
 80015aa:	f7ff ff4b 	bl	8001444 <ls016b8uy_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter+=2)
 80015ae:	2300      	movs	r3, #0
 80015b0:	82fb      	strh	r3, [r7, #22]
 80015b2:	e013      	b.n	80015dc <ls016b8uy_DrawHLine+0xb0>
  {
    /* Write 2 pixels at a time by performing 3 access (pixels coded on 24 bits in LCD RAM whereas access are coded on 16 bits) */
    LCD_IO_WriteData(rgb888_part1);
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 ff0e 	bl	80023d8 <LCD_IO_WriteData>
    LCD_IO_WriteData(rgb888_part2);
 80015bc:	89bb      	ldrh	r3, [r7, #12]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 ff0a 	bl	80023d8 <LCD_IO_WriteData>
    if (counter != (Length-1))  /* When writing last pixel when Length is odd, the third part is not written */
 80015c4:	8afa      	ldrh	r2, [r7, #22]
 80015c6:	883b      	ldrh	r3, [r7, #0]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d003      	beq.n	80015d6 <ls016b8uy_DrawHLine+0xaa>
    {
      LCD_IO_WriteData(rgb888_part3);
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 ff01 	bl	80023d8 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter+=2)
 80015d6:	8afb      	ldrh	r3, [r7, #22]
 80015d8:	3302      	adds	r3, #2
 80015da:	82fb      	strh	r3, [r7, #22]
 80015dc:	8afa      	ldrh	r2, [r7, #22]
 80015de:	883b      	ldrh	r3, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3e7      	bcc.n	80015b4 <ls016b8uy_DrawHLine+0x88>
    }
  }  
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}

080015ee <ls016b8uy_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4604      	mov	r4, r0
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4623      	mov	r3, r4
 80015fe:	80fb      	strh	r3, [r7, #6]
 8001600:	4603      	mov	r3, r0
 8001602:	80bb      	strh	r3, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8001610:	887a      	ldrh	r2, [r7, #2]
 8001612:	88bb      	ldrh	r3, [r7, #4]
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fe6f 	bl	80012fa <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	202c      	movs	r0, #44	@ 0x2c
 8001622:	f7ff ff0f 	bl	8001444 <ls016b8uy_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001626:	2300      	movs	r3, #0
 8001628:	81fb      	strh	r3, [r7, #14]
 800162a:	e00b      	b.n	8001644 <ls016b8uy_DrawVLine+0x56>
  {
    ls016b8uy_WritePixel(Xpos, Ypos + counter, RGBCode);
 800162c:	887a      	ldrh	r2, [r7, #2]
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	4413      	add	r3, r2
 8001632:	b299      	uxth	r1, r3
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe92 	bl	8001362 <ls016b8uy_WritePixel>
  for(counter = 0; counter < Length; counter++)
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	3301      	adds	r3, #1
 8001642:	81fb      	strh	r3, [r7, #14]
 8001644:	89fa      	ldrh	r2, [r7, #14]
 8001646:	883b      	ldrh	r3, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3ef      	bcc.n	800162c <ls016b8uy_DrawVLine+0x3e>
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
	...

08001658 <ls016b8uy_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ls016b8uy_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	603a      	str	r2, [r7, #0]
 8001662:	80fb      	strh	r3, [r7, #6]
 8001664:	460b      	mov	r3, r1
 8001666:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001674:	4b30      	ldr	r3, [pc, #192]	@ (8001738 <ls016b8uy_DrawBitmap+0xe0>)
 8001676:	881a      	ldrh	r2, [r3, #0]
 8001678:	4b30      	ldr	r3, [pc, #192]	@ (800173c <ls016b8uy_DrawBitmap+0xe4>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001684:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <ls016b8uy_DrawBitmap+0xe8>)
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <ls016b8uy_DrawBitmap+0xec>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3302      	adds	r3, #2
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	3304      	adds	r3, #4
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	041b      	lsls	r3, r3, #16
 80016a8:	461a      	mov	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	330a      	adds	r3, #10
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	330c      	adds	r3, #12
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	461a      	mov	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	085b      	lsrs	r3, r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4413      	add	r3, r2
 80016dc:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80016de:	88ba      	ldrh	r2, [r7, #4]
 80016e0:	89bb      	ldrh	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e01d      	b.n	8001724 <ls016b8uy_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY - 1);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fe00 	bl	80012fa <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3b01      	subs	r3, #1
 8001700:	b299      	uxth	r1, r3
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	4413      	add	r3, r2
 8001710:	89fa      	ldrh	r2, [r7, #14]
 8001712:	88f8      	ldrh	r0, [r7, #6]
 8001714:	f000 f89c 	bl	8001850 <ls016b8uy_DrawRGBHLine>
    nb_line++;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	3301      	adds	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b01      	subs	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	88bb      	ldrh	r3, [r7, #4]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8dd      	bhi.n	80016e8 <ls016b8uy_DrawBitmap+0x90>
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000003c 	.word	0x2000003c
 800173c:	2000015c 	.word	0x2000015c
 8001740:	2000003e 	.word	0x2000003e
 8001744:	2000015e 	.word	0x2000015e

08001748 <ls016b8uy_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ls016b8uy_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	4604      	mov	r4, r0
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4623      	mov	r3, r4
 8001758:	80fb      	strh	r3, [r7, #6]
 800175a:	4603      	mov	r3, r0
 800175c:	80bb      	strh	r3, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	807b      	strh	r3, [r7, #2]
 8001762:	4613      	mov	r3, r2
 8001764:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800176a:	88bb      	ldrh	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e019      	b.n	80017a4 <ls016b8uy_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	b29a      	uxth	r2, r3
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fdbe 	bl	80012fa <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	b299      	uxth	r1, r3
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	6a3a      	ldr	r2, [r7, #32]
 800178e:	4413      	add	r3, r2
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	88f8      	ldrh	r0, [r7, #6]
 8001794:	f000 f85c 	bl	8001850 <ls016b8uy_DrawRGBHLine>
    nb_line++;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	3301      	adds	r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	88ba      	ldrh	r2, [r7, #4]
 80017a6:	883b      	ldrh	r3, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d3de      	bcc.n	8001770 <ls016b8uy_DrawRGBImage+0x28>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}

080017bc <ls016b8uy_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static LS016B8UY_Rgb888 ls016b8uy_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	80fb      	strh	r3, [r7, #6]
 80017c8:	4613      	mov	r3, r2
 80017ca:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fd91 	bl	80012fa <ls016b8uy_SetCursor>
  /* Prepare to read LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	202e      	movs	r0, #46	@ 0x2e
 80017de:	f7ff fe31 	bl	8001444 <ls016b8uy_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80017e2:	f000 fe13 	bl	800240c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80017e6:	f000 fe11 	bl	800240c <LCD_IO_ReadData>
 80017ea:	4603      	mov	r3, r0
 80017ec:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80017ee:	f000 fe0d 	bl	800240c <LCD_IO_ReadData>
 80017f2:	4603      	mov	r3, r0
 80017f4:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80017f6:	8afb      	ldrh	r3, [r7, #22]
 80017f8:	121b      	asrs	r3, r3, #8
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f023 0303 	bic.w	r3, r3, #3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8001804:	8afb      	ldrh	r3, [r7, #22]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f023 0303 	bic.w	r3, r3, #3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8001810:	8abb      	ldrh	r3, [r7, #20]
 8001812:	121b      	asrs	r3, r3, #8
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	f107 020c 	add.w	r2, r7, #12
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	4611      	mov	r1, r2
 800182a:	8019      	strh	r1, [r3, #0]
 800182c:	3302      	adds	r3, #2
 800182e:	0c12      	lsrs	r2, r2, #16
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	7c3a      	ldrb	r2, [r7, #16]
 8001836:	f362 0307 	bfi	r3, r2, #0, #8
 800183a:	7c7a      	ldrb	r2, [r7, #17]
 800183c:	f362 230f 	bfi	r3, r2, #8, #8
 8001840:	7cba      	ldrb	r2, [r7, #18]
 8001842:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <ls016b8uy_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ls016b8uy_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	4603      	mov	r3, r0
 800185a:	81fb      	strh	r3, [r7, #14]
 800185c:	460b      	mov	r3, r1
 800185e:	81bb      	strh	r3, [r7, #12]
 8001860:	4613      	mov	r3, r2
 8001862:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t posX;
  uint16_t r, g, b;
  uint16_t rgb888_part;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	61fb      	str	r3, [r7, #28]

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	202c      	movs	r0, #44	@ 0x2c
 8001872:	f7ff fde7 	bl	8001444 <ls016b8uy_WriteReg>

  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 8001876:	89fb      	ldrh	r3, [r7, #14]
 8001878:	623b      	str	r3, [r7, #32]
 800187a:	e07b      	b.n	8001974 <ls016b8uy_DrawRGBHLine+0x124>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800187c:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <ls016b8uy_DrawRGBHLine+0x140>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	4293      	cmp	r3, r2
 8001886:	d372      	bcc.n	800196e <ls016b8uy_DrawRGBHLine+0x11e>
 8001888:	4b42      	ldr	r3, [pc, #264]	@ (8001994 <ls016b8uy_DrawRGBHLine+0x144>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	89ba      	ldrh	r2, [r7, #12]
 800188e:	429a      	cmp	r2, r3
 8001890:	d36d      	bcc.n	800196e <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <ls016b8uy_DrawRGBHLine+0x148>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	4293      	cmp	r3, r2
 800189c:	d867      	bhi.n	800196e <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800189e:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <ls016b8uy_DrawRGBHLine+0x14c>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	89ba      	ldrh	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d862      	bhi.n	800196e <ls016b8uy_DrawRGBHLine+0x11e>
    {
      /* Write pixels in LCD RAM after RGB565 -> RGB888 conversion */
      /* As data in LCD RAM are 24bits packed, three 16 bits writes access are needed to transmit 2 pixels data */

      r = (rgb565[i] & 0xF800) >> 11;      /* Extract red component from first RGB565 pixel data */
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	4413      	add	r3, r2
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	0adb      	lsrs	r3, r3, #11
 80018b4:	837b      	strh	r3, [r7, #26]
      g = (rgb565[i] & 0x07E0) >> 5;       /* Extract green component from first RGB565 pixel data  */
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	115b      	asrs	r3, r3, #5
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018c8:	833b      	strh	r3, [r7, #24]
      rgb888_part = (r << 11) + (g << 2);  /* Build data to be written in LCD RAM */
 80018ca:	8b7b      	ldrh	r3, [r7, #26]
 80018cc:	02db      	lsls	r3, r3, #11
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	8b3b      	ldrh	r3, [r7, #24]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 80018da:	8afb      	ldrh	r3, [r7, #22]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fd7b 	bl	80023d8 <LCD_IO_WriteData>

      b = (rgb565[i] & 0x001F) >> 0;       /* Extract blue component from first RGB565 pixel data  */
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	82bb      	strh	r3, [r7, #20]
      r = (rgb565[i+1] & 0xF800) >> 11;    /* Extract red component from second RGB565 pixel data  */
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	3301      	adds	r3, #1
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	0adb      	lsrs	r3, r3, #11
 8001900:	837b      	strh	r3, [r7, #26]
      rgb888_part = (b << 11) + (r << 3);  /* Build data to be written in LCD RAM */
 8001902:	8abb      	ldrh	r3, [r7, #20]
 8001904:	02db      	lsls	r3, r3, #11
 8001906:	b29a      	uxth	r2, r3
 8001908:	8b7b      	ldrh	r3, [r7, #26]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	b29b      	uxth	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 8001912:	8afb      	ldrh	r3, [r7, #22]
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fd5f 	bl	80023d8 <LCD_IO_WriteData>

      if (posX != (Xsize + Xpos - 1))     /* When writing last pixel when size is odd, the third part is not written */
 800191a:	897a      	ldrh	r2, [r7, #10]
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	4413      	add	r3, r2
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	429a      	cmp	r2, r3
 8001926:	d01f      	beq.n	8001968 <ls016b8uy_DrawRGBHLine+0x118>
      {
        g = (rgb565[i+1] & 0x07E0) >> 5;     /* Extract green component from second RGB565 pixel data */
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	3301      	adds	r3, #1
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	115b      	asrs	r3, r3, #5
 8001936:	b29b      	uxth	r3, r3
 8001938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800193c:	833b      	strh	r3, [r7, #24]
        b = (rgb565[i+1] & 0x001F) >> 0;     /* Extract blue component from second RGB565 pixel data */
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	3301      	adds	r3, #1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	4413      	add	r3, r2
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	82bb      	strh	r3, [r7, #20]
        rgb888_part = (g << 10) + (b << 3);  /* Build data to be written in LCD RAM */
 8001950:	8b3b      	ldrh	r3, [r7, #24]
 8001952:	029b      	lsls	r3, r3, #10
 8001954:	b29a      	uxth	r2, r3
 8001956:	8abb      	ldrh	r3, [r7, #20]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	b29b      	uxth	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	82fb      	strh	r3, [r7, #22]
        LCD_IO_WriteData(rgb888_part);
 8001960:	8afb      	ldrh	r3, [r7, #22]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fd38 	bl	80023d8 <LCD_IO_WriteData>
      }

      i += 2;
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	3302      	adds	r3, #2
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	3302      	adds	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
 8001974:	897a      	ldrh	r2, [r7, #10]
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	4413      	add	r3, r2
 800197a:	461a      	mov	r2, r3
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	4293      	cmp	r3, r2
 8001980:	f4ff af7c 	bcc.w	800187c <ls016b8uy_DrawRGBHLine+0x2c>
    }
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000015c 	.word	0x2000015c
 8001994:	2000015e 	.word	0x2000015e
 8001998:	2000003c 	.word	0x2000003c
 800199c:	2000003e 	.word	0x2000003e

080019a0 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019a6:	f000 fd11 	bl	80023cc <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2010      	movs	r0, #16
 80019b0:	f000 f9e3 	bl	8001d7a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80019b4:	200a      	movs	r0, #10
 80019b6:	f000 fd30 	bl	800241a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	2001      	movs	r0, #1
 80019c0:	f000 f9db 	bl	8001d7a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80019c4:	20c8      	movs	r0, #200	@ 0xc8
 80019c6:	f000 fd28 	bl	800241a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2011      	movs	r0, #17
 80019d0:	f000 f9d3 	bl	8001d7a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80019d4:	2078      	movs	r0, #120	@ 0x78
 80019d6:	f000 fd20 	bl	800241a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80019da:	2300      	movs	r3, #0
 80019dc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80019de:	463b      	mov	r3, r7
 80019e0:	2201      	movs	r2, #1
 80019e2:	4619      	mov	r1, r3
 80019e4:	2036      	movs	r0, #54	@ 0x36
 80019e6:	f000 f9c8 	bl	8001d7a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80019ea:	2305      	movs	r3, #5
 80019ec:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80019ee:	463b      	mov	r3, r7
 80019f0:	2201      	movs	r2, #1
 80019f2:	4619      	mov	r1, r3
 80019f4:	203a      	movs	r0, #58	@ 0x3a
 80019f6:	f000 f9c0 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2021      	movs	r0, #33	@ 0x21
 8001a00:	f000 f9bb 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001a04:	2300      	movs	r3, #0
 8001a06:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a10:	23ef      	movs	r3, #239	@ 0xef
 8001a12:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001a14:	463b      	mov	r3, r7
 8001a16:	2204      	movs	r2, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	202a      	movs	r0, #42	@ 0x2a
 8001a1c:	f000 f9ad 	bl	8001d7a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001a20:	2300      	movs	r3, #0
 8001a22:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a2c:	23ef      	movs	r3, #239	@ 0xef
 8001a2e:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001a30:	463b      	mov	r3, r7
 8001a32:	2204      	movs	r2, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	202b      	movs	r0, #43	@ 0x2b
 8001a38:	f000 f99f 	bl	8001d7a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001a40:	230c      	movs	r3, #12
 8001a42:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a44:	2300      	movs	r3, #0
 8001a46:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001a48:	2333      	movs	r3, #51	@ 0x33
 8001a4a:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001a4c:	2333      	movs	r3, #51	@ 0x33
 8001a4e:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001a50:	463b      	mov	r3, r7
 8001a52:	2205      	movs	r2, #5
 8001a54:	4619      	mov	r1, r3
 8001a56:	20b2      	movs	r0, #178	@ 0xb2
 8001a58:	f000 f98f 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001a5c:	2335      	movs	r3, #53	@ 0x35
 8001a5e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001a60:	463b      	mov	r3, r7
 8001a62:	2201      	movs	r2, #1
 8001a64:	4619      	mov	r1, r3
 8001a66:	20b7      	movs	r0, #183	@ 0xb7
 8001a68:	f000 f987 	bl	8001d7a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001a6c:	231f      	movs	r3, #31
 8001a6e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001a70:	463b      	mov	r3, r7
 8001a72:	2201      	movs	r2, #1
 8001a74:	4619      	mov	r1, r3
 8001a76:	20bb      	movs	r0, #187	@ 0xbb
 8001a78:	f000 f97f 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001a7c:	232c      	movs	r3, #44	@ 0x2c
 8001a7e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001a80:	463b      	mov	r3, r7
 8001a82:	2201      	movs	r2, #1
 8001a84:	4619      	mov	r1, r3
 8001a86:	20c0      	movs	r0, #192	@ 0xc0
 8001a88:	f000 f977 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001a90:	23c3      	movs	r3, #195	@ 0xc3
 8001a92:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001a94:	463b      	mov	r3, r7
 8001a96:	2202      	movs	r2, #2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	20c2      	movs	r0, #194	@ 0xc2
 8001a9c:	f000 f96d 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	20c4      	movs	r0, #196	@ 0xc4
 8001aac:	f000 f965 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4619      	mov	r1, r3
 8001aba:	20c6      	movs	r0, #198	@ 0xc6
 8001abc:	f000 f95d 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001ac0:	23a4      	movs	r3, #164	@ 0xa4
 8001ac2:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001ac4:	23a1      	movs	r3, #161	@ 0xa1
 8001ac6:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2202      	movs	r2, #2
 8001acc:	4619      	mov	r1, r3
 8001ace:	20d0      	movs	r0, #208	@ 0xd0
 8001ad0:	f000 f953 	bl	8001d7a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001ad4:	23d0      	movs	r3, #208	@ 0xd0
 8001ad6:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001adc:	2311      	movs	r3, #17
 8001ade:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001ae8:	2315      	movs	r3, #21
 8001aea:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001aec:	2339      	movs	r3, #57	@ 0x39
 8001aee:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001af0:	2333      	movs	r3, #51	@ 0x33
 8001af2:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001af4:	2350      	movs	r3, #80	@ 0x50
 8001af6:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001af8:	2336      	movs	r3, #54	@ 0x36
 8001afa:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001afc:	2313      	movs	r3, #19
 8001afe:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b00:	2314      	movs	r3, #20
 8001b02:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001b04:	2329      	movs	r3, #41	@ 0x29
 8001b06:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001b08:	232d      	movs	r3, #45	@ 0x2d
 8001b0a:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	220e      	movs	r2, #14
 8001b10:	4619      	mov	r1, r3
 8001b12:	20e0      	movs	r0, #224	@ 0xe0
 8001b14:	f000 f931 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001b18:	23d0      	movs	r3, #208	@ 0xd0
 8001b1a:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001b20:	2310      	movs	r3, #16
 8001b22:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001b24:	2308      	movs	r3, #8
 8001b26:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001b28:	2306      	movs	r3, #6
 8001b2a:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001b30:	2339      	movs	r3, #57	@ 0x39
 8001b32:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001b34:	2344      	movs	r3, #68	@ 0x44
 8001b36:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001b38:	2351      	movs	r3, #81	@ 0x51
 8001b3a:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001b3c:	230b      	movs	r3, #11
 8001b3e:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001b40:	2316      	movs	r3, #22
 8001b42:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b44:	2314      	movs	r3, #20
 8001b46:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001b48:	232f      	movs	r3, #47	@ 0x2f
 8001b4a:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001b4c:	2331      	movs	r3, #49	@ 0x31
 8001b4e:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001b50:	463b      	mov	r3, r7
 8001b52:	220e      	movs	r2, #14
 8001b54:	4619      	mov	r1, r3
 8001b56:	20e1      	movs	r0, #225	@ 0xe1
 8001b58:	f000 f90f 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001b5c:	f000 f847 	bl	8001bee <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001b60:	2300      	movs	r3, #0
 8001b62:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001b64:	463b      	mov	r3, r7
 8001b66:	2201      	movs	r2, #1
 8001b68:	4619      	mov	r1, r3
 8001b6a:	2035      	movs	r0, #53	@ 0x35
 8001b6c:	f000 f905 	bl	8001d7a <ST7789H2_WriteReg>

}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001b86:	2300      	movs	r3, #0
 8001b88:	723b      	strb	r3, [r7, #8]
 8001b8a:	e025      	b.n	8001bd8 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d120      	bne.n	8001bd4 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001b92:	2300      	movs	r3, #0
 8001b94:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001b9e:	23f0      	movs	r3, #240	@ 0xf0
 8001ba0:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	2206      	movs	r2, #6
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	2033      	movs	r0, #51	@ 0x33
 8001bb4:	f000 f8e1 	bl	8001d7a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001bbc:	2350      	movs	r3, #80	@ 0x50
 8001bbe:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	2037      	movs	r0, #55	@ 0x37
 8001bca:	f000 f8d6 	bl	8001d7a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001bce:	23c0      	movs	r3, #192	@ 0xc0
 8001bd0:	723b      	strb	r3, [r7, #8]
 8001bd2:	e001      	b.n	8001bd8 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001bd4:	2360      	movs	r3, #96	@ 0x60
 8001bd6:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4619      	mov	r1, r3
 8001be0:	2036      	movs	r0, #54	@ 0x36
 8001be2:	f000 f8ca 	bl	8001d7a <ST7789H2_WriteReg>
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2029      	movs	r0, #41	@ 0x29
 8001bf8:	f000 f8bf 	bl	8001d7a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2011      	movs	r0, #17
 8001c02:	f000 f8ba 	bl	8001d7a <ST7789H2_WriteReg>
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8001c10:	23fe      	movs	r3, #254	@ 0xfe
 8001c12:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2201      	movs	r2, #1
 8001c18:	4619      	mov	r1, r3
 8001c1a:	20bd      	movs	r0, #189	@ 0xbd
 8001c1c:	f000 f8ad 	bl	8001d7a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2010      	movs	r0, #16
 8001c26:	f000 f8a8 	bl	8001d7a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f000 fbf5 	bl	800241a <LCD_IO_Delay>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8001c3c:	23f0      	movs	r3, #240	@ 0xf0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8001c4c:	23f0      	movs	r3, #240	@ 0xf0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c5c:	f000 fbb6 	bl	80023cc <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001c60:	2004      	movs	r0, #4
 8001c62:	f000 f8ac 	bl	8001dbe <ST7789H2_ReadReg>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	460a      	mov	r2, r1
 8001c76:	80fb      	strh	r3, [r7, #6]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b11      	subs	r3, #17
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	202a      	movs	r0, #42	@ 0x2a
 8001c9e:	f000 f86c 	bl	8001d7a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001ca6:	88bb      	ldrh	r3, [r7, #4]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	3b11      	subs	r3, #17
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	202b      	movs	r0, #43	@ 0x2b
 8001cc4:	f000 f859 	bl	8001d7a <ST7789H2_WriteReg>
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	80bb      	strh	r3, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001ce2:	88ba      	ldrh	r2, [r7, #4]
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ffbf 	bl	8001c6c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	202c      	movs	r0, #44	@ 0x2c
 8001cf4:	f000 f841 	bl	8001d7a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fb6c 	bl	80023d8 <LCD_IO_WriteData>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460a      	mov	r2, r1
 8001d12:	80fb      	strh	r3, [r7, #6]
 8001d14:	4613      	mov	r3, r2
 8001d16:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001d18:	88ba      	ldrh	r2, [r7, #4]
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ffa4 	bl	8001c6c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f9be 	bl	80020ac <ST7789H2_ReadPixel_rgb888>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	733a      	strb	r2, [r7, #12]
 8001d36:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d3a:	737a      	strb	r2, [r7, #13]
 8001d3c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d40:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001d42:	7b3b      	ldrb	r3, [r7, #12]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001d48:	7b7b      	ldrb	r3, [r7, #13]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	02db      	lsls	r3, r3, #11
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	7dbb      	ldrb	r3, [r7, #22]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	015b      	lsls	r3, r3, #5
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	7d7b      	ldrb	r3, [r7, #21]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8001d70:	8a7b      	ldrh	r3, [r7, #18]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	6039      	str	r1, [r7, #0]
 8001d84:	71fb      	strb	r3, [r7, #7]
 8001d86:	4613      	mov	r3, r2
 8001d88:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fb30 	bl	80023f2 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e009      	b.n	8001dac <ST7789H2_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fb19 	bl	80023d8 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	3301      	adds	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d3f1      	bcc.n	8001d98 <ST7789H2_WriteReg+0x1e>
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fb11 	bl	80023f2 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8001dd0:	f000 fb1c 	bl	800240c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8001dd4:	f000 fb1a 	bl	800240c <LCD_IO_ReadData>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b2db      	uxtb	r3, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001de4:	b490      	push	{r4, r7}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4604      	mov	r4, r0
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4623      	mov	r3, r4
 8001df4:	80fb      	strh	r3, [r7, #6]
 8001df6:	4603      	mov	r3, r0
 8001df8:	80bb      	strh	r3, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	807b      	strh	r3, [r7, #2]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	2bef      	cmp	r3, #239	@ 0xef
 8001e06:	d803      	bhi.n	8001e10 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8001e08:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <ST7789H2_SetDisplayWindow+0x94>)
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	8013      	strh	r3, [r2, #0]
 8001e0e:	e002      	b.n	8001e16 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <ST7789H2_SetDisplayWindow+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8001e16:	88bb      	ldrh	r3, [r7, #4]
 8001e18:	2bef      	cmp	r3, #239	@ 0xef
 8001e1a:	d803      	bhi.n	8001e24 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8001e1c:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <ST7789H2_SetDisplayWindow+0x98>)
 8001e1e:	88bb      	ldrh	r3, [r7, #4]
 8001e20:	8013      	strh	r3, [r2, #0]
 8001e22:	e002      	b.n	8001e2a <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8001e24:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <ST7789H2_SetDisplayWindow+0x98>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	4413      	add	r3, r2
 8001e30:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e32:	dc08      	bgt.n	8001e46 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e42:	801a      	strh	r2, [r3, #0]
 8001e44:	e002      	b.n	8001e4c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e48:	22ef      	movs	r2, #239	@ 0xef
 8001e4a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8001e4c:	883a      	ldrh	r2, [r7, #0]
 8001e4e:	88bb      	ldrh	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e54:	dc08      	bgt.n	8001e68 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8001e56:	883a      	ldrh	r2, [r7, #0]
 8001e58:	88bb      	ldrh	r3, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e64:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8001e66:	e002      	b.n	8001e6e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e6a:	22ef      	movs	r2, #239	@ 0xef
 8001e6c:	801a      	strh	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc90      	pop	{r4, r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000160 	.word	0x20000160
 8001e7c:	20000162 	.word	0x20000162
 8001e80:	20000078 	.word	0x20000078
 8001e84:	2000007a 	.word	0x2000007a

08001e88 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4604      	mov	r4, r0
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	80fb      	strh	r3, [r7, #6]
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80bb      	strh	r3, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	807b      	strh	r3, [r7, #2]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	88bb      	ldrh	r3, [r7, #4]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fedd 	bl	8001c6c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	202c      	movs	r0, #44	@ 0x2c
 8001eb8:	f7ff ff5f 	bl	8001d7a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	81fb      	strh	r3, [r7, #14]
 8001ec0:	e006      	b.n	8001ed0 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fa87 	bl	80023d8 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	81fb      	strh	r3, [r7, #14]
 8001ed0:	89fa      	ldrh	r2, [r7, #14]
 8001ed2:	883b      	ldrh	r3, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3f4      	bcc.n	8001ec2 <ST7789H2_DrawHLine+0x3a>
  }  
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}

08001ee2 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001ee2:	b590      	push	{r4, r7, lr}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4604      	mov	r4, r0
 8001eea:	4608      	mov	r0, r1
 8001eec:	4611      	mov	r1, r2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4623      	mov	r3, r4
 8001ef2:	80fb      	strh	r3, [r7, #6]
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	80bb      	strh	r3, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001f00:	887a      	ldrh	r2, [r7, #2]
 8001f02:	88bb      	ldrh	r3, [r7, #4]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff feb0 	bl	8001c6c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	202c      	movs	r0, #44	@ 0x2c
 8001f12:	f7ff ff32 	bl	8001d7a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	81fb      	strh	r3, [r7, #14]
 8001f1a:	e00b      	b.n	8001f34 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001f1c:	887a      	ldrh	r2, [r7, #2]
 8001f1e:	89fb      	ldrh	r3, [r7, #14]
 8001f20:	4413      	add	r3, r2
 8001f22:	b299      	uxth	r1, r3
 8001f24:	88fa      	ldrh	r2, [r7, #6]
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fed1 	bl	8001cd0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	3301      	adds	r3, #1
 8001f32:	81fb      	strh	r3, [r7, #14]
 8001f34:	89fa      	ldrh	r2, [r7, #14]
 8001f36:	883b      	ldrh	r3, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d3ef      	bcc.n	8001f1c <ST7789H2_DrawVLine+0x3a>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd90      	pop	{r4, r7, pc}
	...

08001f48 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	603a      	str	r2, [r7, #0]
 8001f52:	80fb      	strh	r3, [r7, #6]
 8001f54:	460b      	mov	r3, r1
 8001f56:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001f64:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <ST7789H2_DrawBitmap+0xe0>)
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	4b30      	ldr	r3, [pc, #192]	@ (800202c <ST7789H2_DrawBitmap+0xe4>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001f74:	4b2e      	ldr	r3, [pc, #184]	@ (8002030 <ST7789H2_DrawBitmap+0xe8>)
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <ST7789H2_DrawBitmap+0xec>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3302      	adds	r3, #2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3304      	adds	r3, #4
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	461a      	mov	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	330a      	adds	r3, #10
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	330c      	adds	r3, #12
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	4413      	add	r3, r2
 8001fcc:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001fce:	88ba      	ldrh	r2, [r7, #4]
 8001fd0:	89bb      	ldrh	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e01d      	b.n	8002014 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fe41 	bl	8001c6c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b299      	uxth	r1, r3
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	89fa      	ldrh	r2, [r7, #14]
 8002002:	88f8      	ldrh	r0, [r7, #6]
 8002004:	f000 f89c 	bl	8002140 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	3301      	adds	r3, #1
 800200c:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b01      	subs	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	88bb      	ldrh	r3, [r7, #4]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8dd      	bhi.n	8001fd8 <ST7789H2_DrawBitmap+0x90>
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000078 	.word	0x20000078
 800202c:	20000160 	.word	0x20000160
 8002030:	2000007a 	.word	0x2000007a
 8002034:	20000162 	.word	0x20000162

08002038 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	80fb      	strh	r3, [r7, #6]
 800204a:	4603      	mov	r3, r0
 800204c:	80bb      	strh	r3, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	807b      	strh	r3, [r7, #2]
 8002052:	4613      	mov	r3, r2
 8002054:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800205a:	88bb      	ldrh	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e019      	b.n	8002094 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b29a      	uxth	r2, r3
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fdff 	bl	8001c6c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	b299      	uxth	r1, r3
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	4413      	add	r3, r2
 8002080:	887a      	ldrh	r2, [r7, #2]
 8002082:	88f8      	ldrh	r0, [r7, #6]
 8002084:	f000 f85c 	bl	8002140 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	3301      	adds	r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3301      	adds	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	88ba      	ldrh	r2, [r7, #4]
 8002096:	883b      	ldrh	r3, [r7, #0]
 8002098:	4413      	add	r3, r2
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4293      	cmp	r3, r2
 80020a0:	d3de      	bcc.n	8002060 <ST7789H2_DrawRGBImage+0x28>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}

080020ac <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	460a      	mov	r2, r1
 80020b6:	80fb      	strh	r3, [r7, #6]
 80020b8:	4613      	mov	r3, r2
 80020ba:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80020bc:	88ba      	ldrh	r2, [r7, #4]
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fdd2 	bl	8001c6c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	202e      	movs	r0, #46	@ 0x2e
 80020ce:	f7ff fe54 	bl	8001d7a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80020d2:	f000 f99b 	bl	800240c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80020d6:	f000 f999 	bl	800240c <LCD_IO_ReadData>
 80020da:	4603      	mov	r3, r0
 80020dc:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80020de:	f000 f995 	bl	800240c <LCD_IO_ReadData>
 80020e2:	4603      	mov	r3, r0
 80020e4:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80020e6:	8afb      	ldrh	r3, [r7, #22]
 80020e8:	121b      	asrs	r3, r3, #8
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f023 0303 	bic.w	r3, r3, #3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80020f4:	8afb      	ldrh	r3, [r7, #22]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f023 0303 	bic.w	r3, r3, #3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002100:	8abb      	ldrh	r3, [r7, #20]
 8002102:	121b      	asrs	r3, r3, #8
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4611      	mov	r1, r2
 800211a:	8019      	strh	r1, [r3, #0]
 800211c:	3302      	adds	r3, #2
 800211e:	0c12      	lsrs	r2, r2, #16
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	2300      	movs	r3, #0
 8002124:	7c3a      	ldrb	r2, [r7, #16]
 8002126:	f362 0307 	bfi	r3, r2, #0, #8
 800212a:	7c7a      	ldrb	r2, [r7, #17]
 800212c:	f362 230f 	bfi	r3, r2, #8, #8
 8002130:	7cba      	ldrb	r2, [r7, #18]
 8002132:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	4603      	mov	r3, r0
 800214a:	81fb      	strh	r3, [r7, #14]
 800214c:	460b      	mov	r3, r1
 800214e:	81bb      	strh	r3, [r7, #12]
 8002150:	4613      	mov	r3, r2
 8002152:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	202c      	movs	r0, #44	@ 0x2c
 8002162:	f7ff fe0a 	bl	8001d7a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002166:	89fb      	ldrh	r3, [r7, #14]
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	e029      	b.n	80021c0 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <ST7789H2_DrawRGBHLine+0x98>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4293      	cmp	r3, r2
 8002176:	d320      	bcc.n	80021ba <ST7789H2_DrawRGBHLine+0x7a>
 8002178:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <ST7789H2_DrawRGBHLine+0x9c>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	89ba      	ldrh	r2, [r7, #12]
 800217e:	429a      	cmp	r2, r3
 8002180:	d31b      	bcc.n	80021ba <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <ST7789H2_DrawRGBHLine+0xa0>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	4293      	cmp	r3, r2
 800218c:	d815      	bhi.n	80021ba <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800218e:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <ST7789H2_DrawRGBHLine+0xa4>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	89ba      	ldrh	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d810      	bhi.n	80021ba <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002198:	897a      	ldrh	r2, [r7, #10]
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	441a      	add	r2, r3
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d007      	beq.n	80021b4 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4413      	add	r3, r2
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f912 	bl	80023d8 <LCD_IO_WriteData>
      }      
      i++;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	3301      	adds	r3, #1
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	897a      	ldrh	r2, [r7, #10]
 80021c2:	89fb      	ldrh	r3, [r7, #14]
 80021c4:	4413      	add	r3, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d3ce      	bcc.n	800216c <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000160 	.word	0x20000160
 80021dc:	20000162 	.word	0x20000162
 80021e0:	20000078 	.word	0x20000078
 80021e4:	2000007a 	.word	0x2000007a

080021e8 <FMC_BANK1_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK1 MSP.
  */
static void FMC_BANK1_MspInit(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	@ 0x28
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 80021f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f6:	4a2d      	ldr	r2, [pc, #180]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6393      	str	r3, [r2, #56]	@ 0x38
 80021fe:	4b2b      	ldr	r3, [pc, #172]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 8002200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a26      	ldr	r2, [pc, #152]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a1f      	ldr	r2, [pc, #124]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a18      	ldr	r2, [pc, #96]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 800224c:	f043 0320 	orr.w	r3, r3, #32
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <FMC_BANK1_MspInit+0xc4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002262:	2301      	movs	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 800226a:	230c      	movs	r3, #12
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 800226e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8002272:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	480d      	ldr	r0, [pc, #52]	@ (80022b0 <FMC_BANK1_MspInit+0xc8>)
 800227c:	f000 fc2c 	bl	8002ad8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002280:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002284:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4809      	ldr	r0, [pc, #36]	@ (80022b4 <FMC_BANK1_MspInit+0xcc>)
 800228e:	f000 fc23 	bl	8002ad8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 ;  
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	4806      	ldr	r0, [pc, #24]	@ (80022b8 <FMC_BANK1_MspInit+0xd0>)
 800229e:	f000 fc1b 	bl	8002ad8 <HAL_GPIO_Init>
}
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	@ 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40021400 	.word	0x40021400

080022bc <FMC_BANK1_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
static void FMC_BANK1_Init(void) 
{  
 80022bc:	b580      	push	{r7, lr}
 80022be:	b0a2      	sub	sp, #136	@ 0x88
 80022c0:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 80022c2:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 80022c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 80022c8:	4b27      	ldr	r3, [pc, #156]	@ (8002368 <FMC_BANK1_Init+0xac>)
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* Timing for READING */
  sram_timing.AddressSetupTime      = 9;
 80022cc:	2309      	movs	r3, #9
 80022ce:	61fb      	str	r3, [r7, #28]
  sram_timing.AddressHoldTime       = 1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	623b      	str	r3, [r7, #32]
  sram_timing.DataSetupTime         = 36;
 80022d4:	2324      	movs	r3, #36	@ 0x24
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sram_timing.BusTurnAroundDuration = 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sram_timing.CLKDivision           = 2;
 80022dc:	2302      	movs	r3, #2
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sram_timing.DataLatency           = 2;
 80022e0:	2302      	movs	r3, #2
 80022e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Timing for WRITING*/
  sram_timing_write.AddressSetupTime      = 1;
 80022e8:	2301      	movs	r3, #1
 80022ea:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 7;
 80022f0:	2307      	movs	r3, #7
 80022f2:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  sram_timing_write.CLKDivision           = 2;
 80022f8:	2302      	movs	r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
  sram_timing_write.DataLatency           = 2;
 80022fc:	2302      	movs	r3, #2
 80022fe:	617b      	str	r3, [r7, #20]
  sram_timing_write.AccessMode            = FSMC_ACCESS_MODE_A;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK1;
 8002304:	2300      	movs	r3, #0
 8002306:	643b      	str	r3, [r7, #64]	@ 0x40
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	647b      	str	r3, [r7, #68]	@ 0x44
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 800230c:	2300      	movs	r3, #0
 800230e:	64bb      	str	r3, [r7, #72]	@ 0x48
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002310:	2310      	movs	r3, #16
 8002312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	653b      	str	r3, [r7, #80]	@ 0x50
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	657b      	str	r3, [r7, #84]	@ 0x54
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	65bb      	str	r3, [r7, #88]	@ 0x58
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002320:	2300      	movs	r3, #0
 8002322:	65fb      	str	r3, [r7, #92]	@ 0x5c
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002328:	663b      	str	r3, [r7, #96]	@ 0x60
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	667b      	str	r3, [r7, #100]	@ 0x64
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 800232e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002332:	66bb      	str	r3, [r7, #104]	@ 0x68
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	66fb      	str	r3, [r7, #108]	@ 0x6c
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	673b      	str	r3, [r7, #112]	@ 0x70
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 800233c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002340:	67bb      	str	r3, [r7, #120]	@ 0x78
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002342:	2300      	movs	r3, #0
 8002344:	67fb      	str	r3, [r7, #124]	@ 0x7c
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002346:	2300      	movs	r3, #0
 8002348:	677b      	str	r3, [r7, #116]	@ 0x74
  
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800234a:	f7ff ff4d 	bl	80021e8 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800234e:	463a      	mov	r2, r7
 8002350:	f107 011c 	add.w	r1, r7, #28
 8002354:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002358:	4618      	mov	r0, r3
 800235a:	f003 ffe9 	bl	8006330 <HAL_SRAM_Init>
}
 800235e:	bf00      	nop
 8002360:	3788      	adds	r7, #136	@ 0x88
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	a0000104 	.word	0xa0000104

0800236c <FMC_BANK1_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK1_WriteData(uint16_t Data) 
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1->RAM = Data;
 8002376:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	8053      	strh	r3, [r2, #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800237e:	f3bf 8f4f 	dsb	sy
}
 8002382:	bf00      	nop
  __DSB();
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <FMC_BANK1_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK1_WriteReg(uint8_t Reg) 
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1->REG = Reg;
 800239a:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800239e:	79fa      	ldrb	r2, [r7, #7]
 80023a0:	b292      	uxth	r2, r2
 80023a2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80023a4:	f3bf 8f4f 	dsb	sy
}
 80023a8:	bf00      	nop
  __DSB();
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <FMC_BANK1_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void) 
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  return FMC_BANK1->RAM;
 80023ba:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80023be:	885b      	ldrh	r3, [r3, #2]
 80023c0:	b29b      	uxth	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 80023d0:	f7ff ff74 	bl	80022bc <FMC_BANK1_Init>
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ffc1 	bl	800236c <FMC_BANK1_WriteData>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ffc6 	bl	8002390 <FMC_BANK1_WriteReg>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8002410:	f7ff ffd1 	bl	80023b6 <FMC_BANK1_ReadData>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}

0800241a <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa4e 	bl	80028c4 <HAL_Delay>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002434:	2001      	movs	r0, #1
 8002436:	f000 f803 	bl	8002440 <BSP_LCD_InitEx>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}

08002440 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800244c:	4b37      	ldr	r3, [pc, #220]	@ (800252c <BSP_LCD_InitEx+0xec>)
 800244e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002452:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002454:	4b35      	ldr	r3, [pc, #212]	@ (800252c <BSP_LCD_InitEx+0xec>)
 8002456:	4a36      	ldr	r2, [pc, #216]	@ (8002530 <BSP_LCD_InitEx+0xf0>)
 8002458:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800245a:	4b34      	ldr	r3, [pc, #208]	@ (800252c <BSP_LCD_InitEx+0xec>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002460:	f000 f962 	bl	8002728 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	2120      	movs	r1, #32
 8002468:	4832      	ldr	r0, [pc, #200]	@ (8002534 <BSP_LCD_InitEx+0xf4>)
 800246a:	f000 fcc9 	bl	8002e00 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002474:	4830      	ldr	r0, [pc, #192]	@ (8002538 <BSP_LCD_InitEx+0xf8>)
 8002476:	f000 fcc3 	bl	8002e00 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800247a:	2005      	movs	r0, #5
 800247c:	f000 fa22 	bl	80028c4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002480:	2201      	movs	r2, #1
 8002482:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002486:	482c      	ldr	r0, [pc, #176]	@ (8002538 <BSP_LCD_InitEx+0xf8>)
 8002488:	f000 fcba 	bl	8002e00 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800248c:	200a      	movs	r0, #10
 800248e:	f000 fa19 	bl	80028c4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002498:	4827      	ldr	r0, [pc, #156]	@ (8002538 <BSP_LCD_InitEx+0xf8>)
 800249a:	f000 fcb1 	bl	8002e00 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800249e:	2014      	movs	r0, #20
 80024a0:	f000 fa10 	bl	80028c4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024aa:	4823      	ldr	r0, [pc, #140]	@ (8002538 <BSP_LCD_InitEx+0xf8>)
 80024ac:	f000 fca8 	bl	8002e00 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80024b0:	200a      	movs	r0, #10
 80024b2:	f000 fa07 	bl	80028c4 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 80024b6:	4b21      	ldr	r3, [pc, #132]	@ (800253c <BSP_LCD_InitEx+0xfc>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4798      	blx	r3
 80024bc:	4603      	mov	r3, r0
 80024be:	2b85      	cmp	r3, #133	@ 0x85
 80024c0:	d119      	bne.n	80024f6 <BSP_LCD_InitEx+0xb6>
  {    
    LcdDrv = &ST7789H2_drv;
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <BSP_LCD_InitEx+0x100>)
 80024c4:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <BSP_LCD_InitEx+0xfc>)
 80024c6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80024c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <BSP_LCD_InitEx+0x100>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7ff fb4e 	bl	8001b78 <ST7789H2_SetOrientation>
 80024dc:	e005      	b.n	80024ea <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d102      	bne.n	80024ea <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80024e4:	2002      	movs	r0, #2
 80024e6:	f7ff fb47 	bl	8001b78 <ST7789H2_SetOrientation>
    {
      /* Default landscape orientation is selected */
    }

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80024ea:	4816      	ldr	r0, [pc, #88]	@ (8002544 <BSP_LCD_InitEx+0x104>)
 80024ec:	f000 f856 	bl	800259c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e014      	b.n	8002520 <BSP_LCD_InitEx+0xe0>
  }
  else if(ls016b8uy_drv.ReadID() == LS016B8UY_ID)
 80024f6:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <BSP_LCD_InitEx+0x108>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4798      	blx	r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	461a      	mov	r2, r3
 8002500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002504:	429a      	cmp	r2, r3
 8002506:	d10b      	bne.n	8002520 <BSP_LCD_InitEx+0xe0>
  {
    LcdDrv = &ls016b8uy_drv;
 8002508:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <BSP_LCD_InitEx+0x100>)
 800250a:	4a0f      	ldr	r2, [pc, #60]	@ (8002548 <BSP_LCD_InitEx+0x108>)
 800250c:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <BSP_LCD_InitEx+0x100>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002516:	480b      	ldr	r0, [pc, #44]	@ (8002544 <BSP_LCD_InitEx+0x104>)
 8002518:	f000 f840 	bl	800259c <BSP_LCD_SetFont>
    
    ret = LCD_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000164 	.word	0x20000164
 8002530:	2000007c 	.word	0x2000007c
 8002534:	40021400 	.word	0x40021400
 8002538:	40020c00 	.word	0x40020c00
 800253c:	20000040 	.word	0x20000040
 8002540:	20000170 	.word	0x20000170
 8002544:	20000084 	.word	0x20000084
 8002548:	20000004 	.word	0x20000004

0800254c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.   
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <BSP_LCD_GetXSize+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	4798      	blx	r3
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000170 	.word	0x20000170

08002564 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <BSP_LCD_GetYSize+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	4798      	blx	r3
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000170 	.word	0x20000170

0800257c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4a03      	ldr	r2, [pc, #12]	@ (8002598 <BSP_LCD_SetTextColor+0x1c>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20000164 	.word	0x20000164

0800259c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80025a4:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <BSP_LCD_SetFont+0x1c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6093      	str	r3, [r2, #8]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000164 	.word	0x20000164

080025bc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <BSP_LCD_Clear+0x68>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	4a13      	ldr	r2, [pc, #76]	@ (8002624 <BSP_LCD_Clear+0x68>)
 80025d8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80025da:	f7ff ffc3 	bl	8002564 <BSP_LCD_GetYSize>
 80025de:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e00d      	b.n	8002602 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	b29c      	uxth	r4, r3
 80025ea:	f7ff ffaf 	bl	800254c <BSP_LCD_GetXSize>
 80025ee:	4603      	mov	r3, r0
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	4621      	mov	r1, r4
 80025f6:	2000      	movs	r0, #0
 80025f8:	f000 f832 	bl	8002660 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3ed      	bcc.n	80025e6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 800260a:	4a06      	ldr	r2, [pc, #24]	@ (8002624 <BSP_LCD_Clear+0x68>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002610:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <BSP_LCD_Clear+0x68>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ffb0 	bl	800257c <BSP_LCD_SetTextColor>
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	20000164 	.word	0x20000164

08002628 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
 8002632:	460b      	mov	r3, r1
 8002634:	80bb      	strh	r3, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800263a:	4b08      	ldr	r3, [pc, #32]	@ (800265c <BSP_LCD_DrawPixel+0x34>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <BSP_LCD_DrawPixel+0x34>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	88b9      	ldrh	r1, [r7, #4]
 800264e:	88f8      	ldrh	r0, [r7, #6]
 8002650:	4798      	blx	r3
  }
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000170 	.word	0x20000170

08002660 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
 800266a:	460b      	mov	r3, r1
 800266c:	80bb      	strh	r3, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <BSP_LCD_DrawHLine+0x6c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <BSP_LCD_DrawHLine+0x6c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a1c      	ldr	r4, [r3, #32]
 8002686:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <BSP_LCD_DrawHLine+0x70>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b298      	uxth	r0, r3
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	88ba      	ldrh	r2, [r7, #4]
 8002690:	88f9      	ldrh	r1, [r7, #6]
 8002692:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002694:	e015      	b.n	80026c2 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e00e      	b.n	80026ba <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4413      	add	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4a0a      	ldr	r2, [pc, #40]	@ (80026d0 <BSP_LCD_DrawHLine+0x70>)
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	b292      	uxth	r2, r2
 80026ac:	88b9      	ldrh	r1, [r7, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ffba 	bl	8002628 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3301      	adds	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d3ec      	bcc.n	800269c <BSP_LCD_DrawHLine+0x3c>
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd90      	pop	{r4, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000170 	.word	0x20000170
 80026d0:	20000164 	.word	0x20000164

080026d4 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	80fb      	strh	r3, [r7, #6]
 80026e6:	4603      	mov	r3, r0
 80026e8:	80bb      	strh	r3, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]
 80026ee:	4613      	mov	r3, r2
 80026f0:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80026f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <BSP_LCD_FillRect+0x50>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff3f 	bl	800257c <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	80ba      	strh	r2, [r7, #4]
 8002704:	887a      	ldrh	r2, [r7, #2]
 8002706:	88f8      	ldrh	r0, [r7, #6]
 8002708:	4619      	mov	r1, r3
 800270a:	f7ff ffa9 	bl	8002660 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 800270e:	883b      	ldrh	r3, [r7, #0]
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	803a      	strh	r2, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f2      	bne.n	80026fe <BSP_LCD_FillRect+0x2a>
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bd90      	pop	{r4, r7, pc}
 8002722:	bf00      	nop
 8002724:	20000164 	.word	0x20000164

08002728 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	4a26      	ldr	r2, [pc, #152]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	6313      	str	r3, [r2, #48]	@ 0x30
 800273e:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a1f      	ldr	r2, [pc, #124]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 8002754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	4a18      	ldr	r2, [pc, #96]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	6313      	str	r3, [r2, #48]	@ 0x30
 8002776:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <BSP_LCD_MspInit+0xa8>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002782:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002786:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800278c:	2302      	movs	r3, #2
 800278e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002790:	2301      	movs	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	4619      	mov	r1, r3
 800279a:	480e      	ldr	r0, [pc, #56]	@ (80027d4 <BSP_LCD_MspInit+0xac>)
 800279c:	f000 f99c 	bl	8002ad8 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80027a0:	2310      	movs	r3, #16
 80027a2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	4619      	mov	r1, r3
 80027ae:	480a      	ldr	r0, [pc, #40]	@ (80027d8 <BSP_LCD_MspInit+0xb0>)
 80027b0:	f000 f992 	bl	8002ad8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80027b4:	2320      	movs	r3, #32
 80027b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80027b8:	2301      	movs	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	4619      	mov	r1, r3
 80027c2:	4806      	ldr	r0, [pc, #24]	@ (80027dc <BSP_LCD_MspInit+0xb4>)
 80027c4:	f000 f988 	bl	8002ad8 <HAL_GPIO_Init>
}
 80027c8:	bf00      	nop
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021800 	.word	0x40021800
 80027dc:	40021400 	.word	0x40021400

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 f931 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7fe f8fc 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f93b 	bl	8002abe <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 f911 	bl	8002a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000000 	.word	0x20000000
 800287c:	20000090 	.word	0x20000090
 8002880:	2000008c 	.word	0x2000008c

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000090 	.word	0x20000090
 80028a8:	20000174 	.word	0x20000174

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000174 	.word	0x20000174

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000090 	.word	0x20000090

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0a      	blt.n	800299a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	490c      	ldr	r1, [pc, #48]	@ (80029bc <__NVIC_SetPriority+0x4c>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	440b      	add	r3, r1
 8002994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002998:	e00a      	b.n	80029b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4908      	ldr	r1, [pc, #32]	@ (80029c0 <__NVIC_SetPriority+0x50>)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3b04      	subs	r3, #4
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	761a      	strb	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000e100 	.word	0xe000e100
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	@ 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f1c3 0307 	rsb	r3, r3, #7
 80029de:	2b04      	cmp	r3, #4
 80029e0:	bf28      	it	cs
 80029e2:	2304      	movcs	r3, #4
 80029e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d902      	bls.n	80029f4 <NVIC_EncodePriority+0x30>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3b03      	subs	r3, #3
 80029f2:	e000      	b.n	80029f6 <NVIC_EncodePriority+0x32>
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	401a      	ands	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	4313      	orrs	r3, r2
         );
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3724      	adds	r7, #36	@ 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a3c:	d301      	bcc.n	8002a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00f      	b.n	8002a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <SysTick_Config+0x40>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f7ff ff8e 	bl	8002970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <SysTick_Config+0x40>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5a:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <SysTick_Config+0x40>)
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	e000e010 	.word	0xe000e010

08002a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff47 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a98:	f7ff ff5c 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7ff ff8e 	bl	80029c4 <NVIC_EncodePriority>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff5d 	bl	8002970 <__NVIC_SetPriority>
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffb0 	bl	8002a2c <SysTick_Config>
 8002acc:	4603      	mov	r3, r0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e165      	b.n	8002dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8154 	bne.w	8002dba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80ae 	beq.w	8002dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd8 <HAL_GPIO_Init+0x300>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	4a5c      	ldr	r2, [pc, #368]	@ (8002dd8 <HAL_GPIO_Init+0x300>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd8 <HAL_GPIO_Init+0x300>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a58      	ldr	r2, [pc, #352]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8002de0 <HAL_GPIO_Init+0x308>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8002de4 <HAL_GPIO_Init+0x30c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x216>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x212>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8002dec <HAL_GPIO_Init+0x314>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002df0 <HAL_GPIO_Init+0x318>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x20a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x206>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a49      	ldr	r2, [pc, #292]	@ (8002df8 <HAL_GPIO_Init+0x320>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x202>
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4935      	ldr	r1, [pc, #212]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d12:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d36:	4a31      	ldr	r2, [pc, #196]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d60:	4a26      	ldr	r2, [pc, #152]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d66:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db4:	4a11      	ldr	r2, [pc, #68]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae96 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3724      	adds	r7, #36	@ 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40021400 	.word	0x40021400
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e1c:	e003      	b.n	8002e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 fcdf 	bl	800680c <USB_GetMode>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f040 80fb 	bne.w	800304c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fca2 	bl	80067a4 <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80f1 	beq.w	800304a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 fc99 	bl	80067a4 <USB_ReadInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e7c:	d104      	bne.n	8002e88 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002e86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 fc89 	bl	80067a4 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e9c:	d104      	bne.n	8002ea8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ea6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 fc79 	bl	80067a4 <USB_ReadInterrupts>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ebc:	d104      	bne.n	8002ec8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ec6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f003 fc69 	bl	80067a4 <USB_ReadInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d103      	bne.n	8002ee4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fc5b 	bl	80067a4 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ef8:	d120      	bne.n	8002f3c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f02:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d113      	bne.n	8002f3c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f14:	2110      	movs	r1, #16
 8002f16:	6938      	ldr	r0, [r7, #16]
 8002f18:	f003 fb8c 	bl	8006634 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f1c:	6938      	ldr	r0, [r7, #16]
 8002f1e:	f003 fbbb 	bl	8006698 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7a5b      	ldrb	r3, [r3, #9]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d105      	bne.n	8002f36 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fc79 	bl	8006828 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f003 ff31 	bl	8006d9e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fc2f 	bl	80067a4 <USB_ReadInterrupts>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f50:	d102      	bne.n	8002f58 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f001 fc87 	bl	8004866 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f003 fc21 	bl	80067a4 <USB_ReadInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d106      	bne.n	8002f7a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f003 fefa 	bl	8006d66 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2208      	movs	r2, #8
 8002f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 fc10 	bl	80067a4 <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f8e:	d139      	bne.n	8003004 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fc84 	bl	80068a2 <USB_HC_ReadInterrupt>
 8002f9a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e025      	b.n	8002fee <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fcc:	d106      	bne.n	8002fdc <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f859 	bl	800308c <HCD_HC_IN_IRQHandler>
 8002fda:	e005      	b.n	8002fe8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 febb 	bl	8003d5e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3301      	adds	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	795b      	ldrb	r3, [r3, #5]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d3d3      	bcc.n	8002fa2 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fbcb 	bl	80067a4 <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b10      	cmp	r3, #16
 8003016:	d101      	bne.n	800301c <HAL_HCD_IRQHandler+0x1ea>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_HCD_IRQHandler+0x1ec>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d014      	beq.n	800304c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0210 	bic.w	r2, r2, #16
 8003030:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f001 fb38 	bl	80046a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0210 	orr.w	r2, r2, #16
 8003046:	619a      	str	r2, [r3, #24]
 8003048:	e000      	b.n	800304c <HAL_HCD_IRQHandler+0x21a>
      return;
 800304a:	bf00      	nop
    }
  }
}
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_HCD_Stop+0x16>
 8003064:	2302      	movs	r3, #2
 8003066:	e00d      	b.n	8003084 <HAL_HCD_Stop+0x32>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f003 fd45 	bl	8006b04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fb8d 	bl	80067ca <USB_ReadChInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d11a      	bne.n	80030f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c6:	461a      	mov	r2, r3
 80030c8:	2304      	movs	r3, #4
 80030ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	334d      	adds	r3, #77	@ 0x4d
 80030dc:	2207      	movs	r2, #7
 80030de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f003 fbeb 	bl	80068c4 <USB_HC_Halt>
 80030ee:	e09e      	b.n	800322e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fb66 	bl	80067ca <USB_ReadChInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003108:	d11b      	bne.n	8003142 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003116:	461a      	mov	r2, r3
 8003118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800311c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	334d      	adds	r3, #77	@ 0x4d
 800312e:	2208      	movs	r2, #8
 8003130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f003 fbc2 	bl	80068c4 <USB_HC_Halt>
 8003140:	e075      	b.n	800322e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fb3d 	bl	80067ca <USB_ReadChInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d11a      	bne.n	8003190 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003166:	461a      	mov	r2, r3
 8003168:	2308      	movs	r3, #8
 800316a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	2206      	movs	r2, #6
 800317e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f003 fb9b 	bl	80068c4 <USB_HC_Halt>
 800318e:	e04e      	b.n	800322e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fb16 	bl	80067ca <USB_ReadChInterrupts>
 800319e:	4603      	mov	r3, r0
 80031a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a8:	d11b      	bne.n	80031e2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b6:	461a      	mov	r2, r3
 80031b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	334d      	adds	r3, #77	@ 0x4d
 80031ce:	2209      	movs	r2, #9
 80031d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 fb72 	bl	80068c4 <USB_HC_Halt>
 80031e0:	e025      	b.n	800322e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 faed 	bl	80067ca <USB_ReadChInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b80      	cmp	r3, #128	@ 0x80
 80031f8:	d119      	bne.n	800322e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003206:	461a      	mov	r2, r3
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334d      	adds	r3, #77	@ 0x4d
 800321c:	2207      	movs	r2, #7
 800321e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fb4b 	bl	80068c4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f003 fac7 	bl	80067ca <USB_ReadChInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003246:	d112      	bne.n	800326e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f003 fb37 	bl	80068c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003268:	6093      	str	r3, [r2, #8]
 800326a:	f000 bd75 	b.w	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f003 faa7 	bl	80067ca <USB_ReadChInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 8128 	bne.w	80034d8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	2320      	movs	r3, #32
 8003298:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	331b      	adds	r3, #27
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d119      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	331b      	adds	r3, #27
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	0151      	lsls	r1, r2, #5
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	440a      	add	r2, r1
 80032da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	799b      	ldrb	r3, [r3, #6]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3330      	adds	r3, #48	@ 0x30
 80032fc:	6819      	ldr	r1, [r3, #0]
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	1ac9      	subs	r1, r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4403      	add	r3, r0
 8003320:	3338      	adds	r3, #56	@ 0x38
 8003322:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3344      	adds	r3, #68	@ 0x44
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003358:	461a      	mov	r2, r3
 800335a:	2301      	movs	r3, #1
 800335c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3326      	adds	r3, #38	@ 0x26
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3326      	adds	r3, #38	@ 0x26
 8003384:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003386:	2b02      	cmp	r3, #2
 8003388:	d110      	bne.n	80033ac <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fa96 	bl	80068c4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a4:	461a      	mov	r2, r3
 80033a6:	2310      	movs	r3, #16
 80033a8:	6093      	str	r3, [r2, #8]
 80033aa:	e03d      	b.n	8003428 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3326      	adds	r3, #38	@ 0x26
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d00a      	beq.n	80033d8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3326      	adds	r3, #38	@ 0x26
 80033d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d127      	bne.n	8003428 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	0151      	lsls	r1, r2, #5
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	440a      	add	r2, r1
 80033ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334c      	adds	r3, #76	@ 0x4c
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334c      	adds	r3, #76	@ 0x4c
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f003 fcc9 	bl	8006dba <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	799b      	ldrb	r3, [r3, #6]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d13b      	bne.n	80034a8 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3338      	adds	r3, #56	@ 0x38
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4403      	add	r3, r0
 8003450:	3328      	adds	r3, #40	@ 0x28
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	440b      	add	r3, r1
 8003456:	1e59      	subs	r1, r3, #1
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4403      	add	r3, r0
 8003466:	3328      	adds	r3, #40	@ 0x28
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	fbb1 f3f3 	udiv	r3, r1, r3
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8470 	beq.w	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	333c      	adds	r3, #60	@ 0x3c
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2d8      	uxtb	r0, r3
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	333c      	adds	r3, #60	@ 0x3c
 80034a0:	4602      	mov	r2, r0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	f000 bc58 	b.w	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	333c      	adds	r3, #60	@ 0x3c
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2d8      	uxtb	r0, r3
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	333c      	adds	r3, #60	@ 0x3c
 80034d0:	4602      	mov	r2, r0
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	f000 bc40 	b.w	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 f972 	bl	80067ca <USB_ReadChInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d131      	bne.n	8003554 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fc:	461a      	mov	r2, r3
 80034fe:	2320      	movs	r3, #32
 8003500:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	331a      	adds	r3, #26
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 841f 	bne.w	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	331b      	adds	r3, #27
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334d      	adds	r3, #77	@ 0x4d
 800353e:	2203      	movs	r2, #3
 8003540:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f003 f9ba 	bl	80068c4 <USB_HC_Halt>
 8003550:	f000 bc02 	b.w	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f003 f934 	bl	80067ca <USB_ReadChInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	f040 8305 	bne.w	8003b78 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357a:	461a      	mov	r2, r3
 800357c:	2302      	movs	r3, #2
 800357e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	334d      	adds	r3, #77	@ 0x4d
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d114      	bne.n	80035c0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	334d      	adds	r3, #77	@ 0x4d
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	334c      	adds	r3, #76	@ 0x4c
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e2cc      	b.n	8003b5a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	334d      	adds	r3, #77	@ 0x4d
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d114      	bne.n	8003600 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334d      	adds	r3, #77	@ 0x4d
 80035e6:	2202      	movs	r2, #2
 80035e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	334c      	adds	r3, #76	@ 0x4c
 80035fa:	2205      	movs	r2, #5
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e2ac      	b.n	8003b5a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	334d      	adds	r3, #77	@ 0x4d
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b07      	cmp	r3, #7
 8003614:	d00b      	beq.n	800362e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	334d      	adds	r3, #77	@ 0x4d
 8003626:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003628:	2b09      	cmp	r3, #9
 800362a:	f040 80a6 	bne.w	800377a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334d      	adds	r3, #77	@ 0x4d
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3344      	adds	r3, #68	@ 0x44
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	1c59      	adds	r1, r3, #1
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4403      	add	r3, r0
 8003662:	3344      	adds	r3, #68	@ 0x44
 8003664:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3344      	adds	r3, #68	@ 0x44
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d943      	bls.n	8003704 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	3344      	adds	r3, #68	@ 0x44
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	331a      	adds	r3, #26
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d123      	bne.n	80036ee <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	331b      	adds	r3, #27
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	331c      	adds	r3, #28
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	0151      	lsls	r1, r2, #5
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	440a      	add	r2, r1
 80036e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ec:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	334c      	adds	r3, #76	@ 0x4c
 80036fe:	2204      	movs	r2, #4
 8003700:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003702:	e229      	b.n	8003b58 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	334c      	adds	r3, #76	@ 0x4c
 8003714:	2202      	movs	r2, #2
 8003716:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3326      	adds	r3, #38	@ 0x26
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3326      	adds	r3, #38	@ 0x26
 800373e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003740:	2b02      	cmp	r3, #2
 8003742:	f040 8209 	bne.w	8003b58 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800375c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003764:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003778:	e1ee      	b.n	8003b58 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	334d      	adds	r3, #77	@ 0x4d
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b05      	cmp	r3, #5
 800378e:	f040 80c8 	bne.w	8003922 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	334d      	adds	r3, #77	@ 0x4d
 80037a2:	2202      	movs	r2, #2
 80037a4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	331b      	adds	r3, #27
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 81ce 	bne.w	8003b5a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3326      	adds	r3, #38	@ 0x26
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d16b      	bne.n	80038ac <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	3348      	adds	r3, #72	@ 0x48
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1c59      	adds	r1, r3, #1
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4403      	add	r3, r0
 80037f4:	3348      	adds	r3, #72	@ 0x48
 80037f6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3348      	adds	r3, #72	@ 0x48
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d943      	bls.n	8003896 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3348      	adds	r3, #72	@ 0x48
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	331b      	adds	r3, #27
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3344      	adds	r3, #68	@ 0x44
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d809      	bhi.n	8003860 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	331c      	adds	r3, #28
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	0151      	lsls	r1, r2, #5
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	440a      	add	r2, r1
 8003876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800387a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800387e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	334c      	adds	r3, #76	@ 0x4c
 8003890:	2204      	movs	r2, #4
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e014      	b.n	80038c0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334c      	adds	r3, #76	@ 0x4c
 80038a6:	2202      	movs	r2, #2
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e009      	b.n	80038c0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	334c      	adds	r3, #76	@ 0x4c
 80038bc:	2202      	movs	r2, #2
 80038be:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3326      	adds	r3, #38	@ 0x26
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3326      	adds	r3, #38	@ 0x26
 80038e6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	f040 8136 	bne.w	8003b5a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003904:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800390c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	e11b      	b.n	8003b5a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	334d      	adds	r3, #77	@ 0x4d
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	f040 8081 	bne.w	8003a3c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	334d      	adds	r3, #77	@ 0x4d
 800394a:	2202      	movs	r2, #2
 800394c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	331b      	adds	r3, #27
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	f040 80fa 	bne.w	8003b5a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	334c      	adds	r3, #76	@ 0x4c
 8003976:	2202      	movs	r2, #2
 8003978:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	0151      	lsls	r1, r2, #5
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	440a      	add	r2, r1
 8003990:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003998:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	0151      	lsls	r1, r2, #5
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	440a      	add	r2, r1
 80039b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039b8:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039d4:	f023 0320 	bic.w	r3, r3, #32
 80039d8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3326      	adds	r3, #38	@ 0x26
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	3326      	adds	r3, #38	@ 0x26
 8003a00:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	f040 80a9 	bne.w	8003b5a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a1e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a26:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a34:	461a      	mov	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e08e      	b.n	8003b5a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	334d      	adds	r3, #77	@ 0x4d
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d143      	bne.n	8003ada <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	334d      	adds	r3, #77	@ 0x4d
 8003a62:	2202      	movs	r2, #2
 8003a64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	334c      	adds	r3, #76	@ 0x4c
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3326      	adds	r3, #38	@ 0x26
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3326      	adds	r3, #38	@ 0x26
 8003aa0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d159      	bne.n	8003b5a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003abc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ac4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e03f      	b.n	8003b5a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334d      	adds	r3, #77	@ 0x4d
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d126      	bne.n	8003b3e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	334d      	adds	r3, #77	@ 0x4d
 8003b00:	2202      	movs	r2, #2
 8003b02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3344      	adds	r3, #68	@ 0x44
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1c59      	adds	r1, r3, #1
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4403      	add	r3, r0
 8003b24:	3344      	adds	r3, #68	@ 0x44
 8003b26:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	334c      	adds	r3, #76	@ 0x4c
 8003b38:	2204      	movs	r2, #4
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e00d      	b.n	8003b5a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	334d      	adds	r3, #77	@ 0x4d
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	f000 8100 	beq.w	8003d56 <HCD_HC_IN_IRQHandler+0xcca>
 8003b56:	e000      	b.n	8003b5a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b58:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	334c      	adds	r3, #76	@ 0x4c
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f003 f922 	bl	8006dba <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b76:	e0ef      	b.n	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 fe22 	bl	80067ca <USB_ReadChInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b40      	cmp	r3, #64	@ 0x40
 8003b8e:	d12f      	bne.n	8003bf0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2340      	movs	r3, #64	@ 0x40
 8003ba0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	334d      	adds	r3, #77	@ 0x4d
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	331a      	adds	r3, #26
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	3344      	adds	r3, #68	@ 0x44
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f002 fe6b 	bl	80068c4 <USB_HC_Halt>
 8003bee:	e0b3      	b.n	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f002 fde6 	bl	80067ca <USB_ReadChInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	f040 80a7 	bne.w	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3326      	adds	r3, #38	@ 0x26
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d11b      	bne.n	8003c58 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3344      	adds	r3, #68	@ 0x44
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	334d      	adds	r3, #77	@ 0x4d
 8003c44:	2204      	movs	r2, #4
 8003c46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f002 fe37 	bl	80068c4 <USB_HC_Halt>
 8003c56:	e03f      	b.n	8003cd8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3326      	adds	r3, #38	@ 0x26
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3326      	adds	r3, #38	@ 0x26
 8003c7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d129      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	3344      	adds	r3, #68	@ 0x44
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	799b      	ldrb	r3, [r3, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HCD_HC_IN_IRQHandler+0xc2a>
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	331b      	adds	r3, #27
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d110      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	334d      	adds	r3, #77	@ 0x4d
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f002 fdf6 	bl	80068c4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	331b      	adds	r3, #27
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d129      	bne.n	8003d42 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	331b      	adds	r3, #27
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d20:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d3c:	f043 0320 	orr.w	r3, r3, #32
 8003d40:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2310      	movs	r3, #16
 8003d52:	6093      	str	r3, [r2, #8]
 8003d54:	e000      	b.n	8003d58 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003d56:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 fd24 	bl	80067ca <USB_ReadChInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d11b      	bne.n	8003dc4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	334d      	adds	r3, #77	@ 0x4d
 8003dae:	2207      	movs	r2, #7
 8003db0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 fd82 	bl	80068c4 <USB_HC_Halt>
 8003dc0:	f000 bc6f 	b.w	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 fcfc 	bl	80067ca <USB_ReadChInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	f040 8082 	bne.w	8003ee2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dea:	461a      	mov	r2, r3
 8003dec:	2320      	movs	r3, #32
 8003dee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3319      	adds	r3, #25
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d124      	bne.n	8003e50 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	3319      	adds	r3, #25
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	334c      	adds	r3, #76	@ 0x4c
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	334d      	adds	r3, #77	@ 0x4d
 8003e3e:	2203      	movs	r2, #3
 8003e40:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f002 fd3a 	bl	80068c4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	331a      	adds	r3, #26
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 841d 	bne.w	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	331b      	adds	r3, #27
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 8411 	bne.w	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3326      	adds	r3, #38	@ 0x26
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d009      	beq.n	8003eaa <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	331b      	adds	r3, #27
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	334d      	adds	r3, #77	@ 0x4d
 8003eba:	2203      	movs	r2, #3
 8003ebc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f002 fcfc 	bl	80068c4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3344      	adds	r3, #68	@ 0x44
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e3df      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 fc6d 	bl	80067ca <USB_ReadChInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003efa:	d111      	bne.n	8003f20 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f0e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f002 fcd3 	bl	80068c4 <USB_HC_Halt>
 8003f1e:	e3c0      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 fc4e 	bl	80067ca <USB_ReadChInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d168      	bne.n	800400a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3344      	adds	r3, #68	@ 0x44
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f002 fc38 	bl	80067ca <USB_ReadChInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f60:	2b40      	cmp	r3, #64	@ 0x40
 8003f62:	d112      	bne.n	8003f8a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	3319      	adds	r3, #25
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f84:	461a      	mov	r2, r3
 8003f86:	2340      	movs	r3, #64	@ 0x40
 8003f88:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	331b      	adds	r3, #27
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d019      	beq.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	331b      	adds	r3, #27
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	334d      	adds	r3, #77	@ 0x4d
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f002 fc5e 	bl	80068c4 <USB_HC_Halt>
 8004008:	e34b      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f002 fbd9 	bl	80067ca <USB_ReadChInterrupts>
 8004018:	4603      	mov	r3, r0
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b40      	cmp	r3, #64	@ 0x40
 8004020:	d139      	bne.n	8004096 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	334d      	adds	r3, #77	@ 0x4d
 8004032:	2205      	movs	r2, #5
 8004034:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	331a      	adds	r3, #26
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3319      	adds	r3, #25
 800405c:	2201      	movs	r2, #1
 800405e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	3344      	adds	r3, #68	@ 0x44
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f002 fc21 	bl	80068c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408e:	461a      	mov	r2, r3
 8004090:	2340      	movs	r3, #64	@ 0x40
 8004092:	6093      	str	r3, [r2, #8]
 8004094:	e305      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	4611      	mov	r1, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f002 fb93 	bl	80067ca <USB_ReadChInterrupts>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11a      	bne.n	80040e4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ba:	461a      	mov	r2, r3
 80040bc:	2308      	movs	r3, #8
 80040be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	334d      	adds	r3, #77	@ 0x4d
 80040d0:	2206      	movs	r2, #6
 80040d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f002 fbf1 	bl	80068c4 <USB_HC_Halt>
 80040e2:	e2de      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f002 fb6c 	bl	80067ca <USB_ReadChInterrupts>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d144      	bne.n	8004186 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3344      	adds	r3, #68	@ 0x44
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	334d      	adds	r3, #77	@ 0x4d
 8004120:	2204      	movs	r2, #4
 8004122:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3319      	adds	r3, #25
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d114      	bne.n	8004164 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	3318      	adds	r3, #24
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004150:	78fa      	ldrb	r2, [r7, #3]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	3319      	adds	r3, #25
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f002 fba9 	bl	80068c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417e:	461a      	mov	r2, r3
 8004180:	2310      	movs	r3, #16
 8004182:	6093      	str	r3, [r2, #8]
 8004184:	e28d      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	4611      	mov	r1, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f002 fb1b 	bl	80067ca <USB_ReadChInterrupts>
 8004194:	4603      	mov	r3, r0
 8004196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419a:	2b80      	cmp	r3, #128	@ 0x80
 800419c:	d169      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	799b      	ldrb	r3, [r3, #6]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d111      	bne.n	80041ca <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	334d      	adds	r3, #77	@ 0x4d
 80041b6:	2207      	movs	r2, #7
 80041b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f002 fb7e 	bl	80068c4 <USB_HC_Halt>
 80041c8:	e049      	b.n	800425e <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	3344      	adds	r3, #68	@ 0x44
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	1c59      	adds	r1, r3, #1
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4403      	add	r3, r0
 80041ea:	3344      	adds	r3, #68	@ 0x44
 80041ec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	3344      	adds	r3, #68	@ 0x44
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d922      	bls.n	800424a <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	3344      	adds	r3, #68	@ 0x44
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	334c      	adds	r3, #76	@ 0x4c
 8004228:	2204      	movs	r2, #4
 800422a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	334c      	adds	r3, #76	@ 0x4c
 800423c:	781a      	ldrb	r2, [r3, #0]
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f002 fdb9 	bl	8006dba <HAL_HCD_HC_NotifyURBChange_Callback>
 8004248:	e009      	b.n	800425e <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	334c      	adds	r3, #76	@ 0x4c
 800425a:	2202      	movs	r2, #2
 800425c:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800426a:	461a      	mov	r2, r3
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	6093      	str	r3, [r2, #8]
 8004270:	e217      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f002 faa5 	bl	80067ca <USB_ReadChInterrupts>
 8004280:	4603      	mov	r3, r0
 8004282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d11b      	bne.n	80042c4 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	334d      	adds	r3, #77	@ 0x4d
 800429c:	2209      	movs	r2, #9
 800429e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f002 fb0b 	bl	80068c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042c0:	6093      	str	r3, [r2, #8]
 80042c2:	e1ee      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 fa7c 	bl	80067ca <USB_ReadChInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	f040 81df 	bne.w	800469c <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ea:	461a      	mov	r2, r3
 80042ec:	2302      	movs	r3, #2
 80042ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	334d      	adds	r3, #77	@ 0x4d
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	f040 8093 	bne.w	800442e <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	334d      	adds	r3, #77	@ 0x4d
 8004318:	2202      	movs	r2, #2
 800431a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	334c      	adds	r3, #76	@ 0x4c
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	3326      	adds	r3, #38	@ 0x26
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d00b      	beq.n	800435e <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3326      	adds	r3, #38	@ 0x26
 8004356:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004358:	2b03      	cmp	r3, #3
 800435a:	f040 8190 	bne.w	800467e <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	799b      	ldrb	r3, [r3, #6]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d115      	bne.n	8004392 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	333d      	adds	r3, #61	@ 0x3d
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	f083 0301 	eor.w	r3, r3, #1
 800437e:	b2d8      	uxtb	r0, r3
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	333d      	adds	r3, #61	@ 0x3d
 800438e:	4602      	mov	r2, r0
 8004390:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	799b      	ldrb	r3, [r3, #6]
 8004396:	2b01      	cmp	r3, #1
 8004398:	f040 8171 	bne.w	800467e <HCD_HC_OUT_IRQHandler+0x920>
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	3334      	adds	r3, #52	@ 0x34
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8165 	beq.w	800467e <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	3334      	adds	r3, #52	@ 0x34
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4403      	add	r3, r0
 80043d4:	3328      	adds	r3, #40	@ 0x28
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	440b      	add	r3, r1
 80043da:	1e59      	subs	r1, r3, #1
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4403      	add	r3, r0
 80043ea:	3328      	adds	r3, #40	@ 0x28
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 813f 	beq.w	800467e <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	333d      	adds	r3, #61	@ 0x3d
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2d8      	uxtb	r0, r3
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	333d      	adds	r3, #61	@ 0x3d
 8004428:	4602      	mov	r2, r0
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e127      	b.n	800467e <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	334d      	adds	r3, #77	@ 0x4d
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d120      	bne.n	8004486 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	334d      	adds	r3, #77	@ 0x4d
 8004454:	2202      	movs	r2, #2
 8004456:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	331b      	adds	r3, #27
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	f040 8107 	bne.w	800467e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	334c      	adds	r3, #76	@ 0x4c
 8004480:	2202      	movs	r2, #2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e0fb      	b.n	800467e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	334d      	adds	r3, #77	@ 0x4d
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d13a      	bne.n	8004512 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	334d      	adds	r3, #77	@ 0x4d
 80044ac:	2202      	movs	r2, #2
 80044ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	334c      	adds	r3, #76	@ 0x4c
 80044c0:	2202      	movs	r2, #2
 80044c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	331b      	adds	r3, #27
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	f040 80d1 	bne.w	800467e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	331b      	adds	r3, #27
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	440a      	add	r2, r1
 8004506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	6053      	str	r3, [r2, #4]
 8004510:	e0b5      	b.n	800467e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	334d      	adds	r3, #77	@ 0x4d
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d114      	bne.n	8004552 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	334d      	adds	r3, #77	@ 0x4d
 8004538:	2202      	movs	r2, #2
 800453a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	334c      	adds	r3, #76	@ 0x4c
 800454c:	2202      	movs	r2, #2
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e095      	b.n	800467e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	334d      	adds	r3, #77	@ 0x4d
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b06      	cmp	r3, #6
 8004566:	d114      	bne.n	8004592 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	334d      	adds	r3, #77	@ 0x4d
 8004578:	2202      	movs	r2, #2
 800457a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	334c      	adds	r3, #76	@ 0x4c
 800458c:	2205      	movs	r2, #5
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e075      	b.n	800467e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	334d      	adds	r3, #77	@ 0x4d
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b07      	cmp	r3, #7
 80045a6:	d00a      	beq.n	80045be <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	334d      	adds	r3, #77	@ 0x4d
 80045b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045ba:	2b09      	cmp	r3, #9
 80045bc:	d170      	bne.n	80046a0 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	334d      	adds	r3, #77	@ 0x4d
 80045ce:	2202      	movs	r2, #2
 80045d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3344      	adds	r3, #68	@ 0x44
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	1c59      	adds	r1, r3, #1
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4403      	add	r3, r0
 80045f2:	3344      	adds	r3, #68	@ 0x44
 80045f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3344      	adds	r3, #68	@ 0x44
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d914      	bls.n	8004636 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3344      	adds	r3, #68	@ 0x44
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	334c      	adds	r3, #76	@ 0x4c
 8004630:	2204      	movs	r2, #4
 8004632:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004634:	e022      	b.n	800467c <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	334c      	adds	r3, #76	@ 0x4c
 8004646:	2202      	movs	r2, #2
 8004648:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004660:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004668:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800466a:	78fb      	ldrb	r3, [r7, #3]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800467c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	334c      	adds	r3, #76	@ 0x4c
 800468e:	781a      	ldrb	r2, [r3, #0]
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	4619      	mov	r1, r3
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f002 fb90 	bl	8006dba <HAL_HCD_HC_NotifyURBChange_Callback>
 800469a:	e002      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80046a0:	bf00      	nop
  }
}
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	@ 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	0c5b      	lsrs	r3, r3, #17
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d004      	beq.n	80046ee <HCD_RXQLVL_IRQHandler+0x46>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	f000 80b6 	beq.w	8004858 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046ec:	e0b7      	b.n	800485e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80b3 	beq.w	800485c <HCD_RXQLVL_IRQHandler+0x1b4>
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	332c      	adds	r3, #44	@ 0x2c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80a7 	beq.w	800485c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	3338      	adds	r3, #56	@ 0x38
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	18d1      	adds	r1, r2, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4613      	mov	r3, r2
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4403      	add	r3, r0
 8004732:	3334      	adds	r3, #52	@ 0x34
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4299      	cmp	r1, r3
 8004738:	f200 8083 	bhi.w	8004842 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	332c      	adds	r3, #44	@ 0x2c
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	b292      	uxth	r2, r2
 8004756:	4619      	mov	r1, r3
 8004758:	f001 ffcc 	bl	80066f4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	332c      	adds	r3, #44	@ 0x2c
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	18d1      	adds	r1, r2, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4403      	add	r3, r0
 8004780:	332c      	adds	r3, #44	@ 0x2c
 8004782:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4613      	mov	r3, r2
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3338      	adds	r3, #56	@ 0x38
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	18d1      	adds	r1, r2, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4403      	add	r3, r0
 80047a8:	3338      	adds	r3, #56	@ 0x38
 80047aa:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	0cdb      	lsrs	r3, r3, #19
 80047bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4613      	mov	r3, r2
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	3328      	adds	r3, #40	@ 0x28
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4293      	cmp	r3, r2
 80047da:	d13f      	bne.n	800485c <HCD_RXQLVL_IRQHandler+0x1b4>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d03c      	beq.n	800485c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047f8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004800:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	4413      	add	r3, r2
 800480a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800480e:	461a      	mov	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	333c      	adds	r3, #60	@ 0x3c
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	f083 0301 	eor.w	r3, r3, #1
 800482a:	b2d8      	uxtb	r0, r3
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	333c      	adds	r3, #60	@ 0x3c
 800483c:	4602      	mov	r2, r0
 800483e:	701a      	strb	r2, [r3, #0]
      break;
 8004840:	e00c      	b.n	800485c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	334c      	adds	r3, #76	@ 0x4c
 8004852:	2204      	movs	r2, #4
 8004854:	701a      	strb	r2, [r3, #0]
      break;
 8004856:	e001      	b.n	800485c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800485c:	bf00      	nop
  }
}
 800485e:	bf00      	nop
 8004860:	3728      	adds	r7, #40	@ 0x28
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004892:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d10b      	bne.n	80048b6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d102      	bne.n	80048ae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f002 fa6a 	bl	8006d82 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d132      	bne.n	8004926 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f043 0308 	orr.w	r3, r3, #8
 80048c6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d126      	bne.n	8004920 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	7a5b      	ldrb	r3, [r3, #9]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d113      	bne.n	8004902 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80048e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048e4:	d106      	bne.n	80048f4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2102      	movs	r1, #2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 ff9b 	bl	8006828 <USB_InitFSLSPClkSel>
 80048f2:	e011      	b.n	8004918 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2101      	movs	r1, #1
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 ff94 	bl	8006828 <USB_InitFSLSPClkSel>
 8004900:	e00a      	b.n	8004918 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	79db      	ldrb	r3, [r3, #7]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d106      	bne.n	8004918 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004910:	461a      	mov	r2, r3
 8004912:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004916:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f002 fa5c 	bl	8006dd6 <HAL_HCD_PortEnabled_Callback>
 800491e:	e002      	b.n	8004926 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f002 fa66 	bl	8006df2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b20      	cmp	r3, #32
 800492e:	d103      	bne.n	8004938 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f043 0320 	orr.w	r3, r3, #32
 8004936:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800493e:	461a      	mov	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6013      	str	r3, [r2, #0]
}
 8004944:	bf00      	nop
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e12b      	b.n	8004bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc f874 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2224      	movs	r2, #36	@ 0x24
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800499e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049b0:	f001 fa26 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 80049b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4a81      	ldr	r2, [pc, #516]	@ (8004bc0 <HAL_I2C_Init+0x274>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d807      	bhi.n	80049d0 <HAL_I2C_Init+0x84>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a80      	ldr	r2, [pc, #512]	@ (8004bc4 <HAL_I2C_Init+0x278>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bf94      	ite	ls
 80049c8:	2301      	movls	r3, #1
 80049ca:	2300      	movhi	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e006      	b.n	80049de <HAL_I2C_Init+0x92>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a7d      	ldr	r2, [pc, #500]	@ (8004bc8 <HAL_I2C_Init+0x27c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bf94      	ite	ls
 80049d8:	2301      	movls	r3, #1
 80049da:	2300      	movhi	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0e7      	b.n	8004bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a78      	ldr	r2, [pc, #480]	@ (8004bcc <HAL_I2C_Init+0x280>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0c9b      	lsrs	r3, r3, #18
 80049f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a6a      	ldr	r2, [pc, #424]	@ (8004bc0 <HAL_I2C_Init+0x274>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d802      	bhi.n	8004a20 <HAL_I2C_Init+0xd4>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	e009      	b.n	8004a34 <HAL_I2C_Init+0xe8>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	4a69      	ldr	r2, [pc, #420]	@ (8004bd0 <HAL_I2C_Init+0x284>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	099b      	lsrs	r3, r3, #6
 8004a32:	3301      	adds	r3, #1
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	495c      	ldr	r1, [pc, #368]	@ (8004bc0 <HAL_I2C_Init+0x274>)
 8004a50:	428b      	cmp	r3, r1
 8004a52:	d819      	bhi.n	8004a88 <HAL_I2C_Init+0x13c>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1e59      	subs	r1, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a62:	1c59      	adds	r1, r3, #1
 8004a64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a68:	400b      	ands	r3, r1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_I2C_Init+0x138>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1e59      	subs	r1, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a82:	e051      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004a84:	2304      	movs	r3, #4
 8004a86:	e04f      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d111      	bne.n	8004ab4 <HAL_I2C_Init+0x168>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1e58      	subs	r0, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	440b      	add	r3, r1
 8004a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e012      	b.n	8004ada <HAL_I2C_Init+0x18e>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1e58      	subs	r0, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	0099      	lsls	r1, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aca:	3301      	adds	r3, #1
 8004acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Init+0x196>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e022      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10e      	bne.n	8004b08 <HAL_I2C_Init+0x1bc>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1e58      	subs	r0, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	440b      	add	r3, r1
 8004af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afc:	3301      	adds	r3, #1
 8004afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b06:	e00f      	b.n	8004b28 <HAL_I2C_Init+0x1dc>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	0099      	lsls	r1, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	6809      	ldr	r1, [r1, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6911      	ldr	r1, [r2, #16]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	000186a0 	.word	0x000186a0
 8004bc4:	001e847f 	.word	0x001e847f
 8004bc8:	003d08ff 	.word	0x003d08ff
 8004bcc:	431bde83 	.word	0x431bde83
 8004bd0:	10624dd3 	.word	0x10624dd3

08004bd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	461a      	mov	r2, r3
 8004be0:	460b      	mov	r3, r1
 8004be2:	817b      	strh	r3, [r7, #10]
 8004be4:	4613      	mov	r3, r2
 8004be6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be8:	f7fd fe60 	bl	80028ac <HAL_GetTick>
 8004bec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	f040 80e0 	bne.w	8004dbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2319      	movs	r3, #25
 8004c02:	2201      	movs	r2, #1
 8004c04:	4970      	ldr	r1, [pc, #448]	@ (8004dc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fc64 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0d3      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2C_Master_Transmit+0x50>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0cc      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d007      	beq.n	8004c4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2221      	movs	r2, #33	@ 0x21
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2210      	movs	r2, #16
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	893a      	ldrh	r2, [r7, #8]
 8004c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a50      	ldr	r2, [pc, #320]	@ (8004dcc <HAL_I2C_Master_Transmit+0x1f8>)
 8004c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c8c:	8979      	ldrh	r1, [r7, #10]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 face 	bl	8005234 <I2C_MasterRequestWrite>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e08d      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cb8:	e066      	b.n	8004d88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	6a39      	ldr	r1, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fd22 	bl	8005708 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d107      	bne.n	8004ce2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e06b      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d11b      	bne.n	8004d5c <HAL_I2C_Master_Transmit+0x188>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d017      	beq.n	8004d5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	781a      	ldrb	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	6a39      	ldr	r1, [r7, #32]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fd19 	bl	8005798 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00d      	beq.n	8004d88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d107      	bne.n	8004d84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e01a      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d194      	bne.n	8004cba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	00100002 	.word	0x00100002
 8004dcc:	ffff0000 	.word	0xffff0000

08004dd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	@ 0x30
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	460b      	mov	r3, r1
 8004dde:	817b      	strh	r3, [r7, #10]
 8004de0:	4613      	mov	r3, r2
 8004de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de4:	f7fd fd62 	bl	80028ac <HAL_GetTick>
 8004de8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f040 8217 	bne.w	8005226 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2319      	movs	r3, #25
 8004dfe:	2201      	movs	r2, #1
 8004e00:	497c      	ldr	r1, [pc, #496]	@ (8004ff4 <HAL_I2C_Master_Receive+0x224>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fb66 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e20a      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2C_Master_Receive+0x50>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e203      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d007      	beq.n	8004e46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2222      	movs	r2, #34	@ 0x22
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2210      	movs	r2, #16
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	893a      	ldrh	r2, [r7, #8]
 8004e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff8 <HAL_I2C_Master_Receive+0x228>)
 8004e86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e88:	8979      	ldrh	r1, [r7, #10]
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fa52 	bl	8005338 <I2C_MasterRequestRead>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1c4      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d113      	bne.n	8004ece <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	623b      	str	r3, [r7, #32]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e198      	b.n	8005200 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d11b      	bne.n	8004f0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e178      	b.n	8005200 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d11b      	bne.n	8004f4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	e158      	b.n	8005200 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f74:	e144      	b.n	8005200 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	f200 80f1 	bhi.w	8005162 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d123      	bne.n	8004fd0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fc4b 	bl	8005828 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e145      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fce:	e117      	b.n	8005200 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d14e      	bne.n	8005076 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	2200      	movs	r2, #0
 8004fe0:	4906      	ldr	r1, [pc, #24]	@ (8004ffc <HAL_I2C_Master_Receive+0x22c>)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fa76 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e11a      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
 8004ff2:	bf00      	nop
 8004ff4:	00100002 	.word	0x00100002
 8004ff8:	ffff0000 	.word	0xffff0000
 8004ffc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800500e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005074:	e0c4      	b.n	8005200 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	2200      	movs	r2, #0
 800507e:	496c      	ldr	r1, [pc, #432]	@ (8005230 <HAL_I2C_Master_Receive+0x460>)
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fa27 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0cb      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800509e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	2200      	movs	r2, #0
 80050da:	4955      	ldr	r1, [pc, #340]	@ (8005230 <HAL_I2C_Master_Receive+0x460>)
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f9f9 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e09d      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005160:	e04e      	b.n	8005200 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005164:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fb5e 	bl	8005828 <I2C_WaitOnRXNEFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e058      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d124      	bne.n	8005200 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d107      	bne.n	80051ce <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	f47f aeb6 	bne.w	8004f76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005226:	2302      	movs	r3, #2
  }
}
 8005228:	4618      	mov	r0, r3
 800522a:	3728      	adds	r7, #40	@ 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	00010004 	.word	0x00010004

08005234 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	460b      	mov	r3, r1
 8005242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d006      	beq.n	800525e <I2C_MasterRequestWrite+0x2a>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d003      	beq.n	800525e <I2C_MasterRequestWrite+0x2a>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800525c:	d108      	bne.n	8005270 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	e00b      	b.n	8005288 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005274:	2b12      	cmp	r3, #18
 8005276:	d107      	bne.n	8005288 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f91d 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ae:	d103      	bne.n	80052b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e035      	b.n	8005328 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c4:	d108      	bne.n	80052d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052c6:	897b      	ldrh	r3, [r7, #10]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052d4:	611a      	str	r2, [r3, #16]
 80052d6:	e01b      	b.n	8005310 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052d8:	897b      	ldrh	r3, [r7, #10]
 80052da:	11db      	asrs	r3, r3, #7
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 0306 	and.w	r3, r3, #6
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f063 030f 	orn	r3, r3, #15
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	490e      	ldr	r1, [pc, #56]	@ (8005330 <I2C_MasterRequestWrite+0xfc>)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f966 	bl	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e010      	b.n	8005328 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005306:	897b      	ldrh	r3, [r7, #10]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4907      	ldr	r1, [pc, #28]	@ (8005334 <I2C_MasterRequestWrite+0x100>)
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f956 	bl	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	00010008 	.word	0x00010008
 8005334:	00010002 	.word	0x00010002

08005338 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	460b      	mov	r3, r1
 8005346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800535c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d006      	beq.n	8005372 <I2C_MasterRequestRead+0x3a>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d003      	beq.n	8005372 <I2C_MasterRequestRead+0x3a>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005370:	d108      	bne.n	8005384 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e00b      	b.n	800539c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	2b11      	cmp	r3, #17
 800538a:	d107      	bne.n	800539c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800539a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f893 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c2:	d103      	bne.n	80053cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e079      	b.n	80054c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053d8:	d108      	bne.n	80053ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053da:	897b      	ldrh	r3, [r7, #10]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f043 0301 	orr.w	r3, r3, #1
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	611a      	str	r2, [r3, #16]
 80053ea:	e05f      	b.n	80054ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053ec:	897b      	ldrh	r3, [r7, #10]
 80053ee:	11db      	asrs	r3, r3, #7
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 0306 	and.w	r3, r3, #6
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f063 030f 	orn	r3, r3, #15
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4930      	ldr	r1, [pc, #192]	@ (80054cc <I2C_MasterRequestRead+0x194>)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f8dc 	bl	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e054      	b.n	80054c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800541a:	897b      	ldrh	r3, [r7, #10]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4929      	ldr	r1, [pc, #164]	@ (80054d0 <I2C_MasterRequestRead+0x198>)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f8cc 	bl	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e044      	b.n	80054c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800545e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f831 	bl	80054d4 <I2C_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00d      	beq.n	8005494 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005486:	d103      	bne.n	8005490 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e017      	b.n	80054c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005494:	897b      	ldrh	r3, [r7, #10]
 8005496:	11db      	asrs	r3, r3, #7
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 0306 	and.w	r3, r3, #6
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f063 030e 	orn	r3, r3, #14
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4907      	ldr	r1, [pc, #28]	@ (80054d0 <I2C_MasterRequestRead+0x198>)
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f888 	bl	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	00010008 	.word	0x00010008
 80054d0:	00010002 	.word	0x00010002

080054d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e4:	e048      	b.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d044      	beq.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ee:	f7fd f9dd 	bl	80028ac <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d139      	bne.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	0c1b      	lsrs	r3, r3, #16
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10d      	bne.n	800552a <I2C_WaitOnFlagUntilTimeout+0x56>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	43da      	mvns	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4013      	ands	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	bf0c      	ite	eq
 8005520:	2301      	moveq	r3, #1
 8005522:	2300      	movne	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	e00c      	b.n	8005544 <I2C_WaitOnFlagUntilTimeout+0x70>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	43da      	mvns	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4013      	ands	r3, r2
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	429a      	cmp	r2, r3
 8005548:	d116      	bne.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e023      	b.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	0c1b      	lsrs	r3, r3, #16
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d10d      	bne.n	800559e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	43da      	mvns	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	e00c      	b.n	80055b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	43da      	mvns	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4013      	ands	r3, r2
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d093      	beq.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055d6:	e071      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e6:	d123      	bne.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	f043 0204 	orr.w	r2, r3, #4
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e067      	b.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d041      	beq.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005638:	f7fd f938 	bl	80028ac <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d136      	bne.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10c      	bne.n	8005672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	43da      	mvns	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf14      	ite	ne
 800566a:	2301      	movne	r3, #1
 800566c:	2300      	moveq	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	e00b      	b.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	43da      	mvns	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4013      	ands	r3, r2
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e021      	b.n	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	0c1b      	lsrs	r3, r3, #16
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10c      	bne.n	80056e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	43da      	mvns	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4013      	ands	r3, r2
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf14      	ite	ne
 80056d8:	2301      	movne	r3, #1
 80056da:	2300      	moveq	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	e00b      	b.n	80056f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	43da      	mvns	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4013      	ands	r3, r2
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bf14      	ite	ne
 80056f2:	2301      	movne	r3, #1
 80056f4:	2300      	moveq	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f47f af6d 	bne.w	80055d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005714:	e034      	b.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f8e3 	bl	80058e2 <I2C_IsAcknowledgeFailed>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e034      	b.n	8005790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d028      	beq.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572e:	f7fd f8bd 	bl	80028ac <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11d      	bne.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574e:	2b80      	cmp	r3, #128	@ 0x80
 8005750:	d016      	beq.n	8005780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	f043 0220 	orr.w	r2, r3, #32
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e007      	b.n	8005790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578a:	2b80      	cmp	r3, #128	@ 0x80
 800578c:	d1c3      	bne.n	8005716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057a4:	e034      	b.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f89b 	bl	80058e2 <I2C_IsAcknowledgeFailed>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e034      	b.n	8005820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d028      	beq.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fd f875 	bl	80028ac <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11d      	bne.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d016      	beq.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d1c3      	bne.n	80057a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005834:	e049      	b.n	80058ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b10      	cmp	r3, #16
 8005842:	d119      	bne.n	8005878 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0210 	mvn.w	r2, #16
 800584c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e030      	b.n	80058da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005878:	f7fd f818 	bl	80028ac <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d11d      	bne.n	80058ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	2b40      	cmp	r3, #64	@ 0x40
 800589a:	d016      	beq.n	80058ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e007      	b.n	80058da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	d1ae      	bne.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f8:	d11b      	bne.n	8005932 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005902:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0cc      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005954:	4b68      	ldr	r3, [pc, #416]	@ (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d90c      	bls.n	800597c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005962:	4b65      	ldr	r3, [pc, #404]	@ (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b63      	ldr	r3, [pc, #396]	@ (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0b8      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d020      	beq.n	80059ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005994:	4b59      	ldr	r3, [pc, #356]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	4a58      	ldr	r2, [pc, #352]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800599e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059ac:	4b53      	ldr	r3, [pc, #332]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4a52      	ldr	r2, [pc, #328]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b8:	4b50      	ldr	r3, [pc, #320]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	494d      	ldr	r1, [pc, #308]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d044      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d107      	bne.n	80059ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059de:	4b47      	ldr	r3, [pc, #284]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d119      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e07f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d003      	beq.n	80059fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d107      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fe:	4b3f      	ldr	r3, [pc, #252]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e06f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e067      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a1e:	4b37      	ldr	r3, [pc, #220]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f023 0203 	bic.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4934      	ldr	r1, [pc, #208]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a30:	f7fc ff3c 	bl	80028ac <HAL_GetTick>
 8005a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a36:	e00a      	b.n	8005a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a38:	f7fc ff38 	bl	80028ac <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e04f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 020c 	and.w	r2, r3, #12
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1eb      	bne.n	8005a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a60:	4b25      	ldr	r3, [pc, #148]	@ (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d20c      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6e:	4b22      	ldr	r3, [pc, #136]	@ (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b20      	ldr	r3, [pc, #128]	@ (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e032      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a94:	4b19      	ldr	r3, [pc, #100]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4916      	ldr	r1, [pc, #88]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ab2:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	490e      	ldr	r1, [pc, #56]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ac6:	f000 f889 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005aca:	4602      	mov	r2, r0
 8005acc:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	490a      	ldr	r1, [pc, #40]	@ (8005b00 <HAL_RCC_ClockConfig+0x1c0>)
 8005ad8:	5ccb      	ldrb	r3, [r1, r3]
 8005ada:	fa22 f303 	lsr.w	r3, r2, r3
 8005ade:	4a09      	ldr	r2, [pc, #36]	@ (8005b04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ae2:	4b09      	ldr	r3, [pc, #36]	@ (8005b08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fc fe9c 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40023c00 	.word	0x40023c00
 8005afc:	40023800 	.word	0x40023800
 8005b00:	08006f0c 	.word	0x08006f0c
 8005b04:	20000000 	.word	0x20000000
 8005b08:	2000008c 	.word	0x2000008c

08005b0c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	@ 0x30
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d129      	bne.n	8005b72 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b26:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b2e:	4b28      	ldr	r3, [pc, #160]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b40:	2302      	movs	r3, #2
 8005b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b44:	2303      	movs	r3, #3
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b50:	f107 031c 	add.w	r3, r7, #28
 8005b54:	4619      	mov	r1, r3
 8005b56:	481f      	ldr	r0, [pc, #124]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc8>)
 8005b58:	f7fc ffbe 	bl	8002ad8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	4919      	ldr	r1, [pc, #100]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005b70:	e029      	b.n	8005bc6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	4b16      	ldr	r3, [pc, #88]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7a:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005b7c:	f043 0304 	orr.w	r3, r3, #4
 8005b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b82:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b94:	2302      	movs	r3, #2
 8005b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005ba4:	f107 031c 	add.w	r3, r7, #28
 8005ba8:	4619      	mov	r1, r3
 8005baa:	480b      	ldr	r0, [pc, #44]	@ (8005bd8 <HAL_RCC_MCOConfig+0xcc>)
 8005bac:	f7fc ff94 	bl	8002ad8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005bb0:	4b07      	ldr	r3, [pc, #28]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	00d9      	lsls	r1, r3, #3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	4903      	ldr	r1, [pc, #12]	@ (8005bd0 <HAL_RCC_MCOConfig+0xc4>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	608b      	str	r3, [r1, #8]
}
 8005bc6:	bf00      	nop
 8005bc8:	3730      	adds	r7, #48	@ 0x30
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40020000 	.word	0x40020000
 8005bd8:	40020800 	.word	0x40020800

08005bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be0:	b094      	sub	sp, #80	@ 0x50
 8005be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be8:	2300      	movs	r3, #0
 8005bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bec:	2300      	movs	r3, #0
 8005bee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bf4:	4b79      	ldr	r3, [pc, #484]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 030c 	and.w	r3, r3, #12
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d00d      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0x40>
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	f200 80e1 	bhi.w	8005dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x34>
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c0e:	e0db      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c10:	4b73      	ldr	r3, [pc, #460]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c12:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005c14:	e0db      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c16:	4b73      	ldr	r3, [pc, #460]	@ (8005de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c1a:	e0d8      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c24:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c26:	4b6d      	ldr	r3, [pc, #436]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d063      	beq.n	8005cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c32:	4b6a      	ldr	r3, [pc, #424]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	2200      	movs	r2, #0
 8005c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c46:	2300      	movs	r3, #0
 8005c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c4e:	4622      	mov	r2, r4
 8005c50:	462b      	mov	r3, r5
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	0159      	lsls	r1, r3, #5
 8005c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c60:	0150      	lsls	r0, r2, #5
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4621      	mov	r1, r4
 8005c68:	1a51      	subs	r1, r2, r1
 8005c6a:	6139      	str	r1, [r7, #16]
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c80:	4659      	mov	r1, fp
 8005c82:	018b      	lsls	r3, r1, #6
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	018a      	lsls	r2, r1, #6
 8005c8e:	4651      	mov	r1, sl
 8005c90:	ebb2 0801 	subs.w	r8, r2, r1
 8005c94:	4659      	mov	r1, fp
 8005c96:	eb63 0901 	sbc.w	r9, r3, r1
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cae:	4690      	mov	r8, r2
 8005cb0:	4699      	mov	r9, r3
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	eb18 0303 	adds.w	r3, r8, r3
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	462b      	mov	r3, r5
 8005cbc:	eb49 0303 	adc.w	r3, r9, r3
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cce:	4629      	mov	r1, r5
 8005cd0:	024b      	lsls	r3, r1, #9
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cd8:	4621      	mov	r1, r4
 8005cda:	024a      	lsls	r2, r1, #9
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cec:	f7fa fa8a 	bl	8000204 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cf8:	e058      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfa:	4b38      	ldr	r3, [pc, #224]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	099b      	lsrs	r3, r3, #6
 8005d00:	2200      	movs	r2, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	4611      	mov	r1, r2
 8005d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d0a:	623b      	str	r3, [r7, #32]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	f04f 0000 	mov.w	r0, #0
 8005d1c:	f04f 0100 	mov.w	r1, #0
 8005d20:	0159      	lsls	r1, r3, #5
 8005d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d26:	0150      	lsls	r0, r2, #5
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d32:	4649      	mov	r1, r9
 8005d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005d50:	eb63 050b 	sbc.w	r5, r3, fp
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	00eb      	lsls	r3, r5, #3
 8005d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d62:	00e2      	lsls	r2, r4, #3
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	4643      	mov	r3, r8
 8005d6a:	18e3      	adds	r3, r4, r3
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	464b      	mov	r3, r9
 8005d70:	eb45 0303 	adc.w	r3, r5, r3
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d82:	4629      	mov	r1, r5
 8005d84:	028b      	lsls	r3, r1, #10
 8005d86:	4621      	mov	r1, r4
 8005d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	028a      	lsls	r2, r1, #10
 8005d90:	4610      	mov	r0, r2
 8005d92:	4619      	mov	r1, r3
 8005d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d96:	2200      	movs	r2, #0
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	61fa      	str	r2, [r7, #28]
 8005d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da0:	f7fa fa30 	bl	8000204 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dac:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	3301      	adds	r3, #1
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005dbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dc6:	e002      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3750      	adds	r7, #80	@ 0x50
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dda:	bf00      	nop
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	00f42400 	.word	0x00f42400
 8005de4:	007a1200 	.word	0x007a1200

08005de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dec:	4b03      	ldr	r3, [pc, #12]	@ (8005dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dee:	681b      	ldr	r3, [r3, #0]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000000 	.word	0x20000000

08005e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e04:	f7ff fff0 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	0a9b      	lsrs	r3, r3, #10
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	4903      	ldr	r1, [pc, #12]	@ (8005e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e16:	5ccb      	ldrb	r3, [r1, r3]
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40023800 	.word	0x40023800
 8005e24:	08006f1c 	.word	0x08006f1c

08005e28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e273      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d075      	beq.n	8005f32 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e46:	4b88      	ldr	r3, [pc, #544]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00c      	beq.n	8005e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e52:	4b85      	ldr	r3, [pc, #532]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d112      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5e:	4b82      	ldr	r3, [pc, #520]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d05b      	beq.n	8005f30 <HAL_RCC_OscConfig+0x108>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d157      	bne.n	8005f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e24e      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8c:	d106      	bne.n	8005e9c <HAL_RCC_OscConfig+0x74>
 8005e8e:	4b76      	ldr	r3, [pc, #472]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a75      	ldr	r2, [pc, #468]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e01d      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x98>
 8005ea6:	4b70      	ldr	r3, [pc, #448]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6f      	ldr	r2, [pc, #444]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6c      	ldr	r2, [pc, #432]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005ec0:	4b69      	ldr	r3, [pc, #420]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a68      	ldr	r2, [pc, #416]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b66      	ldr	r3, [pc, #408]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a65      	ldr	r2, [pc, #404]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fc fce4 	bl	80028ac <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fc fce0 	bl	80028ac <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	@ 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e213      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efa:	4b5b      	ldr	r3, [pc, #364]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xc0>
 8005f06:	e014      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fc fcd0 	bl	80028ac <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fc fccc 	bl	80028ac <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	@ 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e1ff      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f22:	4b51      	ldr	r3, [pc, #324]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0xe8>
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d063      	beq.n	8006006 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00b      	beq.n	8005f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4a:	4b47      	ldr	r3, [pc, #284]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d11c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f56:	4b44      	ldr	r3, [pc, #272]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d116      	bne.n	8005f90 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f62:	4b41      	ldr	r3, [pc, #260]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_RCC_OscConfig+0x152>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d001      	beq.n	8005f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e1d3      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4937      	ldr	r1, [pc, #220]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8e:	e03a      	b.n	8006006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d020      	beq.n	8005fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f98:	4b34      	ldr	r3, [pc, #208]	@ (800606c <HAL_RCC_OscConfig+0x244>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9e:	f7fc fc85 	bl	80028ac <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa6:	f7fc fc81 	bl	80028ac <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e1b4      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc4:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4925      	ldr	r1, [pc, #148]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
 8005fd8:	e015      	b.n	8006006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fda:	4b24      	ldr	r3, [pc, #144]	@ (800606c <HAL_RCC_OscConfig+0x244>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fc fc64 	bl	80028ac <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe8:	f7fc fc60 	bl	80028ac <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e193      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d036      	beq.n	8006080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601a:	4b15      	ldr	r3, [pc, #84]	@ (8006070 <HAL_RCC_OscConfig+0x248>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006020:	f7fc fc44 	bl	80028ac <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006028:	f7fc fc40 	bl	80028ac <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e173      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603a:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <HAL_RCC_OscConfig+0x240>)
 800603c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0x200>
 8006046:	e01b      	b.n	8006080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006048:	4b09      	ldr	r3, [pc, #36]	@ (8006070 <HAL_RCC_OscConfig+0x248>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604e:	f7fc fc2d 	bl	80028ac <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006054:	e00e      	b.n	8006074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006056:	f7fc fc29 	bl	80028ac <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d907      	bls.n	8006074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e15c      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
 8006068:	40023800 	.word	0x40023800
 800606c:	42470000 	.word	0x42470000
 8006070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006074:	4b8a      	ldr	r3, [pc, #552]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1ea      	bne.n	8006056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8097 	beq.w	80061bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006092:	4b83      	ldr	r3, [pc, #524]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10f      	bne.n	80060be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	4b7f      	ldr	r3, [pc, #508]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	4a7e      	ldr	r2, [pc, #504]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 80060a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80060ae:	4b7c      	ldr	r3, [pc, #496]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b6:	60bb      	str	r3, [r7, #8]
 80060b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060be:	4b79      	ldr	r3, [pc, #484]	@ (80062a4 <HAL_RCC_OscConfig+0x47c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d118      	bne.n	80060fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ca:	4b76      	ldr	r3, [pc, #472]	@ (80062a4 <HAL_RCC_OscConfig+0x47c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a75      	ldr	r2, [pc, #468]	@ (80062a4 <HAL_RCC_OscConfig+0x47c>)
 80060d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d6:	f7fc fbe9 	bl	80028ac <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060de:	f7fc fbe5 	bl	80028ac <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e118      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f0:	4b6c      	ldr	r3, [pc, #432]	@ (80062a4 <HAL_RCC_OscConfig+0x47c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f0      	beq.n	80060de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d106      	bne.n	8006112 <HAL_RCC_OscConfig+0x2ea>
 8006104:	4b66      	ldr	r3, [pc, #408]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006108:	4a65      	ldr	r2, [pc, #404]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006110:	e01c      	b.n	800614c <HAL_RCC_OscConfig+0x324>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b05      	cmp	r3, #5
 8006118:	d10c      	bne.n	8006134 <HAL_RCC_OscConfig+0x30c>
 800611a:	4b61      	ldr	r3, [pc, #388]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611e:	4a60      	ldr	r2, [pc, #384]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006120:	f043 0304 	orr.w	r3, r3, #4
 8006124:	6713      	str	r3, [r2, #112]	@ 0x70
 8006126:	4b5e      	ldr	r3, [pc, #376]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612a:	4a5d      	ldr	r2, [pc, #372]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	6713      	str	r3, [r2, #112]	@ 0x70
 8006132:	e00b      	b.n	800614c <HAL_RCC_OscConfig+0x324>
 8006134:	4b5a      	ldr	r3, [pc, #360]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006138:	4a59      	ldr	r2, [pc, #356]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006140:	4b57      	ldr	r3, [pc, #348]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006144:	4a56      	ldr	r2, [pc, #344]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006146:	f023 0304 	bic.w	r3, r3, #4
 800614a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006154:	f7fc fbaa 	bl	80028ac <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615a:	e00a      	b.n	8006172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800615c:	f7fc fba6 	bl	80028ac <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e0d7      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006172:	4b4b      	ldr	r3, [pc, #300]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0ee      	beq.n	800615c <HAL_RCC_OscConfig+0x334>
 800617e:	e014      	b.n	80061aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fc fb94 	bl	80028ac <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006186:	e00a      	b.n	800619e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006188:	f7fc fb90 	bl	80028ac <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e0c1      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800619e:	4b40      	ldr	r3, [pc, #256]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1ee      	bne.n	8006188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d105      	bne.n	80061bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b0:	4b3b      	ldr	r3, [pc, #236]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 80061b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b4:	4a3a      	ldr	r2, [pc, #232]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 80061b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80ad 	beq.w	8006320 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061c6:	4b36      	ldr	r3, [pc, #216]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d060      	beq.n	8006294 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d145      	bne.n	8006266 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061da:	4b33      	ldr	r3, [pc, #204]	@ (80062a8 <HAL_RCC_OscConfig+0x480>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e0:	f7fc fb64 	bl	80028ac <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e8:	f7fc fb60 	bl	80028ac <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e093      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061fa:	4b29      	ldr	r3, [pc, #164]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f0      	bne.n	80061e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	019b      	lsls	r3, r3, #6
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	3b01      	subs	r3, #1
 8006220:	041b      	lsls	r3, r3, #16
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006228:	061b      	lsls	r3, r3, #24
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006230:	071b      	lsls	r3, r3, #28
 8006232:	491b      	ldr	r1, [pc, #108]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <HAL_RCC_OscConfig+0x480>)
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623e:	f7fc fb35 	bl	80028ac <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006246:	f7fc fb31 	bl	80028ac <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e064      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006258:	4b11      	ldr	r3, [pc, #68]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x41e>
 8006264:	e05c      	b.n	8006320 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006266:	4b10      	ldr	r3, [pc, #64]	@ (80062a8 <HAL_RCC_OscConfig+0x480>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fc fb1e 	bl	80028ac <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006274:	f7fc fb1a 	bl	80028ac <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e04d      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006286:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x44c>
 8006292:	e045      	b.n	8006320 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e040      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
 80062a0:	40023800 	.word	0x40023800
 80062a4:	40007000 	.word	0x40007000
 80062a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062ac:	4b1f      	ldr	r3, [pc, #124]	@ (800632c <HAL_RCC_OscConfig+0x504>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d030      	beq.n	800631c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d129      	bne.n	800631c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d122      	bne.n	800631c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062dc:	4013      	ands	r3, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d119      	bne.n	800631c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	3b01      	subs	r3, #1
 80062f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d10f      	bne.n	800631c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006308:	429a      	cmp	r2, r3
 800630a:	d107      	bne.n	800631c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006316:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006318:	429a      	cmp	r2, r3
 800631a:	d001      	beq.n	8006320 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800

08006330 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e038      	b.n	80063b8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7fa fc6c 	bl	8000c38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3308      	adds	r3, #8
 8006368:	4619      	mov	r1, r3
 800636a:	4610      	mov	r0, r2
 800636c:	f000 f828 	bl	80063c0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	461a      	mov	r2, r3
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	f000 f8b0 	bl	80064e0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6858      	ldr	r0, [r3, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	f000 f8f7 	bl	8006580 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	6892      	ldr	r2, [r2, #8]
 800639a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	6892      	ldr	r2, [r2, #8]
 80063a6:	f041 0101 	orr.w	r1, r1, #1
 80063aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	f023 0101 	bic.w	r1, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d102      	bne.n	80063f0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80063ea:	2340      	movs	r3, #64	@ 0x40
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e001      	b.n	80063f4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006400:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006406:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800640c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006412:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006418:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800641e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006424:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800642a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006430:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006458:	4b20      	ldr	r3, [pc, #128]	@ (80064dc <FSMC_NORSRAM_Init+0x11c>)
 800645a:	60fb      	str	r3, [r7, #12]

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  mask |= FSMC_BCR1_CCLKEN;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006462:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800646a:	60fb      	str	r3, [r7, #12]
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006472:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	43db      	mvns	r3, r3
 8006482:	ea02 0103 	and.w	r1, r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4319      	orrs	r1, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800649c:	d10c      	bne.n	80064b8 <FSMC_NORSRAM_Init+0xf8>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d008      	beq.n	80064b8 <FSMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	601a      	str	r2, [r3, #0]
  }
#endif
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d006      	beq.n	80064ce <FSMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	601a      	str	r2, [r3, #0]
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	0008fb7f 	.word	0x0008fb7f

080064e0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	431a      	orrs	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	431a      	orrs	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	431a      	orrs	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	3b01      	subs	r3, #1
 800651c:	051b      	lsls	r3, r3, #20
 800651e:	431a      	orrs	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	3b02      	subs	r3, #2
 8006526:	061b      	lsls	r3, r3, #24
 8006528:	431a      	orrs	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	4313      	orrs	r3, r2
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	3201      	adds	r2, #1
 8006534:	4319      	orrs	r1, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006548:	d113      	bne.n	8006572 <FSMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006552:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	3b01      	subs	r3, #1
 800655a:	051b      	lsls	r3, r3, #20
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	431a      	orrs	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006594:	d11d      	bne.n	80065d2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800659e:	4b13      	ldr	r3, [pc, #76]	@ (80065ec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	6811      	ldr	r1, [r2, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	6852      	ldr	r2, [r2, #4]
 80065aa:	0112      	lsls	r2, r2, #4
 80065ac:	4311      	orrs	r1, r2
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	6892      	ldr	r2, [r2, #8]
 80065b2:	0212      	lsls	r2, r2, #8
 80065b4:	4311      	orrs	r1, r2
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	6992      	ldr	r2, [r2, #24]
 80065ba:	4311      	orrs	r1, r2
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	68d2      	ldr	r2, [r2, #12]
 80065c0:	0412      	lsls	r2, r2, #16
 80065c2:	430a      	orrs	r2, r1
 80065c4:	ea43 0102 	orr.w	r1, r3, r2
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80065d0:	e005      	b.n	80065de <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80065da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	cff00000 	.word	0xcff00000

080065f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f043 0201 	orr.w	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 0201 	bic.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800664e:	d901      	bls.n	8006654 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e01b      	b.n	800668c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	daf2      	bge.n	8006642 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	019b      	lsls	r3, r3, #6
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006678:	d901      	bls.n	800667e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e006      	b.n	800668c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b20      	cmp	r3, #32
 8006688:	d0f0      	beq.n	800666c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066b0:	d901      	bls.n	80066b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e018      	b.n	80066e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	daf2      	bge.n	80066a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2210      	movs	r2, #16
 80066c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066d4:	d901      	bls.n	80066da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e006      	b.n	80066e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d0f0      	beq.n	80066c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b08b      	sub	sp, #44	@ 0x2c
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	089b      	lsrs	r3, r3, #2
 800670e:	b29b      	uxth	r3, r3
 8006710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800671a:	2300      	movs	r3, #0
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	e014      	b.n	800674a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	601a      	str	r2, [r3, #0]
    pDest++;
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	3301      	adds	r3, #1
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	3301      	adds	r3, #1
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	3301      	adds	r3, #1
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	3301      	adds	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	3301      	adds	r3, #1
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	6a3a      	ldr	r2, [r7, #32]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	429a      	cmp	r2, r3
 8006750:	d3e6      	bcc.n	8006720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006752:	8bfb      	ldrh	r3, [r7, #30]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01e      	beq.n	8006796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006762:	461a      	mov	r2, r3
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	701a      	strb	r2, [r3, #0]
      i++;
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	3301      	adds	r3, #1
 8006782:	623b      	str	r3, [r7, #32]
      pDest++;
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	3301      	adds	r3, #1
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800678a:	8bfb      	ldrh	r3, [r7, #30]
 800678c:	3b01      	subs	r3, #1
 800678e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006790:	8bfb      	ldrh	r3, [r7, #30]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ea      	bne.n	800676c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006798:	4618      	mov	r0, r3
 800679a:	372c      	adds	r7, #44	@ 0x2c
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4013      	ands	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067bc:	68fb      	ldr	r3, [r7, #12]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067fe:	68bb      	ldr	r3, [r7, #8]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	f003 0301 	and.w	r3, r3, #1
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006860:	4313      	orrs	r3, r2
 8006862:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d107      	bne.n	800687a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006870:	461a      	mov	r2, r3
 8006872:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006876:	6053      	str	r3, [r2, #4]
 8006878:	e00c      	b.n	8006894 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d107      	bne.n	8006890 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006886:	461a      	mov	r2, r3
 8006888:	f241 7370 	movw	r3, #6000	@ 0x1770
 800688c:	6053      	str	r3, [r2, #4]
 800688e:	e001      	b.n	8006894 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	b29b      	uxth	r3, r3
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b089      	sub	sp, #36	@ 0x24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	0c9b      	lsrs	r3, r3, #18
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	0fdb      	lsrs	r3, r3, #31
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	0fdb      	lsrs	r3, r3, #31
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d10d      	bne.n	8006946 <USB_HC_Halt+0x82>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <USB_HC_Halt+0x82>
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d002      	beq.n	8006942 <USB_HC_Halt+0x7e>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d101      	bne.n	8006946 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	e0d8      	b.n	8006af8 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <USB_HC_Halt+0x8e>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d173      	bne.n	8006a3a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800696c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006970:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d14a      	bne.n	8006a14 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006982:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d133      	bne.n	80069f2 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	3301      	adds	r3, #1
 80069ce:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069d6:	d82e      	bhi.n	8006a36 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069ee:	d0ec      	beq.n	80069ca <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069f0:	e081      	b.n	8006af6 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a10:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a12:	e070      	b.n	8006af6 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a32:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a34:	e05f      	b.n	8006af6 <USB_HC_Halt+0x232>
            break;
 8006a36:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a38:	e05d      	b.n	8006af6 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	0151      	lsls	r1, r2, #5
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	440a      	add	r2, r1
 8006a50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a58:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d133      	bne.n	8006ad2 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	0151      	lsls	r1, r2, #5
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	440a      	add	r2, r1
 8006a80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a88:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aa4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006aa8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ab6:	d81d      	bhi.n	8006af4 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ace:	d0ec      	beq.n	8006aaa <USB_HC_Halt+0x1e6>
 8006ad0:	e011      	b.n	8006af6 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e000      	b.n	8006af6 <USB_HC_Halt+0x232>
          break;
 8006af4:	bf00      	nop
    }
  }

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3724      	adds	r7, #36	@ 0x24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff fd7a 	bl	8006612 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b1e:	2110      	movs	r1, #16
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fd87 	bl	8006634 <USB_FlushTxFifo>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff fdb1 	bl	8006698 <USB_FlushRxFifo>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b40:	2300      	movs	r3, #0
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e01f      	b.n	8006b86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	3301      	adds	r3, #1
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b0f      	cmp	r3, #15
 8006b8a:	d9dc      	bls.n	8006b46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61bb      	str	r3, [r7, #24]
 8006b90:	e034      	b.n	8006bfc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ba8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bd8:	d80c      	bhi.n	8006bf4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bf0:	d0ec      	beq.n	8006bcc <USB_StopHost+0xc8>
 8006bf2:	e000      	b.n	8006bf6 <USB_StopHost+0xf2>
        break;
 8006bf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	61bb      	str	r3, [r7, #24]
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b0f      	cmp	r3, #15
 8006c00:	d9c7      	bls.n	8006b92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295
 8006c16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff fce9 	bl	80065f0 <USB_EnableGlobalInt>

  return ret;
 8006c1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f804 	bl	8006c4c <USBH_HandleSof>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b0b      	cmp	r3, #11
 8006c5c:	d10a      	bne.n	8006c74 <USBH_HandleSof+0x28>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
  }
}
 8006c74:	bf00      	nop
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006c8c:	bf00      	nop
}
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006ca8:	bf00      	nop
}
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f883 	bl	8006e0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	791b      	ldrb	r3, [r3, #4]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f80b 	bl	8006d2a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	795b      	ldrb	r3, [r3, #5]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f805 	bl	8006d2a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	2b0f      	cmp	r3, #15
 8006d3a:	d80d      	bhi.n	8006d58 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	33e0      	adds	r3, #224	@ 0xe0
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	33e0      	adds	r3, #224	@ 0xe0
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff ff57 	bl	8006c28 <USBH_LL_IncTimer>
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff ff8f 	bl	8006cb4 <USBH_LL_Connect>
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ff98 	bl	8006ce2 <USBH_LL_Disconnect>
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7ff ff49 	bl	8006c7c <USBH_LL_PortEnabled>
}
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff ff49 	bl	8006c98 <USBH_LL_PortDisabled>
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fc f914 	bl	8003052 <HAL_HCD_Stop>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 f807 	bl	8006e44 <USBH_Get_USB_Status>
 8006e36:	4603      	mov	r3, r0
 8006e38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d817      	bhi.n	8006e88 <USBH_Get_USB_Status+0x44>
 8006e58:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <USBH_Get_USB_Status+0x1c>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e77 	.word	0x08006e77
 8006e68:	08006e7d 	.word	0x08006e7d
 8006e6c:	08006e83 	.word	0x08006e83
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
    break;
 8006e74:	e00b      	b.n	8006e8e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006e76:	2302      	movs	r3, #2
 8006e78:	73fb      	strb	r3, [r7, #15]
    break;
 8006e7a:	e008      	b.n	8006e8e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e80:	e005      	b.n	8006e8e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006e82:	2302      	movs	r3, #2
 8006e84:	73fb      	strb	r3, [r7, #15]
    break;
 8006e86:	e002      	b.n	8006e8e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8c:	bf00      	nop
  }
  return usb_status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <memset>:
 8006e9c:	4402      	add	r2, r0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d100      	bne.n	8006ea6 <memset+0xa>
 8006ea4:	4770      	bx	lr
 8006ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eaa:	e7f9      	b.n	8006ea0 <memset+0x4>

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4d0d      	ldr	r5, [pc, #52]	@ (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1b64      	subs	r4, r4, r5
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	42a6      	cmp	r6, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f000 f818 	bl	8006ef4 <_init>
 8006ec4:	1b64      	subs	r4, r4, r5
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2600      	movs	r6, #0
 8006eca:	42a6      	cmp	r6, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed4:	4798      	blx	r3
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ede:	4798      	blx	r3
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	08008e58 	.word	0x08008e58
 8006ee8:	08008e58 	.word	0x08008e58
 8006eec:	08008e58 	.word	0x08008e58
 8006ef0:	08008e5c 	.word	0x08008e5c

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr
