
STM_Praktikum_D6T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fd4  0800a844  0800a844  0000b844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c818  0800c818  0000e0f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c818  0800c818  0000d818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c820  0800c820  0000e0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c820  0800c820  0000d820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c824  0800c824  0000d824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  0800c828  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  200000f8  0800c920  0000e0f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a98  0800c920  0000ea98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018694  00000000  00000000  0000e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ae  00000000  00000000  000267bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0002a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e86  00000000  00000000  0002bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250dd  00000000  00000000  0002cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d396  00000000  00000000  00051c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cde0c  00000000  00000000  0006efa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cdad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000530c  00000000  00000000  0013cdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001420fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a82c 	.word	0x0800a82c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000fc 	.word	0x200000fc
 800020c:	0800a82c 	.word	0x0800a82c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <d6t_reading_to_lcd>:
	ABS_MODE = 0,
	REF_MODE = 1,
};


static void d6t_reading_to_lcd(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	f5ad 5dc7 	sub.w	sp, sp, #6368	@ 0x18e0
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
	/// set configuration
	BSP_LCD_Init();
 80005aa:	f002 fa21 	bl	80029f0 <BSP_LCD_Init>
	BSP_JOY_Init(JOY_MODE_GPIO);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f002 f818 	bl	80025e4 <BSP_JOY_Init>
	BSP_LCD_Clear(0xffff);
 80005b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80005b8:	f002 faec 	bl	8002b94 <BSP_LCD_Clear>

	// create buffer for temperature values (raw, processed)
	uint8_t buffer[TEMP_VALUE_COUNT*2 + 3];
	int temp[TEMP_VALUE_COUNT+4];
	int mode = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	f507 52c7 	add.w	r2, r7, #6368	@ 0x18e0
 80005c2:	f102 020c 	add.w	r2, r2, #12
 80005c6:	6013      	str	r3, [r2, #0]
	char* meta_data_line[54];
	while (1){
		 if (BSP_JOY_GetState() == JOY_RIGHT) mode = REF_MODE;
 80005c8:	f002 f8c8 	bl	800275c <BSP_JOY_GetState>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d106      	bne.n	80005e0 <d6t_reading_to_lcd+0x40>
 80005d2:	2301      	movs	r3, #1
 80005d4:	f507 52c7 	add.w	r2, r7, #6368	@ 0x18e0
 80005d8:	f102 020c 	add.w	r2, r2, #12
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	e00a      	b.n	80005f6 <d6t_reading_to_lcd+0x56>
		 else if (BSP_JOY_GetState() == JOY_LEFT)mode = ABS_MODE;
 80005e0:	f002 f8bc 	bl	800275c <BSP_JOY_GetState>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d105      	bne.n	80005f6 <d6t_reading_to_lcd+0x56>
 80005ea:	2300      	movs	r3, #0
 80005ec:	f507 52c7 	add.w	r2, r7, #6368	@ 0x18e0
 80005f0:	f102 020c 	add.w	r2, r2, #12
 80005f4:	6013      	str	r3, [r2, #0]
		 read_sensor_data(buffer);
 80005f6:	f507 5387 	add.w	r3, r7, #4320	@ 0x10e0
 80005fa:	f103 0308 	add.w	r3, r3, #8
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fc74 	bl	8000eec <read_sensor_data>
	     sensor_data_to_temperatures(buffer, temp);
 8000604:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000608:	3b18      	subs	r3, #24
 800060a:	f507 5287 	add.w	r2, r7, #4320	@ 0x10e0
 800060e:	f102 0208 	add.w	r2, r2, #8
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f000 fcbb 	bl	8000f90 <sensor_data_to_temperatures>

	     if( mode == ABS_MODE){
 800061a:	f507 53c7 	add.w	r3, r7, #6368	@ 0x18e0
 800061e:	f103 030c 	add.w	r3, r3, #12
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d119      	bne.n	800065c <d6t_reading_to_lcd+0xbc>
				 sprintf(&meta_data_line,"Mode:ABS HIGH:%dC LOW:%dC REF:%dC",
 8000628:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 800062c:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 8000636:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f107 0010 	add.w	r0, r7, #16
 8000640:	3810      	subs	r0, #16
 8000642:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000646:	9100      	str	r1, [sp, #0]
 8000648:	491a      	ldr	r1, [pc, #104]	@ (80006b4 <d6t_reading_to_lcd+0x114>)
 800064a:	f009 fcfd 	bl	800a048 <siprintf>
						 temp[0],
						 temp[1],
						 (int)(ROOM_TEMP*10));
				 display_data_on_lcd(temp);
 800064e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000652:	3b18      	subs	r3, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fe13 	bl	8001280 <display_data_on_lcd>
 800065a:	e01c      	b.n	8000696 <d6t_reading_to_lcd+0xf6>
	     }else{
				 sprintf(&meta_data_line,"Mode:REF AVG:%iC HIGH:%iC LOW:%iC",
 800065c:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 8000660:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 800066a:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 8000674:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	f107 0010 	add.w	r0, r7, #16
 800067e:	3810      	subs	r0, #16
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	460b      	mov	r3, r1
 8000684:	490c      	ldr	r1, [pc, #48]	@ (80006b8 <d6t_reading_to_lcd+0x118>)
 8000686:	f009 fcdf 	bl	800a048 <siprintf>
						 temp[2],
						 temp[0],
						 temp[1]);
				 display_data_on_lcd_rel_mode(temp);
 800068a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800068e:	3b18      	subs	r3, #24
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fe57 	bl	8001344 <display_data_on_lcd_rel_mode>
	     }
	     BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000696:	2000      	movs	r0, #0
 8000698:	f002 fa50 	bl	8002b3c <BSP_LCD_SetTextColor>
	     BSP_LCD_ClearStringLine(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f002 faaf 	bl	8002c00 <BSP_LCD_ClearStringLine>
	     BSP_LCD_DisplayStringAtLine(0, (uint8_t*)(meta_data_line));
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	3b10      	subs	r3, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	2000      	movs	r0, #0
 80006ac:	f002 fb96 	bl	8002ddc <BSP_LCD_DisplayStringAtLine>
		 if (BSP_JOY_GetState() == JOY_RIGHT) mode = REF_MODE;
 80006b0:	e78a      	b.n	80005c8 <d6t_reading_to_lcd+0x28>
 80006b2:	bf00      	nop
 80006b4:	0800a844 	.word	0x0800a844
 80006b8:	0800a868 	.word	0x0800a868

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f002 fd1a 	bl	80030f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f814 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f8d0 	bl	800086c <MX_GPIO_Init>
  MX_I2C2_Init();
 80006cc:	f000 f886 	bl	80007dc <MX_I2C2_Init>
  HAL_I2C_Init(&hi2c2);
 80006d0:	4806      	ldr	r0, [pc, #24]	@ (80006ec <main+0x30>)
 80006d2:	f005 f8eb 	bl	80058ac <HAL_I2C_Init>
  MX_IWDG_Init();
 80006d6:	f000 f8af 	bl	8000838 <MX_IWDG_Init>

  /* USER CODE BEGIN 2 */
  BSP_JOY_Init(JOY_MODE_GPIO);
 80006da:	2000      	movs	r0, #0
 80006dc:	f001 ff82 	bl	80025e4 <BSP_JOY_Init>

  d6t_reading_to_lcd(&hi2c2);
 80006e0:	4802      	ldr	r0, [pc, #8]	@ (80006ec <main+0x30>)
 80006e2:	f7ff ff5d 	bl	80005a0 <d6t_reading_to_lcd>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006e6:	f009 fa4d 	bl	8009b84 <MX_USB_HOST_Process>
 80006ea:	e7fc      	b.n	80006e6 <main+0x2a>
 80006ec:	20000114 	.word	0x20000114

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	@ 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2234      	movs	r2, #52	@ 0x34
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f009 fcc2 	bl	800a088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <SystemClock_Config+0xe4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	4a2d      	ldr	r2, [pc, #180]	@ (80007d4 <SystemClock_Config+0xe4>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	@ 0x40
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <SystemClock_Config+0xe4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <SystemClock_Config+0xe8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a27      	ldr	r2, [pc, #156]	@ (80007d8 <SystemClock_Config+0xe8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <SystemClock_Config+0xe8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800074c:	230b      	movs	r3, #11
 800074e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000750:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	2301      	movs	r3, #1
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075a:	2310      	movs	r3, #16
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000770:	2348      	movs	r3, #72	@ 0x48
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000778:	2303      	movs	r3, #3
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fb51 	bl	8006e2c <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000790:	f000 fa3a 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 f8c7 	bl	8006944 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007bc:	f000 fa24 	bl	8000c08 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2000      	movs	r0, #0
 80007c6:	f006 f9a3 	bl	8006b10 <HAL_RCC_MCOConfig>
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_I2C2_Init+0x50>)
 80007e2:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_I2C2_Init+0x54>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_I2C2_Init+0x50>)
 80007e8:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <MX_I2C2_Init+0x58>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_I2C2_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_I2C2_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_I2C2_Init+0x50>)
 80007fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <MX_I2C2_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_I2C2_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <MX_I2C2_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_I2C2_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_I2C2_Init+0x50>)
 800081a:	f005 f847 	bl	80058ac <HAL_I2C_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000824:	f000 f9f0 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000114 	.word	0x20000114
 8000830:	40005800 	.word	0x40005800
 8000834:	000186a0 	.word	0x000186a0

08000838 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_IWDG_Init+0x2c>)
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <MX_IWDG_Init+0x30>)
 8000840:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_IWDG_Init+0x2c>)
 8000844:	2204      	movs	r2, #4
 8000846:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_IWDG_Init+0x2c>)
 800084a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800084e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_IWDG_Init+0x2c>)
 8000852:	f006 f825 	bl	80068a0 <HAL_IWDG_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800085c:	f000 f9d4 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000168 	.word	0x20000168
 8000868:	40003000 	.word	0x40003000

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	@ 0x38
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
 8000886:	4bb2      	ldr	r3, [pc, #712]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4ab1      	ldr	r2, [pc, #708]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4baf      	ldr	r3, [pc, #700]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	623b      	str	r3, [r7, #32]
 800089c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	4bab      	ldr	r3, [pc, #684]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4aaa      	ldr	r2, [pc, #680]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4ba8      	ldr	r3, [pc, #672]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	4ba4      	ldr	r3, [pc, #656]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4aa3      	ldr	r2, [pc, #652]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4ba1      	ldr	r3, [pc, #644]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	4b9d      	ldr	r3, [pc, #628]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a9c      	ldr	r2, [pc, #624]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b9a      	ldr	r3, [pc, #616]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b96      	ldr	r3, [pc, #600]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a95      	ldr	r2, [pc, #596]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b93      	ldr	r3, [pc, #588]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b8f      	ldr	r3, [pc, #572]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a8e      	ldr	r2, [pc, #568]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b8c      	ldr	r3, [pc, #560]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b88      	ldr	r3, [pc, #544]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a87      	ldr	r2, [pc, #540]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b85      	ldr	r3, [pc, #532]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b81      	ldr	r3, [pc, #516]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a80      	ldr	r2, [pc, #512]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b7e      	ldr	r3, [pc, #504]	@ (8000b50 <MX_GPIO_Init+0x2e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	487b      	ldr	r0, [pc, #492]	@ (8000b54 <MX_GPIO_Init+0x2e8>)
 8000968:	f002 ff1a 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000972:	4879      	ldr	r0, [pc, #484]	@ (8000b58 <MX_GPIO_Init+0x2ec>)
 8000974:	f002 ff14 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097e:	4877      	ldr	r0, [pc, #476]	@ (8000b5c <MX_GPIO_Init+0x2f0>)
 8000980:	f002 ff0e 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800098a:	4875      	ldr	r0, [pc, #468]	@ (8000b60 <MX_GPIO_Init+0x2f4>)
 800098c:	f002 ff08 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8000990:	230f      	movs	r3, #15
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000994:	2311      	movs	r3, #17
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	486b      	ldr	r0, [pc, #428]	@ (8000b54 <MX_GPIO_Init+0x2e8>)
 80009a8:	f002 fd4e 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 80009ac:	2310      	movs	r3, #16
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80009bc:	2308      	movs	r3, #8
 80009be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4863      	ldr	r0, [pc, #396]	@ (8000b54 <MX_GPIO_Init+0x2e8>)
 80009c8:	f002 fd3e 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 80009cc:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	485c      	ldr	r0, [pc, #368]	@ (8000b58 <MX_GPIO_Init+0x2ec>)
 80009e6:	f002 fd2f 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO3_Pin QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 80009ea:	23c0      	movs	r3, #192	@ 0xc0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80009fa:	2309      	movs	r3, #9
 80009fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	4854      	ldr	r0, [pc, #336]	@ (8000b58 <MX_GPIO_Init+0x2ec>)
 8000a06:	f002 fd1f 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8000a0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	484c      	ldr	r0, [pc, #304]	@ (8000b58 <MX_GPIO_Init+0x2ec>)
 8000a28:	f002 fd0e 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4847      	ldr	r0, [pc, #284]	@ (8000b64 <MX_GPIO_Init+0x2f8>)
 8000a48:	f002 fcfe 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4841      	ldr	r0, [pc, #260]	@ (8000b68 <MX_GPIO_Init+0x2fc>)
 8000a62:	f002 fcf1 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 8000a66:	2302      	movs	r3, #2
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000a76:	2308      	movs	r3, #8
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	483a      	ldr	r0, [pc, #232]	@ (8000b6c <MX_GPIO_Init+0x300>)
 8000a82:	f002 fce1 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000a86:	2304      	movs	r3, #4
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000a96:	2309      	movs	r3, #9
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4832      	ldr	r0, [pc, #200]	@ (8000b6c <MX_GPIO_Init+0x300>)
 8000aa2:	f002 fcd1 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 8000aa6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4827      	ldr	r0, [pc, #156]	@ (8000b58 <MX_GPIO_Init+0x2ec>)
 8000abc:	f002 fcc4 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8000ac0:	2393      	movs	r3, #147	@ 0x93
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4823      	ldr	r0, [pc, #140]	@ (8000b60 <MX_GPIO_Init+0x2f4>)
 8000ad4:	f002 fcb8 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 8000ad8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aea:	2305      	movs	r3, #5
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	481d      	ldr	r0, [pc, #116]	@ (8000b6c <MX_GPIO_Init+0x300>)
 8000af6:	f002 fca7 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000afa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4812      	ldr	r0, [pc, #72]	@ (8000b5c <MX_GPIO_Init+0x2f0>)
 8000b14:	f002 fc98 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 8000b18:	2324      	movs	r3, #36	@ 0x24
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <MX_GPIO_Init+0x2f4>)
 8000b2e:	f002 fc8b 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000b32:	2340      	movs	r3, #64	@ 0x40
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b42:	230a      	movs	r3, #10
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	e010      	b.n	8000b70 <MX_GPIO_Init+0x304>
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40021400 	.word	0x40021400
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	40021800 	.word	0x40021800
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	4821      	ldr	r0, [pc, #132]	@ (8000bf8 <MX_GPIO_Init+0x38c>)
 8000b72:	f002 fc69 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 8000b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b7c:	2311      	movs	r3, #17
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <MX_GPIO_Init+0x38c>)
 8000b90:	f002 fc5a 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 8000b94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4812      	ldr	r0, [pc, #72]	@ (8000bfc <MX_GPIO_Init+0x390>)
 8000bb2:	f002 fc49 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8000bb6:	2308      	movs	r3, #8
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <MX_GPIO_Init+0x394>)
 8000bca:	f002 fc3d 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000bce:	23c0      	movs	r3, #192	@ 0xc0
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd2:	2312      	movs	r3, #18
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <MX_GPIO_Init+0x398>)
 8000bea:	f002 fc2d 	bl	8003448 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3738      	adds	r7, #56	@ 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021800 	.word	0x40021800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020c00 	.word	0x40020c00
 8000c04:	40020400 	.word	0x40020400

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <Error_Handler+0x8>

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a22      	ldr	r2, [pc, #136]	@ (8000d0c <HAL_I2C_MspInit+0xa8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d13d      	bne.n	8000d02 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <HAL_I2C_MspInit+0xac>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a20      	ldr	r2, [pc, #128]	@ (8000d10 <HAL_I2C_MspInit+0xac>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <HAL_I2C_MspInit+0xac>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <HAL_I2C_MspInit+0xb0>)
 8000cc0:	f002 fbc2 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cca:	2312      	movs	r3, #18
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000cd6:	2309      	movs	r3, #9
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <HAL_I2C_MspInit+0xb0>)
 8000ce2:	f002 fbb1 	bl	8003448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_I2C_MspInit+0xac>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_I2C_MspInit+0xac>)
 8000cf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_I2C_MspInit+0xac>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	@ 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40005800 	.word	0x40005800
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400

08000d18 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000d2c:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <HAL_FSMC_MspInit+0xa8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d140      	bne.n	8000db6 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <HAL_FSMC_MspInit+0xa8>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <HAL_FSMC_MspInit+0xac>)
 8000d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d42:	4a20      	ldr	r2, [pc, #128]	@ (8000dc4 <HAL_FSMC_MspInit+0xac>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <HAL_FSMC_MspInit+0xac>)
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = A0_Pin;
 8000d56:	2301      	movs	r3, #1
 8000d58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d66:	230c      	movs	r3, #12
 8000d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4816      	ldr	r0, [pc, #88]	@ (8000dc8 <HAL_FSMC_MspInit+0xb0>)
 8000d70:	f002 fb6a 	bl	8003448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000d74:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000d78:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d86:	230c      	movs	r3, #12
 8000d88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480f      	ldr	r0, [pc, #60]	@ (8000dcc <HAL_FSMC_MspInit+0xb4>)
 8000d90:	f002 fb5a 	bl	8003448 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000d94:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000d98:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000da6:	230c      	movs	r3, #12
 8000da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <HAL_FSMC_MspInit+0xb8>)
 8000db0:	f002 fb4a 	bl	8003448 <HAL_GPIO_Init>
 8000db4:	e000      	b.n	8000db8 <HAL_FSMC_MspInit+0xa0>
    return;
 8000db6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000174 	.word	0x20000174
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40021400 	.word	0x40021400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000ddc:	f7ff ff9c 	bl	8000d18 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f002 f9ad 	bl	800319c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <OTG_FS_IRQHandler+0x10>)
 8000e4e:	f002 ff17 	bl	8003c80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000570 	.word	0x20000570

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f009 f914 	bl	800a0b8 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20040000 	.word	0x20040000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000178 	.word	0x20000178
 8000ec4:	20000a98 	.word	0x20000a98

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <read_sensor_data>:

/**
 * reads the raw temperature readings from the sensor into the readbuffer
 * Returns 0 if no sensor could be detected (else 1)
 */
int read_sensor_data(uint8_t* readbuffer){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	6078      	str	r0, [r7, #4]
	 /// Each temperature reading consists of 2 8-Bit value (LOW-/HIGH-bit)
	 /// Additionally one PTAT reading and one Checksuum value is transmitted
	 int size = TEMP_VALUE_COUNT * 2 + 3;
 8000ef4:	f640 0303 	movw	r3, #2051	@ 0x803
 8000ef8:	613b      	str	r3, [r7, #16]
	 /// Command for telling the sensor we want to read data
	 uint8_t cmd = 0x4c;
 8000efa:	234c      	movs	r3, #76	@ 0x4c
 8000efc:	73bb      	strb	r3, [r7, #14]

	 /// applying I2C settings to the external I2C port
	  HAL_StatusTypeDef status = HAL_I2C_Init(&hi2c2);
 8000efe:	4822      	ldr	r0, [pc, #136]	@ (8000f88 <read_sensor_data+0x9c>)
 8000f00:	f004 fcd4 	bl	80058ac <HAL_I2C_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
	  HAL_IWDG_Refresh(&hiwdg);
 8000f08:	4820      	ldr	r0, [pc, #128]	@ (8000f8c <read_sensor_data+0xa0>)
 8000f0a:	f005 fd0b 	bl	8006924 <HAL_IWDG_Refresh>


	  int fails = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
	  do {
		  /// send command for preparing transmission
		  status = HAL_I2C_Master_Transmit(&hi2c2, 0x14, &cmd, 1, 100);
 8000f12:	f107 020e 	add.w	r2, r7, #14
 8000f16:	2364      	movs	r3, #100	@ 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	2114      	movs	r1, #20
 8000f1e:	481a      	ldr	r0, [pc, #104]	@ (8000f88 <read_sensor_data+0x9c>)
 8000f20:	f004 fe08 	bl	8005b34 <HAL_I2C_Master_Transmit>
 8000f24:	4603      	mov	r3, r0
 8000f26:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(10);
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f002 f957 	bl	80031dc <HAL_Delay>

		  /// if the connection failed more than 10 times in a row, return connection lost
		  if (status != HAL_OK && fails++ > CONNECTION_TRYS) return NO_CONNECTION;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <read_sensor_data+0x56>
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	617a      	str	r2, [r7, #20]
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	dd01      	ble.n	8000f42 <read_sensor_data+0x56>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e01e      	b.n	8000f80 <read_sensor_data+0x94>

		  /// receive the data from Sensor at port 0x14
		  status = HAL_I2C_Master_Receive(&hi2c2, 0x14, readbuffer, size, HAL_MAX_DELAY);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4a:	9200      	str	r2, [sp, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	2114      	movs	r1, #20
 8000f50:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <read_sensor_data+0x9c>)
 8000f52:	f004 feed 	bl	8005d30 <HAL_I2C_Master_Receive>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]

		  /// if everything was successful, end the function else wait and try again
		  if (status == HAL_OK && !(readbuffer[5] == 0xff && readbuffer[6] == 0xff)) break;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <read_sensor_data+0x88>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3305      	adds	r3, #5
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2bff      	cmp	r3, #255	@ 0xff
 8000f68:	d109      	bne.n	8000f7e <read_sensor_data+0x92>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3306      	adds	r3, #6
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2bff      	cmp	r3, #255	@ 0xff
 8000f72:	d104      	bne.n	8000f7e <read_sensor_data+0x92>
		  HAL_Delay(550);
 8000f74:	f240 2026 	movw	r0, #550	@ 0x226
 8000f78:	f002 f930 	bl	80031dc <HAL_Delay>
		  status = HAL_I2C_Master_Transmit(&hi2c2, 0x14, &cmd, 1, 100);
 8000f7c:	e7c9      	b.n	8000f12 <read_sensor_data+0x26>
	  } while(1);
	  return SUCCESS;
 8000f7e:	2301      	movs	r3, #1
  };
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000114 	.word	0x20000114
 8000f8c:	20000168 	.word	0x20000168

08000f90 <sensor_data_to_temperatures>:

/// converts the raw sensor readings into sensor data in 10*degrees celsius
int sensor_data_to_temperatures(uint8_t* sensor_data, int* temperatures){
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	/// each reading consists of a high reading and a low reading,
	/// with high reading * 256 (max value 4 Bit) + low bits = temperature * 10
	   int sum = 0, highest=-10, lowest = 80;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	f06f 0309 	mvn.w	r3, #9
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	2350      	movs	r3, #80	@ 0x50
 8000fa6:	617b      	str	r3, [r7, #20]
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	e029      	b.n	8001002 <sensor_data_to_temperatures+0x72>
		  int temp = sensor_data[temp_index+1] * 256 + sensor_data[temp_index];
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	440a      	add	r2, r1
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
	 	  temperatures[temp_index/2+3] = temp;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	0fda      	lsrs	r2, r3, #31
 8000fca:	4413      	add	r3, r2
 8000fcc:	105b      	asrs	r3, r3, #1
 8000fce:	3303      	adds	r3, #3
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	601a      	str	r2, [r3, #0]
	 	  sum += temp;
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	61fb      	str	r3, [r7, #28]
	 	  if(temp > highest)
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	dd02      	ble.n	8000ff0 <sensor_data_to_temperatures+0x60>
	 		  highest = temp;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	e005      	b.n	8000ffc <sensor_data_to_temperatures+0x6c>
	 	  else if (temp < lowest)
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	da01      	bge.n	8000ffc <sensor_data_to_temperatures+0x6c>
	 		  lowest = temp;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	617b      	str	r3, [r7, #20]
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	3302      	adds	r3, #2
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	f640 0201 	movw	r2, #2049	@ 0x801
 8001008:	4293      	cmp	r3, r2
 800100a:	ddd0      	ble.n	8000fae <sensor_data_to_temperatures+0x1e>
	   }
	   temperatures[2] = (int) (sum / TEMP_VALUE_COUNT);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f103 0208 	add.w	r2, r3, #8
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	2b00      	cmp	r3, #0
 8001016:	da01      	bge.n	800101c <sensor_data_to_temperatures+0x8c>
 8001018:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800101c:	129b      	asrs	r3, r3, #10
 800101e:	6013      	str	r3, [r2, #0]
	   temperatures[0] = highest;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	601a      	str	r2, [r3, #0]
	   temperatures[1] = lowest;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	3304      	adds	r3, #4
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	601a      	str	r2, [r3, #0]
	   return SUCCESS;
 800102e:	2301      	movs	r3, #1
};
 8001030:	4618      	mov	r0, r3
 8001032:	3724      	adds	r7, #36	@ 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <pick_gradient_color>:
#include "render.h"


// perform linear uint16_terpolation between two colors
// source stackoverflow (with own adjustments, so no GPL License  needed)
uint16_t pick_gradient_color(uint16_t color1, uint16_t color2, float temperature_gradient) {
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	ed87 0a00 	vstr	s0, [r7]
 800104a:	80fb      	strh	r3, [r7, #6]
 800104c:	4613      	mov	r3, r2
 800104e:	80bb      	strh	r3, [r7, #4]

	/// convert rgb uint16_to rgb565:
	/// as in rgb the always 2 digit are one color #rrggbb,
	// but here the second and third bit overlapp from r-g and g-b
	uint16_t r1 = (color1 >> 11) & 0x1F;
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	0adb      	lsrs	r3, r3, #11
 8001054:	83fb      	strh	r3, [r7, #30]
    uint16_t g1 = (color1 >> 5) & 0x3F;
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	095b      	lsrs	r3, r3, #5
 800105a:	b29b      	uxth	r3, r3
 800105c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001060:	83bb      	strh	r3, [r7, #28]
    uint16_t b1 = color1 & 0x1F;
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	837b      	strh	r3, [r7, #26]

    uint16_t r2 = (color2 >> 11) & 0x1F;
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	0adb      	lsrs	r3, r3, #11
 800106e:	833b      	strh	r3, [r7, #24]
    uint16_t g2 = (color2 >> 5) & 0x3F;
 8001070:	88bb      	ldrh	r3, [r7, #4]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	b29b      	uxth	r3, r3
 8001076:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800107a:	82fb      	strh	r3, [r7, #22]
    uint16_t b2 = color2 & 0x1F;
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	82bb      	strh	r3, [r7, #20]

    /// apply ratios between the two colors by using the temperature gradient
    uint16_t r = (uint16_t)(r1 + temperature_gradient * (r2 - r1));
 8001084:	8bfb      	ldrh	r3, [r7, #30]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108e:	8b3a      	ldrh	r2, [r7, #24]
 8001090:	8bfb      	ldrh	r3, [r7, #30]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800109c:	edd7 7a00 	vldr	s15, [r7]
 80010a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ac:	ee17 3a90 	vmov	r3, s15
 80010b0:	827b      	strh	r3, [r7, #18]
    uint16_t g = (uint16_t)(g1 + temperature_gradient * (g2 - g1));
 80010b2:	8bbb      	ldrh	r3, [r7, #28]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010bc:	8afa      	ldrh	r2, [r7, #22]
 80010be:	8bbb      	ldrh	r3, [r7, #28]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010ca:	edd7 7a00 	vldr	s15, [r7]
 80010ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010da:	ee17 3a90 	vmov	r3, s15
 80010de:	823b      	strh	r3, [r7, #16]
    uint16_t b = (uint16_t)(b1 + temperature_gradient * (b2 - b1));
 80010e0:	8b7b      	ldrh	r3, [r7, #26]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ea:	8aba      	ldrh	r2, [r7, #20]
 80010ec:	8b7b      	ldrh	r3, [r7, #26]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f8:	edd7 7a00 	vldr	s15, [r7]
 80010fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001108:	ee17 3a90 	vmov	r3, s15
 800110c:	81fb      	strh	r3, [r7, #14]

    return ((r & 0x1F) << 11) | ((g & 0x3F) << 5) | (b & 0x1F);
 800110e:	8a7b      	ldrh	r3, [r7, #18]
 8001110:	02db      	lsls	r3, r3, #11
 8001112:	b21a      	sxth	r2, r3
 8001114:	8a3b      	ldrh	r3, [r7, #16]
 8001116:	015b      	lsls	r3, r3, #5
 8001118:	b21b      	sxth	r3, r3
 800111a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	b29b      	uxth	r3, r3
}
 8001134:	4618      	mov	r0, r3
 8001136:	3724      	adds	r7, #36	@ 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <convert_temp_to_color_spec>:

/// convert the temperature values of the sensor [-10,70] to a color in the spectrum
///[-10,22]-> [blue, white],
///[ 22,36]-> [white, orange], (high change in color as its the mainly used area)
///[ 36,70]-> [orange, red]
uint16_t convert_temp_to_color_spec(float temp, float HIGH, float LOW, float ROOM, float HIGHLIGHT) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	ed87 0a05 	vstr	s0, [r7, #20]
 800114a:	edc7 0a04 	vstr	s1, [r7, #16]
 800114e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001152:	edc7 1a02 	vstr	s3, [r7, #8]
 8001156:	ed87 2a01 	vstr	s4, [r7, #4]
	// the sensor can operate with temperatures in [-10, 70]

    if (temp <= LOW)
 800115a:	ed97 7a05 	vldr	s14, [r7, #20]
 800115e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d801      	bhi.n	8001170 <convert_temp_to_color_spec+0x30>
        return DARK_BLUE;
 800116c:	231f      	movs	r3, #31
 800116e:	e069      	b.n	8001244 <convert_temp_to_color_spec+0x104>

    if (temp >= HIGH)
 8001170:	ed97 7a05 	vldr	s14, [r7, #20]
 8001174:	edd7 7a04 	vldr	s15, [r7, #16]
 8001178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	db02      	blt.n	8001188 <convert_temp_to_color_spec+0x48>
    	return DARK_RED;
 8001182:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001186:	e05d      	b.n	8001244 <convert_temp_to_color_spec+0x104>

    if (temp < ROOM) {
 8001188:	ed97 7a05 	vldr	s14, [r7, #20]
 800118c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001198:	d518      	bpl.n	80011cc <convert_temp_to_color_spec+0x8c>
    	// map temperature from ]-10, 22[ to [0, 1] for the blue to white gradient
    	float temp_gradient = (temp - LOW) / (ROOM-LOW);
 800119a:	ed97 7a05 	vldr	s14, [r7, #20]
 800119e:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b6:	edc7 7a07 	vstr	s15, [r7, #28]
    	return pick_gradient_color(DARK_BLUE, WHITE, temp_gradient);
 80011ba:	ed97 0a07 	vldr	s0, [r7, #28]
 80011be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80011c2:	201f      	movs	r0, #31
 80011c4:	f7ff ff3a 	bl	800103c <pick_gradient_color>
 80011c8:	4603      	mov	r3, r0
 80011ca:	e03b      	b.n	8001244 <convert_temp_to_color_spec+0x104>
    }

    if (temp < HIGHLIGHT) {
 80011cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80011d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d519      	bpl.n	8001212 <convert_temp_to_color_spec+0xd2>
        	// map temperature from [-22, 36[ to [0, 1] for the blue to white gradient
        	float temp_gradient = (temp - ROOM) / (HIGHLIGHT-ROOM);
 80011de:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011fa:	edc7 7a08 	vstr	s15, [r7, #32]
        	return pick_gradient_color(WHITE, ORANGE, temp_gradient);
 80011fe:	ed97 0a08 	vldr	s0, [r7, #32]
 8001202:	f64f 4147 	movw	r1, #64583	@ 0xfc47
 8001206:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800120a:	f7ff ff17 	bl	800103c <pick_gradient_color>
 800120e:	4603      	mov	r3, r0
 8001210:	e018      	b.n	8001244 <convert_temp_to_color_spec+0x104>
        }


    // map temperature from [36, 70] to [0, 1] for the orange to red gradient
    float temp_gradient = (temp - HIGHLIGHT) / (HIGH-HIGHLIGHT);
 8001212:	ed97 7a05 	vldr	s14, [r7, #20]
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800121e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001222:	edd7 7a01 	vldr	s15, [r7, #4]
 8001226:	ee37 7a67 	vsub.f32	s14, s14, s15
 800122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return pick_gradient_color(ORANGE, DARK_RED, temp_gradient);
 8001232:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001236:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800123a:	f64f 4047 	movw	r0, #64583	@ 0xfc47
 800123e:	f7ff fefd 	bl	800103c <pick_gradient_color>
 8001242:	4603      	mov	r3, r0

}
 8001244:	4618      	mov	r0, r3
 8001246:	3728      	adds	r7, #40	@ 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <convert_temp_to_color>:

uint16_t convert_temp_to_color(float temp){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	ed87 0a01 	vstr	s0, [r7, #4]
	return convert_temp_to_color_spec(temp, 70.f, -10.f, ROOM_TEMP, BODY_TEMP);
 8001256:	ed9f 2a08 	vldr	s4, [pc, #32]	@ 8001278 <convert_temp_to_color+0x2c>
 800125a:	eef3 1a0a 	vmov.f32	s3, #58	@ 0x41d00000  26.0
 800125e:	eeba 1a04 	vmov.f32	s2, #164	@ 0xc1200000 -10.0
 8001262:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800127c <convert_temp_to_color+0x30>
 8001266:	ed97 0a01 	vldr	s0, [r7, #4]
 800126a:	f7ff ff69 	bl	8001140 <convert_temp_to_color_spec>
 800126e:	4603      	mov	r3, r0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	42100000 	.word	0x42100000
 800127c:	428c0000 	.word	0x428c0000

08001280 <display_data_on_lcd>:

/// display the temperature values as an image on the LCD screen
/// make sure to initiate BSP_lcd before calling
void display_data_on_lcd(int* temperatures){
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	  /// get params of the screen
	  int width = BSP_LCD_GetXSize()+10; // +10 for rounding errors
 8001288:	f001 fc40 	bl	8002b0c <BSP_LCD_GetXSize>
 800128c:	4603      	mov	r3, r0
 800128e:	330a      	adds	r3, #10
 8001290:	617b      	str	r3, [r7, #20]
	  int height = BSP_LCD_GetYSize() +10;
 8001292:	f001 fc47 	bl	8002b24 <BSP_LCD_GetYSize>
 8001296:	4603      	mov	r3, r0
 8001298:	330a      	adds	r3, #10
 800129a:	613b      	str	r3, [r7, #16]

	  /// calculate Height / with of cells

	  int cell_width = width / H_CELL_COUNT;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da00      	bge.n	80012a4 <display_data_on_lcd+0x24>
 80012a2:	331f      	adds	r3, #31
 80012a4:	115b      	asrs	r3, r3, #5
 80012a6:	60fb      	str	r3, [r7, #12]
	  int cell_hight = height/ V_CELL_COUNT;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da00      	bge.n	80012b0 <display_data_on_lcd+0x30>
 80012ae:	331f      	adds	r3, #31
 80012b0:	115b      	asrs	r3, r3, #5
 80012b2:	60bb      	str	r3, [r7, #8]

	  /// iterate over rows/columns
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e03c      	b.n	8001334 <display_data_on_lcd+0xb4>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	e033      	b.n	8001328 <display_data_on_lcd+0xa8>
			  BSP_LCD_SetTextColor(
					  convert_temp_to_color(
							  /// +4 because of the PTAT temperature value at temperatures[3], and highest, lowest, avg temp at 0, 1, 2
							  (float)temperatures[row * 32 + col+4] / 10.f
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	015a      	lsls	r2, r3, #5
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4413      	add	r3, r2
 80012c8:	3304      	adds	r3, #4
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			  BSP_LCD_SetTextColor(
 80012da:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012e2:	eeb0 0a47 	vmov.f32	s0, s14
 80012e6:	f7ff ffb1 	bl	800124c <convert_temp_to_color>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fc25 	bl	8002b3c <BSP_LCD_SetTextColor>
										   )
							  );
			  BSP_LCD_FillRect(col * cell_width+10, row * cell_hight+10, cell_width, cell_hight);
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	fb12 f303 	smulbb	r3, r2, r3
 80012fe:	b29b      	uxth	r3, r3
 8001300:	330a      	adds	r3, #10
 8001302:	b298      	uxth	r0, r3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	b29a      	uxth	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	b29b      	uxth	r3, r3
 800130c:	fb12 f303 	smulbb	r3, r2, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	330a      	adds	r3, #10
 8001314:	b299      	uxth	r1, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	b29a      	uxth	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	b29b      	uxth	r3, r3
 800131e:	f001 fdcb 	bl	8002eb8 <BSP_LCD_FillRect>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	3301      	adds	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b1f      	cmp	r3, #31
 800132c:	ddc8      	ble.n	80012c0 <display_data_on_lcd+0x40>
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b1f      	cmp	r3, #31
 8001338:	ddbf      	ble.n	80012ba <display_data_on_lcd+0x3a>
			  // +20 = centering as the screen doesn't start by 0 and its better with a border on every side
		  }
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <display_data_on_lcd_rel_mode>:

void display_data_on_lcd_rel_mode(int* temperatures){
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	/// get params of the screen
		  int width = BSP_LCD_GetXSize()+10; // +10 for rounding errors
 800134c:	f001 fbde 	bl	8002b0c <BSP_LCD_GetXSize>
 8001350:	4603      	mov	r3, r0
 8001352:	330a      	adds	r3, #10
 8001354:	617b      	str	r3, [r7, #20]
		  int height = BSP_LCD_GetYSize() +10;
 8001356:	f001 fbe5 	bl	8002b24 <BSP_LCD_GetYSize>
 800135a:	4603      	mov	r3, r0
 800135c:	330a      	adds	r3, #10
 800135e:	613b      	str	r3, [r7, #16]

		  /// calculate Height / with of cells

		  int cell_width = width / H_CELL_COUNT;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	da00      	bge.n	8001368 <display_data_on_lcd_rel_mode+0x24>
 8001366:	331f      	adds	r3, #31
 8001368:	115b      	asrs	r3, r3, #5
 800136a:	60fb      	str	r3, [r7, #12]
		  int cell_hight = height/ V_CELL_COUNT;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	da00      	bge.n	8001374 <display_data_on_lcd_rel_mode+0x30>
 8001372:	331f      	adds	r3, #31
 8001374:	115b      	asrs	r3, r3, #5
 8001376:	60bb      	str	r3, [r7, #8]

		  /// iterate over rows/columns
		  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	e07b      	b.n	8001476 <display_data_on_lcd_rel_mode+0x132>
			  for (int col = 0; col < H_CELL_COUNT; col++){
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	e072      	b.n	800146a <display_data_on_lcd_rel_mode+0x126>
				  BSP_LCD_SetTextColor(
						  convert_temp_to_color_spec(
								  /// +4 because of the PTAT temperature value at temperatures[3], and highest, lowest, avg temp at 0, 1, 2
								  (float)temperatures[row * 32 + col+4] / 10.f,
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	015a      	lsls	r2, r3, #5
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	3304      	adds	r3, #4
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				  BSP_LCD_SetTextColor(
 800139e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
								  (float) temperatures[0] / 10.f+5,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80013b6:	eec7 7a06 	vdiv.f32	s15, s14, s12
				  BSP_LCD_SetTextColor(
 80013ba:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80013be:	ee37 6a87 	vadd.f32	s12, s15, s14
								  (float) temperatures[1] / 10.f-5,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d0:	eef2 5a04 	vmov.f32	s11, #36	@ 0x41200000  10.0
 80013d4:	eec7 7a25 	vdiv.f32	s15, s14, s11
				  BSP_LCD_SetTextColor(
 80013d8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80013dc:	ee77 5ac7 	vsub.f32	s11, s15, s14
								  (float) temperatures[2] / 10.f,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3308      	adds	r3, #8
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				  BSP_LCD_SetTextColor(
 80013ee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013f2:	ee87 5a87 	vdiv.f32	s10, s15, s14
								  (float) temperatures[2] / 10.f+2.5
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3308      	adds	r3, #8
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001404:	eef2 4a04 	vmov.f32	s9, #36	@ 0x41200000  10.0
 8001408:	eec7 7a24 	vdiv.f32	s15, s14, s9
				  BSP_LCD_SetTextColor(
 800140c:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001410:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001414:	eeb0 2a67 	vmov.f32	s4, s15
 8001418:	eef0 1a45 	vmov.f32	s3, s10
 800141c:	eeb0 1a65 	vmov.f32	s2, s11
 8001420:	eef0 0a46 	vmov.f32	s1, s12
 8001424:	eeb0 0a66 	vmov.f32	s0, s13
 8001428:	f7ff fe8a 	bl	8001140 <convert_temp_to_color_spec>
 800142c:	4603      	mov	r3, r0
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fb84 	bl	8002b3c <BSP_LCD_SetTextColor>
											   )
								  );
				  BSP_LCD_FillRect(col * cell_width+10, row * cell_hight+10, cell_width, cell_hight);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	b29a      	uxth	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	b29b      	uxth	r3, r3
 800143c:	fb12 f303 	smulbb	r3, r2, r3
 8001440:	b29b      	uxth	r3, r3
 8001442:	330a      	adds	r3, #10
 8001444:	b298      	uxth	r0, r3
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	b29a      	uxth	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	b29b      	uxth	r3, r3
 800144e:	fb12 f303 	smulbb	r3, r2, r3
 8001452:	b29b      	uxth	r3, r3
 8001454:	330a      	adds	r3, #10
 8001456:	b299      	uxth	r1, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	b29a      	uxth	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	b29b      	uxth	r3, r3
 8001460:	f001 fd2a 	bl	8002eb8 <BSP_LCD_FillRect>
			  for (int col = 0; col < H_CELL_COUNT; col++){
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	3301      	adds	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b1f      	cmp	r3, #31
 800146e:	dd89      	ble.n	8001384 <display_data_on_lcd_rel_mode+0x40>
		  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	3301      	adds	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	2b1f      	cmp	r3, #31
 800147a:	dd80      	ble.n	800137e <display_data_on_lcd_rel_mode+0x3a>
				  // +20 = centering as the screen doesn't start by 0 and its better with a border on every side
			  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800148c:	f7ff fd1c 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	@ (80014c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	@ (80014d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f008 fe05 	bl	800a0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ba:	f7ff f8ff 	bl	80006bc <main>
  bx  lr    
 80014be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014c0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80014cc:	0800c828 	.word	0x0800c828
  ldr r2, =_sbss
 80014d0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80014d4:	20000a98 	.word	0x20000a98

080014d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC_IRQHandler>

080014da <ls016b8uy_Init>:
  * @brief  Initialize the LS016B8UY LCD Component.
  * @param  None
  * @retval None
  */
void ls016b8uy_Init(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
  uint8_t   parameter[4];

  /* Initialize LS016B8UY low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80014e0:	f001 fa54 	bl	800298c <LCD_IO_Init>
  
  parameter[0] = 0x00;     /* VSYNC output */
 80014e4:	2300      	movs	r3, #0
 80014e6:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_VSYNC_OUTPUT, parameter, 1);
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2201      	movs	r2, #1
 80014ec:	4619      	mov	r1, r3
 80014ee:	2035      	movs	r0, #53	@ 0x35
 80014f0:	f000 f9a6 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x06;     /* 18 bits color mode */
 80014f4:	2306      	movs	r3, #6
 80014f6:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_COLOR_MODE, parameter, 1);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2201      	movs	r2, #1
 80014fc:	4619      	mov	r1, r3
 80014fe:	203a      	movs	r0, #58	@ 0x3a
 8001500:	f000 f99e 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x01;     /* Panel setting command <No.1 UN-Lock> */
 8001504:	2301      	movs	r3, #1
 8001506:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0xFE;
 8001508:	23fe      	movs	r3, #254	@ 0xfe
 800150a:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_1, parameter, 2);
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2202      	movs	r2, #2
 8001510:	4619      	mov	r1, r3
 8001512:	20b0      	movs	r0, #176	@ 0xb0
 8001514:	f000 f994 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0xDE;     /* Panel setting command <No.2 UN-Lock> */
 8001518:	23de      	movs	r3, #222	@ 0xde
 800151a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x21;
 800151c:	2321      	movs	r3, #33	@ 0x21
 800151e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_2, parameter, 2);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2202      	movs	r2, #2
 8001524:	4619      	mov	r1, r3
 8001526:	20b1      	movs	r0, #177	@ 0xb1
 8001528:	f000 f98a 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* V-Porch setting */
 800152c:	2305      	movs	r3, #5
 800152e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 8001530:	2333      	movs	r3, #51	@ 0x33
 8001532:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_V_PORCH, parameter, 2);
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2202      	movs	r2, #2
 8001538:	4619      	mov	r1, r3
 800153a:	20b7      	movs	r0, #183	@ 0xb7
 800153c:	f000 f980 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* Idle mode V-Porch setting */
 8001540:	2305      	movs	r3, #5
 8001542:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 8001544:	2333      	movs	r3, #51	@ 0x33
 8001546:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_IDLE_V_PORCH, parameter, 2);
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2202      	movs	r2, #2
 800154c:	4619      	mov	r1, r3
 800154e:	20b8      	movs	r0, #184	@ 0xb8
 8001550:	f000 f976 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x04;     /* panel timing setting */
 8001554:	2304      	movs	r3, #4
 8001556:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x03;
 8001558:	2303      	movs	r3, #3
 800155a:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_1, parameter, 2);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2202      	movs	r2, #2
 8001560:	4619      	mov	r1, r3
 8001562:	20c8      	movs	r0, #200	@ 0xc8
 8001564:	f000 f96c 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x5E;     /* panel timing setting */
 8001568:	235e      	movs	r3, #94	@ 0x5e
 800156a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x08;
 800156c:	2308      	movs	r3, #8
 800156e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_2, parameter, 2);
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2202      	movs	r2, #2
 8001574:	4619      	mov	r1, r3
 8001576:	20c9      	movs	r0, #201	@ 0xc9
 8001578:	f000 f962 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x0A;     /* panel timing setting */
 800157c:	230a      	movs	r3, #10
 800157e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x0C;
 8001580:	230c      	movs	r3, #12
 8001582:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x02;
 8001584:	2302      	movs	r3, #2
 8001586:	71bb      	strb	r3, [r7, #6]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_3, parameter, 3);
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2203      	movs	r2, #3
 800158c:	4619      	mov	r1, r3
 800158e:	20ca      	movs	r0, #202	@ 0xca
 8001590:	f000 f956 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* panel timing setting */
 8001594:	2303      	movs	r3, #3
 8001596:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x04;
 8001598:	2304      	movs	r3, #4
 800159a:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_4, parameter, 2);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2202      	movs	r2, #2
 80015a0:	4619      	mov	r1, r3
 80015a2:	20cc      	movs	r0, #204	@ 0xcc
 80015a4:	f000 f94c 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x0C;     /* panel power setting */
 80015a8:	230c      	movs	r3, #12
 80015aa:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_POWER, parameter, 1);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2201      	movs	r2, #1
 80015b0:	4619      	mov	r1, r3
 80015b2:	20d0      	movs	r0, #208	@ 0xd0
 80015b4:	f000 f944 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x02;     /* Oscillator Setting = 2MHz */
 80015b8:	2302      	movs	r3, #2
 80015ba:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_OSCILLATOR, parameter, 1);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2201      	movs	r2, #1
 80015c0:	4619      	mov	r1, r3
 80015c2:	20b3      	movs	r0, #179	@ 0xb3
 80015c4:	f000 f93c 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x53;     /* GVDD = 4.76V setting */
 80015c8:	2353      	movs	r3, #83	@ 0x53
 80015ca:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_GVDD, parameter, 1);
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2201      	movs	r2, #1
 80015d0:	4619      	mov	r1, r3
 80015d2:	20c0      	movs	r0, #192	@ 0xc0
 80015d4:	f000 f934 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Reload MTP After SLPOUT */
 80015d8:	2300      	movs	r3, #0
 80015da:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x45;     /* VCOMH=3.76V */
 80015dc:	2345      	movs	r3, #69	@ 0x45
 80015de:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_RELOAD_MTP_VCOMH, parameter, 2);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2202      	movs	r2, #2
 80015e4:	4619      	mov	r1, r3
 80015e6:	20c5      	movs	r0, #197	@ 0xc5
 80015e8:	f000 f92a 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* OP-Amp Ability. (Normal) */
 80015ec:	2303      	movs	r3, #3
 80015ee:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x12;     /* Step-up Cycle for AVDD Booster Freq./4 */
 80015f0:	2312      	movs	r3, #18
 80015f2:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_OPAMP, parameter, 2);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2202      	movs	r2, #2
 80015f8:	4619      	mov	r1, r3
 80015fa:	20c2      	movs	r0, #194	@ 0xc2
 80015fc:	f000 f920 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Tearing Effect Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
 8001600:	2300      	movs	r3, #0
 8001602:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_TEARING_EFFECT, parameter, 1);
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2201      	movs	r2, #1
 8001608:	4619      	mov	r1, r3
 800160a:	20dd      	movs	r0, #221	@ 0xdd
 800160c:	f000 f918 	bl	8001840 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_LOCK, parameter, 0);   /* Panel setting command <Lock> */
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	4619      	mov	r1, r3
 8001616:	20b4      	movs	r0, #180	@ 0xb4
 8001618:	f000 f912 	bl	8001840 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_OUT, parameter, 0);            /* Sleep Out Command */
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	2011      	movs	r0, #17
 8001624:	f000 f90c 	bl	8001840 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 8001628:	2096      	movs	r0, #150	@ 0x96
 800162a:	f001 f9d6 	bl	80029da <LCD_IO_Delay>

  parameter[0] = 0x00;     /* CASET */
 800162e:	2300      	movs	r3, #0
 8001630:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x1E;
 8001632:	231e      	movs	r3, #30
 8001634:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xD1;
 800163a:	23d1      	movs	r3, #209	@ 0xd1
 800163c:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2204      	movs	r2, #4
 8001642:	4619      	mov	r1, r3
 8001644:	202a      	movs	r0, #42	@ 0x2a
 8001646:	f000 f8fb 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 800164a:	2300      	movs	r3, #0
 800164c:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 8001652:	2300      	movs	r3, #0
 8001654:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xB3;
 8001656:	23b3      	movs	r3, #179	@ 0xb3
 8001658:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2204      	movs	r2, #4
 800165e:	4619      	mov	r1, r3
 8001660:	202b      	movs	r0, #43	@ 0x2b
 8001662:	f000 f8ed 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x83;     /* Normal display for Driver Down side */
 8001666:	2383      	movs	r3, #131	@ 0x83
 8001668:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_NORMAL_DISPLAY, parameter, 1);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	2036      	movs	r0, #54	@ 0x36
 8001672:	f000 f8e5 	bl	8001840 <ls016b8uy_WriteReg>

  ls016b8uy_DisplayOn();   /* Display ON command */
 8001676:	f000 f804 	bl	8001682 <ls016b8uy_DisplayOn>

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <ls016b8uy_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOn(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_ON, (uint8_t*)NULL, 0);    /* Display ON command */
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2029      	movs	r0, #41	@ 0x29
 800168c:	f000 f8d8 	bl	8001840 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_IDLE_MODE_OFF, (uint8_t*)NULL, 0); /* Idle mode OFF command */
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2038      	movs	r0, #56	@ 0x38
 8001696:	f000 f8d3 	bl	8001840 <ls016b8uy_WriteReg>
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}

0800169e <ls016b8uy_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOff(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_OFF, (uint8_t*)NULL, 0);   /* Display OFF command */
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2028      	movs	r0, #40	@ 0x28
 80016a8:	f000 f8ca 	bl	8001840 <ls016b8uy_WriteReg>
  LCD_IO_Delay(20);   /* Wait for 20ms */
 80016ac:	2014      	movs	r0, #20
 80016ae:	f001 f994 	bl	80029da <LCD_IO_Delay>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_IN, (uint8_t*)NULL, 0);      /* Sleep In Command */
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2010      	movs	r0, #16
 80016b8:	f000 f8c2 	bl	8001840 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 80016bc:	2096      	movs	r0, #150	@ 0x96
 80016be:	f001 f98c 	bl	80029da <LCD_IO_Delay>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <ls016b8uy_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ls016b8uy_GetLcdPixelWidth(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_WIDTH;
 80016ca:	23b4      	movs	r3, #180	@ 0xb4
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <ls016b8uy_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ls016b8uy_GetLcdPixelHeight(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_HEIGHT;
 80016da:	23b4      	movs	r3, #180	@ 0xb4
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <ls016b8uy_ReadID>:
  * @brief  Get the LS016B8UY ID.
  * @param  None
  * @retval The LS016B8UY ID 
  */
uint16_t ls016b8uy_ReadID(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 80016ea:	f001 f94f 	bl	800298c <LCD_IO_Init>
  /* TODO : LCD read ID command not known for now, so assumption that the connected LCD is LS016B8UY */
  return (LS016B8UY_ID);
 80016ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <ls016b8uy_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ls016b8uy_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	460a      	mov	r2, r1
 8001700:	80fb      	strh	r3, [r7, #6]
 8001702:	4613      	mov	r3, r2
 8001704:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];

  parameter[0] = 0x00;     /* CASET */
 8001706:	2300      	movs	r3, #0
 8001708:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x1E + Xpos;
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	331e      	adds	r3, #30
 8001710:	b2db      	uxtb	r3, r3
 8001712:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001714:	2300      	movs	r3, #0
 8001716:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xD1 + Xpos;
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3b2f      	subs	r3, #47	@ 0x2f
 800171e:	b2db      	uxtb	r3, r3
 8001720:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2204      	movs	r2, #4
 8001728:	4619      	mov	r1, r3
 800172a:	202a      	movs	r0, #42	@ 0x2a
 800172c:	f000 f888 	bl	8001840 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 8001730:	2300      	movs	r3, #0
 8001732:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800173a:	2300      	movs	r3, #0
 800173c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xB3 + Ypos;
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3b4d      	subs	r3, #77	@ 0x4d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2204      	movs	r2, #4
 800174e:	4619      	mov	r1, r3
 8001750:	202b      	movs	r0, #43	@ 0x2b
 8001752:	f000 f875 	bl	8001840 <ls016b8uy_WriteReg>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <ls016b8uy_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ls016b8uy_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	80fb      	strh	r3, [r7, #6]
 8001768:	460b      	mov	r3, r1
 800176a:	80bb      	strh	r3, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	807b      	strh	r3, [r7, #2]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2;

  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	0adb      	lsrs	r3, r3, #11
 8001774:	82fb      	strh	r3, [r7, #22]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	115b      	asrs	r3, r3, #5
 800177a:	b29b      	uxth	r3, r3
 800177c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001780:	82bb      	strh	r3, [r7, #20]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	827b      	strh	r3, [r7, #18]

  /* Prepare data to write with new pixel components and read old pixel component */
  rgb888_part1 = (r << 11) + (g << 2);
 800178a:	8afb      	ldrh	r3, [r7, #22]
 800178c:	02db      	lsls	r3, r3, #11
 800178e:	b29a      	uxth	r2, r3
 8001790:	8abb      	ldrh	r3, [r7, #20]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	b29b      	uxth	r3, r3
 8001796:	4413      	add	r3, r2
 8001798:	823b      	strh	r3, [r7, #16]
  rgb888_part2 = (b << 11);
 800179a:	8a7b      	ldrh	r3, [r7, #18]
 800179c:	02db      	lsls	r3, r3, #11
 800179e:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80017a0:	88ba      	ldrh	r2, [r7, #4]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ffa5 	bl	80016f6 <ls016b8uy_SetCursor>

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	202c      	movs	r0, #44	@ 0x2c
 80017b2:	f000 f845 	bl	8001840 <ls016b8uy_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(rgb888_part1);
 80017b6:	8a3b      	ldrh	r3, [r7, #16]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 f8ed 	bl	8002998 <LCD_IO_WriteData>
  LCD_IO_WriteData(rgb888_part2);
 80017be:	89fb      	ldrh	r3, [r7, #14]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 f8e9 	bl	8002998 <LCD_IO_WriteData>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <ls016b8uy_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ls016b8uy_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	460a      	mov	r2, r1
 80017d8:	80fb      	strh	r3, [r7, #6]
 80017da:	4613      	mov	r3, r2
 80017dc:	80bb      	strh	r3, [r7, #4]
  LS016B8UY_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80017de:	88ba      	ldrh	r2, [r7, #4]
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff86 	bl	80016f6 <ls016b8uy_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ls016b8uy_ReadPixel_rgb888(Xpos, Ypos);
 80017ea:	88ba      	ldrh	r2, [r7, #4]
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f9e1 	bl	8001bb8 <ls016b8uy_ReadPixel_rgb888>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	733a      	strb	r2, [r7, #12]
 80017fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001800:	737a      	strb	r2, [r7, #13]
 8001802:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001806:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001808:	7b3b      	ldrb	r3, [r7, #12]
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	b29b      	uxth	r3, r3
 800181e:	02db      	lsls	r3, r3, #11
 8001820:	b29a      	uxth	r2, r3
 8001822:	7dbb      	ldrb	r3, [r7, #22]
 8001824:	b29b      	uxth	r3, r3
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29a      	uxth	r2, r3
 800182e:	7d7b      	ldrb	r3, [r7, #21]
 8001830:	b29b      	uxth	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8001836:	8a7b      	ldrh	r3, [r7, #18]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <ls016b8uy_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ls016b8uy_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	4613      	mov	r3, r2
 800184e:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4618      	mov	r0, r3
 8001854:	f001 f8ad 	bl	80029b2 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e009      	b.n	8001872 <ls016b8uy_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f001 f896 	bl	8002998 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	3301      	adds	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	429a      	cmp	r2, r3
 8001878:	d3f1      	bcc.n	800185e <ls016b8uy_WriteReg+0x1e>
  }
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <ls016b8uy_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ls016b8uy_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001884:	b490      	push	{r4, r7}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4623      	mov	r3, r4
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4603      	mov	r3, r0
 8001898:	80bb      	strh	r3, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	803b      	strh	r3, [r7, #0]
  if (Xpos < LS016B8UY_LCD_PIXEL_WIDTH)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	2bb3      	cmp	r3, #179	@ 0xb3
 80018a6:	d803      	bhi.n	80018b0 <ls016b8uy_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80018a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001918 <ls016b8uy_SetDisplayWindow+0x94>)
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	8013      	strh	r3, [r2, #0]
 80018ae:	e002      	b.n	80018b6 <ls016b8uy_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <ls016b8uy_SetDisplayWindow+0x94>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < LS016B8UY_LCD_PIXEL_HEIGHT)
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	2bb3      	cmp	r3, #179	@ 0xb3
 80018ba:	d803      	bhi.n	80018c4 <ls016b8uy_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80018bc:	4a17      	ldr	r2, [pc, #92]	@ (800191c <ls016b8uy_SetDisplayWindow+0x98>)
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	8013      	strh	r3, [r2, #0]
 80018c2:	e002      	b.n	80018ca <ls016b8uy_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <ls016b8uy_SetDisplayWindow+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= LS016B8UY_LCD_PIXEL_WIDTH)
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4413      	add	r3, r2
 80018d0:	2bb4      	cmp	r3, #180	@ 0xb4
 80018d2:	dc08      	bgt.n	80018e6 <ls016b8uy_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80018d4:	887a      	ldrh	r2, [r7, #2]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <ls016b8uy_SetDisplayWindow+0x9c>)
 80018e2:	801a      	strh	r2, [r3, #0]
 80018e4:	e002      	b.n	80018ec <ls016b8uy_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = LS016B8UY_LCD_PIXEL_WIDTH - 1;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <ls016b8uy_SetDisplayWindow+0x9c>)
 80018e8:	22b3      	movs	r2, #179	@ 0xb3
 80018ea:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= LS016B8UY_LCD_PIXEL_HEIGHT)
 80018ec:	883a      	ldrh	r2, [r7, #0]
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	2bb4      	cmp	r3, #180	@ 0xb4
 80018f4:	dc08      	bgt.n	8001908 <ls016b8uy_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80018f6:	883a      	ldrh	r2, [r7, #0]
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <ls016b8uy_SetDisplayWindow+0xa0>)
 8001904:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
  }
}
 8001906:	e002      	b.n	800190e <ls016b8uy_SetDisplayWindow+0x8a>
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <ls016b8uy_SetDisplayWindow+0xa0>)
 800190a:	22b3      	movs	r2, #179	@ 0xb3
 800190c:	801a      	strh	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bc90      	pop	{r4, r7}
 8001916:	4770      	bx	lr
 8001918:	2000017c 	.word	0x2000017c
 800191c:	2000017e 	.word	0x2000017e
 8001920:	2000003c 	.word	0x2000003c
 8001924:	2000003e 	.word	0x2000003e

08001928 <ls016b8uy_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	4604      	mov	r4, r0
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4623      	mov	r3, r4
 8001938:	80fb      	strh	r3, [r7, #6]
 800193a:	4603      	mov	r3, r0
 800193c:	80bb      	strh	r3, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	807b      	strh	r3, [r7, #2]
 8001942:	4613      	mov	r3, r2
 8001944:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	82fb      	strh	r3, [r7, #22]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2, rgb888_part3;
  
  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	0adb      	lsrs	r3, r3, #11
 800194e:	82bb      	strh	r3, [r7, #20]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	115b      	asrs	r3, r3, #5
 8001954:	b29b      	uxth	r3, r3
 8001956:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800195a:	827b      	strh	r3, [r7, #18]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	823b      	strh	r3, [r7, #16]

  rgb888_part1 = (r << 11) + (g << 2); /* Build pattern first part to write in LCD RAM */
 8001964:	8abb      	ldrh	r3, [r7, #20]
 8001966:	02db      	lsls	r3, r3, #11
 8001968:	b29a      	uxth	r2, r3
 800196a:	8a7b      	ldrh	r3, [r7, #18]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	81fb      	strh	r3, [r7, #14]
  rgb888_part2 = (b << 11) + (r << 3); /* Build pattern second part to write in LCD RAM */
 8001974:	8a3b      	ldrh	r3, [r7, #16]
 8001976:	02db      	lsls	r3, r3, #11
 8001978:	b29a      	uxth	r2, r3
 800197a:	8abb      	ldrh	r3, [r7, #20]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	81bb      	strh	r3, [r7, #12]
  rgb888_part3 = (g << 10) + (b << 3); /* Build pattern third part to write in LCD RAM */
 8001984:	8a7b      	ldrh	r3, [r7, #18]
 8001986:	029b      	lsls	r3, r3, #10
 8001988:	b29a      	uxth	r2, r3
 800198a:	8a3b      	ldrh	r3, [r7, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	b29b      	uxth	r3, r3
 8001990:	4413      	add	r3, r2
 8001992:	817b      	strh	r3, [r7, #10]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos); 
 8001994:	887a      	ldrh	r2, [r7, #2]
 8001996:	88bb      	ldrh	r3, [r7, #4]
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff feab 	bl	80016f6 <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	202c      	movs	r0, #44	@ 0x2c
 80019a6:	f7ff ff4b 	bl	8001840 <ls016b8uy_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter+=2)
 80019aa:	2300      	movs	r3, #0
 80019ac:	82fb      	strh	r3, [r7, #22]
 80019ae:	e013      	b.n	80019d8 <ls016b8uy_DrawHLine+0xb0>
  {
    /* Write 2 pixels at a time by performing 3 access (pixels coded on 24 bits in LCD RAM whereas access are coded on 16 bits) */
    LCD_IO_WriteData(rgb888_part1);
 80019b0:	89fb      	ldrh	r3, [r7, #14]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fff0 	bl	8002998 <LCD_IO_WriteData>
    LCD_IO_WriteData(rgb888_part2);
 80019b8:	89bb      	ldrh	r3, [r7, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 ffec 	bl	8002998 <LCD_IO_WriteData>
    if (counter != (Length-1))  /* When writing last pixel when Length is odd, the third part is not written */
 80019c0:	8afa      	ldrh	r2, [r7, #22]
 80019c2:	883b      	ldrh	r3, [r7, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d003      	beq.n	80019d2 <ls016b8uy_DrawHLine+0xaa>
    {
      LCD_IO_WriteData(rgb888_part3);
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 ffe3 	bl	8002998 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter+=2)
 80019d2:	8afb      	ldrh	r3, [r7, #22]
 80019d4:	3302      	adds	r3, #2
 80019d6:	82fb      	strh	r3, [r7, #22]
 80019d8:	8afa      	ldrh	r2, [r7, #22]
 80019da:	883b      	ldrh	r3, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d3e7      	bcc.n	80019b0 <ls016b8uy_DrawHLine+0x88>
    }
  }  
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}

080019ea <ls016b8uy_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80019ea:	b590      	push	{r4, r7, lr}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4604      	mov	r4, r0
 80019f2:	4608      	mov	r0, r1
 80019f4:	4611      	mov	r1, r2
 80019f6:	461a      	mov	r2, r3
 80019f8:	4623      	mov	r3, r4
 80019fa:	80fb      	strh	r3, [r7, #6]
 80019fc:	4603      	mov	r3, r0
 80019fe:	80bb      	strh	r3, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8001a0c:	887a      	ldrh	r2, [r7, #2]
 8001a0e:	88bb      	ldrh	r3, [r7, #4]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fe6f 	bl	80016f6 <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	202c      	movs	r0, #44	@ 0x2c
 8001a1e:	f7ff ff0f 	bl	8001840 <ls016b8uy_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	81fb      	strh	r3, [r7, #14]
 8001a26:	e00b      	b.n	8001a40 <ls016b8uy_DrawVLine+0x56>
  {
    ls016b8uy_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b299      	uxth	r1, r3
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	88bb      	ldrh	r3, [r7, #4]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fe92 	bl	800175e <ls016b8uy_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001a3a:	89fb      	ldrh	r3, [r7, #14]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	81fb      	strh	r3, [r7, #14]
 8001a40:	89fa      	ldrh	r2, [r7, #14]
 8001a42:	883b      	ldrh	r3, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3ef      	bcc.n	8001a28 <ls016b8uy_DrawVLine+0x3e>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}
	...

08001a54 <ls016b8uy_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ls016b8uy_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	603a      	str	r2, [r7, #0]
 8001a5e:	80fb      	strh	r3, [r7, #6]
 8001a60:	460b      	mov	r3, r1
 8001a62:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001a70:	4b30      	ldr	r3, [pc, #192]	@ (8001b34 <ls016b8uy_DrawBitmap+0xe0>)
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	4b30      	ldr	r3, [pc, #192]	@ (8001b38 <ls016b8uy_DrawBitmap+0xe4>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001a80:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <ls016b8uy_DrawBitmap+0xe8>)
 8001a82:	881a      	ldrh	r2, [r3, #0]
 8001a84:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <ls016b8uy_DrawBitmap+0xec>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3302      	adds	r3, #2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	330a      	adds	r3, #10
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	330c      	adds	r3, #12
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001ada:	88ba      	ldrh	r2, [r7, #4]
 8001adc:	89bb      	ldrh	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e01d      	b.n	8001b20 <ls016b8uy_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY - 1);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fe00 	bl	80016f6 <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b299      	uxth	r1, r3
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	89fa      	ldrh	r2, [r7, #14]
 8001b0e:	88f8      	ldrh	r0, [r7, #6]
 8001b10:	f000 f89c 	bl	8001c4c <ls016b8uy_DrawRGBHLine>
    nb_line++;
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	3301      	adds	r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8dd      	bhi.n	8001ae4 <ls016b8uy_DrawBitmap+0x90>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000003c 	.word	0x2000003c
 8001b38:	2000017c 	.word	0x2000017c
 8001b3c:	2000003e 	.word	0x2000003e
 8001b40:	2000017e 	.word	0x2000017e

08001b44 <ls016b8uy_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ls016b8uy_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	80fb      	strh	r3, [r7, #6]
 8001b56:	4603      	mov	r3, r0
 8001b58:	80bb      	strh	r3, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	807b      	strh	r3, [r7, #2]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8001b66:	88bb      	ldrh	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	e019      	b.n	8001ba0 <ls016b8uy_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fdbe 	bl	80016f6 <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	6a3a      	ldr	r2, [r7, #32]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	88f8      	ldrh	r0, [r7, #6]
 8001b90:	f000 f85c 	bl	8001c4c <ls016b8uy_DrawRGBHLine>
    nb_line++;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	88ba      	ldrh	r2, [r7, #4]
 8001ba2:	883b      	ldrh	r3, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d3de      	bcc.n	8001b6c <ls016b8uy_DrawRGBImage+0x28>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <ls016b8uy_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static LS016B8UY_Rgb888 ls016b8uy_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	80fb      	strh	r3, [r7, #6]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8001bc8:	88ba      	ldrh	r2, [r7, #4]
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fd91 	bl	80016f6 <ls016b8uy_SetCursor>
  /* Prepare to read LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	202e      	movs	r0, #46	@ 0x2e
 8001bda:	f7ff fe31 	bl	8001840 <ls016b8uy_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8001bde:	f000 fef5 	bl	80029cc <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8001be2:	f000 fef3 	bl	80029cc <LCD_IO_ReadData>
 8001be6:	4603      	mov	r3, r0
 8001be8:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8001bea:	f000 feef 	bl	80029cc <LCD_IO_ReadData>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8001bf2:	8afb      	ldrh	r3, [r7, #22]
 8001bf4:	121b      	asrs	r3, r3, #8
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f023 0303 	bic.w	r3, r3, #3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8001c00:	8afb      	ldrh	r3, [r7, #22]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f023 0303 	bic.w	r3, r3, #3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8001c0c:	8abb      	ldrh	r3, [r7, #20]
 8001c0e:	121b      	asrs	r3, r3, #8
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f023 0303 	bic.w	r3, r3, #3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	f107 020c 	add.w	r2, r7, #12
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4611      	mov	r1, r2
 8001c26:	8019      	strh	r1, [r3, #0]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	0c12      	lsrs	r2, r2, #16
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	7c3a      	ldrb	r2, [r7, #16]
 8001c32:	f362 0307 	bfi	r3, r2, #0, #8
 8001c36:	7c7a      	ldrb	r2, [r7, #17]
 8001c38:	f362 230f 	bfi	r3, r2, #8, #8
 8001c3c:	7cba      	ldrb	r2, [r7, #18]
 8001c3e:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <ls016b8uy_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ls016b8uy_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	4603      	mov	r3, r0
 8001c56:	81fb      	strh	r3, [r7, #14]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	81bb      	strh	r3, [r7, #12]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t posX;
  uint16_t r, g, b;
  uint16_t rgb888_part;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	61fb      	str	r3, [r7, #28]

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	202c      	movs	r0, #44	@ 0x2c
 8001c6e:	f7ff fde7 	bl	8001840 <ls016b8uy_WriteReg>

  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 8001c72:	89fb      	ldrh	r3, [r7, #14]
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	e07b      	b.n	8001d70 <ls016b8uy_DrawRGBHLine+0x124>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001c78:	4b44      	ldr	r3, [pc, #272]	@ (8001d8c <ls016b8uy_DrawRGBHLine+0x140>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d372      	bcc.n	8001d6a <ls016b8uy_DrawRGBHLine+0x11e>
 8001c84:	4b42      	ldr	r3, [pc, #264]	@ (8001d90 <ls016b8uy_DrawRGBHLine+0x144>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	89ba      	ldrh	r2, [r7, #12]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d36d      	bcc.n	8001d6a <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001c8e:	4b41      	ldr	r3, [pc, #260]	@ (8001d94 <ls016b8uy_DrawRGBHLine+0x148>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d867      	bhi.n	8001d6a <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d98 <ls016b8uy_DrawRGBHLine+0x14c>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	89ba      	ldrh	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d862      	bhi.n	8001d6a <ls016b8uy_DrawRGBHLine+0x11e>
    {
      /* Write pixels in LCD RAM after RGB565 -> RGB888 conversion */
      /* As data in LCD RAM are 24bits packed, three 16 bits writes access are needed to transmit 2 pixels data */

      r = (rgb565[i] & 0xF800) >> 11;      /* Extract red component from first RGB565 pixel data */
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	4413      	add	r3, r2
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	837b      	strh	r3, [r7, #26]
      g = (rgb565[i] & 0x07E0) >> 5;       /* Extract green component from first RGB565 pixel data  */
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	4413      	add	r3, r2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	115b      	asrs	r3, r3, #5
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cc4:	833b      	strh	r3, [r7, #24]
      rgb888_part = (r << 11) + (g << 2);  /* Build data to be written in LCD RAM */
 8001cc6:	8b7b      	ldrh	r3, [r7, #26]
 8001cc8:	02db      	lsls	r3, r3, #11
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	8b3b      	ldrh	r3, [r7, #24]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 8001cd6:	8afb      	ldrh	r3, [r7, #22]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fe5d 	bl	8002998 <LCD_IO_WriteData>

      b = (rgb565[i] & 0x001F) >> 0;       /* Extract blue component from first RGB565 pixel data  */
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	82bb      	strh	r3, [r7, #20]
      r = (rgb565[i+1] & 0xF800) >> 11;    /* Extract red component from second RGB565 pixel data  */
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	0adb      	lsrs	r3, r3, #11
 8001cfc:	837b      	strh	r3, [r7, #26]
      rgb888_part = (b << 11) + (r << 3);  /* Build data to be written in LCD RAM */
 8001cfe:	8abb      	ldrh	r3, [r7, #20]
 8001d00:	02db      	lsls	r3, r3, #11
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	8b7b      	ldrh	r3, [r7, #26]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 8001d0e:	8afb      	ldrh	r3, [r7, #22]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fe41 	bl	8002998 <LCD_IO_WriteData>

      if (posX != (Xsize + Xpos - 1))     /* When writing last pixel when size is odd, the third part is not written */
 8001d16:	897a      	ldrh	r2, [r7, #10]
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d01f      	beq.n	8001d64 <ls016b8uy_DrawRGBHLine+0x118>
      {
        g = (rgb565[i+1] & 0x07E0) >> 5;     /* Extract green component from second RGB565 pixel data */
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	115b      	asrs	r3, r3, #5
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d38:	833b      	strh	r3, [r7, #24]
        b = (rgb565[i+1] & 0x001F) >> 0;     /* Extract blue component from second RGB565 pixel data */
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	82bb      	strh	r3, [r7, #20]
        rgb888_part = (g << 10) + (b << 3);  /* Build data to be written in LCD RAM */
 8001d4c:	8b3b      	ldrh	r3, [r7, #24]
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	8abb      	ldrh	r3, [r7, #20]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	82fb      	strh	r3, [r7, #22]
        LCD_IO_WriteData(rgb888_part);
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fe1a 	bl	8002998 <LCD_IO_WriteData>
      }

      i += 2;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	3302      	adds	r3, #2
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	897a      	ldrh	r2, [r7, #10]
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	4413      	add	r3, r2
 8001d76:	461a      	mov	r2, r3
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	f4ff af7c 	bcc.w	8001c78 <ls016b8uy_DrawRGBHLine+0x2c>
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	@ 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000017c 	.word	0x2000017c
 8001d90:	2000017e 	.word	0x2000017e
 8001d94:	2000003c 	.word	0x2000003c
 8001d98:	2000003e 	.word	0x2000003e

08001d9c <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001da2:	f000 fdf3 	bl	800298c <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2010      	movs	r0, #16
 8001dac:	f000 f9e3 	bl	8002176 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001db0:	200a      	movs	r0, #10
 8001db2:	f000 fe12 	bl	80029da <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f000 f9db 	bl	8002176 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8001dc0:	20c8      	movs	r0, #200	@ 0xc8
 8001dc2:	f000 fe0a 	bl	80029da <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2011      	movs	r0, #17
 8001dcc:	f000 f9d3 	bl	8002176 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8001dd0:	2078      	movs	r0, #120	@ 0x78
 8001dd2:	f000 fe02 	bl	80029da <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4619      	mov	r1, r3
 8001de0:	2036      	movs	r0, #54	@ 0x36
 8001de2:	f000 f9c8 	bl	8002176 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8001de6:	2305      	movs	r3, #5
 8001de8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001dea:	463b      	mov	r3, r7
 8001dec:	2201      	movs	r2, #1
 8001dee:	4619      	mov	r1, r3
 8001df0:	203a      	movs	r0, #58	@ 0x3a
 8001df2:	f000 f9c0 	bl	8002176 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2021      	movs	r0, #33	@ 0x21
 8001dfc:	f000 f9bb 	bl	8002176 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001e00:	2300      	movs	r3, #0
 8001e02:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001e04:	2300      	movs	r3, #0
 8001e06:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001e0c:	23ef      	movs	r3, #239	@ 0xef
 8001e0e:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001e10:	463b      	mov	r3, r7
 8001e12:	2204      	movs	r2, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	202a      	movs	r0, #42	@ 0x2a
 8001e18:	f000 f9ad 	bl	8002176 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001e20:	2300      	movs	r3, #0
 8001e22:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001e24:	2300      	movs	r3, #0
 8001e26:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001e28:	23ef      	movs	r3, #239	@ 0xef
 8001e2a:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	2204      	movs	r2, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	202b      	movs	r0, #43	@ 0x2b
 8001e34:	f000 f99f 	bl	8002176 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001e38:	230c      	movs	r3, #12
 8001e3a:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001e40:	2300      	movs	r3, #0
 8001e42:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001e44:	2333      	movs	r3, #51	@ 0x33
 8001e46:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001e48:	2333      	movs	r3, #51	@ 0x33
 8001e4a:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	2205      	movs	r2, #5
 8001e50:	4619      	mov	r1, r3
 8001e52:	20b2      	movs	r0, #178	@ 0xb2
 8001e54:	f000 f98f 	bl	8002176 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001e58:	2335      	movs	r3, #53	@ 0x35
 8001e5a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4619      	mov	r1, r3
 8001e62:	20b7      	movs	r0, #183	@ 0xb7
 8001e64:	f000 f987 	bl	8002176 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001e68:	231f      	movs	r3, #31
 8001e6a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4619      	mov	r1, r3
 8001e72:	20bb      	movs	r0, #187	@ 0xbb
 8001e74:	f000 f97f 	bl	8002176 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001e78:	232c      	movs	r3, #44	@ 0x2c
 8001e7a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4619      	mov	r1, r3
 8001e82:	20c0      	movs	r0, #192	@ 0xc0
 8001e84:	f000 f977 	bl	8002176 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001e8c:	23c3      	movs	r3, #195	@ 0xc3
 8001e8e:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001e90:	463b      	mov	r3, r7
 8001e92:	2202      	movs	r2, #2
 8001e94:	4619      	mov	r1, r3
 8001e96:	20c2      	movs	r0, #194	@ 0xc2
 8001e98:	f000 f96d 	bl	8002176 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	20c4      	movs	r0, #196	@ 0xc4
 8001ea8:	f000 f965 	bl	8002176 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001eac:	230f      	movs	r3, #15
 8001eae:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	20c6      	movs	r0, #198	@ 0xc6
 8001eb8:	f000 f95d 	bl	8002176 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001ebc:	23a4      	movs	r3, #164	@ 0xa4
 8001ebe:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001ec0:	23a1      	movs	r3, #161	@ 0xa1
 8001ec2:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	20d0      	movs	r0, #208	@ 0xd0
 8001ecc:	f000 f953 	bl	8002176 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001ed0:	23d0      	movs	r3, #208	@ 0xd0
 8001ed2:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001ed8:	2311      	movs	r3, #17
 8001eda:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001edc:	2308      	movs	r3, #8
 8001ede:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001ee4:	2315      	movs	r3, #21
 8001ee6:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001ee8:	2339      	movs	r3, #57	@ 0x39
 8001eea:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001eec:	2333      	movs	r3, #51	@ 0x33
 8001eee:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001ef0:	2350      	movs	r3, #80	@ 0x50
 8001ef2:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001ef4:	2336      	movs	r3, #54	@ 0x36
 8001ef6:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001ef8:	2313      	movs	r3, #19
 8001efa:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001efc:	2314      	movs	r3, #20
 8001efe:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001f00:	2329      	movs	r3, #41	@ 0x29
 8001f02:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001f04:	232d      	movs	r3, #45	@ 0x2d
 8001f06:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001f08:	463b      	mov	r3, r7
 8001f0a:	220e      	movs	r2, #14
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	20e0      	movs	r0, #224	@ 0xe0
 8001f10:	f000 f931 	bl	8002176 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001f14:	23d0      	movs	r3, #208	@ 0xd0
 8001f16:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001f1c:	2310      	movs	r3, #16
 8001f1e:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001f20:	2308      	movs	r3, #8
 8001f22:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001f24:	2306      	movs	r3, #6
 8001f26:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001f28:	2306      	movs	r3, #6
 8001f2a:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001f2c:	2339      	movs	r3, #57	@ 0x39
 8001f2e:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001f30:	2344      	movs	r3, #68	@ 0x44
 8001f32:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001f34:	2351      	movs	r3, #81	@ 0x51
 8001f36:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001f38:	230b      	movs	r3, #11
 8001f3a:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001f3c:	2316      	movs	r3, #22
 8001f3e:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001f40:	2314      	movs	r3, #20
 8001f42:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001f44:	232f      	movs	r3, #47	@ 0x2f
 8001f46:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001f48:	2331      	movs	r3, #49	@ 0x31
 8001f4a:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	220e      	movs	r2, #14
 8001f50:	4619      	mov	r1, r3
 8001f52:	20e1      	movs	r0, #225	@ 0xe1
 8001f54:	f000 f90f 	bl	8002176 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001f58:	f000 f847 	bl	8001fea <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001f60:	463b      	mov	r3, r7
 8001f62:	2201      	movs	r2, #1
 8001f64:	4619      	mov	r1, r3
 8001f66:	2035      	movs	r0, #53	@ 0x35
 8001f68:	f000 f905 	bl	8002176 <ST7789H2_WriteReg>

}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001f82:	2300      	movs	r3, #0
 8001f84:	723b      	strb	r3, [r7, #8]
 8001f86:	e025      	b.n	8001fd4 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d120      	bne.n	8001fd0 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001f92:	2300      	movs	r3, #0
 8001f94:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001f96:	2301      	movs	r3, #1
 8001f98:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001f9a:	23f0      	movs	r3, #240	@ 0xf0
 8001f9c:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	2206      	movs	r2, #6
 8001fac:	4619      	mov	r1, r3
 8001fae:	2033      	movs	r0, #51	@ 0x33
 8001fb0:	f000 f8e1 	bl	8002176 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001fb8:	2350      	movs	r3, #80	@ 0x50
 8001fba:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	2037      	movs	r0, #55	@ 0x37
 8001fc6:	f000 f8d6 	bl	8002176 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001fca:	23c0      	movs	r3, #192	@ 0xc0
 8001fcc:	723b      	strb	r3, [r7, #8]
 8001fce:	e001      	b.n	8001fd4 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001fd0:	2360      	movs	r3, #96	@ 0x60
 8001fd2:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4619      	mov	r1, r3
 8001fdc:	2036      	movs	r0, #54	@ 0x36
 8001fde:	f000 f8ca 	bl	8002176 <ST7789H2_WriteReg>
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2029      	movs	r0, #41	@ 0x29
 8001ff4:	f000 f8bf 	bl	8002176 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2011      	movs	r0, #17
 8001ffe:	f000 f8ba 	bl	8002176 <ST7789H2_WriteReg>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}

08002006 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800200c:	23fe      	movs	r3, #254	@ 0xfe
 800200e:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	2201      	movs	r2, #1
 8002014:	4619      	mov	r1, r3
 8002016:	20bd      	movs	r0, #189	@ 0xbd
 8002018:	f000 f8ad 	bl	8002176 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2010      	movs	r0, #16
 8002022:	f000 f8a8 	bl	8002176 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002026:	200a      	movs	r0, #10
 8002028:	f000 fcd7 	bl	80029da <LCD_IO_Delay>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8002038:	23f0      	movs	r3, #240	@ 0xf0
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002048:	23f0      	movs	r3, #240	@ 0xf0
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002058:	f000 fc98 	bl	800298c <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800205c:	2004      	movs	r0, #4
 800205e:	f000 f8ac 	bl	80021ba <ST7789H2_ReadReg>
 8002062:	4603      	mov	r3, r0
}
 8002064:	4618      	mov	r0, r3
 8002066:	bd80      	pop	{r7, pc}

08002068 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	460a      	mov	r2, r1
 8002072:	80fb      	strh	r3, [r7, #6]
 8002074:	4613      	mov	r3, r2
 8002076:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002078:	2300      	movs	r3, #0
 800207a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3b11      	subs	r3, #17
 800208c:	b2db      	uxtb	r3, r3
 800208e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2204      	movs	r2, #4
 8002096:	4619      	mov	r1, r3
 8002098:	202a      	movs	r0, #42	@ 0x2a
 800209a:	f000 f86c 	bl	8002176 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 800209e:	2300      	movs	r3, #0
 80020a0:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80020a2:	88bb      	ldrh	r3, [r7, #4]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80020ac:	88bb      	ldrh	r3, [r7, #4]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	3b11      	subs	r3, #17
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	2204      	movs	r2, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	202b      	movs	r0, #43	@ 0x2b
 80020c0:	f000 f859 	bl	8002176 <ST7789H2_WriteReg>
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
 80020d6:	460b      	mov	r3, r1
 80020d8:	80bb      	strh	r3, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80020de:	88ba      	ldrh	r2, [r7, #4]
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ffbf 	bl	8002068 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	202c      	movs	r0, #44	@ 0x2c
 80020f0:	f000 f841 	bl	8002176 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fc4e 	bl	8002998 <LCD_IO_WriteData>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	80fb      	strh	r3, [r7, #6]
 8002110:	4613      	mov	r3, r2
 8002112:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002114:	88ba      	ldrh	r2, [r7, #4]
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ffa4 	bl	8002068 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002120:	88ba      	ldrh	r2, [r7, #4]
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f9be 	bl	80024a8 <ST7789H2_ReadPixel_rgb888>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	733a      	strb	r2, [r7, #12]
 8002132:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002136:	737a      	strb	r2, [r7, #13]
 8002138:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800213c:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800213e:	7b3b      	ldrb	r3, [r7, #12]
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002144:	7b7b      	ldrb	r3, [r7, #13]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	b29b      	uxth	r3, r3
 8002154:	02db      	lsls	r3, r3, #11
 8002156:	b29a      	uxth	r2, r3
 8002158:	7dbb      	ldrb	r3, [r7, #22]
 800215a:	b29b      	uxth	r3, r3
 800215c:	015b      	lsls	r3, r3, #5
 800215e:	b29b      	uxth	r3, r3
 8002160:	4413      	add	r3, r2
 8002162:	b29a      	uxth	r2, r3
 8002164:	7d7b      	ldrb	r3, [r7, #21]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4413      	add	r3, r2
 800216a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800216c:	8a7b      	ldrh	r3, [r7, #18]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	6039      	str	r1, [r7, #0]
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	4613      	mov	r3, r2
 8002184:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fc12 	bl	80029b2 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e009      	b.n	80021a8 <ST7789H2_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fbfb 	bl	8002998 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	3301      	adds	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	79bb      	ldrb	r3, [r7, #6]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3f1      	bcc.n	8002194 <ST7789H2_WriteReg+0x1e>
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fbf3 	bl	80029b2 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80021cc:	f000 fbfe 	bl	80029cc <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80021d0:	f000 fbfc 	bl	80029cc <LCD_IO_ReadData>
 80021d4:	4603      	mov	r3, r0
 80021d6:	b2db      	uxtb	r3, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	80fb      	strh	r3, [r7, #6]
 80021f2:	4603      	mov	r3, r0
 80021f4:	80bb      	strh	r3, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	807b      	strh	r3, [r7, #2]
 80021fa:	4613      	mov	r3, r2
 80021fc:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2bef      	cmp	r3, #239	@ 0xef
 8002202:	d803      	bhi.n	800220c <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002204:	4a1b      	ldr	r2, [pc, #108]	@ (8002274 <ST7789H2_SetDisplayWindow+0x94>)
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	8013      	strh	r3, [r2, #0]
 800220a:	e002      	b.n	8002212 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 800220c:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <ST7789H2_SetDisplayWindow+0x94>)
 800220e:	2200      	movs	r2, #0
 8002210:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002212:	88bb      	ldrh	r3, [r7, #4]
 8002214:	2bef      	cmp	r3, #239	@ 0xef
 8002216:	d803      	bhi.n	8002220 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002218:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <ST7789H2_SetDisplayWindow+0x98>)
 800221a:	88bb      	ldrh	r3, [r7, #4]
 800221c:	8013      	strh	r3, [r2, #0]
 800221e:	e002      	b.n	8002226 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002220:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <ST7789H2_SetDisplayWindow+0x98>)
 8002222:	2200      	movs	r2, #0
 8002224:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	4413      	add	r3, r2
 800222c:	2bf0      	cmp	r3, #240	@ 0xf0
 800222e:	dc08      	bgt.n	8002242 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002230:	887a      	ldrh	r2, [r7, #2]
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4413      	add	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <ST7789H2_SetDisplayWindow+0x9c>)
 800223e:	801a      	strh	r2, [r3, #0]
 8002240:	e002      	b.n	8002248 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <ST7789H2_SetDisplayWindow+0x9c>)
 8002244:	22ef      	movs	r2, #239	@ 0xef
 8002246:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002248:	883a      	ldrh	r2, [r7, #0]
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002250:	dc08      	bgt.n	8002264 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002252:	883a      	ldrh	r2, [r7, #0]
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <ST7789H2_SetDisplayWindow+0xa0>)
 8002260:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002262:	e002      	b.n	800226a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <ST7789H2_SetDisplayWindow+0xa0>)
 8002266:	22ef      	movs	r2, #239	@ 0xef
 8002268:	801a      	strh	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bc90      	pop	{r4, r7}
 8002272:	4770      	bx	lr
 8002274:	20000180 	.word	0x20000180
 8002278:	20000182 	.word	0x20000182
 800227c:	20000078 	.word	0x20000078
 8002280:	2000007a 	.word	0x2000007a

08002284 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	4604      	mov	r4, r0
 800228c:	4608      	mov	r0, r1
 800228e:	4611      	mov	r1, r2
 8002290:	461a      	mov	r2, r3
 8002292:	4623      	mov	r3, r4
 8002294:	80fb      	strh	r3, [r7, #6]
 8002296:	4603      	mov	r3, r0
 8002298:	80bb      	strh	r3, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	807b      	strh	r3, [r7, #2]
 800229e:	4613      	mov	r3, r2
 80022a0:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fedd 	bl	8002068 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	202c      	movs	r0, #44	@ 0x2c
 80022b4:	f7ff ff5f 	bl	8002176 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	81fb      	strh	r3, [r7, #14]
 80022bc:	e006      	b.n	80022cc <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fb69 	bl	8002998 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	3301      	adds	r3, #1
 80022ca:	81fb      	strh	r3, [r7, #14]
 80022cc:	89fa      	ldrh	r2, [r7, #14]
 80022ce:	883b      	ldrh	r3, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d3f4      	bcc.n	80022be <ST7789H2_DrawHLine+0x3a>
  }  
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}

080022de <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80022de:	b590      	push	{r4, r7, lr}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4604      	mov	r4, r0
 80022e6:	4608      	mov	r0, r1
 80022e8:	4611      	mov	r1, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	4623      	mov	r3, r4
 80022ee:	80fb      	strh	r3, [r7, #6]
 80022f0:	4603      	mov	r3, r0
 80022f2:	80bb      	strh	r3, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff feb0 	bl	8002068 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	202c      	movs	r0, #44	@ 0x2c
 800230e:	f7ff ff32 	bl	8002176 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002312:	2300      	movs	r3, #0
 8002314:	81fb      	strh	r3, [r7, #14]
 8002316:	e00b      	b.n	8002330 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002318:	887a      	ldrh	r2, [r7, #2]
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	4413      	add	r3, r2
 800231e:	b299      	uxth	r1, r3
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	88bb      	ldrh	r3, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fed1 	bl	80020cc <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	3301      	adds	r3, #1
 800232e:	81fb      	strh	r3, [r7, #14]
 8002330:	89fa      	ldrh	r2, [r7, #14]
 8002332:	883b      	ldrh	r3, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d3ef      	bcc.n	8002318 <ST7789H2_DrawVLine+0x3a>
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}
	...

08002344 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	603a      	str	r2, [r7, #0]
 800234e:	80fb      	strh	r3, [r7, #6]
 8002350:	460b      	mov	r3, r1
 8002352:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002360:	4b30      	ldr	r3, [pc, #192]	@ (8002424 <ST7789H2_DrawBitmap+0xe0>)
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	4b30      	ldr	r3, [pc, #192]	@ (8002428 <ST7789H2_DrawBitmap+0xe4>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	b29b      	uxth	r3, r3
 800236c:	3301      	adds	r3, #1
 800236e:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002370:	4b2e      	ldr	r3, [pc, #184]	@ (800242c <ST7789H2_DrawBitmap+0xe8>)
 8002372:	881a      	ldrh	r2, [r3, #0]
 8002374:	4b2e      	ldr	r3, [pc, #184]	@ (8002430 <ST7789H2_DrawBitmap+0xec>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b29b      	uxth	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	3302      	adds	r3, #2
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3304      	adds	r3, #4
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	461a      	mov	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	330a      	adds	r3, #10
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	461a      	mov	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	4413      	add	r3, r2
 80023c8:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80023ca:	88ba      	ldrh	r2, [r7, #4]
 80023cc:	89bb      	ldrh	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e01d      	b.n	8002410 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fe41 	bl	8002068 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b299      	uxth	r1, r3
 80023ee:	89fb      	ldrh	r3, [r7, #14]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	89fa      	ldrh	r2, [r7, #14]
 80023fe:	88f8      	ldrh	r0, [r7, #6]
 8002400:	f000 f89c 	bl	800253c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	3301      	adds	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b01      	subs	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8dd      	bhi.n	80023d4 <ST7789H2_DrawBitmap+0x90>
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000078 	.word	0x20000078
 8002428:	20000180 	.word	0x20000180
 800242c:	2000007a 	.word	0x2000007a
 8002430:	20000182 	.word	0x20000182

08002434 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	4604      	mov	r4, r0
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4623      	mov	r3, r4
 8002444:	80fb      	strh	r3, [r7, #6]
 8002446:	4603      	mov	r3, r0
 8002448:	80bb      	strh	r3, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	807b      	strh	r3, [r7, #2]
 800244e:	4613      	mov	r3, r2
 8002450:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002456:	88bb      	ldrh	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e019      	b.n	8002490 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	b29a      	uxth	r2, r3
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fdff 	bl	8002068 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	b299      	uxth	r1, r3
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	4413      	add	r3, r2
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	88f8      	ldrh	r0, [r7, #6]
 8002480:	f000 f85c 	bl	800253c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3301      	adds	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3301      	adds	r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	88ba      	ldrh	r2, [r7, #4]
 8002492:	883b      	ldrh	r3, [r7, #0]
 8002494:	4413      	add	r3, r2
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4293      	cmp	r3, r2
 800249c:	d3de      	bcc.n	800245c <ST7789H2_DrawRGBImage+0x28>
  }
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}

080024a8 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	460a      	mov	r2, r1
 80024b2:	80fb      	strh	r3, [r7, #6]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80024b8:	88ba      	ldrh	r2, [r7, #4]
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fdd2 	bl	8002068 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	202e      	movs	r0, #46	@ 0x2e
 80024ca:	f7ff fe54 	bl	8002176 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80024ce:	f000 fa7d 	bl	80029cc <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80024d2:	f000 fa7b 	bl	80029cc <LCD_IO_ReadData>
 80024d6:	4603      	mov	r3, r0
 80024d8:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80024da:	f000 fa77 	bl	80029cc <LCD_IO_ReadData>
 80024de:	4603      	mov	r3, r0
 80024e0:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80024e2:	8afb      	ldrh	r3, [r7, #22]
 80024e4:	121b      	asrs	r3, r3, #8
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f023 0303 	bic.w	r3, r3, #3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80024f0:	8afb      	ldrh	r3, [r7, #22]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f023 0303 	bic.w	r3, r3, #3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80024fc:	8abb      	ldrh	r3, [r7, #20]
 80024fe:	121b      	asrs	r3, r3, #8
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	f107 020c 	add.w	r2, r7, #12
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4611      	mov	r1, r2
 8002516:	8019      	strh	r1, [r3, #0]
 8002518:	3302      	adds	r3, #2
 800251a:	0c12      	lsrs	r2, r2, #16
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	2300      	movs	r3, #0
 8002520:	7c3a      	ldrb	r2, [r7, #16]
 8002522:	f362 0307 	bfi	r3, r2, #0, #8
 8002526:	7c7a      	ldrb	r2, [r7, #17]
 8002528:	f362 230f 	bfi	r3, r2, #8, #8
 800252c:	7cba      	ldrb	r2, [r7, #18]
 800252e:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	4603      	mov	r3, r0
 8002546:	81fb      	strh	r3, [r7, #14]
 8002548:	460b      	mov	r3, r1
 800254a:	81bb      	strh	r3, [r7, #12]
 800254c:	4613      	mov	r3, r2
 800254e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	202c      	movs	r0, #44	@ 0x2c
 800255e:	f7ff fe0a 	bl	8002176 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e029      	b.n	80025bc <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002568:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <ST7789H2_DrawRGBHLine+0x98>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4293      	cmp	r3, r2
 8002572:	d320      	bcc.n	80025b6 <ST7789H2_DrawRGBHLine+0x7a>
 8002574:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <ST7789H2_DrawRGBHLine+0x9c>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	89ba      	ldrh	r2, [r7, #12]
 800257a:	429a      	cmp	r2, r3
 800257c:	d31b      	bcc.n	80025b6 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800257e:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <ST7789H2_DrawRGBHLine+0xa0>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4293      	cmp	r3, r2
 8002588:	d815      	bhi.n	80025b6 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <ST7789H2_DrawRGBHLine+0xa4>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	89ba      	ldrh	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d810      	bhi.n	80025b6 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002594:	897a      	ldrh	r2, [r7, #10]
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	441a      	add	r2, r3
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	429a      	cmp	r2, r3
 800259e:	d007      	beq.n	80025b0 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f9f4 	bl	8002998 <LCD_IO_WriteData>
      }      
      i++;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3301      	adds	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	897a      	ldrh	r2, [r7, #10]
 80025be:	89fb      	ldrh	r3, [r7, #14]
 80025c0:	4413      	add	r3, r2
 80025c2:	461a      	mov	r2, r3
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d3ce      	bcc.n	8002568 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000180 	.word	0x20000180
 80025d8:	20000182 	.word	0x20000182
 80025dc:	20000078 	.word	0x20000078
 80025e0:	2000007a 	.word	0x2000007a

080025e4 <BSP_JOY_Init>:
  *         JOY_MODE_EXTI: Joystick pins will be connected to EXTI line
  *                        with interrupt generation capability
  * @retval HAL_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_JOY_Init(JOYMode_TypeDef Joy_Mode)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08e      	sub	sp, #56	@ 0x38
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  JOYState_TypeDef joykey;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Initialized the Joystick. */
  for(joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80025f4:	e0a0      	b.n	8002738 <BSP_JOY_Init+0x154>
  {
    /* Enable the JOY clock */
    JOYx_GPIO_CLK_ENABLE(joykey);
 80025f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10e      	bne.n	800261c <BSP_JOY_Init+0x38>
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	4b52      	ldr	r3, [pc, #328]	@ (800274c <BSP_JOY_Init+0x168>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	4a51      	ldr	r2, [pc, #324]	@ (800274c <BSP_JOY_Init+0x168>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	@ 0x30
 800260e:	4b4f      	ldr	r3, [pc, #316]	@ (800274c <BSP_JOY_Init+0x168>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	e04a      	b.n	80026b2 <BSP_JOY_Init+0xce>
 800261c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10e      	bne.n	8002642 <BSP_JOY_Init+0x5e>
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	4b48      	ldr	r3, [pc, #288]	@ (800274c <BSP_JOY_Init+0x168>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	4a47      	ldr	r2, [pc, #284]	@ (800274c <BSP_JOY_Init+0x168>)
 800262e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002632:	6313      	str	r3, [r2, #48]	@ 0x30
 8002634:	4b45      	ldr	r3, [pc, #276]	@ (800274c <BSP_JOY_Init+0x168>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	e037      	b.n	80026b2 <BSP_JOY_Init+0xce>
 8002642:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002646:	2b02      	cmp	r3, #2
 8002648:	d10e      	bne.n	8002668 <BSP_JOY_Init+0x84>
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	4b3f      	ldr	r3, [pc, #252]	@ (800274c <BSP_JOY_Init+0x168>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a3e      	ldr	r2, [pc, #248]	@ (800274c <BSP_JOY_Init+0x168>)
 8002654:	f043 0320 	orr.w	r3, r3, #32
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b3c      	ldr	r3, [pc, #240]	@ (800274c <BSP_JOY_Init+0x168>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	e024      	b.n	80026b2 <BSP_JOY_Init+0xce>
 8002668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800266c:	2b03      	cmp	r3, #3
 800266e:	d10e      	bne.n	800268e <BSP_JOY_Init+0xaa>
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	4b35      	ldr	r3, [pc, #212]	@ (800274c <BSP_JOY_Init+0x168>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	4a34      	ldr	r2, [pc, #208]	@ (800274c <BSP_JOY_Init+0x168>)
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002680:	4b32      	ldr	r3, [pc, #200]	@ (800274c <BSP_JOY_Init+0x168>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	e011      	b.n	80026b2 <BSP_JOY_Init+0xce>
 800268e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002692:	2b04      	cmp	r3, #4
 8002694:	d10d      	bne.n	80026b2 <BSP_JOY_Init+0xce>
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <BSP_JOY_Init+0x168>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a2b      	ldr	r2, [pc, #172]	@ (800274c <BSP_JOY_Init+0x168>)
 80026a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b29      	ldr	r3, [pc, #164]	@ (800274c <BSP_JOY_Init+0x168>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = JOY_PIN[joykey];
 80026b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026b6:	4a26      	ldr	r2, [pc, #152]	@ (8002750 <BSP_JOY_Init+0x16c>)
 80026b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026be:	2302      	movs	r3, #2
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (Joy_Mode == JOY_MODE_GPIO)
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <BSP_JOY_Init+0x104>
    {
      /* Configure Joy pin as input */
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 80026d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <BSP_JOY_Init+0x170>)
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	f107 0220 	add.w	r2, r7, #32
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 feb1 	bl	8003448 <HAL_GPIO_Init>
 80026e6:	e022      	b.n	800272e <BSP_JOY_Init+0x14a>
    }
    else if (Joy_Mode == JOY_MODE_EXTI)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d11f      	bne.n	800272e <BSP_JOY_Init+0x14a>
    {
      /* Configure Joy pin as input with External interrupt */
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 80026f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026f8:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <BSP_JOY_Init+0x170>)
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	f107 0220 	add.w	r2, r7, #32
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fe9f 	bl	8003448 <HAL_GPIO_Init>

      /* Enable and set Joy EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((IRQn_Type)(JOY_IRQn[joykey]), 0x0F, 0x00);
 800270a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800270e:	4a12      	ldr	r2, [pc, #72]	@ (8002758 <BSP_JOY_Init+0x174>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	b25b      	sxtb	r3, r3
 8002714:	2200      	movs	r2, #0
 8002716:	210f      	movs	r1, #15
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fe5e 	bl	80033da <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((IRQn_Type)(JOY_IRQn[joykey]));
 800271e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002722:	4a0d      	ldr	r2, [pc, #52]	@ (8002758 <BSP_JOY_Init+0x174>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	b25b      	sxtb	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fe72 	bl	8003412 <HAL_NVIC_EnableIRQ>
  for(joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 800272e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002732:	3301      	adds	r3, #1
 8002734:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002738:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800273c:	2b04      	cmp	r3, #4
 800273e:	f67f af5a 	bls.w	80025f6 <BSP_JOY_Init+0x12>
    }
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3738      	adds	r7, #56	@ 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	0800a8a4 	.word	0x0800a8a4
 8002754:	2000007c 	.word	0x2000007c
 8002758:	0800a8b0 	.word	0x0800a8b0

0800275c <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
JOYState_TypeDef BSP_JOY_GetState(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  JOYState_TypeDef joykey;

  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8002762:	2300      	movs	r3, #0
 8002764:	71fb      	strb	r3, [r7, #7]
 8002766:	e013      	b.n	8002790 <BSP_JOY_GetState+0x34>
  {
    if (HAL_GPIO_ReadPin(JOY_PORT[joykey], JOY_PIN[joykey]) != GPIO_PIN_RESET)
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <BSP_JOY_GetState+0x44>)
 800276c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	490c      	ldr	r1, [pc, #48]	@ (80027a4 <BSP_JOY_GetState+0x48>)
 8002774:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 fff8 	bl	8003770 <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <BSP_JOY_GetState+0x2e>
    {
      /* Return Code Joystick key pressed */
      return joykey;
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	e006      	b.n	8002798 <BSP_JOY_GetState+0x3c>
  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	3301      	adds	r3, #1
 800278e:	71fb      	strb	r3, [r7, #7]
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d9e8      	bls.n	8002768 <BSP_JOY_GetState+0xc>
    }
  }

  /* No Joystick key pressed */
  return JOY_NONE;
 8002796:	2305      	movs	r3, #5
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000007c 	.word	0x2000007c
 80027a4:	0800a8a4 	.word	0x0800a8a4

080027a8 <FMC_BANK1_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK1 MSP.
  */
static void FMC_BANK1_MspInit(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	@ 0x28
 80027ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b6:	4a2d      	ldr	r2, [pc, #180]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80027be:	4b2b      	ldr	r3, [pc, #172]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b27      	ldr	r3, [pc, #156]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	4a26      	ldr	r2, [pc, #152]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027d4:	f043 0308 	orr.w	r3, r3, #8
 80027d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027da:	4b24      	ldr	r3, [pc, #144]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b20      	ldr	r3, [pc, #128]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a1f      	ldr	r2, [pc, #124]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027f0:	f043 0310 	orr.w	r3, r3, #16
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b1d      	ldr	r3, [pc, #116]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b19      	ldr	r3, [pc, #100]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a18      	ldr	r2, [pc, #96]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 800280c:	f043 0320 	orr.w	r3, r3, #32
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b16      	ldr	r3, [pc, #88]	@ (800286c <FMC_BANK1_MspInit+0xc4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002822:	2301      	movs	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 800282a:	230c      	movs	r3, #12
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 800282e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8002832:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	480d      	ldr	r0, [pc, #52]	@ (8002870 <FMC_BANK1_MspInit+0xc8>)
 800283c:	f000 fe04 	bl	8003448 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002840:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002844:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	4809      	ldr	r0, [pc, #36]	@ (8002874 <FMC_BANK1_MspInit+0xcc>)
 800284e:	f000 fdfb 	bl	8003448 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 ;  
 8002852:	2301      	movs	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	4806      	ldr	r0, [pc, #24]	@ (8002878 <FMC_BANK1_MspInit+0xd0>)
 800285e:	f000 fdf3 	bl	8003448 <HAL_GPIO_Init>
}
 8002862:	bf00      	nop
 8002864:	3728      	adds	r7, #40	@ 0x28
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400

0800287c <FMC_BANK1_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
static void FMC_BANK1_Init(void) 
{  
 800287c:	b580      	push	{r7, lr}
 800287e:	b0a2      	sub	sp, #136	@ 0x88
 8002880:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002882:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 8002886:	63bb      	str	r3, [r7, #56]	@ 0x38
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002888:	4b27      	ldr	r3, [pc, #156]	@ (8002928 <FMC_BANK1_Init+0xac>)
 800288a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* Timing for READING */
  sram_timing.AddressSetupTime      = 9;
 800288c:	2309      	movs	r3, #9
 800288e:	61fb      	str	r3, [r7, #28]
  sram_timing.AddressHoldTime       = 1;
 8002890:	2301      	movs	r3, #1
 8002892:	623b      	str	r3, [r7, #32]
  sram_timing.DataSetupTime         = 36;
 8002894:	2324      	movs	r3, #36	@ 0x24
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
  sram_timing.BusTurnAroundDuration = 1;
 8002898:	2301      	movs	r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sram_timing.CLKDivision           = 2;
 800289c:	2302      	movs	r3, #2
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sram_timing.DataLatency           = 2;
 80028a0:	2302      	movs	r3, #2
 80028a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Timing for WRITING*/
  sram_timing_write.AddressSetupTime      = 1;
 80028a8:	2301      	movs	r3, #1
 80028aa:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 7;
 80028b0:	2307      	movs	r3, #7
 80028b2:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  sram_timing_write.CLKDivision           = 2;
 80028b8:	2302      	movs	r3, #2
 80028ba:	613b      	str	r3, [r7, #16]
  sram_timing_write.DataLatency           = 2;
 80028bc:	2302      	movs	r3, #2
 80028be:	617b      	str	r3, [r7, #20]
  sram_timing_write.AccessMode            = FSMC_ACCESS_MODE_A;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	643b      	str	r3, [r7, #64]	@ 0x40
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	647b      	str	r3, [r7, #68]	@ 0x44
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 80028cc:	2300      	movs	r3, #0
 80028ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80028d0:	2310      	movs	r3, #16
 80028d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	653b      	str	r3, [r7, #80]	@ 0x50
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	657b      	str	r3, [r7, #84]	@ 0x54
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	65bb      	str	r3, [r7, #88]	@ 0x58
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 80028e0:	2300      	movs	r3, #0
 80028e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80028e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e8:	663b      	str	r3, [r7, #96]	@ 0x60
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	667b      	str	r3, [r7, #100]	@ 0x64
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 80028ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	673b      	str	r3, [r7, #112]	@ 0x70
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 80028fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002900:	67bb      	str	r3, [r7, #120]	@ 0x78
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002902:	2300      	movs	r3, #0
 8002904:	67fb      	str	r3, [r7, #124]	@ 0x7c
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002906:	2300      	movs	r3, #0
 8002908:	677b      	str	r3, [r7, #116]	@ 0x74
  
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800290a:	f7ff ff4d 	bl	80027a8 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800290e:	463a      	mov	r2, r7
 8002910:	f107 011c 	add.w	r1, r7, #28
 8002914:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fd0b 	bl	8007334 <HAL_SRAM_Init>
}
 800291e:	bf00      	nop
 8002920:	3788      	adds	r7, #136	@ 0x88
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	a0000104 	.word	0xa0000104

0800292c <FMC_BANK1_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK1_WriteData(uint16_t Data) 
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1->RAM = Data;
 8002936:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	8053      	strh	r3, [r2, #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800293e:	f3bf 8f4f 	dsb	sy
}
 8002942:	bf00      	nop
  __DSB();
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <FMC_BANK1_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK1_WriteReg(uint8_t Reg) 
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1->REG = Reg;
 800295a:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800295e:	79fa      	ldrb	r2, [r7, #7]
 8002960:	b292      	uxth	r2, r2
 8002962:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002964:	f3bf 8f4f 	dsb	sy
}
 8002968:	bf00      	nop
  __DSB();
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <FMC_BANK1_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void) 
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  return FMC_BANK1->RAM;
 800297a:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800297e:	885b      	ldrh	r3, [r3, #2]
 8002980:	b29b      	uxth	r3, r3
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8002990:	f7ff ff74 	bl	800287c <FMC_BANK1_Init>
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ffc1 	bl	800292c <FMC_BANK1_WriteData>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ffc6 	bl	8002950 <FMC_BANK1_WriteReg>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 80029d0:	f7ff ffd1 	bl	8002976 <FMC_BANK1_ReadData>
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}

080029da <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fbfa 	bl	80031dc <HAL_Delay>
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80029f4:	2001      	movs	r0, #1
 80029f6:	f000 f803 	bl	8002a00 <BSP_LCD_InitEx>
 80029fa:	4603      	mov	r3, r0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002a0c:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <BSP_LCD_InitEx+0xec>)
 8002a0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a12:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002a14:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <BSP_LCD_InitEx+0xec>)
 8002a16:	4a36      	ldr	r2, [pc, #216]	@ (8002af0 <BSP_LCD_InitEx+0xf0>)
 8002a18:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002a1a:	4b34      	ldr	r3, [pc, #208]	@ (8002aec <BSP_LCD_InitEx+0xec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002a20:	f000 fa74 	bl	8002f0c <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	2120      	movs	r1, #32
 8002a28:	4832      	ldr	r0, [pc, #200]	@ (8002af4 <BSP_LCD_InitEx+0xf4>)
 8002a2a:	f000 feb9 	bl	80037a0 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a34:	4830      	ldr	r0, [pc, #192]	@ (8002af8 <BSP_LCD_InitEx+0xf8>)
 8002a36:	f000 feb3 	bl	80037a0 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002a3a:	2005      	movs	r0, #5
 8002a3c:	f000 fbce 	bl	80031dc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002a40:	2201      	movs	r2, #1
 8002a42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a46:	482c      	ldr	r0, [pc, #176]	@ (8002af8 <BSP_LCD_InitEx+0xf8>)
 8002a48:	f000 feaa 	bl	80037a0 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002a4c:	200a      	movs	r0, #10
 8002a4e:	f000 fbc5 	bl	80031dc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a58:	4827      	ldr	r0, [pc, #156]	@ (8002af8 <BSP_LCD_InitEx+0xf8>)
 8002a5a:	f000 fea1 	bl	80037a0 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002a5e:	2014      	movs	r0, #20
 8002a60:	f000 fbbc 	bl	80031dc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002a64:	2201      	movs	r2, #1
 8002a66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a6a:	4823      	ldr	r0, [pc, #140]	@ (8002af8 <BSP_LCD_InitEx+0xf8>)
 8002a6c:	f000 fe98 	bl	80037a0 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002a70:	200a      	movs	r0, #10
 8002a72:	f000 fbb3 	bl	80031dc <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002a76:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <BSP_LCD_InitEx+0xfc>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b85      	cmp	r3, #133	@ 0x85
 8002a80:	d119      	bne.n	8002ab6 <BSP_LCD_InitEx+0xb6>
  {    
    LcdDrv = &ST7789H2_drv;
 8002a82:	4b1f      	ldr	r3, [pc, #124]	@ (8002b00 <BSP_LCD_InitEx+0x100>)
 8002a84:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <BSP_LCD_InitEx+0xfc>)
 8002a86:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002a88:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <BSP_LCD_InitEx+0x100>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7ff fa6c 	bl	8001f74 <ST7789H2_SetOrientation>
 8002a9c:	e005      	b.n	8002aaa <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d102      	bne.n	8002aaa <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f7ff fa65 	bl	8001f74 <ST7789H2_SetOrientation>
    {
      /* Default landscape orientation is selected */
    }

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002aaa:	4816      	ldr	r0, [pc, #88]	@ (8002b04 <BSP_LCD_InitEx+0x104>)
 8002aac:	f000 f856 	bl	8002b5c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
 8002ab4:	e014      	b.n	8002ae0 <BSP_LCD_InitEx+0xe0>
  }
  else if(ls016b8uy_drv.ReadID() == LS016B8UY_ID)
 8002ab6:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <BSP_LCD_InitEx+0x108>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4798      	blx	r3
 8002abc:	4603      	mov	r3, r0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d10b      	bne.n	8002ae0 <BSP_LCD_InitEx+0xe0>
  {
    LcdDrv = &ls016b8uy_drv;
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <BSP_LCD_InitEx+0x100>)
 8002aca:	4a0f      	ldr	r2, [pc, #60]	@ (8002b08 <BSP_LCD_InitEx+0x108>)
 8002acc:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002ace:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <BSP_LCD_InitEx+0x100>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ad6:	480b      	ldr	r0, [pc, #44]	@ (8002b04 <BSP_LCD_InitEx+0x104>)
 8002ad8:	f000 f840 	bl	8002b5c <BSP_LCD_SetFont>
    
    ret = LCD_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000184 	.word	0x20000184
 8002af0:	20000090 	.word	0x20000090
 8002af4:	40021400 	.word	0x40021400
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	20000040 	.word	0x20000040
 8002b00:	20000190 	.word	0x20000190
 8002b04:	20000098 	.word	0x20000098
 8002b08:	20000004 	.word	0x20000004

08002b0c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.   
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002b10:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <BSP_LCD_GetXSize+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	4798      	blx	r3
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000190 	.word	0x20000190

08002b24 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <BSP_LCD_GetYSize+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	4798      	blx	r3
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000190 	.word	0x20000190

08002b3c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	4a03      	ldr	r2, [pc, #12]	@ (8002b58 <BSP_LCD_SetTextColor+0x1c>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	20000184 	.word	0x20000184

08002b5c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002b64:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <BSP_LCD_SetFont+0x1c>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6093      	str	r3, [r2, #8]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000184 	.word	0x20000184

08002b7c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8002b80:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <BSP_LCD_GetFont+0x14>)
 8002b82:	689b      	ldr	r3, [r3, #8]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000184 	.word	0x20000184

08002b94 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002ba6:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <BSP_LCD_Clear+0x68>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <BSP_LCD_Clear+0x68>)
 8002bb0:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8002bb2:	f7ff ffb7 	bl	8002b24 <BSP_LCD_GetYSize>
 8002bb6:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e00d      	b.n	8002bda <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	b29c      	uxth	r4, r3
 8002bc2:	f7ff ffa3 	bl	8002b0c <BSP_LCD_GetXSize>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4621      	mov	r1, r4
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f000 f938 	bl	8002e44 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d3ed      	bcc.n	8002bbe <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8002be2:	4a06      	ldr	r2, [pc, #24]	@ (8002bfc <BSP_LCD_Clear+0x68>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <BSP_LCD_Clear+0x68>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ffa4 	bl	8002b3c <BSP_LCD_SetTextColor>
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}
 8002bfc:	20000184 	.word	0x20000184

08002c00 <BSP_LCD_ClearStringLine>:
  *            @arg  0..9: if the Current fonts is Font16x24
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  */
void BSP_LCD_ClearStringLine(uint16_t Line)
{ 
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
  uint32_t color_backup = DrawProp.TextColor; 
 8002c0a:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <BSP_LCD_ClearStringLine+0x58>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = DrawProp.BackColor;;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <BSP_LCD_ClearStringLine+0x58>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <BSP_LCD_ClearStringLine+0x58>)
 8002c16:	6013      	str	r3, [r2, #0]
    
  /* Draw a rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp.pFont->Height), BSP_LCD_GetXSize(), DrawProp.pFont->Height);
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <BSP_LCD_ClearStringLine+0x58>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	88db      	ldrh	r3, [r3, #6]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	fb12 f303 	smulbb	r3, r2, r3
 8002c24:	b29c      	uxth	r4, r3
 8002c26:	f7ff ff71 	bl	8002b0c <BSP_LCD_GetXSize>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <BSP_LCD_ClearStringLine+0x58>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	88db      	ldrh	r3, [r3, #6]
 8002c34:	4621      	mov	r1, r4
 8002c36:	2000      	movs	r0, #0
 8002c38:	f000 f93e 	bl	8002eb8 <BSP_LCD_FillRect>
  
  DrawProp.TextColor = color_backup;
 8002c3c:	4a06      	ldr	r2, [pc, #24]	@ (8002c58 <BSP_LCD_ClearStringLine+0x58>)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002c42:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <BSP_LCD_ClearStringLine+0x58>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff77 	bl	8002b3c <BSP_LCD_SetTextColor>
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000184 	.word	0x20000184

08002c5c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *         This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
 8002c66:	460b      	mov	r3, r1
 8002c68:	80bb      	strh	r3, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <BSP_LCD_DisplayChar+0x50>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002c78:	490c      	ldr	r1, [pc, #48]	@ (8002cac <BSP_LCD_DisplayChar+0x50>)
 8002c7a:	6889      	ldr	r1, [r1, #8]
 8002c7c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002c7e:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <BSP_LCD_DisplayChar+0x50>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	889b      	ldrh	r3, [r3, #4]
 8002c88:	3307      	adds	r3, #7
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da00      	bge.n	8002c90 <BSP_LCD_DisplayChar+0x34>
 8002c8e:	3307      	adds	r3, #7
 8002c90:	10db      	asrs	r3, r3, #3
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002c96:	441a      	add	r2, r3
 8002c98:	88b9      	ldrh	r1, [r7, #4]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f991 	bl	8002fc4 <DrawChar>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000184 	.word	0x20000184

08002cb0 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b089      	sub	sp, #36	@ 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60ba      	str	r2, [r7, #8]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	81fb      	strh	r3, [r7, #14]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	81bb      	strh	r3, [r7, #12]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	83fb      	strh	r3, [r7, #30]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002cda:	e002      	b.n	8002ce2 <BSP_LCD_DisplayStringAt+0x32>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	617a      	str	r2, [r7, #20]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f6      	bne.n	8002cdc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002cee:	f7ff ff0d 	bl	8002b0c <BSP_LCD_GetXSize>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b38      	ldr	r3, [pc, #224]	@ (8002dd8 <BSP_LCD_DisplayStringAt+0x128>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	889b      	ldrh	r3, [r3, #4]
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d014      	beq.n	8002d30 <BSP_LCD_DisplayStringAt+0x80>
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	dc23      	bgt.n	8002d52 <BSP_LCD_DisplayStringAt+0xa2>
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d002      	beq.n	8002d14 <BSP_LCD_DisplayStringAt+0x64>
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d011      	beq.n	8002d36 <BSP_LCD_DisplayStringAt+0x86>
 8002d12:	e01e      	b.n	8002d52 <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd8 <BSP_LCD_DisplayStringAt+0x128>)
 8002d1c:	6892      	ldr	r2, [r2, #8]
 8002d1e:	8892      	ldrh	r2, [r2, #4]
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	89fb      	ldrh	r3, [r7, #14]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	83fb      	strh	r3, [r7, #30]
      break;
 8002d2e:	e013      	b.n	8002d58 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	83fb      	strh	r3, [r7, #30]
      break;
 8002d34:	e010      	b.n	8002d58 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <BSP_LCD_DisplayStringAt+0x128>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	889b      	ldrh	r3, [r3, #4]
 8002d44:	fb12 f303 	smulbb	r3, r2, r3
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	89fb      	ldrh	r3, [r7, #14]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	83fb      	strh	r3, [r7, #30]
      break;
 8002d50:	e002      	b.n	8002d58 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8002d52:	89fb      	ldrh	r3, [r7, #14]
 8002d54:	83fb      	strh	r3, [r7, #30]
      break;
 8002d56:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002d58:	8bfb      	ldrh	r3, [r7, #30]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <BSP_LCD_DisplayStringAt+0xb6>
 8002d5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da15      	bge.n	8002d92 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002d6a:	e012      	b.n	8002d92 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	89b9      	ldrh	r1, [r7, #12]
 8002d72:	8bfb      	ldrh	r3, [r7, #30]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff71 	bl	8002c5c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002d7a:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <BSP_LCD_DisplayStringAt+0x128>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	889a      	ldrh	r2, [r3, #4]
 8002d80:	8bfb      	ldrh	r3, [r7, #30]
 8002d82:	4413      	add	r3, r2
 8002d84:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60bb      	str	r3, [r7, #8]
    i++;
 8002d8c:	8bbb      	ldrh	r3, [r7, #28]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bf14      	ite	ne
 8002d9a:	2301      	movne	r3, #1
 8002d9c:	2300      	moveq	r3, #0
 8002d9e:	b2dc      	uxtb	r4, r3
 8002da0:	f7ff feb4 	bl	8002b0c <BSP_LCD_GetXSize>
 8002da4:	4601      	mov	r1, r0
 8002da6:	8bbb      	ldrh	r3, [r7, #28]
 8002da8:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd8 <BSP_LCD_DisplayStringAt+0x128>)
 8002daa:	6892      	ldr	r2, [r2, #8]
 8002dac:	8892      	ldrh	r2, [r2, #4]
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	1acb      	subs	r3, r1, r3
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	4a08      	ldr	r2, [pc, #32]	@ (8002dd8 <BSP_LCD_DisplayStringAt+0x128>)
 8002db8:	6892      	ldr	r2, [r2, #8]
 8002dba:	8892      	ldrh	r2, [r2, #4]
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf2c      	ite	cs
 8002dc0:	2301      	movcs	r3, #1
 8002dc2:	2300      	movcc	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4023      	ands	r3, r4
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ce      	bne.n	8002d6c <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	3724      	adds	r7, #36	@ 0x24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	20000184 	.word	0x20000184

08002ddc <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002de8:	f7ff fec8 	bl	8002b7c <BSP_LCD_GetFont>
 8002dec:	4603      	mov	r3, r0
 8002dee:	88db      	ldrh	r3, [r3, #6]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	fb12 f303 	smulbb	r3, r2, r3
 8002df6:	b299      	uxth	r1, r3
 8002df8:	2303      	movs	r3, #3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7ff ff57 	bl	8002cb0 <BSP_LCD_DisplayStringAt>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
 8002e16:	460b      	mov	r3, r1
 8002e18:	80bb      	strh	r3, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002e1e:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <BSP_LCD_DrawPixel+0x34>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d006      	beq.n	8002e36 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002e28:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <BSP_LCD_DrawPixel+0x34>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	88b9      	ldrh	r1, [r7, #4]
 8002e32:	88f8      	ldrh	r0, [r7, #6]
 8002e34:	4798      	blx	r3
  }
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000190 	.word	0x20000190

08002e44 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	80bb      	strh	r3, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <BSP_LCD_DrawHLine+0x6c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002e64:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <BSP_LCD_DrawHLine+0x6c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a1c      	ldr	r4, [r3, #32]
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <BSP_LCD_DrawHLine+0x70>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	b298      	uxth	r0, r3
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	88ba      	ldrh	r2, [r7, #4]
 8002e74:	88f9      	ldrh	r1, [r7, #6]
 8002e76:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002e78:	e015      	b.n	8002ea6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e00e      	b.n	8002e9e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	4413      	add	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <BSP_LCD_DrawHLine+0x70>)
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	88b9      	ldrh	r1, [r7, #4]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ffba 	bl	8002e0c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d3ec      	bcc.n	8002e80 <BSP_LCD_DrawHLine+0x3c>
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000190 	.word	0x20000190
 8002eb4:	20000184 	.word	0x20000184

08002eb8 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	80fb      	strh	r3, [r7, #6]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80bb      	strh	r3, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	807b      	strh	r3, [r7, #2]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <BSP_LCD_FillRect+0x50>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fe2d 	bl	8002b3c <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	80ba      	strh	r2, [r7, #4]
 8002ee8:	887a      	ldrh	r2, [r7, #2]
 8002eea:	88f8      	ldrh	r0, [r7, #6]
 8002eec:	4619      	mov	r1, r3
 8002eee:	f7ff ffa9 	bl	8002e44 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8002ef2:	883b      	ldrh	r3, [r7, #0]
 8002ef4:	1e5a      	subs	r2, r3, #1
 8002ef6:	803a      	strh	r2, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f2      	bne.n	8002ee2 <BSP_LCD_FillRect+0x2a>
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000184 	.word	0x20000184

08002f0c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b27      	ldr	r3, [pc, #156]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4a26      	ldr	r2, [pc, #152]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f1c:	f043 0308 	orr.w	r3, r3, #8
 8002f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f22:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f54:	f043 0320 	orr.w	r3, r3, #32
 8002f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5a:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <BSP_LCD_MspInit+0xa8>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002f66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002f70:	2302      	movs	r3, #2
 8002f72:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f74:	2301      	movs	r3, #1
 8002f76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480e      	ldr	r0, [pc, #56]	@ (8002fb8 <BSP_LCD_MspInit+0xac>)
 8002f80:	f000 fa62 	bl	8003448 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8002f84:	2310      	movs	r3, #16
 8002f86:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	4619      	mov	r1, r3
 8002f92:	480a      	ldr	r0, [pc, #40]	@ (8002fbc <BSP_LCD_MspInit+0xb0>)
 8002f94:	f000 fa58 	bl	8003448 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002f98:	2320      	movs	r3, #32
 8002f9a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4806      	ldr	r0, [pc, #24]	@ (8002fc0 <BSP_LCD_MspInit+0xb4>)
 8002fa8:	f000 fa4e 	bl	8003448 <HAL_GPIO_Init>
}
 8002fac:	bf00      	nop
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	40021800 	.word	0x40021800
 8002fc0:	40021400 	.word	0x40021400

08002fc4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	603a      	str	r2, [r7, #0]
 8002fce:	80fb      	strh	r3, [r7, #6]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8002fdc:	4b45      	ldr	r3, [pc, #276]	@ (80030f4 <DrawChar+0x130>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	88db      	ldrh	r3, [r3, #6]
 8002fe2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8002fe4:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <DrawChar+0x130>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	889b      	ldrh	r3, [r3, #4]
 8002fea:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002fec:	8a3b      	ldrh	r3, [r7, #16]
 8002fee:	3307      	adds	r3, #7
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da00      	bge.n	8002ff6 <DrawChar+0x32>
 8002ff4:	3307      	adds	r3, #7
 8002ff6:	10db      	asrs	r3, r3, #3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	8a3b      	ldrh	r3, [r7, #16]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e069      	b.n	80030e0 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800300c:	8a3b      	ldrh	r3, [r7, #16]
 800300e:	3307      	adds	r3, #7
 8003010:	2b00      	cmp	r3, #0
 8003012:	da00      	bge.n	8003016 <DrawChar+0x52>
 8003014:	3307      	adds	r3, #7
 8003016:	10db      	asrs	r3, r3, #3
 8003018:	461a      	mov	r2, r3
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	4413      	add	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003026:	8a3b      	ldrh	r3, [r7, #16]
 8003028:	3307      	adds	r3, #7
 800302a:	2b00      	cmp	r3, #0
 800302c:	da00      	bge.n	8003030 <DrawChar+0x6c>
 800302e:	3307      	adds	r3, #7
 8003030:	10db      	asrs	r3, r3, #3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d002      	beq.n	800303c <DrawChar+0x78>
 8003036:	2b02      	cmp	r3, #2
 8003038:	d004      	beq.n	8003044 <DrawChar+0x80>
 800303a:	e00c      	b.n	8003056 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	617b      	str	r3, [r7, #20]
      break;    
 8003042:	e016      	b.n	8003072 <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	3201      	adds	r2, #1
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
      break;
 8003054:	e00d      	b.n	8003072 <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	041a      	lsls	r2, r3, #16
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3301      	adds	r3, #1
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	4313      	orrs	r3, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	3202      	adds	r2, #2
 800306a:	7812      	ldrb	r2, [r2, #0]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
      break;
 8003070:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	e029      	b.n	80030cc <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003078:	8a3a      	ldrh	r2, [r7, #16]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	1ad2      	subs	r2, r2, r3
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	4413      	add	r3, r2
 8003082:	3b01      	subs	r3, #1
 8003084:	2201      	movs	r2, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	461a      	mov	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00c      	beq.n	80030ae <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	b29a      	uxth	r2, r3
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	4413      	add	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	4a15      	ldr	r2, [pc, #84]	@ (80030f4 <DrawChar+0x130>)
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	b292      	uxth	r2, r2
 80030a4:	88b9      	ldrh	r1, [r7, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff feb0 	bl	8002e0c <BSP_LCD_DrawPixel>
 80030ac:	e00b      	b.n	80030c6 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	4413      	add	r3, r2
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4a0e      	ldr	r2, [pc, #56]	@ (80030f4 <DrawChar+0x130>)
 80030ba:	6852      	ldr	r2, [r2, #4]
 80030bc:	b292      	uxth	r2, r2
 80030be:	88b9      	ldrh	r1, [r7, #4]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fea3 	bl	8002e0c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	3301      	adds	r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	8a3b      	ldrh	r3, [r7, #16]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d3d1      	bcc.n	8003078 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 80030d4:	88bb      	ldrh	r3, [r7, #4]
 80030d6:	3301      	adds	r3, #1
 80030d8:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3301      	adds	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	8a7b      	ldrh	r3, [r7, #18]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d391      	bcc.n	800300c <DrawChar+0x48>
  }
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000184 	.word	0x20000184

080030f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <HAL_Init+0x40>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0d      	ldr	r2, [pc, #52]	@ (8003138 <HAL_Init+0x40>)
 8003102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_Init+0x40>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <HAL_Init+0x40>)
 800310e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <HAL_Init+0x40>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a07      	ldr	r2, [pc, #28]	@ (8003138 <HAL_Init+0x40>)
 800311a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003120:	2003      	movs	r0, #3
 8003122:	f000 f94f 	bl	80033c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003126:	2000      	movs	r0, #0
 8003128:	f000 f808 	bl	800313c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800312c:	f7fd fd72 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00

0800313c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003144:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <HAL_InitTick+0x54>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_InitTick+0x58>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003152:	fbb3 f3f1 	udiv	r3, r3, r1
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f967 	bl	800342e <HAL_SYSTICK_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e00e      	b.n	8003188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0f      	cmp	r3, #15
 800316e:	d80a      	bhi.n	8003186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003170:	2200      	movs	r2, #0
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	f000 f92f 	bl	80033da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800317c:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <HAL_InitTick+0x5c>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000000 	.word	0x20000000
 8003194:	200000a4 	.word	0x200000a4
 8003198:	200000a0 	.word	0x200000a0

0800319c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_IncTick+0x20>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_IncTick+0x24>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <HAL_IncTick+0x24>)
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200000a4 	.word	0x200000a4
 80031c0:	20000194 	.word	0x20000194

080031c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return uwTick;
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <HAL_GetTick+0x14>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000194 	.word	0x20000194

080031dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f7ff ffee 	bl	80031c4 <HAL_GetTick>
 80031e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d005      	beq.n	8003202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_Delay+0x44>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003202:	bf00      	nop
 8003204:	f7ff ffde 	bl	80031c4 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	d8f7      	bhi.n	8003204 <HAL_Delay+0x28>
  {
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200000a4 	.word	0x200000a4

08003224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003234:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003240:	4013      	ands	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800324c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003256:	4a04      	ldr	r2, [pc, #16]	@ (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	60d3      	str	r3, [r2, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003270:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <__NVIC_GetPriorityGrouping+0x18>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 0307 	and.w	r3, r3, #7
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	db0b      	blt.n	80032b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	4907      	ldr	r1, [pc, #28]	@ (80032c0 <__NVIC_EnableIRQ+0x38>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2001      	movs	r0, #1
 80032aa:	fa00 f202 	lsl.w	r2, r0, r2
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000e100 	.word	0xe000e100

080032c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	db0a      	blt.n	80032ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	490c      	ldr	r1, [pc, #48]	@ (8003310 <__NVIC_SetPriority+0x4c>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	0112      	lsls	r2, r2, #4
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	440b      	add	r3, r1
 80032e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ec:	e00a      	b.n	8003304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4908      	ldr	r1, [pc, #32]	@ (8003314 <__NVIC_SetPriority+0x50>)
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	3b04      	subs	r3, #4
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	440b      	add	r3, r1
 8003302:	761a      	strb	r2, [r3, #24]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000e100 	.word	0xe000e100
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	@ 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f1c3 0307 	rsb	r3, r3, #7
 8003332:	2b04      	cmp	r3, #4
 8003334:	bf28      	it	cs
 8003336:	2304      	movcs	r3, #4
 8003338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3304      	adds	r3, #4
 800333e:	2b06      	cmp	r3, #6
 8003340:	d902      	bls.n	8003348 <NVIC_EncodePriority+0x30>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3b03      	subs	r3, #3
 8003346:	e000      	b.n	800334a <NVIC_EncodePriority+0x32>
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	f04f 32ff 	mov.w	r2, #4294967295
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	401a      	ands	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003360:	f04f 31ff 	mov.w	r1, #4294967295
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	43d9      	mvns	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	4313      	orrs	r3, r2
         );
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	@ 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003390:	d301      	bcc.n	8003396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003392:	2301      	movs	r3, #1
 8003394:	e00f      	b.n	80033b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003396:	4a0a      	ldr	r2, [pc, #40]	@ (80033c0 <SysTick_Config+0x40>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339e:	210f      	movs	r1, #15
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f7ff ff8e 	bl	80032c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <SysTick_Config+0x40>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ae:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <SysTick_Config+0x40>)
 80033b0:	2207      	movs	r2, #7
 80033b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	e000e010 	.word	0xe000e010

080033c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff29 	bl	8003224 <__NVIC_SetPriorityGrouping>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ec:	f7ff ff3e 	bl	800326c <__NVIC_GetPriorityGrouping>
 80033f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f7ff ff8e 	bl	8003318 <NVIC_EncodePriority>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff5d 	bl	80032c4 <__NVIC_SetPriority>
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff31 	bl	8003288 <__NVIC_EnableIRQ>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffa2 	bl	8003380 <SysTick_Config>
 800343c:	4603      	mov	r3, r0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	@ 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	e165      	b.n	8003730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003464:	2201      	movs	r2, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	429a      	cmp	r2, r3
 800347e:	f040 8154 	bne.w	800372a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d005      	beq.n	800349a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003496:	2b02      	cmp	r3, #2
 8003498:	d130      	bne.n	80034fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2203      	movs	r2, #3
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d0:	2201      	movs	r2, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 0201 	and.w	r2, r3, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b03      	cmp	r3, #3
 8003506:	d017      	beq.n	8003538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d123      	bne.n	800358c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	08da      	lsrs	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3208      	adds	r2, #8
 800354c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	220f      	movs	r2, #15
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	08da      	lsrs	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3208      	adds	r2, #8
 8003586:	69b9      	ldr	r1, [r7, #24]
 8003588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	2203      	movs	r2, #3
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80ae 	beq.w	800372a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003748 <HAL_GPIO_Init+0x300>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003748 <HAL_GPIO_Init+0x300>)
 80035d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035de:	4b5a      	ldr	r3, [pc, #360]	@ (8003748 <HAL_GPIO_Init+0x300>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ea:	4a58      	ldr	r2, [pc, #352]	@ (800374c <HAL_GPIO_Init+0x304>)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	220f      	movs	r2, #15
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	@ (8003750 <HAL_GPIO_Init+0x308>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d025      	beq.n	8003662 <HAL_GPIO_Init+0x21a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4e      	ldr	r2, [pc, #312]	@ (8003754 <HAL_GPIO_Init+0x30c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01f      	beq.n	800365e <HAL_GPIO_Init+0x216>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4d      	ldr	r2, [pc, #308]	@ (8003758 <HAL_GPIO_Init+0x310>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d019      	beq.n	800365a <HAL_GPIO_Init+0x212>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4c      	ldr	r2, [pc, #304]	@ (800375c <HAL_GPIO_Init+0x314>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_GPIO_Init+0x20e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4b      	ldr	r2, [pc, #300]	@ (8003760 <HAL_GPIO_Init+0x318>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00d      	beq.n	8003652 <HAL_GPIO_Init+0x20a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4a      	ldr	r2, [pc, #296]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <HAL_GPIO_Init+0x206>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a49      	ldr	r2, [pc, #292]	@ (8003768 <HAL_GPIO_Init+0x320>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_GPIO_Init+0x202>
 8003646:	2306      	movs	r3, #6
 8003648:	e00c      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 800364a:	2307      	movs	r3, #7
 800364c:	e00a      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 800364e:	2305      	movs	r3, #5
 8003650:	e008      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 8003652:	2304      	movs	r3, #4
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 8003656:	2303      	movs	r3, #3
 8003658:	e004      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 800365a:	2302      	movs	r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 8003662:	2300      	movs	r3, #0
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4093      	lsls	r3, r2
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003674:	4935      	ldr	r1, [pc, #212]	@ (800374c <HAL_GPIO_Init+0x304>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003682:	4b3a      	ldr	r3, [pc, #232]	@ (800376c <HAL_GPIO_Init+0x324>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036a6:	4a31      	ldr	r2, [pc, #196]	@ (800376c <HAL_GPIO_Init+0x324>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ac:	4b2f      	ldr	r3, [pc, #188]	@ (800376c <HAL_GPIO_Init+0x324>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d0:	4a26      	ldr	r2, [pc, #152]	@ (800376c <HAL_GPIO_Init+0x324>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036d6:	4b25      	ldr	r3, [pc, #148]	@ (800376c <HAL_GPIO_Init+0x324>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036fa:	4a1c      	ldr	r2, [pc, #112]	@ (800376c <HAL_GPIO_Init+0x324>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003700:	4b1a      	ldr	r3, [pc, #104]	@ (800376c <HAL_GPIO_Init+0x324>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003724:	4a11      	ldr	r2, [pc, #68]	@ (800376c <HAL_GPIO_Init+0x324>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3301      	adds	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	f67f ae96 	bls.w	8003464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3724      	adds	r7, #36	@ 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	40013800 	.word	0x40013800
 8003750:	40020000 	.word	0x40020000
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40021400 	.word	0x40021400
 8003768:	40021800 	.word	0x40021800
 800376c:	40013c00 	.word	0x40013c00

08003770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	887b      	ldrh	r3, [r7, #2]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e001      	b.n	8003792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	807b      	strh	r3, [r7, #2]
 80037ac:	4613      	mov	r3, r2
 80037ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b0:	787b      	ldrb	r3, [r7, #1]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037bc:	e003      	b.n	80037c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037be:	887b      	ldrh	r3, [r7, #2]
 80037c0:	041a      	lsls	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	619a      	str	r2, [r3, #24]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80037d2:	b590      	push	{r4, r7, lr}
 80037d4:	b08b      	sub	sp, #44	@ 0x2c
 80037d6:	af04      	add	r7, sp, #16
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	4608      	mov	r0, r1
 80037dc:	4611      	mov	r1, r2
 80037de:	461a      	mov	r2, r3
 80037e0:	4603      	mov	r3, r0
 80037e2:	70fb      	strb	r3, [r7, #3]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70bb      	strb	r3, [r7, #2]
 80037e8:	4613      	mov	r3, r2
 80037ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80037ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80037ee:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_HCD_HC_Init+0x2c>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e09d      	b.n	800393a <HAL_HCD_HC_Init+0x168>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3319      	adds	r3, #25
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3314      	adds	r3, #20
 800382a:	787a      	ldrb	r2, [r7, #1]
 800382c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3315      	adds	r3, #21
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3326      	adds	r3, #38	@ 0x26
 8003852:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	78bb      	ldrb	r3, [r7, #2]
 800385c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003860:	b2d8      	uxtb	r0, r3
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	3316      	adds	r3, #22
 8003870:	4602      	mov	r2, r0
 8003872:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fb82 	bl	8003f82 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800387e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003882:	2b00      	cmp	r3, #0
 8003884:	da0a      	bge.n	800389c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3317      	adds	r3, #23
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e009      	b.n	80038b0 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3317      	adds	r3, #23
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 f897 	bl	80079e8 <USB_GetHostSpeed>
 80038ba:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80038bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d10b      	bne.n	80038dc <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80038c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_HCD_HC_Init+0x10a>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2bbc      	cmp	r3, #188	@ 0xbc
 80038d6:	d901      	bls.n	80038dc <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80038d8:	23bc      	movs	r3, #188	@ 0xbc
 80038da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	3318      	adds	r3, #24
 80038ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80038f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	b298      	uxth	r0, r3
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	3328      	adds	r3, #40	@ 0x28
 8003906:	4602      	mov	r2, r0
 8003908:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	b29b      	uxth	r3, r3
 8003912:	787c      	ldrb	r4, [r7, #1]
 8003914:	78ba      	ldrb	r2, [r7, #2]
 8003916:	78f9      	ldrb	r1, [r7, #3]
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4623      	mov	r3, r4
 8003928:	f004 f876 	bl	8007a18 <USB_HC_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}
	...

08003944 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	4608      	mov	r0, r1
 800394e:	4611      	mov	r1, r2
 8003950:	461a      	mov	r2, r3
 8003952:	4603      	mov	r3, r0
 8003954:	70fb      	strb	r3, [r7, #3]
 8003956:	460b      	mov	r3, r1
 8003958:	70bb      	strb	r3, [r7, #2]
 800395a:	4613      	mov	r3, r2
 800395c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3317      	adds	r3, #23
 800396e:	78ba      	ldrb	r2, [r7, #2]
 8003970:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3326      	adds	r3, #38	@ 0x26
 8003982:	787a      	ldrb	r2, [r7, #1]
 8003984:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003986:	7c3b      	ldrb	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d114      	bne.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	332a      	adds	r3, #42	@ 0x2a
 800399c:	2203      	movs	r2, #3
 800399e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3319      	adds	r3, #25
 80039b0:	7f3a      	ldrb	r2, [r7, #28]
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e009      	b.n	80039ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	332a      	adds	r3, #42	@ 0x2a
 80039c6:	2202      	movs	r2, #2
 80039c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80039ca:	787b      	ldrb	r3, [r7, #1]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	f200 8102 	bhi.w	8003bd6 <HAL_HCD_HC_SubmitRequest+0x292>
 80039d2:	a201      	add	r2, pc, #4	@ (adr r2, 80039d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	08003bc1 	.word	0x08003bc1
 80039e0:	08003aad 	.word	0x08003aad
 80039e4:	08003b37 	.word	0x08003b37
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80039e8:	7c3b      	ldrb	r3, [r7, #16]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	f040 80f5 	bne.w	8003bda <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80039f0:	78bb      	ldrb	r3, [r7, #2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d12d      	bne.n	8003a52 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80039f6:	8b3b      	ldrh	r3, [r7, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	333d      	adds	r3, #61	@ 0x3d
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	333d      	adds	r3, #61	@ 0x3d
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	332a      	adds	r3, #42	@ 0x2a
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003a3a:	e0ce      	b.n	8003bda <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	332a      	adds	r3, #42	@ 0x2a
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	701a      	strb	r2, [r3, #0]
      break;
 8003a50:	e0c3      	b.n	8003bda <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	331a      	adds	r3, #26
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 80b8 	bne.w	8003bda <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	333c      	adds	r3, #60	@ 0x3c
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	332a      	adds	r3, #42	@ 0x2a
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
      break;
 8003a94:	e0a1      	b.n	8003bda <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	332a      	adds	r3, #42	@ 0x2a
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	701a      	strb	r2, [r3, #0]
      break;
 8003aaa:	e096      	b.n	8003bda <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003aac:	78bb      	ldrb	r3, [r7, #2]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d120      	bne.n	8003af4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	333d      	adds	r3, #61	@ 0x3d
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	332a      	adds	r3, #42	@ 0x2a
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003adc:	e07e      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	332a      	adds	r3, #42	@ 0x2a
 8003aee:	2202      	movs	r2, #2
 8003af0:	701a      	strb	r2, [r3, #0]
      break;
 8003af2:	e073      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	333c      	adds	r3, #60	@ 0x3c
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	332a      	adds	r3, #42	@ 0x2a
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
      break;
 8003b1e:	e05d      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	332a      	adds	r3, #42	@ 0x2a
 8003b30:	2202      	movs	r2, #2
 8003b32:	701a      	strb	r2, [r3, #0]
      break;
 8003b34:	e052      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b36:	78bb      	ldrb	r3, [r7, #2]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d120      	bne.n	8003b7e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	333d      	adds	r3, #61	@ 0x3d
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	332a      	adds	r3, #42	@ 0x2a
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b66:	e039      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	332a      	adds	r3, #42	@ 0x2a
 8003b78:	2202      	movs	r2, #2
 8003b7a:	701a      	strb	r2, [r3, #0]
      break;
 8003b7c:	e02e      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	333c      	adds	r3, #60	@ 0x3c
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	332a      	adds	r3, #42	@ 0x2a
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
      break;
 8003ba8:	e018      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	332a      	adds	r3, #42	@ 0x2a
 8003bba:	2202      	movs	r2, #2
 8003bbc:	701a      	strb	r2, [r3, #0]
      break;
 8003bbe:	e00d      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	332a      	adds	r3, #42	@ 0x2a
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
      break;
 8003bd4:	e002      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003bda:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	332c      	adds	r3, #44	@ 0x2c
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	8b39      	ldrh	r1, [r7, #24]
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4403      	add	r3, r0
 8003c00:	3334      	adds	r3, #52	@ 0x34
 8003c02:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	334c      	adds	r3, #76	@ 0x4c
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3338      	adds	r3, #56	@ 0x38
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	3315      	adds	r3, #21
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	334d      	adds	r3, #77	@ 0x4d
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	3310      	adds	r3, #16
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	1d19      	adds	r1, r3, #4
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	799b      	ldrb	r3, [r3, #6]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f003 ffe8 	bl	8007c44 <USB_HC_StartXfer>
 8003c74:	4603      	mov	r3, r0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop

08003c80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 fdf8 	bl	800788c <USB_GetMode>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	f040 80fb 	bne.w	8003e9a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f003 fdbb 	bl	8007824 <USB_ReadInterrupts>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80f1 	beq.w	8003e98 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 fdb2 	bl	8007824 <USB_ReadInterrupts>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cca:	d104      	bne.n	8003cd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003cd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f003 fda2 	bl	8007824 <USB_ReadInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cea:	d104      	bne.n	8003cf6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003cf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f003 fd92 	bl	8007824 <USB_ReadInterrupts>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d0a:	d104      	bne.n	8003d16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fd82 	bl	8007824 <USB_ReadInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d103      	bne.n	8003d32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f003 fd74 	bl	8007824 <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d46:	d120      	bne.n	8003d8a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003d50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d113      	bne.n	8003d8a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d62:	2110      	movs	r1, #16
 8003d64:	6938      	ldr	r0, [r7, #16]
 8003d66:	f003 fc67 	bl	8007638 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d6a:	6938      	ldr	r0, [r7, #16]
 8003d6c:	f003 fc96 	bl	800769c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7a5b      	ldrb	r3, [r3, #9]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d105      	bne.n	8003d84 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f003 fd92 	bl	80078a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f005 ff23 	bl	8009bd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f003 fd48 	bl	8007824 <USB_ReadInterrupts>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d9e:	d102      	bne.n	8003da6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f001 fd10 	bl	80057c6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 fd3a 	bl	8007824 <USB_ReadInterrupts>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d106      	bne.n	8003dc8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f005 feec 	bl	8009b98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 fd29 	bl	8007824 <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ddc:	d139      	bne.n	8003e52 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 f972 	bl	80080cc <USB_HC_ReadInterrupt>
 8003de8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e025      	b.n	8003e3c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d018      	beq.n	8003e36 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e1a:	d106      	bne.n	8003e2a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8e2 	bl	8003fec <HCD_HC_IN_IRQHandler>
 8003e28:	e005      	b.n	8003e36 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 ff44 	bl	8004cbe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	795b      	ldrb	r3, [r3, #5]
 8003e40:	461a      	mov	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d3d3      	bcc.n	8003df0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 fce4 	bl	8007824 <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d101      	bne.n	8003e6a <HAL_HCD_IRQHandler+0x1ea>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_HCD_IRQHandler+0x1ec>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d014      	beq.n	8003e9a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0210 	bic.w	r2, r2, #16
 8003e7e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f001 fbc1 	bl	8005608 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0210 	orr.w	r2, r2, #16
 8003e94:	619a      	str	r2, [r3, #24]
 8003e96:	e000      	b.n	8003e9a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003e98:	bf00      	nop
    }
  }
}
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_HCD_Start+0x16>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e013      	b.n	8003ede <HAL_HCD_Start+0x3e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f003 fd56 	bl	8007976 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fb90 	bl	80075f4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_HCD_Stop+0x16>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e00d      	b.n	8003f18 <HAL_HCD_Stop+0x32>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 fa10 	bl	800832e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fcf8 	bl	8007922 <USB_ResetPort>
 8003f32:	4603      	mov	r3, r0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	334c      	adds	r3, #76	@ 0x4c
 8003f58:	781b      	ldrb	r3, [r3, #0]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f003 fd38 	bl	80079e8 <USB_GetHostSpeed>
 8003f78:	4603      	mov	r3, r0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	331a      	adds	r3, #26
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	331b      	adds	r3, #27
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3325      	adds	r3, #37	@ 0x25
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3324      	adds	r3, #36	@ 0x24
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f003 fc1d 	bl	800784a <USB_ReadChInterrupts>
 8004010:	4603      	mov	r3, r0
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b04      	cmp	r3, #4
 8004018:	d11a      	bne.n	8004050 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004026:	461a      	mov	r2, r3
 8004028:	2304      	movs	r3, #4
 800402a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	334d      	adds	r3, #77	@ 0x4d
 800403c:	2207      	movs	r2, #7
 800403e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f004 f850 	bl	80080ee <USB_HC_Halt>
 800404e:	e09e      	b.n	800418e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f003 fbf6 	bl	800784a <USB_ReadChInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004068:	d11b      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004076:	461a      	mov	r2, r3
 8004078:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800407c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	334d      	adds	r3, #77	@ 0x4d
 800408e:	2208      	movs	r2, #8
 8004090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f004 f827 	bl	80080ee <USB_HC_Halt>
 80040a0:	e075      	b.n	800418e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 fbcd 	bl	800784a <USB_ReadChInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d11a      	bne.n	80040f0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c6:	461a      	mov	r2, r3
 80040c8:	2308      	movs	r3, #8
 80040ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	2206      	movs	r2, #6
 80040de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	78fa      	ldrb	r2, [r7, #3]
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 f800 	bl	80080ee <USB_HC_Halt>
 80040ee:	e04e      	b.n	800418e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f003 fba6 	bl	800784a <USB_ReadChInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004108:	d11b      	bne.n	8004142 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004116:	461a      	mov	r2, r3
 8004118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800411c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334d      	adds	r3, #77	@ 0x4d
 800412e:	2209      	movs	r2, #9
 8004130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f003 ffd7 	bl	80080ee <USB_HC_Halt>
 8004140:	e025      	b.n	800418e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fb7d 	bl	800784a <USB_ReadChInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004156:	2b80      	cmp	r3, #128	@ 0x80
 8004158:	d119      	bne.n	800418e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004166:	461a      	mov	r2, r3
 8004168:	2380      	movs	r3, #128	@ 0x80
 800416a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	334d      	adds	r3, #77	@ 0x4d
 800417c:	2207      	movs	r2, #7
 800417e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f003 ffb0 	bl	80080ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f003 fb57 	bl	800784a <USB_ReadChInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a6:	d112      	bne.n	80041ce <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f003 ff9c 	bl	80080ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c2:	461a      	mov	r2, r3
 80041c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041c8:	6093      	str	r3, [r2, #8]
 80041ca:	f000 bd75 	b.w	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f003 fb37 	bl	800784a <USB_ReadChInterrupts>
 80041dc:	4603      	mov	r3, r0
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	f040 8128 	bne.w	8004438 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f4:	461a      	mov	r2, r3
 80041f6:	2320      	movs	r3, #32
 80041f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	331b      	adds	r3, #27
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d119      	bne.n	8004244 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	331b      	adds	r3, #27
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	440a      	add	r2, r1
 800423a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800423e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004242:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	799b      	ldrb	r3, [r3, #6]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3330      	adds	r3, #48	@ 0x30
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	1ac9      	subs	r1, r1, r3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4403      	add	r3, r0
 8004280:	3338      	adds	r3, #56	@ 0x38
 8004282:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	334d      	adds	r3, #77	@ 0x4d
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	3344      	adds	r3, #68	@ 0x44
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b8:	461a      	mov	r2, r3
 80042ba:	2301      	movs	r3, #1
 80042bc:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3326      	adds	r3, #38	@ 0x26
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3326      	adds	r3, #38	@ 0x26
 80042e4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d110      	bne.n	800430c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 fefb 	bl	80080ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004304:	461a      	mov	r2, r3
 8004306:	2310      	movs	r3, #16
 8004308:	6093      	str	r3, [r2, #8]
 800430a:	e03d      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3326      	adds	r3, #38	@ 0x26
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d00a      	beq.n	8004338 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	3326      	adds	r3, #38	@ 0x26
 8004332:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004334:	2b01      	cmp	r3, #1
 8004336:	d127      	bne.n	8004388 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	440a      	add	r2, r1
 800434e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004352:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004356:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	334c      	adds	r3, #76	@ 0x4c
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	334c      	adds	r3, #76	@ 0x4c
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f005 fc32 	bl	8009bec <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	799b      	ldrb	r3, [r3, #6]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d13b      	bne.n	8004408 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	3338      	adds	r3, #56	@ 0x38
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4403      	add	r3, r0
 80043b0:	3328      	adds	r3, #40	@ 0x28
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	440b      	add	r3, r1
 80043b6:	1e59      	subs	r1, r3, #1
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4403      	add	r3, r0
 80043c6:	3328      	adds	r3, #40	@ 0x28
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8470 	beq.w	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	333c      	adds	r3, #60	@ 0x3c
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	f083 0301 	eor.w	r3, r3, #1
 80043f0:	b2d8      	uxtb	r0, r3
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	333c      	adds	r3, #60	@ 0x3c
 8004400:	4602      	mov	r2, r0
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	f000 bc58 	b.w	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	333c      	adds	r3, #60	@ 0x3c
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	f083 0301 	eor.w	r3, r3, #1
 8004420:	b2d8      	uxtb	r0, r3
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	333c      	adds	r3, #60	@ 0x3c
 8004430:	4602      	mov	r2, r0
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	f000 bc40 	b.w	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f003 fa02 	bl	800784a <USB_ReadChInterrupts>
 8004446:	4603      	mov	r3, r0
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b20      	cmp	r3, #32
 800444e:	d131      	bne.n	80044b4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445c:	461a      	mov	r2, r3
 800445e:	2320      	movs	r3, #32
 8004460:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	331a      	adds	r3, #26
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	f040 841f 	bne.w	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	331b      	adds	r3, #27
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	334d      	adds	r3, #77	@ 0x4d
 800449e:	2203      	movs	r2, #3
 80044a0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f003 fe1f 	bl	80080ee <USB_HC_Halt>
 80044b0:	f000 bc02 	b.w	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 f9c4 	bl	800784a <USB_ReadChInterrupts>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f040 8305 	bne.w	8004ad8 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044da:	461a      	mov	r2, r3
 80044dc:	2302      	movs	r3, #2
 80044de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	334d      	adds	r3, #77	@ 0x4d
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d114      	bne.n	8004520 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	334d      	adds	r3, #77	@ 0x4d
 8004506:	2202      	movs	r2, #2
 8004508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	334c      	adds	r3, #76	@ 0x4c
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e2cc      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	334d      	adds	r3, #77	@ 0x4d
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b06      	cmp	r3, #6
 8004534:	d114      	bne.n	8004560 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	334d      	adds	r3, #77	@ 0x4d
 8004546:	2202      	movs	r2, #2
 8004548:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	334c      	adds	r3, #76	@ 0x4c
 800455a:	2205      	movs	r2, #5
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e2ac      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	334d      	adds	r3, #77	@ 0x4d
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b07      	cmp	r3, #7
 8004574:	d00b      	beq.n	800458e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	334d      	adds	r3, #77	@ 0x4d
 8004586:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004588:	2b09      	cmp	r3, #9
 800458a:	f040 80a6 	bne.w	80046da <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	334d      	adds	r3, #77	@ 0x4d
 800459e:	2202      	movs	r2, #2
 80045a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3344      	adds	r3, #68	@ 0x44
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1c59      	adds	r1, r3, #1
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4403      	add	r3, r0
 80045c2:	3344      	adds	r3, #68	@ 0x44
 80045c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3344      	adds	r3, #68	@ 0x44
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d943      	bls.n	8004664 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3344      	adds	r3, #68	@ 0x44
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	331a      	adds	r3, #26
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d123      	bne.n	800464e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	331b      	adds	r3, #27
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	331c      	adds	r3, #28
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	440a      	add	r2, r1
 8004644:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	334c      	adds	r3, #76	@ 0x4c
 800465e:	2204      	movs	r2, #4
 8004660:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004662:	e229      	b.n	8004ab8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	334c      	adds	r3, #76	@ 0x4c
 8004674:	2202      	movs	r2, #2
 8004676:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3326      	adds	r3, #38	@ 0x26
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3326      	adds	r3, #38	@ 0x26
 800469e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	f040 8209 	bne.w	8004ab8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d2:	461a      	mov	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046d8:	e1ee      	b.n	8004ab8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	334d      	adds	r3, #77	@ 0x4d
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	f040 80c8 	bne.w	8004882 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	334d      	adds	r3, #77	@ 0x4d
 8004702:	2202      	movs	r2, #2
 8004704:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	331b      	adds	r3, #27
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	f040 81ce 	bne.w	8004aba <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	3326      	adds	r3, #38	@ 0x26
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d16b      	bne.n	800480c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3348      	adds	r3, #72	@ 0x48
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	1c59      	adds	r1, r3, #1
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4403      	add	r3, r0
 8004754:	3348      	adds	r3, #72	@ 0x48
 8004756:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	3348      	adds	r3, #72	@ 0x48
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d943      	bls.n	80047f6 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	3348      	adds	r3, #72	@ 0x48
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	331b      	adds	r3, #27
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	3344      	adds	r3, #68	@ 0x44
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d809      	bhi.n	80047c0 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	331c      	adds	r3, #28
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047de:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	334c      	adds	r3, #76	@ 0x4c
 80047f0:	2204      	movs	r2, #4
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e014      	b.n	8004820 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	334c      	adds	r3, #76	@ 0x4c
 8004806:	2202      	movs	r2, #2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e009      	b.n	8004820 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334c      	adds	r3, #76	@ 0x4c
 800481c:	2202      	movs	r2, #2
 800481e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3326      	adds	r3, #38	@ 0x26
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	3326      	adds	r3, #38	@ 0x26
 8004846:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004848:	2b02      	cmp	r3, #2
 800484a:	f040 8136 	bne.w	8004aba <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004864:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800486c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e11b      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	334d      	adds	r3, #77	@ 0x4d
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b03      	cmp	r3, #3
 8004896:	f040 8081 	bne.w	800499c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	334d      	adds	r3, #77	@ 0x4d
 80048aa:	2202      	movs	r2, #2
 80048ac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048ae:	78fa      	ldrb	r2, [r7, #3]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	331b      	adds	r3, #27
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 80fa 	bne.w	8004aba <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	334c      	adds	r3, #76	@ 0x4c
 80048d6:	2202      	movs	r2, #2
 80048d8:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f8:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	440a      	add	r2, r1
 8004910:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004918:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	440a      	add	r2, r1
 8004930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004934:	f023 0320 	bic.w	r3, r3, #32
 8004938:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	3326      	adds	r3, #38	@ 0x26
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	3326      	adds	r3, #38	@ 0x26
 8004960:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004962:	2b02      	cmp	r3, #2
 8004964:	f040 80a9 	bne.w	8004aba <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800497e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004986:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e08e      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	334d      	adds	r3, #77	@ 0x4d
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d143      	bne.n	8004a3a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049b2:	78fa      	ldrb	r2, [r7, #3]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	334d      	adds	r3, #77	@ 0x4d
 80049c2:	2202      	movs	r2, #2
 80049c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	334c      	adds	r3, #76	@ 0x4c
 80049d6:	2202      	movs	r2, #2
 80049d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3326      	adds	r3, #38	@ 0x26
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	3326      	adds	r3, #38	@ 0x26
 8004a00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d159      	bne.n	8004aba <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a1c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a24:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e03f      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	334d      	adds	r3, #77	@ 0x4d
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d126      	bne.n	8004a9e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	334d      	adds	r3, #77	@ 0x4d
 8004a60:	2202      	movs	r2, #2
 8004a62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	3344      	adds	r3, #68	@ 0x44
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	1c59      	adds	r1, r3, #1
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4403      	add	r3, r0
 8004a84:	3344      	adds	r3, #68	@ 0x44
 8004a86:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	334c      	adds	r3, #76	@ 0x4c
 8004a98:	2204      	movs	r2, #4
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e00d      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	334d      	adds	r3, #77	@ 0x4d
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f000 8100 	beq.w	8004cb6 <HCD_HC_IN_IRQHandler+0xcca>
 8004ab6:	e000      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ab8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	334c      	adds	r3, #76	@ 0x4c
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f005 f88b 	bl	8009bec <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ad6:	e0ef      	b.n	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f002 feb2 	bl	800784a <USB_ReadChInterrupts>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b40      	cmp	r3, #64	@ 0x40
 8004aee:	d12f      	bne.n	8004b50 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	2340      	movs	r3, #64	@ 0x40
 8004b00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	334d      	adds	r3, #77	@ 0x4d
 8004b12:	2205      	movs	r2, #5
 8004b14:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	331a      	adds	r3, #26
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	3344      	adds	r3, #68	@ 0x44
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f003 fad0 	bl	80080ee <USB_HC_Halt>
 8004b4e:	e0b3      	b.n	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f002 fe76 	bl	800784a <USB_ReadChInterrupts>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	f040 80a7 	bne.w	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3326      	adds	r3, #38	@ 0x26
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d11b      	bne.n	8004bb8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3344      	adds	r3, #68	@ 0x44
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	334d      	adds	r3, #77	@ 0x4d
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f003 fa9c 	bl	80080ee <USB_HC_Halt>
 8004bb6:	e03f      	b.n	8004c38 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3326      	adds	r3, #38	@ 0x26
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3326      	adds	r3, #38	@ 0x26
 8004bde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d129      	bne.n	8004c38 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004be4:	78fa      	ldrb	r2, [r7, #3]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3344      	adds	r3, #68	@ 0x44
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	799b      	ldrb	r3, [r3, #6]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HCD_HC_IN_IRQHandler+0xc2a>
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	331b      	adds	r3, #27
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d110      	bne.n	8004c38 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	334d      	adds	r3, #77	@ 0x4d
 8004c26:	2204      	movs	r2, #4
 8004c28:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 fa5b 	bl	80080ee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	331b      	adds	r3, #27
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d129      	bne.n	8004ca2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	331b      	adds	r3, #27
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c80:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c9c:	f043 0320 	orr.w	r3, r3, #32
 8004ca0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	6093      	str	r3, [r2, #8]
 8004cb4:	e000      	b.n	8004cb8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004cb6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f002 fdb4 	bl	800784a <USB_ReadChInterrupts>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d11b      	bne.n	8004d24 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	334d      	adds	r3, #77	@ 0x4d
 8004d0e:	2207      	movs	r2, #7
 8004d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f003 f9e7 	bl	80080ee <USB_HC_Halt>
 8004d20:	f000 bc6f 	b.w	8005602 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f002 fd8c 	bl	800784a <USB_ReadChInterrupts>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	f040 8082 	bne.w	8004e42 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3319      	adds	r3, #25
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d124      	bne.n	8004db0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3319      	adds	r3, #25
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	334c      	adds	r3, #76	@ 0x4c
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	334d      	adds	r3, #77	@ 0x4d
 8004d9e:	2203      	movs	r2, #3
 8004da0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f003 f99f 	bl	80080ee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	331a      	adds	r3, #26
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	f040 841d 	bne.w	8005602 <HCD_HC_OUT_IRQHandler+0x944>
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	331b      	adds	r3, #27
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f040 8411 	bne.w	8005602 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	3326      	adds	r3, #38	@ 0x26
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d009      	beq.n	8004e0a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	331b      	adds	r3, #27
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	334d      	adds	r3, #77	@ 0x4d
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f003 f961 	bl	80080ee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	3344      	adds	r3, #68	@ 0x44
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e3df      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f002 fcfd 	bl	800784a <USB_ReadChInterrupts>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e5a:	d111      	bne.n	8004e80 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e6e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f003 f938 	bl	80080ee <USB_HC_Halt>
 8004e7e:	e3c0      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f002 fcde 	bl	800784a <USB_ReadChInterrupts>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d168      	bne.n	8004f6a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3344      	adds	r3, #68	@ 0x44
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f002 fcc8 	bl	800784a <USB_ReadChInterrupts>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b40      	cmp	r3, #64	@ 0x40
 8004ec2:	d112      	bne.n	8004eea <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004ec4:	78fa      	ldrb	r2, [r7, #3]
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	3319      	adds	r3, #25
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2340      	movs	r3, #64	@ 0x40
 8004ee8:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	331b      	adds	r3, #27
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d019      	beq.n	8004f34 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	331b      	adds	r3, #27
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	78fa      	ldrb	r2, [r7, #3]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f32:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f40:	461a      	mov	r2, r3
 8004f42:	2301      	movs	r3, #1
 8004f44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	334d      	adds	r3, #77	@ 0x4d
 8004f56:	2201      	movs	r2, #1
 8004f58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f003 f8c3 	bl	80080ee <USB_HC_Halt>
 8004f68:	e34b      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f002 fc69 	bl	800784a <USB_ReadChInterrupts>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7e:	2b40      	cmp	r3, #64	@ 0x40
 8004f80:	d139      	bne.n	8004ff6 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	334d      	adds	r3, #77	@ 0x4d
 8004f92:	2205      	movs	r2, #5
 8004f94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	331a      	adds	r3, #26
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3319      	adds	r3, #25
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	3344      	adds	r3, #68	@ 0x44
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f003 f886 	bl	80080ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2340      	movs	r3, #64	@ 0x40
 8004ff2:	6093      	str	r3, [r2, #8]
 8004ff4:	e305      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 fc23 	bl	800784a <USB_ReadChInterrupts>
 8005004:	4603      	mov	r3, r0
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b08      	cmp	r3, #8
 800500c:	d11a      	bne.n	8005044 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800501a:	461a      	mov	r2, r3
 800501c:	2308      	movs	r3, #8
 800501e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	334d      	adds	r3, #77	@ 0x4d
 8005030:	2206      	movs	r2, #6
 8005032:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f003 f856 	bl	80080ee <USB_HC_Halt>
 8005042:	e2de      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f002 fbfc 	bl	800784a <USB_ReadChInterrupts>
 8005052:	4603      	mov	r3, r0
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b10      	cmp	r3, #16
 800505a:	d144      	bne.n	80050e6 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	3344      	adds	r3, #68	@ 0x44
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	334d      	adds	r3, #77	@ 0x4d
 8005080:	2204      	movs	r2, #4
 8005082:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005084:	78fa      	ldrb	r2, [r7, #3]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	3319      	adds	r3, #25
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d114      	bne.n	80050c4 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	3318      	adds	r3, #24
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	3319      	adds	r3, #25
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f003 f80e 	bl	80080ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	2310      	movs	r3, #16
 80050e2:	6093      	str	r3, [r2, #8]
 80050e4:	e28d      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f002 fbab 	bl	800784a <USB_ReadChInterrupts>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fa:	2b80      	cmp	r3, #128	@ 0x80
 80050fc:	d169      	bne.n	80051d2 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	799b      	ldrb	r3, [r3, #6]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d111      	bne.n	800512a <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	334d      	adds	r3, #77	@ 0x4d
 8005116:	2207      	movs	r2, #7
 8005118:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f002 ffe3 	bl	80080ee <USB_HC_Halt>
 8005128:	e049      	b.n	80051be <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3344      	adds	r3, #68	@ 0x44
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4403      	add	r3, r0
 800514a:	3344      	adds	r3, #68	@ 0x44
 800514c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	3344      	adds	r3, #68	@ 0x44
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d922      	bls.n	80051aa <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	3344      	adds	r3, #68	@ 0x44
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005178:	78fa      	ldrb	r2, [r7, #3]
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	334c      	adds	r3, #76	@ 0x4c
 8005188:	2204      	movs	r2, #4
 800518a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	334c      	adds	r3, #76	@ 0x4c
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f004 fd22 	bl	8009bec <HAL_HCD_HC_NotifyURBChange_Callback>
 80051a8:	e009      	b.n	80051be <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	334c      	adds	r3, #76	@ 0x4c
 80051ba:	2202      	movs	r2, #2
 80051bc:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ca:	461a      	mov	r2, r3
 80051cc:	2380      	movs	r3, #128	@ 0x80
 80051ce:	6093      	str	r3, [r2, #8]
 80051d0:	e217      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	4611      	mov	r1, r2
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 fb35 	bl	800784a <USB_ReadChInterrupts>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ea:	d11b      	bne.n	8005224 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	334d      	adds	r3, #77	@ 0x4d
 80051fc:	2209      	movs	r2, #9
 80051fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	4611      	mov	r1, r2
 8005208:	4618      	mov	r0, r3
 800520a:	f002 ff70 	bl	80080ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521a:	461a      	mov	r2, r3
 800521c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005220:	6093      	str	r3, [r2, #8]
 8005222:	e1ee      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f002 fb0c 	bl	800784a <USB_ReadChInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	f040 81df 	bne.w	80055fc <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4413      	add	r3, r2
 8005246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800524a:	461a      	mov	r2, r3
 800524c:	2302      	movs	r3, #2
 800524e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	334d      	adds	r3, #77	@ 0x4d
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b01      	cmp	r3, #1
 8005264:	f040 8093 	bne.w	800538e <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	334d      	adds	r3, #77	@ 0x4d
 8005278:	2202      	movs	r2, #2
 800527a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	334c      	adds	r3, #76	@ 0x4c
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	3326      	adds	r3, #38	@ 0x26
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d00b      	beq.n	80052be <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	3326      	adds	r3, #38	@ 0x26
 80052b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	f040 8190 	bne.w	80055de <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	799b      	ldrb	r3, [r3, #6]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d115      	bne.n	80052f2 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	333d      	adds	r3, #61	@ 0x3d
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	f083 0301 	eor.w	r3, r3, #1
 80052de:	b2d8      	uxtb	r0, r3
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	333d      	adds	r3, #61	@ 0x3d
 80052ee:	4602      	mov	r2, r0
 80052f0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	799b      	ldrb	r3, [r3, #6]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	f040 8171 	bne.w	80055de <HCD_HC_OUT_IRQHandler+0x920>
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3334      	adds	r3, #52	@ 0x34
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8165 	beq.w	80055de <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	3334      	adds	r3, #52	@ 0x34
 8005324:	6819      	ldr	r1, [r3, #0]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4403      	add	r3, r0
 8005334:	3328      	adds	r3, #40	@ 0x28
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	440b      	add	r3, r1
 800533a:	1e59      	subs	r1, r3, #1
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4403      	add	r3, r0
 800534a:	3328      	adds	r3, #40	@ 0x28
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005352:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 813f 	beq.w	80055de <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	333d      	adds	r3, #61	@ 0x3d
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	f083 0301 	eor.w	r3, r3, #1
 8005378:	b2d8      	uxtb	r0, r3
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	333d      	adds	r3, #61	@ 0x3d
 8005388:	4602      	mov	r2, r0
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e127      	b.n	80055de <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	334d      	adds	r3, #77	@ 0x4d
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d120      	bne.n	80053e6 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053a4:	78fa      	ldrb	r2, [r7, #3]
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	334d      	adds	r3, #77	@ 0x4d
 80053b4:	2202      	movs	r2, #2
 80053b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	331b      	adds	r3, #27
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	f040 8107 	bne.w	80055de <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	334c      	adds	r3, #76	@ 0x4c
 80053e0:	2202      	movs	r2, #2
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e0fb      	b.n	80055de <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	334d      	adds	r3, #77	@ 0x4d
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d13a      	bne.n	8005472 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053fc:	78fa      	ldrb	r2, [r7, #3]
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	334d      	adds	r3, #77	@ 0x4d
 800540c:	2202      	movs	r2, #2
 800540e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	334c      	adds	r3, #76	@ 0x4c
 8005420:	2202      	movs	r2, #2
 8005422:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	331b      	adds	r3, #27
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b01      	cmp	r3, #1
 8005438:	f040 80d1 	bne.w	80055de <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	331b      	adds	r3, #27
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	440a      	add	r2, r1
 8005466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800546a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546e:	6053      	str	r3, [r2, #4]
 8005470:	e0b5      	b.n	80055de <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	334d      	adds	r3, #77	@ 0x4d
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b05      	cmp	r3, #5
 8005486:	d114      	bne.n	80054b2 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	334d      	adds	r3, #77	@ 0x4d
 8005498:	2202      	movs	r2, #2
 800549a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	334c      	adds	r3, #76	@ 0x4c
 80054ac:	2202      	movs	r2, #2
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	e095      	b.n	80055de <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	334d      	adds	r3, #77	@ 0x4d
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d114      	bne.n	80054f2 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	334d      	adds	r3, #77	@ 0x4d
 80054d8:	2202      	movs	r2, #2
 80054da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	334c      	adds	r3, #76	@ 0x4c
 80054ec:	2205      	movs	r2, #5
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e075      	b.n	80055de <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	334d      	adds	r3, #77	@ 0x4d
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b07      	cmp	r3, #7
 8005506:	d00a      	beq.n	800551e <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	334d      	adds	r3, #77	@ 0x4d
 8005518:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800551a:	2b09      	cmp	r3, #9
 800551c:	d170      	bne.n	8005600 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	334d      	adds	r3, #77	@ 0x4d
 800552e:	2202      	movs	r2, #2
 8005530:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	3344      	adds	r3, #68	@ 0x44
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	1c59      	adds	r1, r3, #1
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4403      	add	r3, r0
 8005552:	3344      	adds	r3, #68	@ 0x44
 8005554:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3344      	adds	r3, #68	@ 0x44
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d914      	bls.n	8005596 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	3344      	adds	r3, #68	@ 0x44
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	334c      	adds	r3, #76	@ 0x4c
 8005590:	2204      	movs	r2, #4
 8005592:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005594:	e022      	b.n	80055dc <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	334c      	adds	r3, #76	@ 0x4c
 80055a6:	2202      	movs	r2, #2
 80055a8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055c0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055c8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d6:	461a      	mov	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80055dc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	334c      	adds	r3, #76	@ 0x4c
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f004 faf9 	bl	8009bec <HAL_HCD_HC_NotifyURBChange_Callback>
 80055fa:	e002      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80055fc:	bf00      	nop
 80055fe:	e000      	b.n	8005602 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005600:	bf00      	nop
  }
}
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	@ 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	0c5b      	lsrs	r3, r3, #17
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800563c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d004      	beq.n	800564e <HCD_RXQLVL_IRQHandler+0x46>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b05      	cmp	r3, #5
 8005648:	f000 80b6 	beq.w	80057b8 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800564c:	e0b7      	b.n	80057be <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80b3 	beq.w	80057bc <HCD_RXQLVL_IRQHandler+0x1b4>
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4613      	mov	r3, r2
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	332c      	adds	r3, #44	@ 0x2c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80a7 	beq.w	80057bc <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4613      	mov	r3, r2
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3338      	adds	r3, #56	@ 0x38
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	18d1      	adds	r1, r2, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4613      	mov	r3, r2
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4403      	add	r3, r0
 8005692:	3334      	adds	r3, #52	@ 0x34
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4299      	cmp	r1, r3
 8005698:	f200 8083 	bhi.w	80057a2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4613      	mov	r3, r2
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	332c      	adds	r3, #44	@ 0x2c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	b292      	uxth	r2, r2
 80056b6:	4619      	mov	r1, r3
 80056b8:	f002 f85c 	bl	8007774 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	332c      	adds	r3, #44	@ 0x2c
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	18d1      	adds	r1, r2, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4403      	add	r3, r0
 80056e0:	332c      	adds	r3, #44	@ 0x2c
 80056e2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4613      	mov	r3, r2
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	3338      	adds	r3, #56	@ 0x38
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	18d1      	adds	r1, r2, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4613      	mov	r3, r2
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4403      	add	r3, r0
 8005708:	3338      	adds	r3, #56	@ 0x38
 800570a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	0cdb      	lsrs	r3, r3, #19
 800571c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005720:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4613      	mov	r3, r2
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	3328      	adds	r3, #40	@ 0x28
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4293      	cmp	r3, r2
 800573a:	d13f      	bne.n	80057bc <HCD_RXQLVL_IRQHandler+0x1b4>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d03c      	beq.n	80057bc <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005758:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005760:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	4413      	add	r3, r2
 800576a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800576e:	461a      	mov	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4613      	mov	r3, r2
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	333c      	adds	r3, #60	@ 0x3c
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	f083 0301 	eor.w	r3, r3, #1
 800578a:	b2d8      	uxtb	r0, r3
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4613      	mov	r3, r2
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	333c      	adds	r3, #60	@ 0x3c
 800579c:	4602      	mov	r2, r0
 800579e:	701a      	strb	r2, [r3, #0]
      break;
 80057a0:	e00c      	b.n	80057bc <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	334c      	adds	r3, #76	@ 0x4c
 80057b2:	2204      	movs	r2, #4
 80057b4:	701a      	strb	r2, [r3, #0]
      break;
 80057b6:	e001      	b.n	80057bc <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80057b8:	bf00      	nop
 80057ba:	e000      	b.n	80057be <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80057bc:	bf00      	nop
  }
}
 80057be:	bf00      	nop
 80057c0:	3728      	adds	r7, #40	@ 0x28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80057f2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d10b      	bne.n	8005816 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d102      	bne.n	800580e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f004 f9d3 	bl	8009bb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f043 0302 	orr.w	r3, r3, #2
 8005814:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d132      	bne.n	8005886 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f043 0308 	orr.w	r3, r3, #8
 8005826:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b04      	cmp	r3, #4
 8005830:	d126      	bne.n	8005880 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7a5b      	ldrb	r3, [r3, #9]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d113      	bne.n	8005862 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005840:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005844:	d106      	bne.n	8005854 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2102      	movs	r1, #2
 800584c:	4618      	mov	r0, r3
 800584e:	f002 f82b 	bl	80078a8 <USB_InitFSLSPClkSel>
 8005852:	e011      	b.n	8005878 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2101      	movs	r1, #1
 800585a:	4618      	mov	r0, r3
 800585c:	f002 f824 	bl	80078a8 <USB_InitFSLSPClkSel>
 8005860:	e00a      	b.n	8005878 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	79db      	ldrb	r3, [r3, #7]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d106      	bne.n	8005878 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005870:	461a      	mov	r2, r3
 8005872:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005876:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f004 f9c5 	bl	8009c08 <HAL_HCD_PortEnabled_Callback>
 800587e:	e002      	b.n	8005886 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f004 f9cf 	bl	8009c24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b20      	cmp	r3, #32
 800588e:	d103      	bne.n	8005898 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f043 0320 	orr.w	r3, r3, #32
 8005896:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800589e:	461a      	mov	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	bf00      	nop
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e12b      	b.n	8005b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fb f9c6 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	@ 0x24
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800590e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005910:	f001 fa78 	bl	8006e04 <HAL_RCC_GetPCLK1Freq>
 8005914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4a81      	ldr	r2, [pc, #516]	@ (8005b20 <HAL_I2C_Init+0x274>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d807      	bhi.n	8005930 <HAL_I2C_Init+0x84>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a80      	ldr	r2, [pc, #512]	@ (8005b24 <HAL_I2C_Init+0x278>)
 8005924:	4293      	cmp	r3, r2
 8005926:	bf94      	ite	ls
 8005928:	2301      	movls	r3, #1
 800592a:	2300      	movhi	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e006      	b.n	800593e <HAL_I2C_Init+0x92>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a7d      	ldr	r2, [pc, #500]	@ (8005b28 <HAL_I2C_Init+0x27c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	bf94      	ite	ls
 8005938:	2301      	movls	r3, #1
 800593a:	2300      	movhi	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e0e7      	b.n	8005b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a78      	ldr	r2, [pc, #480]	@ (8005b2c <HAL_I2C_Init+0x280>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	0c9b      	lsrs	r3, r3, #18
 8005950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4a6a      	ldr	r2, [pc, #424]	@ (8005b20 <HAL_I2C_Init+0x274>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d802      	bhi.n	8005980 <HAL_I2C_Init+0xd4>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3301      	adds	r3, #1
 800597e:	e009      	b.n	8005994 <HAL_I2C_Init+0xe8>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	4a69      	ldr	r2, [pc, #420]	@ (8005b30 <HAL_I2C_Init+0x284>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	3301      	adds	r3, #1
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	430b      	orrs	r3, r1
 800599a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80059a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	495c      	ldr	r1, [pc, #368]	@ (8005b20 <HAL_I2C_Init+0x274>)
 80059b0:	428b      	cmp	r3, r1
 80059b2:	d819      	bhi.n	80059e8 <HAL_I2C_Init+0x13c>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1e59      	subs	r1, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80059c8:	400b      	ands	r3, r1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_I2C_Init+0x138>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1e59      	subs	r1, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059dc:	3301      	adds	r3, #1
 80059de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e2:	e051      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 80059e4:	2304      	movs	r3, #4
 80059e6:	e04f      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d111      	bne.n	8005a14 <HAL_I2C_Init+0x168>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1e58      	subs	r0, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	440b      	add	r3, r1
 80059fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a02:	3301      	adds	r3, #1
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e012      	b.n	8005a3a <HAL_I2C_Init+0x18e>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1e58      	subs	r0, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6859      	ldr	r1, [r3, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	0099      	lsls	r1, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_I2C_Init+0x196>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e022      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10e      	bne.n	8005a68 <HAL_I2C_Init+0x1bc>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1e58      	subs	r0, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	440b      	add	r3, r1
 8005a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a66:	e00f      	b.n	8005a88 <HAL_I2C_Init+0x1dc>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1e58      	subs	r0, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	0099      	lsls	r1, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	6809      	ldr	r1, [r1, #0]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005ab6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6911      	ldr	r1, [r2, #16]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68d2      	ldr	r2, [r2, #12]
 8005ac2:	4311      	orrs	r1, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	000186a0 	.word	0x000186a0
 8005b24:	001e847f 	.word	0x001e847f
 8005b28:	003d08ff 	.word	0x003d08ff
 8005b2c:	431bde83 	.word	0x431bde83
 8005b30:	10624dd3 	.word	0x10624dd3

08005b34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	817b      	strh	r3, [r7, #10]
 8005b44:	4613      	mov	r3, r2
 8005b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b48:	f7fd fb3c 	bl	80031c4 <HAL_GetTick>
 8005b4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	f040 80e0 	bne.w	8005d1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2319      	movs	r3, #25
 8005b62:	2201      	movs	r2, #1
 8005b64:	4970      	ldr	r1, [pc, #448]	@ (8005d28 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fc64 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b72:	2302      	movs	r3, #2
 8005b74:	e0d3      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_I2C_Master_Transmit+0x50>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e0cc      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d007      	beq.n	8005baa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2221      	movs	r2, #33	@ 0x21
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	893a      	ldrh	r2, [r7, #8]
 8005bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a50      	ldr	r2, [pc, #320]	@ (8005d2c <HAL_I2C_Master_Transmit+0x1f8>)
 8005bea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bec:	8979      	ldrh	r1, [r7, #10]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 face 	bl	8006194 <I2C_MasterRequestWrite>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e08d      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c18:	e066      	b.n	8005ce8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6a39      	ldr	r1, [r7, #32]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fd22 	bl	8006668 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d107      	bne.n	8005c42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e06b      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d11b      	bne.n	8005cbc <HAL_I2C_Master_Transmit+0x188>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d017      	beq.n	8005cbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	6a39      	ldr	r1, [r7, #32]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fd19 	bl	80066f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d107      	bne.n	8005ce4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e01a      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d194      	bne.n	8005c1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e000      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	00100002 	.word	0x00100002
 8005d2c:	ffff0000 	.word	0xffff0000

08005d30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08c      	sub	sp, #48	@ 0x30
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	817b      	strh	r3, [r7, #10]
 8005d40:	4613      	mov	r3, r2
 8005d42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d44:	f7fd fa3e 	bl	80031c4 <HAL_GetTick>
 8005d48:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	f040 8217 	bne.w	8006186 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2319      	movs	r3, #25
 8005d5e:	2201      	movs	r2, #1
 8005d60:	497c      	ldr	r1, [pc, #496]	@ (8005f54 <HAL_I2C_Master_Receive+0x224>)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fb66 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e20a      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_I2C_Master_Receive+0x50>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e203      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d007      	beq.n	8005da6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005db4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2222      	movs	r2, #34	@ 0x22
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	893a      	ldrh	r2, [r7, #8]
 8005dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a5c      	ldr	r2, [pc, #368]	@ (8005f58 <HAL_I2C_Master_Receive+0x228>)
 8005de6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005de8:	8979      	ldrh	r1, [r7, #10]
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fa52 	bl	8006298 <I2C_MasterRequestRead>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e1c4      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d113      	bne.n	8005e2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e06:	2300      	movs	r3, #0
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	623b      	str	r3, [r7, #32]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e198      	b.n	8006160 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d11b      	bne.n	8005e6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e178      	b.n	8006160 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d11b      	bne.n	8005eae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	e158      	b.n	8006160 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ed4:	e144      	b.n	8006160 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	f200 80f1 	bhi.w	80060c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d123      	bne.n	8005f30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fc4b 	bl	8006788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e145      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f2e:	e117      	b.n	8006160 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d14e      	bne.n	8005fd6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	2200      	movs	r2, #0
 8005f40:	4906      	ldr	r1, [pc, #24]	@ (8005f5c <HAL_I2C_Master_Receive+0x22c>)
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fa76 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e11a      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
 8005f52:	bf00      	nop
 8005f54:	00100002 	.word	0x00100002
 8005f58:	ffff0000 	.word	0xffff0000
 8005f5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fd4:	e0c4      	b.n	8006160 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	2200      	movs	r2, #0
 8005fde:	496c      	ldr	r1, [pc, #432]	@ (8006190 <HAL_I2C_Master_Receive+0x460>)
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fa27 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0cb      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	4955      	ldr	r1, [pc, #340]	@ (8006190 <HAL_I2C_Master_Receive+0x460>)
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f9f9 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e09d      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800605a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060c0:	e04e      	b.n	8006160 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fb5e 	bl	8006788 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e058      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b04      	cmp	r3, #4
 8006114:	d124      	bne.n	8006160 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611a:	2b03      	cmp	r3, #3
 800611c:	d107      	bne.n	800612e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800612c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	f47f aeb6 	bne.w	8005ed6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e000      	b.n	8006188 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006186:	2302      	movs	r3, #2
  }
}
 8006188:	4618      	mov	r0, r3
 800618a:	3728      	adds	r7, #40	@ 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	00010004 	.word	0x00010004

08006194 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	460b      	mov	r3, r1
 80061a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d006      	beq.n	80061be <I2C_MasterRequestWrite+0x2a>
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d003      	beq.n	80061be <I2C_MasterRequestWrite+0x2a>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061bc:	d108      	bne.n	80061d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e00b      	b.n	80061e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d4:	2b12      	cmp	r3, #18
 80061d6:	d107      	bne.n	80061e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f91d 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800620e:	d103      	bne.n	8006218 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006216:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e035      	b.n	8006288 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006224:	d108      	bne.n	8006238 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006226:	897b      	ldrh	r3, [r7, #10]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006234:	611a      	str	r2, [r3, #16]
 8006236:	e01b      	b.n	8006270 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006238:	897b      	ldrh	r3, [r7, #10]
 800623a:	11db      	asrs	r3, r3, #7
 800623c:	b2db      	uxtb	r3, r3
 800623e:	f003 0306 	and.w	r3, r3, #6
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f063 030f 	orn	r3, r3, #15
 8006248:	b2da      	uxtb	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	490e      	ldr	r1, [pc, #56]	@ (8006290 <I2C_MasterRequestWrite+0xfc>)
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f966 	bl	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e010      	b.n	8006288 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006266:	897b      	ldrh	r3, [r7, #10]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4907      	ldr	r1, [pc, #28]	@ (8006294 <I2C_MasterRequestWrite+0x100>)
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f956 	bl	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	00010008 	.word	0x00010008
 8006294:	00010002 	.word	0x00010002

08006298 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	460b      	mov	r3, r1
 80062a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d006      	beq.n	80062d2 <I2C_MasterRequestRead+0x3a>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d003      	beq.n	80062d2 <I2C_MasterRequestRead+0x3a>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062d0:	d108      	bne.n	80062e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e00b      	b.n	80062fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	2b11      	cmp	r3, #17
 80062ea:	d107      	bne.n	80062fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f893 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006322:	d103      	bne.n	800632c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800632a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e079      	b.n	8006424 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006338:	d108      	bne.n	800634c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800633a:	897b      	ldrh	r3, [r7, #10]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	611a      	str	r2, [r3, #16]
 800634a:	e05f      	b.n	800640c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800634c:	897b      	ldrh	r3, [r7, #10]
 800634e:	11db      	asrs	r3, r3, #7
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0306 	and.w	r3, r3, #6
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f063 030f 	orn	r3, r3, #15
 800635c:	b2da      	uxtb	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	4930      	ldr	r1, [pc, #192]	@ (800642c <I2C_MasterRequestRead+0x194>)
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f8dc 	bl	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e054      	b.n	8006424 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800637a:	897b      	ldrh	r3, [r7, #10]
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	4929      	ldr	r1, [pc, #164]	@ (8006430 <I2C_MasterRequestRead+0x198>)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f8cc 	bl	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e044      	b.n	8006424 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f831 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e6:	d103      	bne.n	80063f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e017      	b.n	8006424 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80063f4:	897b      	ldrh	r3, [r7, #10]
 80063f6:	11db      	asrs	r3, r3, #7
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	f003 0306 	and.w	r3, r3, #6
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f063 030e 	orn	r3, r3, #14
 8006404:	b2da      	uxtb	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	4907      	ldr	r1, [pc, #28]	@ (8006430 <I2C_MasterRequestRead+0x198>)
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f888 	bl	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	00010008 	.word	0x00010008
 8006430:	00010002 	.word	0x00010002

08006434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006444:	e048      	b.n	80064d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d044      	beq.n	80064d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fc feb9 	bl	80031c4 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d139      	bne.n	80064d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	0c1b      	lsrs	r3, r3, #16
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10d      	bne.n	800648a <I2C_WaitOnFlagUntilTimeout+0x56>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	43da      	mvns	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4013      	ands	r3, r2
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	e00c      	b.n	80064a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	43da      	mvns	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d116      	bne.n	80064d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c4:	f043 0220 	orr.w	r2, r3, #32
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e023      	b.n	8006520 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	0c1b      	lsrs	r3, r3, #16
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d10d      	bne.n	80064fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	43da      	mvns	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4013      	ands	r3, r2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bf0c      	ite	eq
 80064f4:	2301      	moveq	r3, #1
 80064f6:	2300      	movne	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	e00c      	b.n	8006518 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	43da      	mvns	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4013      	ands	r3, r2
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	bf0c      	ite	eq
 8006510:	2301      	moveq	r3, #1
 8006512:	2300      	movne	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	429a      	cmp	r2, r3
 800651c:	d093      	beq.n	8006446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006536:	e071      	b.n	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006546:	d123      	bne.n	8006590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006556:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657c:	f043 0204 	orr.w	r2, r3, #4
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e067      	b.n	8006660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d041      	beq.n	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006598:	f7fc fe14 	bl	80031c4 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d302      	bcc.n	80065ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d136      	bne.n	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	0c1b      	lsrs	r3, r3, #16
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d10c      	bne.n	80065d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	43da      	mvns	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4013      	ands	r3, r2
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bf14      	ite	ne
 80065ca:	2301      	movne	r3, #1
 80065cc:	2300      	moveq	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	e00b      	b.n	80065ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	43da      	mvns	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4013      	ands	r3, r2
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf14      	ite	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	2300      	moveq	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d016      	beq.n	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	f043 0220 	orr.w	r2, r3, #32
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e021      	b.n	8006660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	0c1b      	lsrs	r3, r3, #16
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b01      	cmp	r3, #1
 8006624:	d10c      	bne.n	8006640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	43da      	mvns	r2, r3
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4013      	ands	r3, r2
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e00b      	b.n	8006658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	43da      	mvns	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4013      	ands	r3, r2
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	bf14      	ite	ne
 8006652:	2301      	movne	r3, #1
 8006654:	2300      	moveq	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	f47f af6d 	bne.w	8006538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006674:	e034      	b.n	80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f8e3 	bl	8006842 <I2C_IsAcknowledgeFailed>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e034      	b.n	80066f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d028      	beq.n	80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668e:	f7fc fd99 	bl	80031c4 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11d      	bne.n	80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ae:	2b80      	cmp	r3, #128	@ 0x80
 80066b0:	d016      	beq.n	80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	f043 0220 	orr.w	r2, r3, #32
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e007      	b.n	80066f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ea:	2b80      	cmp	r3, #128	@ 0x80
 80066ec:	d1c3      	bne.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006704:	e034      	b.n	8006770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f89b 	bl	8006842 <I2C_IsAcknowledgeFailed>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e034      	b.n	8006780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d028      	beq.n	8006770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671e:	f7fc fd51 	bl	80031c4 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	d302      	bcc.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d11d      	bne.n	8006770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d016      	beq.n	8006770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675c:	f043 0220 	orr.w	r2, r3, #32
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e007      	b.n	8006780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b04      	cmp	r3, #4
 800677c:	d1c3      	bne.n	8006706 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006794:	e049      	b.n	800682a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d119      	bne.n	80067d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0210 	mvn.w	r2, #16
 80067ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e030      	b.n	800683a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d8:	f7fc fcf4 	bl	80031c4 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d302      	bcc.n	80067ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d11d      	bne.n	800682a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f8:	2b40      	cmp	r3, #64	@ 0x40
 80067fa:	d016      	beq.n	800682a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006816:	f043 0220 	orr.w	r2, r3, #32
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e007      	b.n	800683a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006834:	2b40      	cmp	r3, #64	@ 0x40
 8006836:	d1ae      	bne.n	8006796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006858:	d11b      	bne.n	8006892 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006862:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687e:	f043 0204 	orr.w	r2, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e034      	b.n	800691c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80068ba:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f245 5255 	movw	r2, #21845	@ 0x5555
 80068c4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6852      	ldr	r2, [r2, #4]
 80068ce:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6892      	ldr	r2, [r2, #8]
 80068d8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80068da:	f7fc fc73 	bl	80031c4 <HAL_GetTick>
 80068de:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80068e0:	e00f      	b.n	8006902 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80068e2:	f7fc fc6f 	bl	80031c4 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b31      	cmp	r3, #49	@ 0x31
 80068ee:	d908      	bls.n	8006902 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e00c      	b.n	800691c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e8      	bne.n	80068e2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006918:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006934:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e0cc      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006958:	4b68      	ldr	r3, [pc, #416]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d90c      	bls.n	8006980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b65      	ldr	r3, [pc, #404]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800696e:	4b63      	ldr	r3, [pc, #396]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d001      	beq.n	8006980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0b8      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d020      	beq.n	80069ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006998:	4b59      	ldr	r3, [pc, #356]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	4a58      	ldr	r2, [pc, #352]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069b0:	4b53      	ldr	r3, [pc, #332]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4a52      	ldr	r2, [pc, #328]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80069ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069bc:	4b50      	ldr	r3, [pc, #320]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	494d      	ldr	r1, [pc, #308]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d044      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d107      	bne.n	80069f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e2:	4b47      	ldr	r3, [pc, #284]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d119      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e07f      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d003      	beq.n	8006a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d107      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a02:	4b3f      	ldr	r3, [pc, #252]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e06f      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a12:	4b3b      	ldr	r3, [pc, #236]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e067      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a22:	4b37      	ldr	r3, [pc, #220]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f023 0203 	bic.w	r2, r3, #3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	4934      	ldr	r1, [pc, #208]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a34:	f7fc fbc6 	bl	80031c4 <HAL_GetTick>
 8006a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a3c:	f7fc fbc2 	bl	80031c4 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e04f      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a52:	4b2b      	ldr	r3, [pc, #172]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 020c 	and.w	r2, r3, #12
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d1eb      	bne.n	8006a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a64:	4b25      	ldr	r3, [pc, #148]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d20c      	bcs.n	8006a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a72:	4b22      	ldr	r3, [pc, #136]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b20      	ldr	r3, [pc, #128]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e032      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a98:	4b19      	ldr	r3, [pc, #100]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	4916      	ldr	r1, [pc, #88]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ab6:	4b12      	ldr	r3, [pc, #72]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	490e      	ldr	r1, [pc, #56]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aca:	f000 f889 	bl	8006be0 <HAL_RCC_GetSysClockFreq>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	490a      	ldr	r1, [pc, #40]	@ (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006adc:	5ccb      	ldrb	r3, [r1, r3]
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	4a09      	ldr	r2, [pc, #36]	@ (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ae6:	4b09      	ldr	r3, [pc, #36]	@ (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fc fb26 	bl	800313c <HAL_InitTick>

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40023c00 	.word	0x40023c00
 8006b00:	40023800 	.word	0x40023800
 8006b04:	0800a88c 	.word	0x0800a88c
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	200000a0 	.word	0x200000a0

08006b10 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08c      	sub	sp, #48	@ 0x30
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d129      	bne.n	8006b76 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8006b22:	2300      	movs	r3, #0
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b32:	4b28      	ldr	r3, [pc, #160]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006b3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b44:	2302      	movs	r3, #2
 8006b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006b54:	f107 031c 	add.w	r3, r7, #28
 8006b58:	4619      	mov	r1, r3
 8006b5a:	481f      	ldr	r0, [pc, #124]	@ (8006bd8 <HAL_RCC_MCOConfig+0xc8>)
 8006b5c:	f7fc fc74 	bl	8003448 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006b60:	4b1c      	ldr	r3, [pc, #112]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	4919      	ldr	r1, [pc, #100]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006b74:	e029      	b.n	8006bca <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	4b16      	ldr	r3, [pc, #88]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7e:	4a15      	ldr	r2, [pc, #84]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006b80:	f043 0304 	orr.w	r3, r3, #4
 8006b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b86:	4b13      	ldr	r3, [pc, #76]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006ba8:	f107 031c 	add.w	r3, r7, #28
 8006bac:	4619      	mov	r1, r3
 8006bae:	480b      	ldr	r0, [pc, #44]	@ (8006bdc <HAL_RCC_MCOConfig+0xcc>)
 8006bb0:	f7fc fc4a 	bl	8003448 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006bb4:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	00d9      	lsls	r1, r3, #3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	4903      	ldr	r1, [pc, #12]	@ (8006bd4 <HAL_RCC_MCOConfig+0xc4>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	608b      	str	r3, [r1, #8]
}
 8006bca:	bf00      	nop
 8006bcc:	3730      	adds	r7, #48	@ 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	40020000 	.word	0x40020000
 8006bdc:	40020800 	.word	0x40020800

08006be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be4:	b094      	sub	sp, #80	@ 0x50
 8006be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bec:	2300      	movs	r3, #0
 8006bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bf8:	4b79      	ldr	r3, [pc, #484]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 030c 	and.w	r3, r3, #12
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d00d      	beq.n	8006c20 <HAL_RCC_GetSysClockFreq+0x40>
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	f200 80e1 	bhi.w	8006dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_RCC_GetSysClockFreq+0x34>
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d003      	beq.n	8006c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c12:	e0db      	b.n	8006dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c14:	4b73      	ldr	r3, [pc, #460]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c16:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006c18:	e0db      	b.n	8006dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c1a:	4b73      	ldr	r3, [pc, #460]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c1e:	e0d8      	b.n	8006dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c20:	4b6f      	ldr	r3, [pc, #444]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c28:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d063      	beq.n	8006cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c36:	4b6a      	ldr	r3, [pc, #424]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	099b      	lsrs	r3, r3, #6
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c52:	4622      	mov	r2, r4
 8006c54:	462b      	mov	r3, r5
 8006c56:	f04f 0000 	mov.w	r0, #0
 8006c5a:	f04f 0100 	mov.w	r1, #0
 8006c5e:	0159      	lsls	r1, r3, #5
 8006c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c64:	0150      	lsls	r0, r2, #5
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	1a51      	subs	r1, r2, r1
 8006c6e:	6139      	str	r1, [r7, #16]
 8006c70:	4629      	mov	r1, r5
 8006c72:	eb63 0301 	sbc.w	r3, r3, r1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c84:	4659      	mov	r1, fp
 8006c86:	018b      	lsls	r3, r1, #6
 8006c88:	4651      	mov	r1, sl
 8006c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c8e:	4651      	mov	r1, sl
 8006c90:	018a      	lsls	r2, r1, #6
 8006c92:	4651      	mov	r1, sl
 8006c94:	ebb2 0801 	subs.w	r8, r2, r1
 8006c98:	4659      	mov	r1, fp
 8006c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cb2:	4690      	mov	r8, r2
 8006cb4:	4699      	mov	r9, r3
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	eb18 0303 	adds.w	r3, r8, r3
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	eb49 0303 	adc.w	r3, r9, r3
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	024b      	lsls	r3, r1, #9
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006cdc:	4621      	mov	r1, r4
 8006cde:	024a      	lsls	r2, r1, #9
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cf0:	f7f9 fade 	bl	80002b0 <__aeabi_uldivmod>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cfc:	e058      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cfe:	4b38      	ldr	r3, [pc, #224]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	099b      	lsrs	r3, r3, #6
 8006d04:	2200      	movs	r2, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	4611      	mov	r1, r2
 8006d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d0e:	623b      	str	r3, [r7, #32]
 8006d10:	2300      	movs	r3, #0
 8006d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	f04f 0000 	mov.w	r0, #0
 8006d20:	f04f 0100 	mov.w	r1, #0
 8006d24:	0159      	lsls	r1, r3, #5
 8006d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d2a:	0150      	lsls	r0, r2, #5
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4641      	mov	r1, r8
 8006d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d36:	4649      	mov	r1, r9
 8006d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d50:	ebb2 040a 	subs.w	r4, r2, sl
 8006d54:	eb63 050b 	sbc.w	r5, r3, fp
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	00eb      	lsls	r3, r5, #3
 8006d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d66:	00e2      	lsls	r2, r4, #3
 8006d68:	4614      	mov	r4, r2
 8006d6a:	461d      	mov	r5, r3
 8006d6c:	4643      	mov	r3, r8
 8006d6e:	18e3      	adds	r3, r4, r3
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	464b      	mov	r3, r9
 8006d74:	eb45 0303 	adc.w	r3, r5, r3
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d86:	4629      	mov	r1, r5
 8006d88:	028b      	lsls	r3, r1, #10
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d90:	4621      	mov	r1, r4
 8006d92:	028a      	lsls	r2, r1, #10
 8006d94:	4610      	mov	r0, r2
 8006d96:	4619      	mov	r1, r3
 8006d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	61fa      	str	r2, [r7, #28]
 8006da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006da4:	f7f9 fa84 	bl	80002b0 <__aeabi_uldivmod>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4613      	mov	r3, r2
 8006dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006db0:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	0c1b      	lsrs	r3, r3, #16
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	3301      	adds	r3, #1
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006dc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dca:	e002      	b.n	8006dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3750      	adds	r7, #80	@ 0x50
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800
 8006de4:	00f42400 	.word	0x00f42400
 8006de8:	007a1200 	.word	0x007a1200

08006dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006df0:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006df2:	681b      	ldr	r3, [r3, #0]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000000 	.word	0x20000000

08006e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e08:	f7ff fff0 	bl	8006dec <HAL_RCC_GetHCLKFreq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	0a9b      	lsrs	r3, r3, #10
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	4903      	ldr	r1, [pc, #12]	@ (8006e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e1a:	5ccb      	ldrb	r3, [r1, r3]
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	40023800 	.word	0x40023800
 8006e28:	0800a89c 	.word	0x0800a89c

08006e2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e273      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d075      	beq.n	8006f36 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006e4a:	4b88      	ldr	r3, [pc, #544]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d00c      	beq.n	8006e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e56:	4b85      	ldr	r3, [pc, #532]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d112      	bne.n	8006e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e62:	4b82      	ldr	r3, [pc, #520]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e6e:	d10b      	bne.n	8006e88 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	4b7e      	ldr	r3, [pc, #504]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d05b      	beq.n	8006f34 <HAL_RCC_OscConfig+0x108>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d157      	bne.n	8006f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e24e      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e90:	d106      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x74>
 8006e92:	4b76      	ldr	r3, [pc, #472]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a75      	ldr	r2, [pc, #468]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e01d      	b.n	8006edc <HAL_RCC_OscConfig+0xb0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x98>
 8006eaa:	4b70      	ldr	r3, [pc, #448]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a6f      	ldr	r2, [pc, #444]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a6c      	ldr	r2, [pc, #432]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	e00b      	b.n	8006edc <HAL_RCC_OscConfig+0xb0>
 8006ec4:	4b69      	ldr	r3, [pc, #420]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a68      	ldr	r2, [pc, #416]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b66      	ldr	r3, [pc, #408]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a65      	ldr	r2, [pc, #404]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d013      	beq.n	8006f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fc f96e 	bl	80031c4 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eec:	f7fc f96a 	bl	80031c4 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b64      	cmp	r3, #100	@ 0x64
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e213      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b5b      	ldr	r3, [pc, #364]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0xc0>
 8006f0a:	e014      	b.n	8006f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fc f95a 	bl	80031c4 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fc f956 	bl	80031c4 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	@ 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e1ff      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f26:	4b51      	ldr	r3, [pc, #324]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0xe8>
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d063      	beq.n	800700a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006f42:	4b4a      	ldr	r3, [pc, #296]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 030c 	and.w	r3, r3, #12
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f4e:	4b47      	ldr	r3, [pc, #284]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d11c      	bne.n	8006f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f5a:	4b44      	ldr	r3, [pc, #272]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d116      	bne.n	8006f94 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f66:	4b41      	ldr	r3, [pc, #260]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_RCC_OscConfig+0x152>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d001      	beq.n	8006f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e1d3      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4937      	ldr	r1, [pc, #220]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f92:	e03a      	b.n	800700a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d020      	beq.n	8006fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f9c:	4b34      	ldr	r3, [pc, #208]	@ (8007070 <HAL_RCC_OscConfig+0x244>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa2:	f7fc f90f 	bl	80031c4 <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006faa:	f7fc f90b 	bl	80031c4 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e1b4      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc8:	4b28      	ldr	r3, [pc, #160]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4925      	ldr	r1, [pc, #148]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
 8006fdc:	e015      	b.n	800700a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fde:	4b24      	ldr	r3, [pc, #144]	@ (8007070 <HAL_RCC_OscConfig+0x244>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fc f8ee 	bl	80031c4 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fec:	f7fc f8ea 	bl	80031c4 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e193      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d036      	beq.n	8007084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800701e:	4b15      	ldr	r3, [pc, #84]	@ (8007074 <HAL_RCC_OscConfig+0x248>)
 8007020:	2201      	movs	r2, #1
 8007022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007024:	f7fc f8ce 	bl	80031c4 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800702c:	f7fc f8ca 	bl	80031c4 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e173      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800703e:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8007040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0x200>
 800704a:	e01b      	b.n	8007084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800704c:	4b09      	ldr	r3, [pc, #36]	@ (8007074 <HAL_RCC_OscConfig+0x248>)
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007052:	f7fc f8b7 	bl	80031c4 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007058:	e00e      	b.n	8007078 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800705a:	f7fc f8b3 	bl	80031c4 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d907      	bls.n	8007078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e15c      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
 800706c:	40023800 	.word	0x40023800
 8007070:	42470000 	.word	0x42470000
 8007074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007078:	4b8a      	ldr	r3, [pc, #552]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800707a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ea      	bne.n	800705a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8097 	beq.w	80071c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007092:	2300      	movs	r3, #0
 8007094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007096:	4b83      	ldr	r3, [pc, #524]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	4b7f      	ldr	r3, [pc, #508]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	4a7e      	ldr	r2, [pc, #504]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80070ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80070b2:	4b7c      	ldr	r3, [pc, #496]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80070b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ba:	60bb      	str	r3, [r7, #8]
 80070bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070be:	2301      	movs	r3, #1
 80070c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c2:	4b79      	ldr	r3, [pc, #484]	@ (80072a8 <HAL_RCC_OscConfig+0x47c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d118      	bne.n	8007100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070ce:	4b76      	ldr	r3, [pc, #472]	@ (80072a8 <HAL_RCC_OscConfig+0x47c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a75      	ldr	r2, [pc, #468]	@ (80072a8 <HAL_RCC_OscConfig+0x47c>)
 80070d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070da:	f7fc f873 	bl	80031c4 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e0:	e008      	b.n	80070f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e2:	f7fc f86f 	bl	80031c4 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e118      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f4:	4b6c      	ldr	r3, [pc, #432]	@ (80072a8 <HAL_RCC_OscConfig+0x47c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0f0      	beq.n	80070e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d106      	bne.n	8007116 <HAL_RCC_OscConfig+0x2ea>
 8007108:	4b66      	ldr	r3, [pc, #408]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800710c:	4a65      	ldr	r2, [pc, #404]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	6713      	str	r3, [r2, #112]	@ 0x70
 8007114:	e01c      	b.n	8007150 <HAL_RCC_OscConfig+0x324>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b05      	cmp	r3, #5
 800711c:	d10c      	bne.n	8007138 <HAL_RCC_OscConfig+0x30c>
 800711e:	4b61      	ldr	r3, [pc, #388]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007122:	4a60      	ldr	r2, [pc, #384]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007124:	f043 0304 	orr.w	r3, r3, #4
 8007128:	6713      	str	r3, [r2, #112]	@ 0x70
 800712a:	4b5e      	ldr	r3, [pc, #376]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800712c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712e:	4a5d      	ldr	r2, [pc, #372]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	6713      	str	r3, [r2, #112]	@ 0x70
 8007136:	e00b      	b.n	8007150 <HAL_RCC_OscConfig+0x324>
 8007138:	4b5a      	ldr	r3, [pc, #360]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800713a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713c:	4a59      	ldr	r2, [pc, #356]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	6713      	str	r3, [r2, #112]	@ 0x70
 8007144:	4b57      	ldr	r3, [pc, #348]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007148:	4a56      	ldr	r2, [pc, #344]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800714a:	f023 0304 	bic.w	r3, r3, #4
 800714e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d015      	beq.n	8007184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007158:	f7fc f834 	bl	80031c4 <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800715e:	e00a      	b.n	8007176 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007160:	f7fc f830 	bl	80031c4 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800716e:	4293      	cmp	r3, r2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e0d7      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007176:	4b4b      	ldr	r3, [pc, #300]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0ee      	beq.n	8007160 <HAL_RCC_OscConfig+0x334>
 8007182:	e014      	b.n	80071ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007184:	f7fc f81e 	bl	80031c4 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800718a:	e00a      	b.n	80071a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800718c:	f7fc f81a 	bl	80031c4 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e0c1      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071a2:	4b40      	ldr	r3, [pc, #256]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80071a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1ee      	bne.n	800718c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d105      	bne.n	80071c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071b4:	4b3b      	ldr	r3, [pc, #236]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	4a3a      	ldr	r2, [pc, #232]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80071ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80ad 	beq.w	8007324 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071ca:	4b36      	ldr	r3, [pc, #216]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 030c 	and.w	r3, r3, #12
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d060      	beq.n	8007298 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d145      	bne.n	800726a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071de:	4b33      	ldr	r3, [pc, #204]	@ (80072ac <HAL_RCC_OscConfig+0x480>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e4:	f7fb ffee 	bl	80031c4 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ec:	f7fb ffea 	bl	80031c4 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e093      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fe:	4b29      	ldr	r3, [pc, #164]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f0      	bne.n	80071ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	019b      	lsls	r3, r3, #6
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	3b01      	subs	r3, #1
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	071b      	lsls	r3, r3, #28
 8007236:	491b      	ldr	r1, [pc, #108]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007238:	4313      	orrs	r3, r2
 800723a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800723c:	4b1b      	ldr	r3, [pc, #108]	@ (80072ac <HAL_RCC_OscConfig+0x480>)
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007242:	f7fb ffbf 	bl	80031c4 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800724a:	f7fb ffbb 	bl	80031c4 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e064      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800725c:	4b11      	ldr	r3, [pc, #68]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f0      	beq.n	800724a <HAL_RCC_OscConfig+0x41e>
 8007268:	e05c      	b.n	8007324 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800726a:	4b10      	ldr	r3, [pc, #64]	@ (80072ac <HAL_RCC_OscConfig+0x480>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fb ffa8 	bl	80031c4 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007278:	f7fb ffa4 	bl	80031c4 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e04d      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800728a:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x44c>
 8007296:	e045      	b.n	8007324 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d107      	bne.n	80072b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e040      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
 80072a4:	40023800 	.word	0x40023800
 80072a8:	40007000 	.word	0x40007000
 80072ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072b0:	4b1f      	ldr	r3, [pc, #124]	@ (8007330 <HAL_RCC_OscConfig+0x504>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d030      	beq.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d129      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d122      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80072e0:	4013      	ands	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d119      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	3b01      	subs	r3, #1
 80072fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d10f      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d107      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800731c:	429a      	cmp	r2, r3
 800731e:	d001      	beq.n	8007324 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	40023800 	.word	0x40023800

08007334 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e038      	b.n	80073bc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7f9 fd38 	bl	8000dd4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3308      	adds	r3, #8
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f000 f828 	bl	80073c4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	461a      	mov	r2, r3
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	f000 f8b0 	bl	80074e4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6858      	ldr	r0, [r3, #4]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	f000 f8f7 	bl	8007584 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	6892      	ldr	r2, [r2, #8]
 800739e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	6892      	ldr	r2, [r2, #8]
 80073aa:	f041 0101 	orr.w	r1, r1, #1
 80073ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	f023 0101 	bic.w	r1, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b08      	cmp	r3, #8
 80073ec:	d102      	bne.n	80073f4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80073ee:	2340      	movs	r3, #64	@ 0x40
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	e001      	b.n	80073f8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007404:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800740a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007410:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007416:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800741c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007422:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8007428:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800742e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8007434:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800745c:	4b20      	ldr	r3, [pc, #128]	@ (80074e0 <FSMC_NORSRAM_Init+0x11c>)
 800745e:	60fb      	str	r3, [r7, #12]

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  mask |= FSMC_BCR1_CCLKEN;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007466:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800746e:	60fb      	str	r3, [r7, #12]
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8007476:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	43db      	mvns	r3, r3
 8007486:	ea02 0103 	and.w	r1, r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	4319      	orrs	r1, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800749c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074a0:	d10c      	bne.n	80074bc <FSMC_NORSRAM_Init+0xf8>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <FSMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
  }
#endif
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d006      	beq.n	80074d2 <FSMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	371c      	adds	r7, #28
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	0008fb7f 	.word	0x0008fb7f

080074e4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fa:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	431a      	orrs	r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	431a      	orrs	r2, r3
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	431a      	orrs	r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	3b01      	subs	r3, #1
 8007520:	051b      	lsls	r3, r3, #20
 8007522:	431a      	orrs	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	3b02      	subs	r3, #2
 800752a:	061b      	lsls	r3, r3, #24
 800752c:	431a      	orrs	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	4313      	orrs	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	3201      	adds	r2, #1
 8007538:	4319      	orrs	r1, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007548:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800754c:	d113      	bne.n	8007576 <FSMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007556:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	3b01      	subs	r3, #1
 800755e:	051b      	lsls	r3, r3, #20
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	431a      	orrs	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007598:	d11d      	bne.n	80075d6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075a2:	4b13      	ldr	r3, [pc, #76]	@ (80075f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	6852      	ldr	r2, [r2, #4]
 80075ae:	0112      	lsls	r2, r2, #4
 80075b0:	4311      	orrs	r1, r2
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	6892      	ldr	r2, [r2, #8]
 80075b6:	0212      	lsls	r2, r2, #8
 80075b8:	4311      	orrs	r1, r2
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	6992      	ldr	r2, [r2, #24]
 80075be:	4311      	orrs	r1, r2
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	68d2      	ldr	r2, [r2, #12]
 80075c4:	0412      	lsls	r2, r2, #16
 80075c6:	430a      	orrs	r2, r1
 80075c8:	ea43 0102 	orr.w	r1, r3, r2
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80075d4:	e005      	b.n	80075e2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80075de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	cff00000 	.word	0xcff00000

080075f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f043 0201 	orr.w	r2, r3, #1
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f023 0201 	bic.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007652:	d901      	bls.n	8007658 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e01b      	b.n	8007690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	daf2      	bge.n	8007646 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	019b      	lsls	r3, r3, #6
 8007668:	f043 0220 	orr.w	r2, r3, #32
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800767c:	d901      	bls.n	8007682 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e006      	b.n	8007690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b20      	cmp	r3, #32
 800768c:	d0f0      	beq.n	8007670 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076b4:	d901      	bls.n	80076ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e018      	b.n	80076ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	daf2      	bge.n	80076a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2210      	movs	r2, #16
 80076ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076d8:	d901      	bls.n	80076de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e006      	b.n	80076ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b10      	cmp	r3, #16
 80076e8:	d0f0      	beq.n	80076cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b089      	sub	sp, #36	@ 0x24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4611      	mov	r1, r2
 8007704:	461a      	mov	r2, r3
 8007706:	460b      	mov	r3, r1
 8007708:	71fb      	strb	r3, [r7, #7]
 800770a:	4613      	mov	r3, r2
 800770c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007716:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d123      	bne.n	8007766 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800771e:	88bb      	ldrh	r3, [r7, #4]
 8007720:	3303      	adds	r3, #3
 8007722:	089b      	lsrs	r3, r3, #2
 8007724:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007726:	2300      	movs	r3, #0
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	e018      	b.n	800775e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	031a      	lsls	r2, r3, #12
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	4413      	add	r3, r2
 8007734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007738:	461a      	mov	r2, r3
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	3301      	adds	r3, #1
 8007744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	3301      	adds	r3, #1
 800774a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	3301      	adds	r3, #1
 8007750:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	3301      	adds	r3, #1
 8007756:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	3301      	adds	r3, #1
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	429a      	cmp	r2, r3
 8007764:	d3e2      	bcc.n	800772c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3724      	adds	r7, #36	@ 0x24
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007774:	b480      	push	{r7}
 8007776:	b08b      	sub	sp, #44	@ 0x2c
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	089b      	lsrs	r3, r3, #2
 800778e:	b29b      	uxth	r3, r3
 8007790:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800779a:	2300      	movs	r3, #0
 800779c:	623b      	str	r3, [r7, #32]
 800779e:	e014      	b.n	80077ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ae:	3301      	adds	r3, #1
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	3301      	adds	r3, #1
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	3301      	adds	r3, #1
 80077bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	3301      	adds	r3, #1
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	3301      	adds	r3, #1
 80077c8:	623b      	str	r3, [r7, #32]
 80077ca:	6a3a      	ldr	r2, [r7, #32]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3e6      	bcc.n	80077a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077d2:	8bfb      	ldrh	r3, [r7, #30]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01e      	beq.n	8007816 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077e2:	461a      	mov	r2, r3
 80077e4:	f107 0310 	add.w	r3, r7, #16
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	701a      	strb	r2, [r3, #0]
      i++;
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	3301      	adds	r3, #1
 8007802:	623b      	str	r3, [r7, #32]
      pDest++;
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	3301      	adds	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800780a:	8bfb      	ldrh	r3, [r7, #30]
 800780c:	3b01      	subs	r3, #1
 800780e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007810:	8bfb      	ldrh	r3, [r7, #30]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1ea      	bne.n	80077ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007818:	4618      	mov	r0, r3
 800781a:	372c      	adds	r7, #44	@ 0x2c
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4013      	ands	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800783c:	68fb      	ldr	r3, [r7, #12]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	4013      	ands	r3, r2
 800787c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800787e:	68bb      	ldr	r3, [r7, #8]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	f003 0301 	and.w	r3, r3, #1
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80078e0:	4313      	orrs	r3, r2
 80078e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d107      	bne.n	80078fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078f0:	461a      	mov	r2, r3
 80078f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80078f6:	6053      	str	r3, [r2, #4]
 80078f8:	e00c      	b.n	8007914 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d107      	bne.n	8007910 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007906:	461a      	mov	r2, r3
 8007908:	f241 7370 	movw	r3, #6000	@ 0x1770
 800790c:	6053      	str	r3, [r2, #4]
 800790e:	e001      	b.n	8007914 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007942:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800794c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007950:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007952:	2064      	movs	r0, #100	@ 0x64
 8007954:	f7fb fc42 	bl	80031dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007964:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007966:	200a      	movs	r0, #10
 8007968:	f7fb fc38 	bl	80031dc <HAL_Delay>

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800799a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d109      	bne.n	80079ba <USB_DriveVbus+0x44>
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d106      	bne.n	80079ba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80079b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079b8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c4:	d109      	bne.n	80079da <USB_DriveVbus+0x64>
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d106      	bne.n	80079da <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80079d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079d8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	0c5b      	lsrs	r3, r3, #17
 8007a06:	f003 0303 	and.w	r3, r3, #3
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	4608      	mov	r0, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	70fb      	strb	r3, [r7, #3]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70bb      	strb	r3, [r7, #2]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a46:	461a      	mov	r2, r3
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007a4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d867      	bhi.n	8007b26 <USB_HC_Init+0x10e>
 8007a56:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <USB_HC_Init+0x44>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a6d 	.word	0x08007a6d
 8007a60:	08007ae9 	.word	0x08007ae9
 8007a64:	08007a6d 	.word	0x08007a6d
 8007a68:	08007aab 	.word	0x08007aab
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007a7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007a80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da51      	bge.n	8007b2c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	0151      	lsls	r1, r2, #5
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	440a      	add	r2, r1
 8007a9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aa6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007aa8:	e040      	b.n	8007b2c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007abc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007abe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	da34      	bge.n	8007b30 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ae4:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ae6:	e023      	b.n	8007b30 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af4:	461a      	mov	r2, r3
 8007af6:	f240 2325 	movw	r3, #549	@ 0x225
 8007afa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007afc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	da17      	bge.n	8007b34 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	0151      	lsls	r1, r2, #5
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	440a      	add	r2, r1
 8007b1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b1e:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007b22:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b24:	e006      	b.n	8007b34 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	77fb      	strb	r3, [r7, #31]
      break;
 8007b2a:	e004      	b.n	8007b36 <USB_HC_Init+0x11e>
      break;
 8007b2c:	bf00      	nop
 8007b2e:	e002      	b.n	8007b36 <USB_HC_Init+0x11e>
      break;
 8007b30:	bf00      	nop
 8007b32:	e000      	b.n	8007b36 <USB_HC_Init+0x11e>
      break;
 8007b34:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b42:	461a      	mov	r2, r3
 8007b44:	2300      	movs	r3, #0
 8007b46:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	0151      	lsls	r1, r2, #5
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b62:	f043 0302 	orr.w	r3, r3, #2
 8007b66:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b6e:	699a      	ldr	r2, [r3, #24]
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	2101      	movs	r1, #1
 8007b78:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7c:	6939      	ldr	r1, [r7, #16]
 8007b7e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007b82:	4313      	orrs	r3, r2
 8007b84:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007b92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da03      	bge.n	8007ba2 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	e001      	b.n	8007ba6 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff ff1e 	bl	80079e8 <USB_GetHostSpeed>
 8007bac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007bae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d106      	bne.n	8007bc4 <USB_HC_Init+0x1ac>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d003      	beq.n	8007bc4 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	e001      	b.n	8007bc8 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bc8:	787b      	ldrb	r3, [r7, #1]
 8007bca:	059b      	lsls	r3, r3, #22
 8007bcc:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007bd0:	78bb      	ldrb	r3, [r7, #2]
 8007bd2:	02db      	lsls	r3, r3, #11
 8007bd4:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bd8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007bda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007bde:	049b      	lsls	r3, r3, #18
 8007be0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007be4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007be6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007bec:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c06:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007c08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d003      	beq.n	8007c18 <USB_HC_Init+0x200>
 8007c10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d10f      	bne.n	8007c38 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	78fa      	ldrb	r2, [r7, #3]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c36:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3720      	adds	r7, #32
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop

08007c44 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08c      	sub	sp, #48	@ 0x30
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c60:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	799b      	ldrb	r3, [r3, #6]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d158      	bne.n	8007d1c <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	78db      	ldrb	r3, [r3, #3]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	8a92      	ldrh	r2, [r2, #20]
 8007c7c:	fb03 f202 	mul.w	r2, r3, r2
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	61da      	str	r2, [r3, #28]
 8007c84:	e079      	b.n	8007d7a <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	7c9b      	ldrb	r3, [r3, #18]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d130      	bne.n	8007cf0 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	2bbc      	cmp	r3, #188	@ 0xbc
 8007c94:	d918      	bls.n	8007cc8 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	8a9b      	ldrh	r3, [r3, #20]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d003      	beq.n	8007cb8 <USB_HC_StartXfer+0x74>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d103      	bne.n	8007cc0 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	e05c      	b.n	8007d7a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	60da      	str	r2, [r3, #12]
 8007cc6:	e058      	b.n	8007d7a <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	6a1a      	ldr	r2, [r3, #32]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d007      	beq.n	8007ce8 <USB_HC_StartXfer+0xa4>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d003      	beq.n	8007ce8 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	60da      	str	r2, [r3, #12]
 8007ce6:	e048      	b.n	8007d7a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2203      	movs	r2, #3
 8007cec:	60da      	str	r2, [r3, #12]
 8007cee:	e044      	b.n	8007d7a <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d10d      	bne.n	8007d12 <USB_HC_StartXfer+0xce>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	8a92      	ldrh	r2, [r2, #20]
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d907      	bls.n	8007d12 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	8a92      	ldrh	r2, [r2, #20]
 8007d08:	fb03 f202 	mul.w	r2, r3, r2
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	61da      	str	r2, [r3, #28]
 8007d10:	e033      	b.n	8007d7a <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6a1a      	ldr	r2, [r3, #32]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	61da      	str	r2, [r3, #28]
 8007d1a:	e02e      	b.n	8007d7a <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d018      	beq.n	8007d56 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	8a92      	ldrh	r2, [r2, #20]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	8a92      	ldrh	r2, [r2, #20]
 8007d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d38:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007d3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007d3c:	8b7b      	ldrh	r3, [r7, #26]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d90b      	bls.n	8007d5a <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8007d42:	8b7b      	ldrh	r3, [r7, #26]
 8007d44:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	8a92      	ldrh	r2, [r2, #20]
 8007d4c:	fb03 f202 	mul.w	r2, r3, r2
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	61da      	str	r2, [r3, #28]
 8007d54:	e001      	b.n	8007d5a <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8007d56:	2301      	movs	r3, #1
 8007d58:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	78db      	ldrb	r3, [r3, #3]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	8a92      	ldrh	r2, [r2, #20]
 8007d68:	fb03 f202 	mul.w	r2, r3, r2
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	61da      	str	r2, [r3, #28]
 8007d70:	e003      	b.n	8007d7a <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	6a1a      	ldr	r2, [r3, #32]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d84:	04d9      	lsls	r1, r3, #19
 8007d86:	4ba4      	ldr	r3, [pc, #656]	@ (8008018 <USB_HC_StartXfer+0x3d4>)
 8007d88:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d8a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	7d9b      	ldrb	r3, [r3, #22]
 8007d90:	075b      	lsls	r3, r3, #29
 8007d92:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d96:	69f9      	ldr	r1, [r7, #28]
 8007d98:	0148      	lsls	r0, r1, #5
 8007d9a:	6a39      	ldr	r1, [r7, #32]
 8007d9c:	4401      	add	r1, r0
 8007d9e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007da2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007da4:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d009      	beq.n	8007dc0 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6999      	ldr	r1, [r3, #24]
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dbc:	460a      	mov	r2, r1
 8007dbe:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bf0c      	ite	eq
 8007dd0:	2301      	moveq	r3, #1
 8007dd2:	2300      	movne	r3, #0
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	6a3a      	ldr	r2, [r7, #32]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007df2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007df6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	7e7b      	ldrb	r3, [r7, #25]
 8007e08:	075b      	lsls	r3, r3, #29
 8007e0a:	69f9      	ldr	r1, [r7, #28]
 8007e0c:	0148      	lsls	r0, r1, #5
 8007e0e:	6a39      	ldr	r1, [r7, #32]
 8007e10:	4401      	add	r1, r0
 8007e12:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007e16:	4313      	orrs	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	799b      	ldrb	r3, [r3, #6]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	f040 80c4 	bne.w	8007fac <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	7c5b      	ldrb	r3, [r3, #17]
 8007e28:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	6a3a      	ldr	r2, [r7, #32]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007e3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007e40:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	69fa      	ldr	r2, [r7, #28]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	6a3a      	ldr	r2, [r7, #32]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e5c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007e60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	79db      	ldrb	r3, [r3, #7]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d123      	bne.n	8007eb2 <USB_HC_StartXfer+0x26e>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	78db      	ldrb	r3, [r3, #3]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d11f      	bne.n	8007eb2 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	0151      	lsls	r1, r2, #5
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	440a      	add	r2, r1
 8007e88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e90:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	6a3a      	ldr	r2, [r7, #32]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eb0:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	7c9b      	ldrb	r3, [r3, #18]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d003      	beq.n	8007ec2 <USB_HC_StartXfer+0x27e>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	7c9b      	ldrb	r3, [r3, #18]
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d117      	bne.n	8007ef2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d113      	bne.n	8007ef2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	78db      	ldrb	r3, [r3, #3]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d10f      	bne.n	8007ef2 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	69fa      	ldr	r2, [r7, #28]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	6a3a      	ldr	r2, [r7, #32]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ef0:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	7c9b      	ldrb	r3, [r3, #18]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d163      	bne.n	8007fc2 <USB_HC_StartXfer+0x37e>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	78db      	ldrb	r3, [r3, #3]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d15f      	bne.n	8007fc2 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d859      	bhi.n	8007fc0 <USB_HC_StartXfer+0x37c>
 8007f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f14 <USB_HC_StartXfer+0x2d0>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f25 	.word	0x08007f25
 8007f18:	08007f47 	.word	0x08007f47
 8007f1c:	08007f69 	.word	0x08007f69
 8007f20:	08007f8b 	.word	0x08007f8b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	0151      	lsls	r1, r2, #5
 8007f36:	6a3a      	ldr	r2, [r7, #32]
 8007f38:	440a      	add	r2, r1
 8007f3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f42:	6053      	str	r3, [r2, #4]
          break;
 8007f44:	e03d      	b.n	8007fc2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	0151      	lsls	r1, r2, #5
 8007f58:	6a3a      	ldr	r2, [r7, #32]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f60:	f043 030e 	orr.w	r3, r3, #14
 8007f64:	6053      	str	r3, [r2, #4]
          break;
 8007f66:	e02c      	b.n	8007fc2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	0151      	lsls	r1, r2, #5
 8007f7a:	6a3a      	ldr	r2, [r7, #32]
 8007f7c:	440a      	add	r2, r1
 8007f7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f86:	6053      	str	r3, [r2, #4]
          break;
 8007f88:	e01b      	b.n	8007fc2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fa8:	6053      	str	r3, [r2, #4]
          break;
 8007faa:	e00a      	b.n	8007fc2 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6053      	str	r3, [r2, #4]
 8007fbe:	e000      	b.n	8007fc2 <USB_HC_StartXfer+0x37e>
          break;
 8007fc0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007fd8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	78db      	ldrb	r3, [r3, #3]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d004      	beq.n	8007fec <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	e003      	b.n	8007ff4 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ff2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ffa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	4413      	add	r3, r2
 8008004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008008:	461a      	mov	r2, r3
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e055      	b.n	80080c4 <USB_HC_StartXfer+0x480>
 8008018:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	78db      	ldrb	r3, [r3, #3]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d14e      	bne.n	80080c2 <USB_HC_StartXfer+0x47e>
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d04a      	beq.n	80080c2 <USB_HC_StartXfer+0x47e>
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	79db      	ldrb	r3, [r3, #7]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d146      	bne.n	80080c2 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	7c9b      	ldrb	r3, [r3, #18]
 8008038:	2b03      	cmp	r3, #3
 800803a:	d831      	bhi.n	80080a0 <USB_HC_StartXfer+0x45c>
 800803c:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <USB_HC_StartXfer+0x400>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008055 	.word	0x08008055
 8008048:	08008079 	.word	0x08008079
 800804c:	08008055 	.word	0x08008055
 8008050:	08008079 	.word	0x08008079
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	3303      	adds	r3, #3
 800805a:	089b      	lsrs	r3, r3, #2
 800805c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800805e:	8afa      	ldrh	r2, [r7, #22]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	b29b      	uxth	r3, r3
 8008066:	429a      	cmp	r2, r3
 8008068:	d91c      	bls.n	80080a4 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	f043 0220 	orr.w	r2, r3, #32
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	619a      	str	r2, [r3, #24]
        }
        break;
 8008076:	e015      	b.n	80080a4 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	3303      	adds	r3, #3
 800807e:	089b      	lsrs	r3, r3, #2
 8008080:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008082:	8afa      	ldrh	r2, [r7, #22]
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	b29b      	uxth	r3, r3
 800808e:	429a      	cmp	r2, r3
 8008090:	d90a      	bls.n	80080a8 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	619a      	str	r2, [r3, #24]
        }
        break;
 800809e:	e003      	b.n	80080a8 <USB_HC_StartXfer+0x464>

      default:
        break;
 80080a0:	bf00      	nop
 80080a2:	e002      	b.n	80080aa <USB_HC_StartXfer+0x466>
        break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <USB_HC_StartXfer+0x466>
        break;
 80080a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	6999      	ldr	r1, [r3, #24]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	785a      	ldrb	r2, [r3, #1]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2000      	movs	r0, #0
 80080ba:	9000      	str	r0, [sp, #0]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7ff fb1b 	bl	80076f8 <USB_WritePacket>
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3728      	adds	r7, #40	@ 0x28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	b29b      	uxth	r3, r3
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b089      	sub	sp, #36	@ 0x24
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	0c9b      	lsrs	r3, r3, #18
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	0fdb      	lsrs	r3, r3, #31
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	0fdb      	lsrs	r3, r3, #31
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 0320 	and.w	r3, r3, #32
 8008150:	2b20      	cmp	r3, #32
 8008152:	d10d      	bne.n	8008170 <USB_HC_Halt+0x82>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10a      	bne.n	8008170 <USB_HC_Halt+0x82>
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d002      	beq.n	800816c <USB_HC_Halt+0x7e>
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d101      	bne.n	8008170 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	e0d8      	b.n	8008322 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <USB_HC_Halt+0x8e>
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d173      	bne.n	8008264 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	440a      	add	r2, r1
 8008192:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008196:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800819a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d14a      	bne.n	800823e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d133      	bne.n	800821c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081f2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	3301      	adds	r3, #1
 80081f8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008200:	d82e      	bhi.n	8008260 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008218:	d0ec      	beq.n	80081f4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800821a:	e081      	b.n	8008320 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	440a      	add	r2, r1
 8008232:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008236:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800823a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800823c:	e070      	b.n	8008320 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	4413      	add	r3, r2
 8008246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	69fa      	ldr	r2, [r7, #28]
 8008252:	440a      	add	r2, r1
 8008254:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008258:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800825c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800825e:	e05f      	b.n	8008320 <USB_HC_Halt+0x232>
            break;
 8008260:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008262:	e05d      	b.n	8008320 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	0151      	lsls	r1, r2, #5
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	440a      	add	r2, r1
 800827a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800827e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008282:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d133      	bne.n	80082fc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	0151      	lsls	r1, r2, #5
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	440a      	add	r2, r1
 80082aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	0151      	lsls	r1, r2, #5
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	440a      	add	r2, r1
 80082ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082e0:	d81d      	bhi.n	800831e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082f8:	d0ec      	beq.n	80082d4 <USB_HC_Halt+0x1e6>
 80082fa:	e011      	b.n	8008320 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	4413      	add	r3, r2
 8008304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	0151      	lsls	r1, r2, #5
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	440a      	add	r2, r1
 8008312:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008316:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	e000      	b.n	8008320 <USB_HC_Halt+0x232>
          break;
 800831e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3724      	adds	r7, #36	@ 0x24
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b088      	sub	sp, #32
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7ff f967 	bl	8007616 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008348:	2110      	movs	r1, #16
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff f974 	bl	8007638 <USB_FlushTxFifo>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff f99e 	bl	800769c <USB_FlushRxFifo>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]
 800836e:	e01f      	b.n	80083b0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	4413      	add	r3, r2
 8008378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008386:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800838e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008396:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083a4:	461a      	mov	r2, r3
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	3301      	adds	r3, #1
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	2b0f      	cmp	r3, #15
 80083b4:	d9dc      	bls.n	8008370 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80083b6:	2300      	movs	r3, #0
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	e034      	b.n	8008426 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083d2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083da:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083e2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f0:	461a      	mov	r2, r3
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008402:	d80c      	bhi.n	800841e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	4413      	add	r3, r2
 800840c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008416:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800841a:	d0ec      	beq.n	80083f6 <USB_StopHost+0xc8>
 800841c:	e000      	b.n	8008420 <USB_StopHost+0xf2>
        break;
 800841e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	3301      	adds	r3, #1
 8008424:	61bb      	str	r3, [r7, #24]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b0f      	cmp	r3, #15
 800842a:	d9c7      	bls.n	80083bc <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008432:	461a      	mov	r2, r3
 8008434:	f04f 33ff 	mov.w	r3, #4294967295
 8008438:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f04f 32ff 	mov.w	r2, #4294967295
 8008440:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff f8d6 	bl	80075f4 <USB_EnableGlobalInt>

  return ret;
 8008448:	7ffb      	ldrb	r3, [r7, #31]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	e009      	b.n	8008478 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	33e0      	adds	r3, #224	@ 0xe0
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	2200      	movs	r2, #0
 8008470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b0f      	cmp	r3, #15
 800847c:	d9f2      	bls.n	8008464 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	e009      	b.n	8008498 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800848e:	2200      	movs	r2, #0
 8008490:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849e:	d3f1      	bcc.n	8008484 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2240      	movs	r2, #64	@ 0x40
 80084c4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	331c      	adds	r3, #28
 80084f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084f4:	2100      	movs	r1, #0
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 fdc6 	bl	800a088 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f001 fdbd 	bl	800a088 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008514:	2212      	movs	r2, #18
 8008516:	2100      	movs	r1, #0
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fdb5 	bl	800a088 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008524:	223e      	movs	r2, #62	@ 0x3e
 8008526:	2100      	movs	r1, #0
 8008528:	4618      	mov	r0, r3
 800852a:	f001 fdad 	bl	800a088 <memset>

  return USBH_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 fb7d 	bl	8009c40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008546:	2101      	movs	r1, #1
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 fc64 	bl	8009e16 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af04      	add	r7, sp, #16
 800855e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008560:	2302      	movs	r3, #2
 8008562:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	d102      	bne.n	800857a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2203      	movs	r2, #3
 8008578:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b0b      	cmp	r3, #11
 8008582:	f200 81bb 	bhi.w	80088fc <USBH_Process+0x3a4>
 8008586:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <USBH_Process+0x34>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	080085bd 	.word	0x080085bd
 8008590:	080085ef 	.word	0x080085ef
 8008594:	08008657 	.word	0x08008657
 8008598:	08008897 	.word	0x08008897
 800859c:	080088fd 	.word	0x080088fd
 80085a0:	080086f7 	.word	0x080086f7
 80085a4:	0800883d 	.word	0x0800883d
 80085a8:	0800872d 	.word	0x0800872d
 80085ac:	0800874d 	.word	0x0800874d
 80085b0:	0800876b 	.word	0x0800876b
 80085b4:	080087af 	.word	0x080087af
 80085b8:	0800887f 	.word	0x0800887f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 819b 	beq.w	8008900 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80085d0:	20c8      	movs	r0, #200	@ 0xc8
 80085d2:	f001 fc37 	bl	8009e44 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f001 fb8f 	bl	8009cfa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085ec:	e188      	b.n	8008900 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d107      	bne.n	8008608 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008606:	e18a      	b.n	800891e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800860e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008612:	d914      	bls.n	800863e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800861a:	3301      	adds	r3, #1
 800861c:	b2da      	uxtb	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800862a:	2b03      	cmp	r3, #3
 800862c:	d903      	bls.n	8008636 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	220d      	movs	r2, #13
 8008632:	701a      	strb	r2, [r3, #0]
      break;
 8008634:	e173      	b.n	800891e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	701a      	strb	r2, [r3, #0]
      break;
 800863c:	e16f      	b.n	800891e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008644:	f103 020a 	add.w	r2, r3, #10
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800864e:	200a      	movs	r0, #10
 8008650:	f001 fbf8 	bl	8009e44 <USBH_Delay>
      break;
 8008654:	e163      	b.n	800891e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008666:	2104      	movs	r1, #4
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800866c:	2064      	movs	r0, #100	@ 0x64
 800866e:	f001 fbe9 	bl	8009e44 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fb1a 	bl	8009cac <USBH_LL_GetSpeed>
 8008678:	4603      	mov	r3, r0
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2205      	movs	r2, #5
 8008686:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008688:	2100      	movs	r1, #0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fa16 	bl	8009abc <USBH_AllocPipe>
 8008690:	4603      	mov	r3, r0
 8008692:	461a      	mov	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008698:	2180      	movs	r1, #128	@ 0x80
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fa0e 	bl	8009abc <USBH_AllocPipe>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	7919      	ldrb	r1, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80086bc:	9202      	str	r2, [sp, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	9201      	str	r2, [sp, #4]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	4603      	mov	r3, r0
 80086c6:	2280      	movs	r2, #128	@ 0x80
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 f9d8 	bl	8009a7e <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7959      	ldrb	r1, [r3, #5]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80086e2:	9202      	str	r2, [sp, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	9201      	str	r2, [sp, #4]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	4603      	mov	r3, r0
 80086ec:	2200      	movs	r2, #0
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 f9c5 	bl	8009a7e <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086f4:	e113      	b.n	800891e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f916 	bl	8008928 <USBH_HandleEnum>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	f040 80fd 	bne.w	8008904 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008718:	2b01      	cmp	r3, #1
 800871a:	d103      	bne.n	8008724 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2208      	movs	r2, #8
 8008720:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008722:	e0ef      	b.n	8008904 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2207      	movs	r2, #7
 8008728:	701a      	strb	r2, [r3, #0]
      break;
 800872a:	e0eb      	b.n	8008904 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 80e8 	beq.w	8008908 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800873e:	2101      	movs	r1, #1
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2208      	movs	r2, #8
 8008748:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800874a:	e0dd      	b.n	8008908 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fc2b 	bl	8008fb0 <USBH_SetCfg>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	f040 80d5 	bne.w	800890c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2209      	movs	r2, #9
 8008766:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008768:	e0d0      	b.n	800890c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008770:	f003 0320 	and.w	r3, r3, #32
 8008774:	2b00      	cmp	r3, #0
 8008776:	d016      	beq.n	80087a6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008778:	2101      	movs	r1, #1
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fc3b 	bl	8008ff6 <USBH_SetFeature>
 8008780:	4603      	mov	r3, r0
 8008782:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	220a      	movs	r2, #10
 8008790:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008792:	e0bd      	b.n	8008910 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b03      	cmp	r3, #3
 800879a:	f040 80b9 	bne.w	8008910 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	220a      	movs	r2, #10
 80087a2:	701a      	strb	r2, [r3, #0]
      break;
 80087a4:	e0b4      	b.n	8008910 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	220a      	movs	r2, #10
 80087aa:	701a      	strb	r2, [r3, #0]
      break;
 80087ac:	e0b0      	b.n	8008910 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80ad 	beq.w	8008914 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
 80087c6:	e016      	b.n	80087f6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80087c8:	7bfa      	ldrb	r2, [r7, #15]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	32de      	adds	r2, #222	@ 0xde
 80087ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d2:	791a      	ldrb	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80087da:	429a      	cmp	r2, r3
 80087dc:	d108      	bne.n	80087f0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80087de:	7bfa      	ldrb	r2, [r7, #15]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	32de      	adds	r2, #222	@ 0xde
 80087e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80087ee:	e005      	b.n	80087fc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	3301      	adds	r3, #1
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0e5      	beq.n	80087c8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d016      	beq.n	8008834 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d109      	bne.n	800882c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2206      	movs	r2, #6
 800881c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008824:	2103      	movs	r1, #3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800882a:	e073      	b.n	8008914 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	220d      	movs	r2, #13
 8008830:	701a      	strb	r2, [r3, #0]
      break;
 8008832:	e06f      	b.n	8008914 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	220d      	movs	r2, #13
 8008838:	701a      	strb	r2, [r3, #0]
      break;
 800883a:	e06b      	b.n	8008914 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d017      	beq.n	8008876 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
 8008852:	4603      	mov	r3, r0
 8008854:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	220b      	movs	r2, #11
 8008862:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008864:	e058      	b.n	8008918 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d154      	bne.n	8008918 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	220d      	movs	r2, #13
 8008872:	701a      	strb	r2, [r3, #0]
      break;
 8008874:	e050      	b.n	8008918 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	220d      	movs	r2, #13
 800887a:	701a      	strb	r2, [r3, #0]
      break;
 800887c:	e04c      	b.n	8008918 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d049      	beq.n	800891c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	4798      	blx	r3
      }
      break;
 8008894:	e042      	b.n	800891c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fdd7 	bl	8008452 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088d2:	2105      	movs	r1, #5
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d107      	bne.n	80088f4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7ff fe23 	bl	8008538 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088f2:	e014      	b.n	800891e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f001 f9a3 	bl	8009c40 <USBH_LL_Start>
      break;
 80088fa:	e010      	b.n	800891e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80088fc:	bf00      	nop
 80088fe:	e00e      	b.n	800891e <USBH_Process+0x3c6>
      break;
 8008900:	bf00      	nop
 8008902:	e00c      	b.n	800891e <USBH_Process+0x3c6>
      break;
 8008904:	bf00      	nop
 8008906:	e00a      	b.n	800891e <USBH_Process+0x3c6>
    break;
 8008908:	bf00      	nop
 800890a:	e008      	b.n	800891e <USBH_Process+0x3c6>
      break;
 800890c:	bf00      	nop
 800890e:	e006      	b.n	800891e <USBH_Process+0x3c6>
      break;
 8008910:	bf00      	nop
 8008912:	e004      	b.n	800891e <USBH_Process+0x3c6>
      break;
 8008914:	bf00      	nop
 8008916:	e002      	b.n	800891e <USBH_Process+0x3c6>
      break;
 8008918:	bf00      	nop
 800891a:	e000      	b.n	800891e <USBH_Process+0x3c6>
      break;
 800891c:	bf00      	nop
  }
  return USBH_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b088      	sub	sp, #32
 800892c:	af04      	add	r7, sp, #16
 800892e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008930:	2301      	movs	r3, #1
 8008932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008934:	2301      	movs	r3, #1
 8008936:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	2b07      	cmp	r3, #7
 800893e:	f200 81bd 	bhi.w	8008cbc <USBH_HandleEnum+0x394>
 8008942:	a201      	add	r2, pc, #4	@ (adr r2, 8008948 <USBH_HandleEnum+0x20>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008969 	.word	0x08008969
 800894c:	08008a23 	.word	0x08008a23
 8008950:	08008a8d 	.word	0x08008a8d
 8008954:	08008b17 	.word	0x08008b17
 8008958:	08008b81 	.word	0x08008b81
 800895c:	08008bf1 	.word	0x08008bf1
 8008960:	08008c37 	.word	0x08008c37
 8008964:	08008c7d 	.word	0x08008c7d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008968:	2108      	movs	r1, #8
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa3d 	bl	8008dea <USBH_Get_DevDesc>
 8008970:	4603      	mov	r3, r0
 8008972:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d12e      	bne.n	80089d8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	7919      	ldrb	r1, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800899e:	9202      	str	r2, [sp, #8]
 80089a0:	2200      	movs	r2, #0
 80089a2:	9201      	str	r2, [sp, #4]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	4603      	mov	r3, r0
 80089a8:	2280      	movs	r2, #128	@ 0x80
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f867 	bl	8009a7e <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7959      	ldrb	r1, [r3, #5]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089c4:	9202      	str	r2, [sp, #8]
 80089c6:	2200      	movs	r2, #0
 80089c8:	9201      	str	r2, [sp, #4]
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	4603      	mov	r3, r0
 80089ce:	2200      	movs	r2, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f854 	bl	8009a7e <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80089d6:	e173      	b.n	8008cc0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b03      	cmp	r3, #3
 80089dc:	f040 8170 	bne.w	8008cc0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089e6:	3301      	adds	r3, #1
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d903      	bls.n	8008a02 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	220d      	movs	r2, #13
 80089fe:	701a      	strb	r2, [r3, #0]
      break;
 8008a00:	e15e      	b.n	8008cc0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	795b      	ldrb	r3, [r3, #5]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 f878 	bl	8009afe <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	791b      	ldrb	r3, [r3, #4]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f872 	bl	8009afe <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	701a      	strb	r2, [r3, #0]
      break;
 8008a20:	e14e      	b.n	8008cc0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008a22:	2112      	movs	r1, #18
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f9e0 	bl	8008dea <USBH_Get_DevDesc>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d103      	bne.n	8008a3c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a3a:	e143      	b.n	8008cc4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	f040 8140 	bne.w	8008cc4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d903      	bls.n	8008a66 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	220d      	movs	r2, #13
 8008a62:	701a      	strb	r2, [r3, #0]
      break;
 8008a64:	e12e      	b.n	8008cc4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	795b      	ldrb	r3, [r3, #5]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 f846 	bl	8009afe <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	791b      	ldrb	r3, [r3, #4]
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f001 f840 	bl	8009afe <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	701a      	strb	r2, [r3, #0]
      break;
 8008a8a:	e11b      	b.n	8008cc4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fa6a 	bl	8008f68 <USBH_SetAddress>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d130      	bne.n	8008b00 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008a9e:	2002      	movs	r0, #2
 8008aa0:	f001 f9d0 	bl	8009e44 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2203      	movs	r2, #3
 8008ab0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7919      	ldrb	r1, [r3, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ac6:	9202      	str	r2, [sp, #8]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	9201      	str	r2, [sp, #4]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2280      	movs	r2, #128	@ 0x80
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 ffd3 	bl	8009a7e <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7959      	ldrb	r1, [r3, #5]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008aec:	9202      	str	r2, [sp, #8]
 8008aee:	2200      	movs	r2, #0
 8008af0:	9201      	str	r2, [sp, #4]
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	4603      	mov	r3, r0
 8008af6:	2200      	movs	r2, #0
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 ffc0 	bl	8009a7e <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008afe:	e0e3      	b.n	8008cc8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	f040 80e0 	bne.w	8008cc8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	220d      	movs	r2, #13
 8008b0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	705a      	strb	r2, [r3, #1]
      break;
 8008b14:	e0d8      	b.n	8008cc8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008b16:	2109      	movs	r1, #9
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f992 	bl	8008e42 <USBH_Get_CfgDesc>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d103      	bne.n	8008b30 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b2e:	e0cd      	b.n	8008ccc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	f040 80ca 	bne.w	8008ccc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b3e:	3301      	adds	r3, #1
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d903      	bls.n	8008b5a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	220d      	movs	r2, #13
 8008b56:	701a      	strb	r2, [r3, #0]
      break;
 8008b58:	e0b8      	b.n	8008ccc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	795b      	ldrb	r3, [r3, #5]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 ffcc 	bl	8009afe <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	791b      	ldrb	r3, [r3, #4]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 ffc6 	bl	8009afe <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	701a      	strb	r2, [r3, #0]
      break;
 8008b7e:	e0a5      	b.n	8008ccc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f95a 	bl	8008e42 <USBH_Get_CfgDesc>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2205      	movs	r2, #5
 8008b9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b9e:	e097      	b.n	8008cd0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	f040 8094 	bne.w	8008cd0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bae:	3301      	adds	r3, #1
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d903      	bls.n	8008bca <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	220d      	movs	r2, #13
 8008bc6:	701a      	strb	r2, [r3, #0]
      break;
 8008bc8:	e082      	b.n	8008cd0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	795b      	ldrb	r3, [r3, #5]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 ff94 	bl	8009afe <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	791b      	ldrb	r3, [r3, #4]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 ff8e 	bl	8009afe <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	701a      	strb	r2, [r3, #0]
      break;
 8008bee:	e06f      	b.n	8008cd0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d019      	beq.n	8008c2e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c06:	23ff      	movs	r3, #255	@ 0xff
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f944 	bl	8008e96 <USBH_Get_StringDesc>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d103      	bne.n	8008c20 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2206      	movs	r2, #6
 8008c1c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c1e:	e059      	b.n	8008cd4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d156      	bne.n	8008cd4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2206      	movs	r2, #6
 8008c2a:	705a      	strb	r2, [r3, #1]
      break;
 8008c2c:	e052      	b.n	8008cd4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2206      	movs	r2, #6
 8008c32:	705a      	strb	r2, [r3, #1]
      break;
 8008c34:	e04e      	b.n	8008cd4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d019      	beq.n	8008c74 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c4c:	23ff      	movs	r3, #255	@ 0xff
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f921 	bl	8008e96 <USBH_Get_StringDesc>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2207      	movs	r2, #7
 8008c62:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c64:	e038      	b.n	8008cd8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d135      	bne.n	8008cd8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2207      	movs	r2, #7
 8008c70:	705a      	strb	r2, [r3, #1]
      break;
 8008c72:	e031      	b.n	8008cd8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2207      	movs	r2, #7
 8008c78:	705a      	strb	r2, [r3, #1]
      break;
 8008c7a:	e02d      	b.n	8008cd8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d017      	beq.n	8008cb6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c92:	23ff      	movs	r3, #255	@ 0xff
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8fe 	bl	8008e96 <USBH_Get_StringDesc>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008ca8:	e018      	b.n	8008cdc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d115      	bne.n	8008cdc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb4:	e012      	b.n	8008cdc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cba:	e00f      	b.n	8008cdc <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008cbc:	bf00      	nop
 8008cbe:	e00e      	b.n	8008cde <USBH_HandleEnum+0x3b6>
      break;
 8008cc0:	bf00      	nop
 8008cc2:	e00c      	b.n	8008cde <USBH_HandleEnum+0x3b6>
      break;
 8008cc4:	bf00      	nop
 8008cc6:	e00a      	b.n	8008cde <USBH_HandleEnum+0x3b6>
      break;
 8008cc8:	bf00      	nop
 8008cca:	e008      	b.n	8008cde <USBH_HandleEnum+0x3b6>
      break;
 8008ccc:	bf00      	nop
 8008cce:	e006      	b.n	8008cde <USBH_HandleEnum+0x3b6>
      break;
 8008cd0:	bf00      	nop
 8008cd2:	e004      	b.n	8008cde <USBH_HandleEnum+0x3b6>
      break;
 8008cd4:	bf00      	nop
 8008cd6:	e002      	b.n	8008cde <USBH_HandleEnum+0x3b6>
      break;
 8008cd8:	bf00      	nop
 8008cda:	e000      	b.n	8008cde <USBH_HandleEnum+0x3b6>
      break;
 8008cdc:	bf00      	nop
  }
  return Status;
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f804 	bl	8008d0c <USBH_HandleSof>
}
 8008d04:	bf00      	nop
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b0b      	cmp	r3, #11
 8008d1c:	d10a      	bne.n	8008d34 <USBH_HandleSof+0x28>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	4798      	blx	r3
  }
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008d4c:	bf00      	nop
}
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008d68:	bf00      	nop
}
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 ff57 	bl	8009c76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	791b      	ldrb	r3, [r3, #4]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fe95 	bl	8009afe <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	795b      	ldrb	r3, [r3, #5]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fe8f 	bl	8009afe <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af02      	add	r7, sp, #8
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008df6:	887b      	ldrh	r3, [r7, #2]
 8008df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dfc:	d901      	bls.n	8008e02 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e01b      	b.n	8008e3a <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008e08:	887b      	ldrh	r3, [r7, #2]
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e12:	2100      	movs	r1, #0
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f872 	bl	8008efe <USBH_GetDescriptor>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d109      	bne.n	8008e38 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e2a:	887a      	ldrh	r2, [r7, #2]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f906 	bl	8009040 <USBH_ParseDevDesc>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b086      	sub	sp, #24
 8008e46:	af02      	add	r7, sp, #8
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	331c      	adds	r3, #28
 8008e52:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008e54:	887b      	ldrh	r3, [r7, #2]
 8008e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e5a:	d901      	bls.n	8008e60 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e016      	b.n	8008e8e <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008e60:	887b      	ldrh	r3, [r7, #2]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f846 	bl	8008efe <USBH_GetDescriptor>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d107      	bne.n	8008e8c <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008e7c:	887b      	ldrh	r3, [r7, #2]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68b9      	ldr	r1, [r7, #8]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f98c 	bl	80091a0 <USBH_ParseCfgDesc>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b088      	sub	sp, #32
 8008e9a:	af02      	add	r7, sp, #8
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	72fb      	strb	r3, [r7, #11]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008eaa:	893b      	ldrh	r3, [r7, #8]
 8008eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eb0:	d802      	bhi.n	8008eb8 <USBH_Get_StringDesc+0x22>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e01c      	b.n	8008ef6 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008ec4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008ecc:	893b      	ldrh	r3, [r7, #8]
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 f812 	bl	8008efe <USBH_GetDescriptor>
 8008eda:	4603      	mov	r3, r0
 8008edc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d107      	bne.n	8008ef4 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008eea:	893a      	ldrh	r2, [r7, #8]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fb6a 	bl	80095c8 <USBH_ParseStringDesc>
  }

  return status;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	607b      	str	r3, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	72fb      	strb	r3, [r7, #11]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	789b      	ldrb	r3, [r3, #2]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d11c      	bne.n	8008f52 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2206      	movs	r2, #6
 8008f28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	893a      	ldrh	r2, [r7, #8]
 8008f2e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f30:	893b      	ldrh	r3, [r7, #8]
 8008f32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f3a:	d104      	bne.n	8008f46 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f240 4209 	movw	r2, #1033	@ 0x409
 8008f42:	829a      	strh	r2, [r3, #20]
 8008f44:	e002      	b.n	8008f4c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8b3a      	ldrh	r2, [r7, #24]
 8008f50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008f52:	8b3b      	ldrh	r3, [r7, #24]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 fb82 	bl	8009662 <USBH_CtlReq>
 8008f5e:	4603      	mov	r3, r0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	789b      	ldrb	r3, [r3, #2]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d10f      	bne.n	8008f9c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2205      	movs	r2, #5
 8008f86:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fb5e 	bl	8009662 <USBH_CtlReq>
 8008fa6:	4603      	mov	r3, r0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	789b      	ldrb	r3, [r3, #2]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d10e      	bne.n	8008fe2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2209      	movs	r2, #9
 8008fce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	887a      	ldrh	r2, [r7, #2]
 8008fd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fb3b 	bl	8009662 <USBH_CtlReq>
 8008fec:	4603      	mov	r3, r0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	789b      	ldrb	r3, [r3, #2]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d10f      	bne.n	800902a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2203      	movs	r2, #3
 8009014:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	b29a      	uxth	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fb17 	bl	8009662 <USBH_CtlReq>
 8009034:	4603      	mov	r3, r0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009054:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009060:	2302      	movs	r3, #2
 8009062:	e094      	b.n	800918e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	785a      	ldrb	r2, [r3, #1]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	3302      	adds	r3, #2
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3303      	adds	r3, #3
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	021b      	lsls	r3, r3, #8
 8009084:	b29b      	uxth	r3, r3
 8009086:	4313      	orrs	r3, r2
 8009088:	b29a      	uxth	r2, r3
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	791a      	ldrb	r2, [r3, #4]
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	795a      	ldrb	r2, [r3, #5]
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	799a      	ldrb	r2, [r3, #6]
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	79da      	ldrb	r2, [r3, #7]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d11b      	bne.n	80090fa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	79db      	ldrb	r3, [r3, #7]
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	dc0f      	bgt.n	80090ea <USBH_ParseDevDesc+0xaa>
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	db0f      	blt.n	80090ee <USBH_ParseDevDesc+0xae>
 80090ce:	3b08      	subs	r3, #8
 80090d0:	4a32      	ldr	r2, [pc, #200]	@ (800919c <USBH_ParseDevDesc+0x15c>)
 80090d2:	fa22 f303 	lsr.w	r3, r2, r3
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bf14      	ite	ne
 80090de:	2301      	movne	r3, #1
 80090e0:	2300      	moveq	r3, #0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <USBH_ParseDevDesc+0xb6>
 80090e8:	e001      	b.n	80090ee <USBH_ParseDevDesc+0xae>
 80090ea:	2b40      	cmp	r3, #64	@ 0x40
 80090ec:	d003      	beq.n	80090f6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2208      	movs	r2, #8
 80090f2:	71da      	strb	r2, [r3, #7]
        break;
 80090f4:	e000      	b.n	80090f8 <USBH_ParseDevDesc+0xb8>
        break;
 80090f6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80090f8:	e00e      	b.n	8009118 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009100:	2b02      	cmp	r3, #2
 8009102:	d107      	bne.n	8009114 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	79db      	ldrb	r3, [r3, #7]
 8009108:	2b08      	cmp	r3, #8
 800910a:	d005      	beq.n	8009118 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	2208      	movs	r2, #8
 8009110:	71da      	strb	r2, [r3, #7]
 8009112:	e001      	b.n	8009118 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009114:	2303      	movs	r3, #3
 8009116:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	2b08      	cmp	r3, #8
 800911c:	d936      	bls.n	800918c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	3308      	adds	r3, #8
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	461a      	mov	r2, r3
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	3309      	adds	r3, #9
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	b29b      	uxth	r3, r3
 8009130:	4313      	orrs	r3, r2
 8009132:	b29a      	uxth	r2, r3
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	330a      	adds	r3, #10
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	330b      	adds	r3, #11
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	021b      	lsls	r3, r3, #8
 8009148:	b29b      	uxth	r3, r3
 800914a:	4313      	orrs	r3, r2
 800914c:	b29a      	uxth	r2, r3
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	330c      	adds	r3, #12
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	461a      	mov	r2, r3
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	330d      	adds	r3, #13
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	b29b      	uxth	r3, r3
 8009164:	4313      	orrs	r3, r2
 8009166:	b29a      	uxth	r2, r3
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	7b9a      	ldrb	r2, [r3, #14]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	7bda      	ldrb	r2, [r3, #15]
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	7c1a      	ldrb	r2, [r3, #16]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	7c5a      	ldrb	r2, [r3, #17]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
}
 800918e:	4618      	mov	r0, r3
 8009190:	371c      	adds	r7, #28
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	01000101 	.word	0x01000101

080091a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08c      	sub	sp, #48	@ 0x30
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	4613      	mov	r3, r2
 80091ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80091b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80091ce:	2302      	movs	r3, #2
 80091d0:	e0da      	b.n	8009388 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	781a      	ldrb	r2, [r3, #0]
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	785a      	ldrb	r2, [r3, #1]
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	3302      	adds	r3, #2
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	3303      	adds	r3, #3
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4313      	orrs	r3, r2
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009200:	bf28      	it	cs
 8009202:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009206:	b29a      	uxth	r2, r3
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	791a      	ldrb	r2, [r3, #4]
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	795a      	ldrb	r2, [r3, #5]
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	799a      	ldrb	r2, [r3, #6]
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	79da      	ldrb	r2, [r3, #7]
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	7a1a      	ldrb	r2, [r3, #8]
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b09      	cmp	r3, #9
 800923a:	d002      	beq.n	8009242 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	2209      	movs	r2, #9
 8009240:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009242:	88fb      	ldrh	r3, [r7, #6]
 8009244:	2b09      	cmp	r3, #9
 8009246:	f240 809d 	bls.w	8009384 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800924a:	2309      	movs	r3, #9
 800924c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009252:	e081      	b.n	8009358 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009254:	f107 0316 	add.w	r3, r7, #22
 8009258:	4619      	mov	r1, r3
 800925a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800925c:	f000 f9e7 	bl	800962e <USBH_GetNextDesc>
 8009260:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	2b04      	cmp	r3, #4
 8009268:	d176      	bne.n	8009358 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800926a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b09      	cmp	r3, #9
 8009270:	d002      	beq.n	8009278 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009274:	2209      	movs	r2, #9
 8009276:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800927c:	221a      	movs	r2, #26
 800927e:	fb02 f303 	mul.w	r3, r2, r3
 8009282:	3308      	adds	r3, #8
 8009284:	6a3a      	ldr	r2, [r7, #32]
 8009286:	4413      	add	r3, r2
 8009288:	3302      	adds	r3, #2
 800928a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800928c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800928e:	69f8      	ldr	r0, [r7, #28]
 8009290:	f000 f87e 	bl	8009390 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800929e:	e043      	b.n	8009328 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80092a0:	f107 0316 	add.w	r3, r7, #22
 80092a4:	4619      	mov	r1, r3
 80092a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a8:	f000 f9c1 	bl	800962e <USBH_GetNextDesc>
 80092ac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d138      	bne.n	8009328 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	795b      	ldrb	r3, [r3, #5]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d113      	bne.n	80092e6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d003      	beq.n	80092ce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	799b      	ldrb	r3, [r3, #6]
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d10b      	bne.n	80092e6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	79db      	ldrb	r3, [r3, #7]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10b      	bne.n	80092ee <USBH_ParseCfgDesc+0x14e>
 80092d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b09      	cmp	r3, #9
 80092dc:	d007      	beq.n	80092ee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80092de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e0:	2209      	movs	r2, #9
 80092e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092e4:	e003      	b.n	80092ee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80092e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e8:	2207      	movs	r2, #7
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	e000      	b.n	80092f0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80092ee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80092f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80092f8:	3201      	adds	r2, #1
 80092fa:	00d2      	lsls	r2, r2, #3
 80092fc:	211a      	movs	r1, #26
 80092fe:	fb01 f303 	mul.w	r3, r1, r3
 8009302:	4413      	add	r3, r2
 8009304:	3308      	adds	r3, #8
 8009306:	6a3a      	ldr	r2, [r7, #32]
 8009308:	4413      	add	r3, r2
 800930a:	3304      	adds	r3, #4
 800930c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800930e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009310:	69b9      	ldr	r1, [r7, #24]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f870 	bl	80093f8 <USBH_ParseEPDesc>
 8009318:	4603      	mov	r3, r0
 800931a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800931e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009322:	3301      	adds	r3, #1
 8009324:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	791b      	ldrb	r3, [r3, #4]
 800932c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009330:	429a      	cmp	r2, r3
 8009332:	d204      	bcs.n	800933e <USBH_ParseCfgDesc+0x19e>
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	885a      	ldrh	r2, [r3, #2]
 8009338:	8afb      	ldrh	r3, [r7, #22]
 800933a:	429a      	cmp	r2, r3
 800933c:	d8b0      	bhi.n	80092a0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	791b      	ldrb	r3, [r3, #4]
 8009342:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009346:	429a      	cmp	r2, r3
 8009348:	d201      	bcs.n	800934e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800934a:	2303      	movs	r3, #3
 800934c:	e01c      	b.n	8009388 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800934e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009352:	3301      	adds	r3, #1
 8009354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800935c:	2b01      	cmp	r3, #1
 800935e:	d805      	bhi.n	800936c <USBH_ParseCfgDesc+0x1cc>
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	885a      	ldrh	r2, [r3, #2]
 8009364:	8afb      	ldrh	r3, [r7, #22]
 8009366:	429a      	cmp	r2, r3
 8009368:	f63f af74 	bhi.w	8009254 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	791b      	ldrb	r3, [r3, #4]
 8009370:	2b02      	cmp	r3, #2
 8009372:	bf28      	it	cs
 8009374:	2302      	movcs	r3, #2
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800937c:	429a      	cmp	r2, r3
 800937e:	d201      	bcs.n	8009384 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009380:	2303      	movs	r3, #3
 8009382:	e001      	b.n	8009388 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009388:	4618      	mov	r0, r3
 800938a:	3730      	adds	r7, #48	@ 0x30
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	785a      	ldrb	r2, [r3, #1]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	789a      	ldrb	r2, [r3, #2]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	78da      	ldrb	r2, [r3, #3]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	3304      	adds	r3, #4
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	bf28      	it	cs
 80093c4:	2302      	movcs	r3, #2
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	795a      	ldrb	r2, [r3, #5]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	799a      	ldrb	r2, [r3, #6]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	79da      	ldrb	r2, [r3, #7]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	7a1a      	ldrb	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	721a      	strb	r2, [r3, #8]
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	781a      	ldrb	r2, [r3, #0]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	785a      	ldrb	r2, [r3, #1]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	789a      	ldrb	r2, [r3, #2]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	78da      	ldrb	r2, [r3, #3]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3304      	adds	r3, #4
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3305      	adds	r3, #5
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	b29b      	uxth	r3, r3
 800943a:	4313      	orrs	r3, r2
 800943c:	b29a      	uxth	r2, r3
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	799a      	ldrb	r2, [r3, #6]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	889b      	ldrh	r3, [r3, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800945a:	d804      	bhi.n	8009466 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009464:	d901      	bls.n	800946a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009466:	2303      	movs	r3, #3
 8009468:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009470:	2b00      	cmp	r3, #0
 8009472:	d136      	bne.n	80094e2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	78db      	ldrb	r3, [r3, #3]
 8009478:	f003 0303 	and.w	r3, r3, #3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d108      	bne.n	8009492 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	889b      	ldrh	r3, [r3, #4]
 8009484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009488:	f240 8097 	bls.w	80095ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800948c:	2303      	movs	r3, #3
 800948e:	75fb      	strb	r3, [r7, #23]
 8009490:	e093      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	78db      	ldrb	r3, [r3, #3]
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d107      	bne.n	80094ae <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	889b      	ldrh	r3, [r3, #4]
 80094a2:	2b40      	cmp	r3, #64	@ 0x40
 80094a4:	f240 8089 	bls.w	80095ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094a8:	2303      	movs	r3, #3
 80094aa:	75fb      	strb	r3, [r7, #23]
 80094ac:	e085      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	78db      	ldrb	r3, [r3, #3]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d005      	beq.n	80094c6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	78db      	ldrb	r3, [r3, #3]
 80094be:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d10a      	bne.n	80094dc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	799b      	ldrb	r3, [r3, #6]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <USBH_ParseEPDesc+0xde>
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	799b      	ldrb	r3, [r3, #6]
 80094d2:	2b10      	cmp	r3, #16
 80094d4:	d970      	bls.n	80095b8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80094d6:	2303      	movs	r3, #3
 80094d8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094da:	e06d      	b.n	80095b8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80094dc:	2303      	movs	r3, #3
 80094de:	75fb      	strb	r3, [r7, #23]
 80094e0:	e06b      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d13c      	bne.n	8009566 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	78db      	ldrb	r3, [r3, #3]
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d005      	beq.n	8009504 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	78db      	ldrb	r3, [r3, #3]
 80094fc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009500:	2b00      	cmp	r3, #0
 8009502:	d106      	bne.n	8009512 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	889b      	ldrh	r3, [r3, #4]
 8009508:	2b40      	cmp	r3, #64	@ 0x40
 800950a:	d956      	bls.n	80095ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800950c:	2303      	movs	r3, #3
 800950e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009510:	e053      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	78db      	ldrb	r3, [r3, #3]
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	2b01      	cmp	r3, #1
 800951c:	d10e      	bne.n	800953c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	799b      	ldrb	r3, [r3, #6]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800952a:	2b10      	cmp	r3, #16
 800952c:	d803      	bhi.n	8009536 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009532:	2b40      	cmp	r3, #64	@ 0x40
 8009534:	d941      	bls.n	80095ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009536:	2303      	movs	r3, #3
 8009538:	75fb      	strb	r3, [r7, #23]
 800953a:	e03e      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	78db      	ldrb	r3, [r3, #3]
 8009540:	f003 0303 	and.w	r3, r3, #3
 8009544:	2b03      	cmp	r3, #3
 8009546:	d10b      	bne.n	8009560 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	799b      	ldrb	r3, [r3, #6]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d004      	beq.n	800955a <USBH_ParseEPDesc+0x162>
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	889b      	ldrh	r3, [r3, #4]
 8009554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009558:	d32f      	bcc.n	80095ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800955a:	2303      	movs	r3, #3
 800955c:	75fb      	strb	r3, [r7, #23]
 800955e:	e02c      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009560:	2303      	movs	r3, #3
 8009562:	75fb      	strb	r3, [r7, #23]
 8009564:	e029      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800956c:	2b02      	cmp	r3, #2
 800956e:	d120      	bne.n	80095b2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	78db      	ldrb	r3, [r3, #3]
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d106      	bne.n	800958a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	889b      	ldrh	r3, [r3, #4]
 8009580:	2b08      	cmp	r3, #8
 8009582:	d01a      	beq.n	80095ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009584:	2303      	movs	r3, #3
 8009586:	75fb      	strb	r3, [r7, #23]
 8009588:	e017      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	78db      	ldrb	r3, [r3, #3]
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	2b03      	cmp	r3, #3
 8009594:	d10a      	bne.n	80095ac <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	799b      	ldrb	r3, [r3, #6]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <USBH_ParseEPDesc+0x1ae>
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	889b      	ldrh	r3, [r3, #4]
 80095a2:	2b08      	cmp	r3, #8
 80095a4:	d909      	bls.n	80095ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80095a6:	2303      	movs	r3, #3
 80095a8:	75fb      	strb	r3, [r7, #23]
 80095aa:	e006      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80095ac:	2303      	movs	r3, #3
 80095ae:	75fb      	strb	r3, [r7, #23]
 80095b0:	e003      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80095b2:	2303      	movs	r3, #3
 80095b4:	75fb      	strb	r3, [r7, #23]
 80095b6:	e000      	b.n	80095ba <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80095b8:	bf00      	nop
  }

  return status;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	371c      	adds	r7, #28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	4613      	mov	r3, r2
 80095d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3301      	adds	r3, #1
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d120      	bne.n	8009622 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	1e9a      	subs	r2, r3, #2
 80095e6:	88fb      	ldrh	r3, [r7, #6]
 80095e8:	4293      	cmp	r3, r2
 80095ea:	bf28      	it	cs
 80095ec:	4613      	movcs	r3, r2
 80095ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3302      	adds	r3, #2
 80095f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80095f6:	2300      	movs	r3, #0
 80095f8:	82fb      	strh	r3, [r7, #22]
 80095fa:	e00b      	b.n	8009614 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80095fc:	8afb      	ldrh	r3, [r7, #22]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4413      	add	r3, r2
 8009602:	781a      	ldrb	r2, [r3, #0]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	3301      	adds	r3, #1
 800960c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800960e:	8afb      	ldrh	r3, [r7, #22]
 8009610:	3302      	adds	r3, #2
 8009612:	82fb      	strh	r3, [r7, #22]
 8009614:	8afa      	ldrh	r2, [r7, #22]
 8009616:	8abb      	ldrh	r3, [r7, #20]
 8009618:	429a      	cmp	r2, r3
 800961a:	d3ef      	bcc.n	80095fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2200      	movs	r2, #0
 8009620:	701a      	strb	r2, [r3, #0]
  }
}
 8009622:	bf00      	nop
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800962e:	b480      	push	{r7}
 8009630:	b085      	sub	sp, #20
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	4413      	add	r3, r2
 8009642:	b29a      	uxth	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009654:	68fb      	ldr	r3, [r7, #12]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b086      	sub	sp, #24
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	4613      	mov	r3, r2
 800966e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009670:	2301      	movs	r3, #1
 8009672:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	789b      	ldrb	r3, [r3, #2]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d002      	beq.n	8009682 <USBH_CtlReq+0x20>
 800967c:	2b02      	cmp	r3, #2
 800967e:	d00f      	beq.n	80096a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009680:	e027      	b.n	80096d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	88fa      	ldrh	r2, [r7, #6]
 800968c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2202      	movs	r2, #2
 8009698:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800969a:	2301      	movs	r3, #1
 800969c:	75fb      	strb	r3, [r7, #23]
      break;
 800969e:	e018      	b.n	80096d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 f81b 	bl	80096dc <USBH_HandleControl>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <USBH_CtlReq+0x54>
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d106      	bne.n	80096c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2201      	movs	r2, #1
 80096ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	761a      	strb	r2, [r3, #24]
      break;
 80096c2:	e005      	b.n	80096d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d102      	bne.n	80096d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	709a      	strb	r2, [r3, #2]
      break;
 80096d0:	bf00      	nop
  }
  return status;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af02      	add	r7, sp, #8
 80096e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80096e4:	2301      	movs	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	7e1b      	ldrb	r3, [r3, #24]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	2b0a      	cmp	r3, #10
 80096f4:	f200 8156 	bhi.w	80099a4 <USBH_HandleControl+0x2c8>
 80096f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009700 <USBH_HandleControl+0x24>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	0800972d 	.word	0x0800972d
 8009704:	08009747 	.word	0x08009747
 8009708:	080097b1 	.word	0x080097b1
 800970c:	080097d7 	.word	0x080097d7
 8009710:	0800980f 	.word	0x0800980f
 8009714:	08009839 	.word	0x08009839
 8009718:	0800988b 	.word	0x0800988b
 800971c:	080098ad 	.word	0x080098ad
 8009720:	080098e9 	.word	0x080098e9
 8009724:	0800990f 	.word	0x0800990f
 8009728:	0800994d 	.word	0x0800994d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f103 0110 	add.w	r1, r3, #16
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	795b      	ldrb	r3, [r3, #5]
 8009736:	461a      	mov	r2, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f943 	bl	80099c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	761a      	strb	r2, [r3, #24]
      break;
 8009744:	e139      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	795b      	ldrb	r3, [r3, #5]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fb4f 	bl	8009df0 <USBH_LL_GetURBState>
 8009752:	4603      	mov	r3, r0
 8009754:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d11e      	bne.n	800979a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7c1b      	ldrb	r3, [r3, #16]
 8009760:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009764:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	8adb      	ldrh	r3, [r3, #22]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800976e:	7b7b      	ldrb	r3, [r7, #13]
 8009770:	2b80      	cmp	r3, #128	@ 0x80
 8009772:	d103      	bne.n	800977c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2203      	movs	r2, #3
 8009778:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800977a:	e115      	b.n	80099a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2205      	movs	r2, #5
 8009780:	761a      	strb	r2, [r3, #24]
      break;
 8009782:	e111      	b.n	80099a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009784:	7b7b      	ldrb	r3, [r7, #13]
 8009786:	2b80      	cmp	r3, #128	@ 0x80
 8009788:	d103      	bne.n	8009792 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2209      	movs	r2, #9
 800978e:	761a      	strb	r2, [r3, #24]
      break;
 8009790:	e10a      	b.n	80099a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2207      	movs	r2, #7
 8009796:	761a      	strb	r2, [r3, #24]
      break;
 8009798:	e106      	b.n	80099a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b04      	cmp	r3, #4
 800979e:	d003      	beq.n	80097a8 <USBH_HandleControl+0xcc>
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	f040 8100 	bne.w	80099a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	220b      	movs	r2, #11
 80097ac:	761a      	strb	r2, [r3, #24]
      break;
 80097ae:	e0fb      	b.n	80099a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6899      	ldr	r1, [r3, #8]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	899a      	ldrh	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	791b      	ldrb	r3, [r3, #4]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f93a 	bl	8009a42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2204      	movs	r2, #4
 80097d2:	761a      	strb	r2, [r3, #24]
      break;
 80097d4:	e0f1      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	791b      	ldrb	r3, [r3, #4]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fb07 	bl	8009df0 <USBH_LL_GetURBState>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d102      	bne.n	80097f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2209      	movs	r2, #9
 80097f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b05      	cmp	r3, #5
 80097f6:	d102      	bne.n	80097fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80097f8:	2303      	movs	r3, #3
 80097fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097fc:	e0d6      	b.n	80099ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b04      	cmp	r3, #4
 8009802:	f040 80d3 	bne.w	80099ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	220b      	movs	r2, #11
 800980a:	761a      	strb	r2, [r3, #24]
      break;
 800980c:	e0ce      	b.n	80099ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6899      	ldr	r1, [r3, #8]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	899a      	ldrh	r2, [r3, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	795b      	ldrb	r3, [r3, #5]
 800981a:	2001      	movs	r0, #1
 800981c:	9000      	str	r0, [sp, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f8ea 	bl	80099f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800982a:	b29a      	uxth	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2206      	movs	r2, #6
 8009834:	761a      	strb	r2, [r3, #24]
      break;
 8009836:	e0c0      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	795b      	ldrb	r3, [r3, #5]
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fad6 	bl	8009df0 <USBH_LL_GetURBState>
 8009844:	4603      	mov	r3, r0
 8009846:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d103      	bne.n	8009856 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2207      	movs	r2, #7
 8009852:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009854:	e0ac      	b.n	80099b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b05      	cmp	r3, #5
 800985a:	d105      	bne.n	8009868 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	220c      	movs	r2, #12
 8009860:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009862:	2303      	movs	r3, #3
 8009864:	73fb      	strb	r3, [r7, #15]
      break;
 8009866:	e0a3      	b.n	80099b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d103      	bne.n	8009876 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2205      	movs	r2, #5
 8009872:	761a      	strb	r2, [r3, #24]
      break;
 8009874:	e09c      	b.n	80099b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	2b04      	cmp	r3, #4
 800987a:	f040 8099 	bne.w	80099b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	220b      	movs	r2, #11
 8009882:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009884:	2302      	movs	r3, #2
 8009886:	73fb      	strb	r3, [r7, #15]
      break;
 8009888:	e092      	b.n	80099b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	791b      	ldrb	r3, [r3, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	2100      	movs	r1, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f8d5 	bl	8009a42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2208      	movs	r2, #8
 80098a8:	761a      	strb	r2, [r3, #24]

      break;
 80098aa:	e086      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	791b      	ldrb	r3, [r3, #4]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa9c 	bl	8009df0 <USBH_LL_GetURBState>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d105      	bne.n	80098ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220d      	movs	r2, #13
 80098c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098cc:	e072      	b.n	80099b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	d103      	bne.n	80098dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	220b      	movs	r2, #11
 80098d8:	761a      	strb	r2, [r3, #24]
      break;
 80098da:	e06b      	b.n	80099b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b05      	cmp	r3, #5
 80098e0:	d168      	bne.n	80099b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80098e2:	2303      	movs	r3, #3
 80098e4:	73fb      	strb	r3, [r7, #15]
      break;
 80098e6:	e065      	b.n	80099b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	795b      	ldrb	r3, [r3, #5]
 80098ec:	2201      	movs	r2, #1
 80098ee:	9200      	str	r2, [sp, #0]
 80098f0:	2200      	movs	r2, #0
 80098f2:	2100      	movs	r1, #0
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f87f 	bl	80099f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	220a      	movs	r2, #10
 800990a:	761a      	strb	r2, [r3, #24]
      break;
 800990c:	e055      	b.n	80099ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	795b      	ldrb	r3, [r3, #5]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fa6b 	bl	8009df0 <USBH_LL_GetURBState>
 800991a:	4603      	mov	r3, r0
 800991c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d105      	bne.n	8009930 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	220d      	movs	r2, #13
 800992c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800992e:	e043      	b.n	80099b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d103      	bne.n	800993e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2209      	movs	r2, #9
 800993a:	761a      	strb	r2, [r3, #24]
      break;
 800993c:	e03c      	b.n	80099b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	2b04      	cmp	r3, #4
 8009942:	d139      	bne.n	80099b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	220b      	movs	r2, #11
 8009948:	761a      	strb	r2, [r3, #24]
      break;
 800994a:	e035      	b.n	80099b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7e5b      	ldrb	r3, [r3, #25]
 8009950:	3301      	adds	r3, #1
 8009952:	b2da      	uxtb	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	765a      	strb	r2, [r3, #25]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7e5b      	ldrb	r3, [r3, #25]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d806      	bhi.n	800996e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800996c:	e025      	b.n	80099ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009974:	2106      	movs	r1, #6
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	795b      	ldrb	r3, [r3, #5]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f8b9 	bl	8009afe <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	791b      	ldrb	r3, [r3, #4]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8b3 	bl	8009afe <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800999e:	2302      	movs	r3, #2
 80099a0:	73fb      	strb	r3, [r7, #15]
      break;
 80099a2:	e00a      	b.n	80099ba <USBH_HandleControl+0x2de>

    default:
      break;
 80099a4:	bf00      	nop
 80099a6:	e008      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099a8:	bf00      	nop
 80099aa:	e006      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099ac:	bf00      	nop
 80099ae:	e004      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099b0:	bf00      	nop
 80099b2:	e002      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099b4:	bf00      	nop
 80099b6:	e000      	b.n	80099ba <USBH_HandleControl+0x2de>
      break;
 80099b8:	bf00      	nop
  }

  return status;
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af04      	add	r7, sp, #16
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099d2:	79f9      	ldrb	r1, [r7, #7]
 80099d4:	2300      	movs	r3, #0
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	2308      	movs	r3, #8
 80099da:	9302      	str	r3, [sp, #8]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	9301      	str	r3, [sp, #4]
 80099e0:	2300      	movs	r3, #0
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	2300      	movs	r3, #0
 80099e6:	2200      	movs	r2, #0
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 f9d0 	bl	8009d8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b088      	sub	sp, #32
 80099fc:	af04      	add	r7, sp, #16
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	4611      	mov	r1, r2
 8009a04:	461a      	mov	r2, r3
 8009a06:	460b      	mov	r3, r1
 8009a08:	80fb      	strh	r3, [r7, #6]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a1c:	7979      	ldrb	r1, [r7, #5]
 8009a1e:	7e3b      	ldrb	r3, [r7, #24]
 8009a20:	9303      	str	r3, [sp, #12]
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	9302      	str	r3, [sp, #8]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2200      	movs	r2, #0
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f9ab 	bl	8009d8e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b088      	sub	sp, #32
 8009a46:	af04      	add	r7, sp, #16
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	461a      	mov	r2, r3
 8009a50:	460b      	mov	r3, r1
 8009a52:	80fb      	strh	r3, [r7, #6]
 8009a54:	4613      	mov	r3, r2
 8009a56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a58:	7979      	ldrb	r1, [r7, #5]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	9303      	str	r3, [sp, #12]
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	9302      	str	r3, [sp, #8]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	2301      	movs	r3, #1
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 f98d 	bl	8009d8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a74:	2300      	movs	r3, #0

}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b086      	sub	sp, #24
 8009a82:	af04      	add	r7, sp, #16
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	4608      	mov	r0, r1
 8009a88:	4611      	mov	r1, r2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	70fb      	strb	r3, [r7, #3]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70bb      	strb	r3, [r7, #2]
 8009a94:	4613      	mov	r3, r2
 8009a96:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009a98:	7878      	ldrb	r0, [r7, #1]
 8009a9a:	78ba      	ldrb	r2, [r7, #2]
 8009a9c:	78f9      	ldrb	r1, [r7, #3]
 8009a9e:	8b3b      	ldrh	r3, [r7, #24]
 8009aa0:	9302      	str	r3, [sp, #8]
 8009aa2:	7d3b      	ldrb	r3, [r7, #20]
 8009aa4:	9301      	str	r3, [sp, #4]
 8009aa6:	7c3b      	ldrb	r3, [r7, #16]
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f93f 	bl	8009d30 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f836 	bl	8009b3a <USBH_GetFreePipe>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009ad2:	89fb      	ldrh	r3, [r7, #14]
 8009ad4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d00a      	beq.n	8009af2 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009adc:	78fa      	ldrb	r2, [r7, #3]
 8009ade:	89fb      	ldrh	r3, [r7, #14]
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	33e0      	adds	r3, #224	@ 0xe0
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	440b      	add	r3, r1
 8009af0:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009af2:	89fb      	ldrh	r3, [r7, #14]
 8009af4:	b2db      	uxtb	r3, r3
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	460b      	mov	r3, r1
 8009b08:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	2b0f      	cmp	r3, #15
 8009b0e:	d80d      	bhi.n	8009b2c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	33e0      	adds	r3, #224	@ 0xe0
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	33e0      	adds	r3, #224	@ 0xe0
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	440b      	add	r3, r1
 8009b2a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]
 8009b4a:	e00f      	b.n	8009b6c <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	33e0      	adds	r3, #224	@ 0xe0
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	e007      	b.n	8009b76 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	73fb      	strb	r3, [r7, #15]
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	2b0f      	cmp	r3, #15
 8009b70:	d9ec      	bls.n	8009b4c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009b72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009b88:	4802      	ldr	r0, [pc, #8]	@ (8009b94 <MX_USB_HOST_Process+0x10>)
 8009b8a:	f7fe fce5 	bl	8008558 <USBH_Process>
}
 8009b8e:	bf00      	nop
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20000198 	.word	0x20000198

08009b98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff f89e 	bl	8008ce8 <USBH_LL_IncTimer>
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff f8d6 	bl	8008d74 <USBH_LL_Connect>
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff f8df 	bl	8008da2 <USBH_LL_Disconnect>
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7ff f890 	bl	8008d3c <USBH_LL_PortEnabled>
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7ff f890 	bl	8008d58 <USBH_LL_PortDisabled>
}
 8009c38:	bf00      	nop
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fa f922 	bl	8003ea0 <HAL_HCD_Start>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f8fa 	bl	8009e5c <USBH_Get_USB_Status>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fa f92a 	bl	8003ee6 <HAL_HCD_Stop>
 8009c92:	4603      	mov	r3, r0
 8009c94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 f8df 	bl	8009e5c <USBH_Get_USB_Status>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fa f951 	bl	8003f66 <HAL_HCD_GetCurrentSpeed>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d00c      	beq.n	8009ce4 <USBH_LL_GetSpeed+0x38>
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d80d      	bhi.n	8009cea <USBH_LL_GetSpeed+0x3e>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <USBH_LL_GetSpeed+0x2c>
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d003      	beq.n	8009cde <USBH_LL_GetSpeed+0x32>
 8009cd6:	e008      	b.n	8009cea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
    break;
 8009cdc:	e008      	b.n	8009cf0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce2:	e005      	b.n	8009cf0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce8:	e002      	b.n	8009cf0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009cea:	2301      	movs	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]
    break;
 8009cee:	bf00      	nop
  }
  return  speed;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fa f905 	bl	8003f20 <HAL_HCD_ResetPort>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 f89d 	bl	8009e5c <USBH_Get_USB_Status>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d30:	b590      	push	{r4, r7, lr}
 8009d32:	b089      	sub	sp, #36	@ 0x24
 8009d34:	af04      	add	r7, sp, #16
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	4608      	mov	r0, r1
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	4603      	mov	r3, r0
 8009d40:	70fb      	strb	r3, [r7, #3]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70bb      	strb	r3, [r7, #2]
 8009d46:	4613      	mov	r3, r2
 8009d48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009d58:	787c      	ldrb	r4, [r7, #1]
 8009d5a:	78ba      	ldrb	r2, [r7, #2]
 8009d5c:	78f9      	ldrb	r1, [r7, #3]
 8009d5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d60:	9302      	str	r3, [sp, #8]
 8009d62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	4623      	mov	r3, r4
 8009d70:	f7f9 fd2f 	bl	80037d2 <HAL_HCD_HC_Init>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f86e 	bl	8009e5c <USBH_Get_USB_Status>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd90      	pop	{r4, r7, pc}

08009d8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009d8e:	b590      	push	{r4, r7, lr}
 8009d90:	b089      	sub	sp, #36	@ 0x24
 8009d92:	af04      	add	r7, sp, #16
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	4608      	mov	r0, r1
 8009d98:	4611      	mov	r1, r2
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	70fb      	strb	r3, [r7, #3]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70bb      	strb	r3, [r7, #2]
 8009da4:	4613      	mov	r3, r2
 8009da6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009db6:	787c      	ldrb	r4, [r7, #1]
 8009db8:	78ba      	ldrb	r2, [r7, #2]
 8009dba:	78f9      	ldrb	r1, [r7, #3]
 8009dbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009dc0:	9303      	str	r3, [sp, #12]
 8009dc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009dc4:	9302      	str	r3, [sp, #8]
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	4623      	mov	r3, r4
 8009dd2:	f7f9 fdb7 	bl	8003944 <HAL_HCD_HC_SubmitRequest>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 f83d 	bl	8009e5c <USBH_Get_USB_Status>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd90      	pop	{r4, r7, pc}

08009df0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e02:	78fa      	ldrb	r2, [r7, #3]
 8009e04:	4611      	mov	r1, r2
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fa f898 	bl	8003f3c <HAL_HCD_HC_GetURBState>
 8009e0c:	4603      	mov	r3, r0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d103      	bne.n	8009e34 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009e2c:	78fb      	ldrb	r3, [r7, #3]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 f840 	bl	8009eb4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009e34:	20c8      	movs	r0, #200	@ 0xc8
 8009e36:	f7f9 f9d1 	bl	80031dc <HAL_Delay>
  return USBH_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7f9 f9c5 	bl	80031dc <HAL_Delay>
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d817      	bhi.n	8009ea0 <USBH_Get_USB_Status+0x44>
 8009e70:	a201      	add	r2, pc, #4	@ (adr r2, 8009e78 <USBH_Get_USB_Status+0x1c>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009e89 	.word	0x08009e89
 8009e7c:	08009e8f 	.word	0x08009e8f
 8009e80:	08009e95 	.word	0x08009e95
 8009e84:	08009e9b 	.word	0x08009e9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e8c:	e00b      	b.n	8009ea6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	73fb      	strb	r3, [r7, #15]
    break;
 8009e92:	e008      	b.n	8009ea6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009e94:	2301      	movs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
    break;
 8009e98:	e005      	b.n	8009ea6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9e:	e002      	b.n	8009ea6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	bf00      	nop
  }
  return usb_status;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
 8009ecc:	e001      	b.n	8009ed2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009eda:	4803      	ldr	r0, [pc, #12]	@ (8009ee8 <MX_DriverVbusFS+0x34>)
 8009edc:	f7f9 fc60 	bl	80037a0 <HAL_GPIO_WritePin>
}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	40021800 	.word	0x40021800

08009eec <sbrk_aligned>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	4e0f      	ldr	r6, [pc, #60]	@ (8009f2c <sbrk_aligned+0x40>)
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	6831      	ldr	r1, [r6, #0]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	b911      	cbnz	r1, 8009efe <sbrk_aligned+0x12>
 8009ef8:	f000 f8ce 	bl	800a098 <_sbrk_r>
 8009efc:	6030      	str	r0, [r6, #0]
 8009efe:	4621      	mov	r1, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	f000 f8c9 	bl	800a098 <_sbrk_r>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d103      	bne.n	8009f12 <sbrk_aligned+0x26>
 8009f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8009f0e:	4620      	mov	r0, r4
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	1cc4      	adds	r4, r0, #3
 8009f14:	f024 0403 	bic.w	r4, r4, #3
 8009f18:	42a0      	cmp	r0, r4
 8009f1a:	d0f8      	beq.n	8009f0e <sbrk_aligned+0x22>
 8009f1c:	1a21      	subs	r1, r4, r0
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f000 f8ba 	bl	800a098 <_sbrk_r>
 8009f24:	3001      	adds	r0, #1
 8009f26:	d1f2      	bne.n	8009f0e <sbrk_aligned+0x22>
 8009f28:	e7ef      	b.n	8009f0a <sbrk_aligned+0x1e>
 8009f2a:	bf00      	nop
 8009f2c:	20000950 	.word	0x20000950

08009f30 <_malloc_r>:
 8009f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f34:	1ccd      	adds	r5, r1, #3
 8009f36:	f025 0503 	bic.w	r5, r5, #3
 8009f3a:	3508      	adds	r5, #8
 8009f3c:	2d0c      	cmp	r5, #12
 8009f3e:	bf38      	it	cc
 8009f40:	250c      	movcc	r5, #12
 8009f42:	2d00      	cmp	r5, #0
 8009f44:	4606      	mov	r6, r0
 8009f46:	db01      	blt.n	8009f4c <_malloc_r+0x1c>
 8009f48:	42a9      	cmp	r1, r5
 8009f4a:	d904      	bls.n	8009f56 <_malloc_r+0x26>
 8009f4c:	230c      	movs	r3, #12
 8009f4e:	6033      	str	r3, [r6, #0]
 8009f50:	2000      	movs	r0, #0
 8009f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a02c <_malloc_r+0xfc>
 8009f5a:	f000 f869 	bl	800a030 <__malloc_lock>
 8009f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f62:	461c      	mov	r4, r3
 8009f64:	bb44      	cbnz	r4, 8009fb8 <_malloc_r+0x88>
 8009f66:	4629      	mov	r1, r5
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7ff ffbf 	bl	8009eec <sbrk_aligned>
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	4604      	mov	r4, r0
 8009f72:	d158      	bne.n	800a026 <_malloc_r+0xf6>
 8009f74:	f8d8 4000 	ldr.w	r4, [r8]
 8009f78:	4627      	mov	r7, r4
 8009f7a:	2f00      	cmp	r7, #0
 8009f7c:	d143      	bne.n	800a006 <_malloc_r+0xd6>
 8009f7e:	2c00      	cmp	r4, #0
 8009f80:	d04b      	beq.n	800a01a <_malloc_r+0xea>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	4639      	mov	r1, r7
 8009f86:	4630      	mov	r0, r6
 8009f88:	eb04 0903 	add.w	r9, r4, r3
 8009f8c:	f000 f884 	bl	800a098 <_sbrk_r>
 8009f90:	4581      	cmp	r9, r0
 8009f92:	d142      	bne.n	800a01a <_malloc_r+0xea>
 8009f94:	6821      	ldr	r1, [r4, #0]
 8009f96:	1a6d      	subs	r5, r5, r1
 8009f98:	4629      	mov	r1, r5
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7ff ffa6 	bl	8009eec <sbrk_aligned>
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d03a      	beq.n	800a01a <_malloc_r+0xea>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	442b      	add	r3, r5
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	f8d8 3000 	ldr.w	r3, [r8]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	bb62      	cbnz	r2, 800a00c <_malloc_r+0xdc>
 8009fb2:	f8c8 7000 	str.w	r7, [r8]
 8009fb6:	e00f      	b.n	8009fd8 <_malloc_r+0xa8>
 8009fb8:	6822      	ldr	r2, [r4, #0]
 8009fba:	1b52      	subs	r2, r2, r5
 8009fbc:	d420      	bmi.n	800a000 <_malloc_r+0xd0>
 8009fbe:	2a0b      	cmp	r2, #11
 8009fc0:	d917      	bls.n	8009ff2 <_malloc_r+0xc2>
 8009fc2:	1961      	adds	r1, r4, r5
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	6025      	str	r5, [r4, #0]
 8009fc8:	bf18      	it	ne
 8009fca:	6059      	strne	r1, [r3, #4]
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	bf08      	it	eq
 8009fd0:	f8c8 1000 	streq.w	r1, [r8]
 8009fd4:	5162      	str	r2, [r4, r5]
 8009fd6:	604b      	str	r3, [r1, #4]
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f000 f82f 	bl	800a03c <__malloc_unlock>
 8009fde:	f104 000b 	add.w	r0, r4, #11
 8009fe2:	1d23      	adds	r3, r4, #4
 8009fe4:	f020 0007 	bic.w	r0, r0, #7
 8009fe8:	1ac2      	subs	r2, r0, r3
 8009fea:	bf1c      	itt	ne
 8009fec:	1a1b      	subne	r3, r3, r0
 8009fee:	50a3      	strne	r3, [r4, r2]
 8009ff0:	e7af      	b.n	8009f52 <_malloc_r+0x22>
 8009ff2:	6862      	ldr	r2, [r4, #4]
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	bf0c      	ite	eq
 8009ff8:	f8c8 2000 	streq.w	r2, [r8]
 8009ffc:	605a      	strne	r2, [r3, #4]
 8009ffe:	e7eb      	b.n	8009fd8 <_malloc_r+0xa8>
 800a000:	4623      	mov	r3, r4
 800a002:	6864      	ldr	r4, [r4, #4]
 800a004:	e7ae      	b.n	8009f64 <_malloc_r+0x34>
 800a006:	463c      	mov	r4, r7
 800a008:	687f      	ldr	r7, [r7, #4]
 800a00a:	e7b6      	b.n	8009f7a <_malloc_r+0x4a>
 800a00c:	461a      	mov	r2, r3
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	42a3      	cmp	r3, r4
 800a012:	d1fb      	bne.n	800a00c <_malloc_r+0xdc>
 800a014:	2300      	movs	r3, #0
 800a016:	6053      	str	r3, [r2, #4]
 800a018:	e7de      	b.n	8009fd8 <_malloc_r+0xa8>
 800a01a:	230c      	movs	r3, #12
 800a01c:	6033      	str	r3, [r6, #0]
 800a01e:	4630      	mov	r0, r6
 800a020:	f000 f80c 	bl	800a03c <__malloc_unlock>
 800a024:	e794      	b.n	8009f50 <_malloc_r+0x20>
 800a026:	6005      	str	r5, [r0, #0]
 800a028:	e7d6      	b.n	8009fd8 <_malloc_r+0xa8>
 800a02a:	bf00      	nop
 800a02c:	20000954 	.word	0x20000954

0800a030 <__malloc_lock>:
 800a030:	4801      	ldr	r0, [pc, #4]	@ (800a038 <__malloc_lock+0x8>)
 800a032:	f000 b86b 	b.w	800a10c <__retarget_lock_acquire_recursive>
 800a036:	bf00      	nop
 800a038:	20000a94 	.word	0x20000a94

0800a03c <__malloc_unlock>:
 800a03c:	4801      	ldr	r0, [pc, #4]	@ (800a044 <__malloc_unlock+0x8>)
 800a03e:	f000 b866 	b.w	800a10e <__retarget_lock_release_recursive>
 800a042:	bf00      	nop
 800a044:	20000a94 	.word	0x20000a94

0800a048 <siprintf>:
 800a048:	b40e      	push	{r1, r2, r3}
 800a04a:	b500      	push	{lr}
 800a04c:	b09c      	sub	sp, #112	@ 0x70
 800a04e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a050:	9002      	str	r0, [sp, #8]
 800a052:	9006      	str	r0, [sp, #24]
 800a054:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a058:	4809      	ldr	r0, [pc, #36]	@ (800a080 <siprintf+0x38>)
 800a05a:	9107      	str	r1, [sp, #28]
 800a05c:	9104      	str	r1, [sp, #16]
 800a05e:	4909      	ldr	r1, [pc, #36]	@ (800a084 <siprintf+0x3c>)
 800a060:	f853 2b04 	ldr.w	r2, [r3], #4
 800a064:	9105      	str	r1, [sp, #20]
 800a066:	6800      	ldr	r0, [r0, #0]
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	a902      	add	r1, sp, #8
 800a06c:	f000 f8f6 	bl	800a25c <_svfiprintf_r>
 800a070:	9b02      	ldr	r3, [sp, #8]
 800a072:	2200      	movs	r2, #0
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	b01c      	add	sp, #112	@ 0x70
 800a078:	f85d eb04 	ldr.w	lr, [sp], #4
 800a07c:	b003      	add	sp, #12
 800a07e:	4770      	bx	lr
 800a080:	200000a8 	.word	0x200000a8
 800a084:	ffff0208 	.word	0xffff0208

0800a088 <memset>:
 800a088:	4402      	add	r2, r0
 800a08a:	4603      	mov	r3, r0
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d100      	bne.n	800a092 <memset+0xa>
 800a090:	4770      	bx	lr
 800a092:	f803 1b01 	strb.w	r1, [r3], #1
 800a096:	e7f9      	b.n	800a08c <memset+0x4>

0800a098 <_sbrk_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d06      	ldr	r5, [pc, #24]	@ (800a0b4 <_sbrk_r+0x1c>)
 800a09c:	2300      	movs	r3, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	f7f6 feda 	bl	8000e5c <_sbrk>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_sbrk_r+0x1a>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_sbrk_r+0x1a>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	20000a90 	.word	0x20000a90

0800a0b8 <__errno>:
 800a0b8:	4b01      	ldr	r3, [pc, #4]	@ (800a0c0 <__errno+0x8>)
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	200000a8 	.word	0x200000a8

0800a0c4 <__libc_init_array>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	4d0d      	ldr	r5, [pc, #52]	@ (800a0fc <__libc_init_array+0x38>)
 800a0c8:	4c0d      	ldr	r4, [pc, #52]	@ (800a100 <__libc_init_array+0x3c>)
 800a0ca:	1b64      	subs	r4, r4, r5
 800a0cc:	10a4      	asrs	r4, r4, #2
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	42a6      	cmp	r6, r4
 800a0d2:	d109      	bne.n	800a0e8 <__libc_init_array+0x24>
 800a0d4:	4d0b      	ldr	r5, [pc, #44]	@ (800a104 <__libc_init_array+0x40>)
 800a0d6:	4c0c      	ldr	r4, [pc, #48]	@ (800a108 <__libc_init_array+0x44>)
 800a0d8:	f000 fba8 	bl	800a82c <_init>
 800a0dc:	1b64      	subs	r4, r4, r5
 800a0de:	10a4      	asrs	r4, r4, #2
 800a0e0:	2600      	movs	r6, #0
 800a0e2:	42a6      	cmp	r6, r4
 800a0e4:	d105      	bne.n	800a0f2 <__libc_init_array+0x2e>
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ec:	4798      	blx	r3
 800a0ee:	3601      	adds	r6, #1
 800a0f0:	e7ee      	b.n	800a0d0 <__libc_init_array+0xc>
 800a0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f6:	4798      	blx	r3
 800a0f8:	3601      	adds	r6, #1
 800a0fa:	e7f2      	b.n	800a0e2 <__libc_init_array+0x1e>
 800a0fc:	0800c820 	.word	0x0800c820
 800a100:	0800c820 	.word	0x0800c820
 800a104:	0800c820 	.word	0x0800c820
 800a108:	0800c824 	.word	0x0800c824

0800a10c <__retarget_lock_acquire_recursive>:
 800a10c:	4770      	bx	lr

0800a10e <__retarget_lock_release_recursive>:
 800a10e:	4770      	bx	lr

0800a110 <_free_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4605      	mov	r5, r0
 800a114:	2900      	cmp	r1, #0
 800a116:	d041      	beq.n	800a19c <_free_r+0x8c>
 800a118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a11c:	1f0c      	subs	r4, r1, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfb8      	it	lt
 800a122:	18e4      	addlt	r4, r4, r3
 800a124:	f7ff ff84 	bl	800a030 <__malloc_lock>
 800a128:	4a1d      	ldr	r2, [pc, #116]	@ (800a1a0 <_free_r+0x90>)
 800a12a:	6813      	ldr	r3, [r2, #0]
 800a12c:	b933      	cbnz	r3, 800a13c <_free_r+0x2c>
 800a12e:	6063      	str	r3, [r4, #4]
 800a130:	6014      	str	r4, [r2, #0]
 800a132:	4628      	mov	r0, r5
 800a134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a138:	f7ff bf80 	b.w	800a03c <__malloc_unlock>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d908      	bls.n	800a152 <_free_r+0x42>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	1821      	adds	r1, r4, r0
 800a144:	428b      	cmp	r3, r1
 800a146:	bf01      	itttt	eq
 800a148:	6819      	ldreq	r1, [r3, #0]
 800a14a:	685b      	ldreq	r3, [r3, #4]
 800a14c:	1809      	addeq	r1, r1, r0
 800a14e:	6021      	streq	r1, [r4, #0]
 800a150:	e7ed      	b.n	800a12e <_free_r+0x1e>
 800a152:	461a      	mov	r2, r3
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	b10b      	cbz	r3, 800a15c <_free_r+0x4c>
 800a158:	42a3      	cmp	r3, r4
 800a15a:	d9fa      	bls.n	800a152 <_free_r+0x42>
 800a15c:	6811      	ldr	r1, [r2, #0]
 800a15e:	1850      	adds	r0, r2, r1
 800a160:	42a0      	cmp	r0, r4
 800a162:	d10b      	bne.n	800a17c <_free_r+0x6c>
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	4401      	add	r1, r0
 800a168:	1850      	adds	r0, r2, r1
 800a16a:	4283      	cmp	r3, r0
 800a16c:	6011      	str	r1, [r2, #0]
 800a16e:	d1e0      	bne.n	800a132 <_free_r+0x22>
 800a170:	6818      	ldr	r0, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	6053      	str	r3, [r2, #4]
 800a176:	4408      	add	r0, r1
 800a178:	6010      	str	r0, [r2, #0]
 800a17a:	e7da      	b.n	800a132 <_free_r+0x22>
 800a17c:	d902      	bls.n	800a184 <_free_r+0x74>
 800a17e:	230c      	movs	r3, #12
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	e7d6      	b.n	800a132 <_free_r+0x22>
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	1821      	adds	r1, r4, r0
 800a188:	428b      	cmp	r3, r1
 800a18a:	bf04      	itt	eq
 800a18c:	6819      	ldreq	r1, [r3, #0]
 800a18e:	685b      	ldreq	r3, [r3, #4]
 800a190:	6063      	str	r3, [r4, #4]
 800a192:	bf04      	itt	eq
 800a194:	1809      	addeq	r1, r1, r0
 800a196:	6021      	streq	r1, [r4, #0]
 800a198:	6054      	str	r4, [r2, #4]
 800a19a:	e7ca      	b.n	800a132 <_free_r+0x22>
 800a19c:	bd38      	pop	{r3, r4, r5, pc}
 800a19e:	bf00      	nop
 800a1a0:	20000954 	.word	0x20000954

0800a1a4 <__ssputs_r>:
 800a1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a8:	688e      	ldr	r6, [r1, #8]
 800a1aa:	461f      	mov	r7, r3
 800a1ac:	42be      	cmp	r6, r7
 800a1ae:	680b      	ldr	r3, [r1, #0]
 800a1b0:	4682      	mov	sl, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	4690      	mov	r8, r2
 800a1b6:	d82d      	bhi.n	800a214 <__ssputs_r+0x70>
 800a1b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a1c0:	d026      	beq.n	800a210 <__ssputs_r+0x6c>
 800a1c2:	6965      	ldr	r5, [r4, #20]
 800a1c4:	6909      	ldr	r1, [r1, #16]
 800a1c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1ca:	eba3 0901 	sub.w	r9, r3, r1
 800a1ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1d2:	1c7b      	adds	r3, r7, #1
 800a1d4:	444b      	add	r3, r9
 800a1d6:	106d      	asrs	r5, r5, #1
 800a1d8:	429d      	cmp	r5, r3
 800a1da:	bf38      	it	cc
 800a1dc:	461d      	movcc	r5, r3
 800a1de:	0553      	lsls	r3, r2, #21
 800a1e0:	d527      	bpl.n	800a232 <__ssputs_r+0x8e>
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f7ff fea4 	bl	8009f30 <_malloc_r>
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	b360      	cbz	r0, 800a246 <__ssputs_r+0xa2>
 800a1ec:	6921      	ldr	r1, [r4, #16]
 800a1ee:	464a      	mov	r2, r9
 800a1f0:	f000 fad8 	bl	800a7a4 <memcpy>
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	6126      	str	r6, [r4, #16]
 800a202:	6165      	str	r5, [r4, #20]
 800a204:	444e      	add	r6, r9
 800a206:	eba5 0509 	sub.w	r5, r5, r9
 800a20a:	6026      	str	r6, [r4, #0]
 800a20c:	60a5      	str	r5, [r4, #8]
 800a20e:	463e      	mov	r6, r7
 800a210:	42be      	cmp	r6, r7
 800a212:	d900      	bls.n	800a216 <__ssputs_r+0x72>
 800a214:	463e      	mov	r6, r7
 800a216:	6820      	ldr	r0, [r4, #0]
 800a218:	4632      	mov	r2, r6
 800a21a:	4641      	mov	r1, r8
 800a21c:	f000 faa8 	bl	800a770 <memmove>
 800a220:	68a3      	ldr	r3, [r4, #8]
 800a222:	1b9b      	subs	r3, r3, r6
 800a224:	60a3      	str	r3, [r4, #8]
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	4433      	add	r3, r6
 800a22a:	6023      	str	r3, [r4, #0]
 800a22c:	2000      	movs	r0, #0
 800a22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a232:	462a      	mov	r2, r5
 800a234:	f000 fac4 	bl	800a7c0 <_realloc_r>
 800a238:	4606      	mov	r6, r0
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d1e0      	bne.n	800a200 <__ssputs_r+0x5c>
 800a23e:	6921      	ldr	r1, [r4, #16]
 800a240:	4650      	mov	r0, sl
 800a242:	f7ff ff65 	bl	800a110 <_free_r>
 800a246:	230c      	movs	r3, #12
 800a248:	f8ca 3000 	str.w	r3, [sl]
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	e7e9      	b.n	800a22e <__ssputs_r+0x8a>
	...

0800a25c <_svfiprintf_r>:
 800a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a260:	4698      	mov	r8, r3
 800a262:	898b      	ldrh	r3, [r1, #12]
 800a264:	061b      	lsls	r3, r3, #24
 800a266:	b09d      	sub	sp, #116	@ 0x74
 800a268:	4607      	mov	r7, r0
 800a26a:	460d      	mov	r5, r1
 800a26c:	4614      	mov	r4, r2
 800a26e:	d510      	bpl.n	800a292 <_svfiprintf_r+0x36>
 800a270:	690b      	ldr	r3, [r1, #16]
 800a272:	b973      	cbnz	r3, 800a292 <_svfiprintf_r+0x36>
 800a274:	2140      	movs	r1, #64	@ 0x40
 800a276:	f7ff fe5b 	bl	8009f30 <_malloc_r>
 800a27a:	6028      	str	r0, [r5, #0]
 800a27c:	6128      	str	r0, [r5, #16]
 800a27e:	b930      	cbnz	r0, 800a28e <_svfiprintf_r+0x32>
 800a280:	230c      	movs	r3, #12
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	b01d      	add	sp, #116	@ 0x74
 800a28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28e:	2340      	movs	r3, #64	@ 0x40
 800a290:	616b      	str	r3, [r5, #20]
 800a292:	2300      	movs	r3, #0
 800a294:	9309      	str	r3, [sp, #36]	@ 0x24
 800a296:	2320      	movs	r3, #32
 800a298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a29c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2a0:	2330      	movs	r3, #48	@ 0x30
 800a2a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a440 <_svfiprintf_r+0x1e4>
 800a2a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2aa:	f04f 0901 	mov.w	r9, #1
 800a2ae:	4623      	mov	r3, r4
 800a2b0:	469a      	mov	sl, r3
 800a2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2b6:	b10a      	cbz	r2, 800a2bc <_svfiprintf_r+0x60>
 800a2b8:	2a25      	cmp	r2, #37	@ 0x25
 800a2ba:	d1f9      	bne.n	800a2b0 <_svfiprintf_r+0x54>
 800a2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a2c0:	d00b      	beq.n	800a2da <_svfiprintf_r+0x7e>
 800a2c2:	465b      	mov	r3, fp
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f7ff ff6b 	bl	800a1a4 <__ssputs_r>
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	f000 80a7 	beq.w	800a422 <_svfiprintf_r+0x1c6>
 800a2d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2d6:	445a      	add	r2, fp
 800a2d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2da:	f89a 3000 	ldrb.w	r3, [sl]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 809f 	beq.w	800a422 <_svfiprintf_r+0x1c6>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ee:	f10a 0a01 	add.w	sl, sl, #1
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	9307      	str	r3, [sp, #28]
 800a2f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2fc:	4654      	mov	r4, sl
 800a2fe:	2205      	movs	r2, #5
 800a300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a304:	484e      	ldr	r0, [pc, #312]	@ (800a440 <_svfiprintf_r+0x1e4>)
 800a306:	f7f5 ff83 	bl	8000210 <memchr>
 800a30a:	9a04      	ldr	r2, [sp, #16]
 800a30c:	b9d8      	cbnz	r0, 800a346 <_svfiprintf_r+0xea>
 800a30e:	06d0      	lsls	r0, r2, #27
 800a310:	bf44      	itt	mi
 800a312:	2320      	movmi	r3, #32
 800a314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a318:	0711      	lsls	r1, r2, #28
 800a31a:	bf44      	itt	mi
 800a31c:	232b      	movmi	r3, #43	@ 0x2b
 800a31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a322:	f89a 3000 	ldrb.w	r3, [sl]
 800a326:	2b2a      	cmp	r3, #42	@ 0x2a
 800a328:	d015      	beq.n	800a356 <_svfiprintf_r+0xfa>
 800a32a:	9a07      	ldr	r2, [sp, #28]
 800a32c:	4654      	mov	r4, sl
 800a32e:	2000      	movs	r0, #0
 800a330:	f04f 0c0a 	mov.w	ip, #10
 800a334:	4621      	mov	r1, r4
 800a336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a33a:	3b30      	subs	r3, #48	@ 0x30
 800a33c:	2b09      	cmp	r3, #9
 800a33e:	d94b      	bls.n	800a3d8 <_svfiprintf_r+0x17c>
 800a340:	b1b0      	cbz	r0, 800a370 <_svfiprintf_r+0x114>
 800a342:	9207      	str	r2, [sp, #28]
 800a344:	e014      	b.n	800a370 <_svfiprintf_r+0x114>
 800a346:	eba0 0308 	sub.w	r3, r0, r8
 800a34a:	fa09 f303 	lsl.w	r3, r9, r3
 800a34e:	4313      	orrs	r3, r2
 800a350:	9304      	str	r3, [sp, #16]
 800a352:	46a2      	mov	sl, r4
 800a354:	e7d2      	b.n	800a2fc <_svfiprintf_r+0xa0>
 800a356:	9b03      	ldr	r3, [sp, #12]
 800a358:	1d19      	adds	r1, r3, #4
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	9103      	str	r1, [sp, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	bfbb      	ittet	lt
 800a362:	425b      	neglt	r3, r3
 800a364:	f042 0202 	orrlt.w	r2, r2, #2
 800a368:	9307      	strge	r3, [sp, #28]
 800a36a:	9307      	strlt	r3, [sp, #28]
 800a36c:	bfb8      	it	lt
 800a36e:	9204      	strlt	r2, [sp, #16]
 800a370:	7823      	ldrb	r3, [r4, #0]
 800a372:	2b2e      	cmp	r3, #46	@ 0x2e
 800a374:	d10a      	bne.n	800a38c <_svfiprintf_r+0x130>
 800a376:	7863      	ldrb	r3, [r4, #1]
 800a378:	2b2a      	cmp	r3, #42	@ 0x2a
 800a37a:	d132      	bne.n	800a3e2 <_svfiprintf_r+0x186>
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	1d1a      	adds	r2, r3, #4
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	9203      	str	r2, [sp, #12]
 800a384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a388:	3402      	adds	r4, #2
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a450 <_svfiprintf_r+0x1f4>
 800a390:	7821      	ldrb	r1, [r4, #0]
 800a392:	2203      	movs	r2, #3
 800a394:	4650      	mov	r0, sl
 800a396:	f7f5 ff3b 	bl	8000210 <memchr>
 800a39a:	b138      	cbz	r0, 800a3ac <_svfiprintf_r+0x150>
 800a39c:	9b04      	ldr	r3, [sp, #16]
 800a39e:	eba0 000a 	sub.w	r0, r0, sl
 800a3a2:	2240      	movs	r2, #64	@ 0x40
 800a3a4:	4082      	lsls	r2, r0
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	3401      	adds	r4, #1
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b0:	4824      	ldr	r0, [pc, #144]	@ (800a444 <_svfiprintf_r+0x1e8>)
 800a3b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3b6:	2206      	movs	r2, #6
 800a3b8:	f7f5 ff2a 	bl	8000210 <memchr>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d036      	beq.n	800a42e <_svfiprintf_r+0x1d2>
 800a3c0:	4b21      	ldr	r3, [pc, #132]	@ (800a448 <_svfiprintf_r+0x1ec>)
 800a3c2:	bb1b      	cbnz	r3, 800a40c <_svfiprintf_r+0x1b0>
 800a3c4:	9b03      	ldr	r3, [sp, #12]
 800a3c6:	3307      	adds	r3, #7
 800a3c8:	f023 0307 	bic.w	r3, r3, #7
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	9303      	str	r3, [sp, #12]
 800a3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d2:	4433      	add	r3, r6
 800a3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3d6:	e76a      	b.n	800a2ae <_svfiprintf_r+0x52>
 800a3d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3dc:	460c      	mov	r4, r1
 800a3de:	2001      	movs	r0, #1
 800a3e0:	e7a8      	b.n	800a334 <_svfiprintf_r+0xd8>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	3401      	adds	r4, #1
 800a3e6:	9305      	str	r3, [sp, #20]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	f04f 0c0a 	mov.w	ip, #10
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3f4:	3a30      	subs	r2, #48	@ 0x30
 800a3f6:	2a09      	cmp	r2, #9
 800a3f8:	d903      	bls.n	800a402 <_svfiprintf_r+0x1a6>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0c6      	beq.n	800a38c <_svfiprintf_r+0x130>
 800a3fe:	9105      	str	r1, [sp, #20]
 800a400:	e7c4      	b.n	800a38c <_svfiprintf_r+0x130>
 800a402:	fb0c 2101 	mla	r1, ip, r1, r2
 800a406:	4604      	mov	r4, r0
 800a408:	2301      	movs	r3, #1
 800a40a:	e7f0      	b.n	800a3ee <_svfiprintf_r+0x192>
 800a40c:	ab03      	add	r3, sp, #12
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	462a      	mov	r2, r5
 800a412:	4b0e      	ldr	r3, [pc, #56]	@ (800a44c <_svfiprintf_r+0x1f0>)
 800a414:	a904      	add	r1, sp, #16
 800a416:	4638      	mov	r0, r7
 800a418:	f3af 8000 	nop.w
 800a41c:	1c42      	adds	r2, r0, #1
 800a41e:	4606      	mov	r6, r0
 800a420:	d1d6      	bne.n	800a3d0 <_svfiprintf_r+0x174>
 800a422:	89ab      	ldrh	r3, [r5, #12]
 800a424:	065b      	lsls	r3, r3, #25
 800a426:	f53f af2d 	bmi.w	800a284 <_svfiprintf_r+0x28>
 800a42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a42c:	e72c      	b.n	800a288 <_svfiprintf_r+0x2c>
 800a42e:	ab03      	add	r3, sp, #12
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	462a      	mov	r2, r5
 800a434:	4b05      	ldr	r3, [pc, #20]	@ (800a44c <_svfiprintf_r+0x1f0>)
 800a436:	a904      	add	r1, sp, #16
 800a438:	4638      	mov	r0, r7
 800a43a:	f000 f879 	bl	800a530 <_printf_i>
 800a43e:	e7ed      	b.n	800a41c <_svfiprintf_r+0x1c0>
 800a440:	0800c7e4 	.word	0x0800c7e4
 800a444:	0800c7ee 	.word	0x0800c7ee
 800a448:	00000000 	.word	0x00000000
 800a44c:	0800a1a5 	.word	0x0800a1a5
 800a450:	0800c7ea 	.word	0x0800c7ea

0800a454 <_printf_common>:
 800a454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a458:	4616      	mov	r6, r2
 800a45a:	4698      	mov	r8, r3
 800a45c:	688a      	ldr	r2, [r1, #8]
 800a45e:	690b      	ldr	r3, [r1, #16]
 800a460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a464:	4293      	cmp	r3, r2
 800a466:	bfb8      	it	lt
 800a468:	4613      	movlt	r3, r2
 800a46a:	6033      	str	r3, [r6, #0]
 800a46c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a470:	4607      	mov	r7, r0
 800a472:	460c      	mov	r4, r1
 800a474:	b10a      	cbz	r2, 800a47a <_printf_common+0x26>
 800a476:	3301      	adds	r3, #1
 800a478:	6033      	str	r3, [r6, #0]
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	0699      	lsls	r1, r3, #26
 800a47e:	bf42      	ittt	mi
 800a480:	6833      	ldrmi	r3, [r6, #0]
 800a482:	3302      	addmi	r3, #2
 800a484:	6033      	strmi	r3, [r6, #0]
 800a486:	6825      	ldr	r5, [r4, #0]
 800a488:	f015 0506 	ands.w	r5, r5, #6
 800a48c:	d106      	bne.n	800a49c <_printf_common+0x48>
 800a48e:	f104 0a19 	add.w	sl, r4, #25
 800a492:	68e3      	ldr	r3, [r4, #12]
 800a494:	6832      	ldr	r2, [r6, #0]
 800a496:	1a9b      	subs	r3, r3, r2
 800a498:	42ab      	cmp	r3, r5
 800a49a:	dc26      	bgt.n	800a4ea <_printf_common+0x96>
 800a49c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4a0:	6822      	ldr	r2, [r4, #0]
 800a4a2:	3b00      	subs	r3, #0
 800a4a4:	bf18      	it	ne
 800a4a6:	2301      	movne	r3, #1
 800a4a8:	0692      	lsls	r2, r2, #26
 800a4aa:	d42b      	bmi.n	800a504 <_printf_common+0xb0>
 800a4ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4b0:	4641      	mov	r1, r8
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	47c8      	blx	r9
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d01e      	beq.n	800a4f8 <_printf_common+0xa4>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	6922      	ldr	r2, [r4, #16]
 800a4be:	f003 0306 	and.w	r3, r3, #6
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	bf02      	ittt	eq
 800a4c6:	68e5      	ldreq	r5, [r4, #12]
 800a4c8:	6833      	ldreq	r3, [r6, #0]
 800a4ca:	1aed      	subeq	r5, r5, r3
 800a4cc:	68a3      	ldr	r3, [r4, #8]
 800a4ce:	bf0c      	ite	eq
 800a4d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4d4:	2500      	movne	r5, #0
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bfc4      	itt	gt
 800a4da:	1a9b      	subgt	r3, r3, r2
 800a4dc:	18ed      	addgt	r5, r5, r3
 800a4de:	2600      	movs	r6, #0
 800a4e0:	341a      	adds	r4, #26
 800a4e2:	42b5      	cmp	r5, r6
 800a4e4:	d11a      	bne.n	800a51c <_printf_common+0xc8>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	e008      	b.n	800a4fc <_printf_common+0xa8>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	4652      	mov	r2, sl
 800a4ee:	4641      	mov	r1, r8
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	47c8      	blx	r9
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d103      	bne.n	800a500 <_printf_common+0xac>
 800a4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a500:	3501      	adds	r5, #1
 800a502:	e7c6      	b.n	800a492 <_printf_common+0x3e>
 800a504:	18e1      	adds	r1, r4, r3
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	2030      	movs	r0, #48	@ 0x30
 800a50a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a50e:	4422      	add	r2, r4
 800a510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a518:	3302      	adds	r3, #2
 800a51a:	e7c7      	b.n	800a4ac <_printf_common+0x58>
 800a51c:	2301      	movs	r3, #1
 800a51e:	4622      	mov	r2, r4
 800a520:	4641      	mov	r1, r8
 800a522:	4638      	mov	r0, r7
 800a524:	47c8      	blx	r9
 800a526:	3001      	adds	r0, #1
 800a528:	d0e6      	beq.n	800a4f8 <_printf_common+0xa4>
 800a52a:	3601      	adds	r6, #1
 800a52c:	e7d9      	b.n	800a4e2 <_printf_common+0x8e>
	...

0800a530 <_printf_i>:
 800a530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a534:	7e0f      	ldrb	r7, [r1, #24]
 800a536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a538:	2f78      	cmp	r7, #120	@ 0x78
 800a53a:	4691      	mov	r9, r2
 800a53c:	4680      	mov	r8, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	469a      	mov	sl, r3
 800a542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a546:	d807      	bhi.n	800a558 <_printf_i+0x28>
 800a548:	2f62      	cmp	r7, #98	@ 0x62
 800a54a:	d80a      	bhi.n	800a562 <_printf_i+0x32>
 800a54c:	2f00      	cmp	r7, #0
 800a54e:	f000 80d2 	beq.w	800a6f6 <_printf_i+0x1c6>
 800a552:	2f58      	cmp	r7, #88	@ 0x58
 800a554:	f000 80b9 	beq.w	800a6ca <_printf_i+0x19a>
 800a558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a55c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a560:	e03a      	b.n	800a5d8 <_printf_i+0xa8>
 800a562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a566:	2b15      	cmp	r3, #21
 800a568:	d8f6      	bhi.n	800a558 <_printf_i+0x28>
 800a56a:	a101      	add	r1, pc, #4	@ (adr r1, 800a570 <_printf_i+0x40>)
 800a56c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a570:	0800a5c9 	.word	0x0800a5c9
 800a574:	0800a5dd 	.word	0x0800a5dd
 800a578:	0800a559 	.word	0x0800a559
 800a57c:	0800a559 	.word	0x0800a559
 800a580:	0800a559 	.word	0x0800a559
 800a584:	0800a559 	.word	0x0800a559
 800a588:	0800a5dd 	.word	0x0800a5dd
 800a58c:	0800a559 	.word	0x0800a559
 800a590:	0800a559 	.word	0x0800a559
 800a594:	0800a559 	.word	0x0800a559
 800a598:	0800a559 	.word	0x0800a559
 800a59c:	0800a6dd 	.word	0x0800a6dd
 800a5a0:	0800a607 	.word	0x0800a607
 800a5a4:	0800a697 	.word	0x0800a697
 800a5a8:	0800a559 	.word	0x0800a559
 800a5ac:	0800a559 	.word	0x0800a559
 800a5b0:	0800a6ff 	.word	0x0800a6ff
 800a5b4:	0800a559 	.word	0x0800a559
 800a5b8:	0800a607 	.word	0x0800a607
 800a5bc:	0800a559 	.word	0x0800a559
 800a5c0:	0800a559 	.word	0x0800a559
 800a5c4:	0800a69f 	.word	0x0800a69f
 800a5c8:	6833      	ldr	r3, [r6, #0]
 800a5ca:	1d1a      	adds	r2, r3, #4
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6032      	str	r2, [r6, #0]
 800a5d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e09d      	b.n	800a718 <_printf_i+0x1e8>
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	1d19      	adds	r1, r3, #4
 800a5e2:	6031      	str	r1, [r6, #0]
 800a5e4:	0606      	lsls	r6, r0, #24
 800a5e6:	d501      	bpl.n	800a5ec <_printf_i+0xbc>
 800a5e8:	681d      	ldr	r5, [r3, #0]
 800a5ea:	e003      	b.n	800a5f4 <_printf_i+0xc4>
 800a5ec:	0645      	lsls	r5, r0, #25
 800a5ee:	d5fb      	bpl.n	800a5e8 <_printf_i+0xb8>
 800a5f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	da03      	bge.n	800a600 <_printf_i+0xd0>
 800a5f8:	232d      	movs	r3, #45	@ 0x2d
 800a5fa:	426d      	negs	r5, r5
 800a5fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a600:	4859      	ldr	r0, [pc, #356]	@ (800a768 <_printf_i+0x238>)
 800a602:	230a      	movs	r3, #10
 800a604:	e011      	b.n	800a62a <_printf_i+0xfa>
 800a606:	6821      	ldr	r1, [r4, #0]
 800a608:	6833      	ldr	r3, [r6, #0]
 800a60a:	0608      	lsls	r0, r1, #24
 800a60c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a610:	d402      	bmi.n	800a618 <_printf_i+0xe8>
 800a612:	0649      	lsls	r1, r1, #25
 800a614:	bf48      	it	mi
 800a616:	b2ad      	uxthmi	r5, r5
 800a618:	2f6f      	cmp	r7, #111	@ 0x6f
 800a61a:	4853      	ldr	r0, [pc, #332]	@ (800a768 <_printf_i+0x238>)
 800a61c:	6033      	str	r3, [r6, #0]
 800a61e:	bf14      	ite	ne
 800a620:	230a      	movne	r3, #10
 800a622:	2308      	moveq	r3, #8
 800a624:	2100      	movs	r1, #0
 800a626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a62a:	6866      	ldr	r6, [r4, #4]
 800a62c:	60a6      	str	r6, [r4, #8]
 800a62e:	2e00      	cmp	r6, #0
 800a630:	bfa2      	ittt	ge
 800a632:	6821      	ldrge	r1, [r4, #0]
 800a634:	f021 0104 	bicge.w	r1, r1, #4
 800a638:	6021      	strge	r1, [r4, #0]
 800a63a:	b90d      	cbnz	r5, 800a640 <_printf_i+0x110>
 800a63c:	2e00      	cmp	r6, #0
 800a63e:	d04b      	beq.n	800a6d8 <_printf_i+0x1a8>
 800a640:	4616      	mov	r6, r2
 800a642:	fbb5 f1f3 	udiv	r1, r5, r3
 800a646:	fb03 5711 	mls	r7, r3, r1, r5
 800a64a:	5dc7      	ldrb	r7, [r0, r7]
 800a64c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a650:	462f      	mov	r7, r5
 800a652:	42bb      	cmp	r3, r7
 800a654:	460d      	mov	r5, r1
 800a656:	d9f4      	bls.n	800a642 <_printf_i+0x112>
 800a658:	2b08      	cmp	r3, #8
 800a65a:	d10b      	bne.n	800a674 <_printf_i+0x144>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	07df      	lsls	r7, r3, #31
 800a660:	d508      	bpl.n	800a674 <_printf_i+0x144>
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	6861      	ldr	r1, [r4, #4]
 800a666:	4299      	cmp	r1, r3
 800a668:	bfde      	ittt	le
 800a66a:	2330      	movle	r3, #48	@ 0x30
 800a66c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a670:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a674:	1b92      	subs	r2, r2, r6
 800a676:	6122      	str	r2, [r4, #16]
 800a678:	f8cd a000 	str.w	sl, [sp]
 800a67c:	464b      	mov	r3, r9
 800a67e:	aa03      	add	r2, sp, #12
 800a680:	4621      	mov	r1, r4
 800a682:	4640      	mov	r0, r8
 800a684:	f7ff fee6 	bl	800a454 <_printf_common>
 800a688:	3001      	adds	r0, #1
 800a68a:	d14a      	bne.n	800a722 <_printf_i+0x1f2>
 800a68c:	f04f 30ff 	mov.w	r0, #4294967295
 800a690:	b004      	add	sp, #16
 800a692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	f043 0320 	orr.w	r3, r3, #32
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	4833      	ldr	r0, [pc, #204]	@ (800a76c <_printf_i+0x23c>)
 800a6a0:	2778      	movs	r7, #120	@ 0x78
 800a6a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	6831      	ldr	r1, [r6, #0]
 800a6aa:	061f      	lsls	r7, r3, #24
 800a6ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6b0:	d402      	bmi.n	800a6b8 <_printf_i+0x188>
 800a6b2:	065f      	lsls	r7, r3, #25
 800a6b4:	bf48      	it	mi
 800a6b6:	b2ad      	uxthmi	r5, r5
 800a6b8:	6031      	str	r1, [r6, #0]
 800a6ba:	07d9      	lsls	r1, r3, #31
 800a6bc:	bf44      	itt	mi
 800a6be:	f043 0320 	orrmi.w	r3, r3, #32
 800a6c2:	6023      	strmi	r3, [r4, #0]
 800a6c4:	b11d      	cbz	r5, 800a6ce <_printf_i+0x19e>
 800a6c6:	2310      	movs	r3, #16
 800a6c8:	e7ac      	b.n	800a624 <_printf_i+0xf4>
 800a6ca:	4827      	ldr	r0, [pc, #156]	@ (800a768 <_printf_i+0x238>)
 800a6cc:	e7e9      	b.n	800a6a2 <_printf_i+0x172>
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	f023 0320 	bic.w	r3, r3, #32
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	e7f6      	b.n	800a6c6 <_printf_i+0x196>
 800a6d8:	4616      	mov	r6, r2
 800a6da:	e7bd      	b.n	800a658 <_printf_i+0x128>
 800a6dc:	6833      	ldr	r3, [r6, #0]
 800a6de:	6825      	ldr	r5, [r4, #0]
 800a6e0:	6961      	ldr	r1, [r4, #20]
 800a6e2:	1d18      	adds	r0, r3, #4
 800a6e4:	6030      	str	r0, [r6, #0]
 800a6e6:	062e      	lsls	r6, r5, #24
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	d501      	bpl.n	800a6f0 <_printf_i+0x1c0>
 800a6ec:	6019      	str	r1, [r3, #0]
 800a6ee:	e002      	b.n	800a6f6 <_printf_i+0x1c6>
 800a6f0:	0668      	lsls	r0, r5, #25
 800a6f2:	d5fb      	bpl.n	800a6ec <_printf_i+0x1bc>
 800a6f4:	8019      	strh	r1, [r3, #0]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	4616      	mov	r6, r2
 800a6fc:	e7bc      	b.n	800a678 <_printf_i+0x148>
 800a6fe:	6833      	ldr	r3, [r6, #0]
 800a700:	1d1a      	adds	r2, r3, #4
 800a702:	6032      	str	r2, [r6, #0]
 800a704:	681e      	ldr	r6, [r3, #0]
 800a706:	6862      	ldr	r2, [r4, #4]
 800a708:	2100      	movs	r1, #0
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7f5 fd80 	bl	8000210 <memchr>
 800a710:	b108      	cbz	r0, 800a716 <_printf_i+0x1e6>
 800a712:	1b80      	subs	r0, r0, r6
 800a714:	6060      	str	r0, [r4, #4]
 800a716:	6863      	ldr	r3, [r4, #4]
 800a718:	6123      	str	r3, [r4, #16]
 800a71a:	2300      	movs	r3, #0
 800a71c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a720:	e7aa      	b.n	800a678 <_printf_i+0x148>
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	4632      	mov	r2, r6
 800a726:	4649      	mov	r1, r9
 800a728:	4640      	mov	r0, r8
 800a72a:	47d0      	blx	sl
 800a72c:	3001      	adds	r0, #1
 800a72e:	d0ad      	beq.n	800a68c <_printf_i+0x15c>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	079b      	lsls	r3, r3, #30
 800a734:	d413      	bmi.n	800a75e <_printf_i+0x22e>
 800a736:	68e0      	ldr	r0, [r4, #12]
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	4298      	cmp	r0, r3
 800a73c:	bfb8      	it	lt
 800a73e:	4618      	movlt	r0, r3
 800a740:	e7a6      	b.n	800a690 <_printf_i+0x160>
 800a742:	2301      	movs	r3, #1
 800a744:	4632      	mov	r2, r6
 800a746:	4649      	mov	r1, r9
 800a748:	4640      	mov	r0, r8
 800a74a:	47d0      	blx	sl
 800a74c:	3001      	adds	r0, #1
 800a74e:	d09d      	beq.n	800a68c <_printf_i+0x15c>
 800a750:	3501      	adds	r5, #1
 800a752:	68e3      	ldr	r3, [r4, #12]
 800a754:	9903      	ldr	r1, [sp, #12]
 800a756:	1a5b      	subs	r3, r3, r1
 800a758:	42ab      	cmp	r3, r5
 800a75a:	dcf2      	bgt.n	800a742 <_printf_i+0x212>
 800a75c:	e7eb      	b.n	800a736 <_printf_i+0x206>
 800a75e:	2500      	movs	r5, #0
 800a760:	f104 0619 	add.w	r6, r4, #25
 800a764:	e7f5      	b.n	800a752 <_printf_i+0x222>
 800a766:	bf00      	nop
 800a768:	0800c7f5 	.word	0x0800c7f5
 800a76c:	0800c806 	.word	0x0800c806

0800a770 <memmove>:
 800a770:	4288      	cmp	r0, r1
 800a772:	b510      	push	{r4, lr}
 800a774:	eb01 0402 	add.w	r4, r1, r2
 800a778:	d902      	bls.n	800a780 <memmove+0x10>
 800a77a:	4284      	cmp	r4, r0
 800a77c:	4623      	mov	r3, r4
 800a77e:	d807      	bhi.n	800a790 <memmove+0x20>
 800a780:	1e43      	subs	r3, r0, #1
 800a782:	42a1      	cmp	r1, r4
 800a784:	d008      	beq.n	800a798 <memmove+0x28>
 800a786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a78a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a78e:	e7f8      	b.n	800a782 <memmove+0x12>
 800a790:	4402      	add	r2, r0
 800a792:	4601      	mov	r1, r0
 800a794:	428a      	cmp	r2, r1
 800a796:	d100      	bne.n	800a79a <memmove+0x2a>
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a79e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7a2:	e7f7      	b.n	800a794 <memmove+0x24>

0800a7a4 <memcpy>:
 800a7a4:	440a      	add	r2, r1
 800a7a6:	4291      	cmp	r1, r2
 800a7a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7ac:	d100      	bne.n	800a7b0 <memcpy+0xc>
 800a7ae:	4770      	bx	lr
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7ba:	4291      	cmp	r1, r2
 800a7bc:	d1f9      	bne.n	800a7b2 <memcpy+0xe>
 800a7be:	bd10      	pop	{r4, pc}

0800a7c0 <_realloc_r>:
 800a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	4615      	mov	r5, r2
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	b921      	cbnz	r1, 800a7d6 <_realloc_r+0x16>
 800a7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	f7ff bbad 	b.w	8009f30 <_malloc_r>
 800a7d6:	b92a      	cbnz	r2, 800a7e4 <_realloc_r+0x24>
 800a7d8:	f7ff fc9a 	bl	800a110 <_free_r>
 800a7dc:	2400      	movs	r4, #0
 800a7de:	4620      	mov	r0, r4
 800a7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e4:	f000 f81a 	bl	800a81c <_malloc_usable_size_r>
 800a7e8:	4285      	cmp	r5, r0
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	d802      	bhi.n	800a7f4 <_realloc_r+0x34>
 800a7ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a7f2:	d8f4      	bhi.n	800a7de <_realloc_r+0x1e>
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f7ff fb9a 	bl	8009f30 <_malloc_r>
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d0ec      	beq.n	800a7dc <_realloc_r+0x1c>
 800a802:	42b5      	cmp	r5, r6
 800a804:	462a      	mov	r2, r5
 800a806:	4621      	mov	r1, r4
 800a808:	bf28      	it	cs
 800a80a:	4632      	movcs	r2, r6
 800a80c:	f7ff ffca 	bl	800a7a4 <memcpy>
 800a810:	4621      	mov	r1, r4
 800a812:	4640      	mov	r0, r8
 800a814:	f7ff fc7c 	bl	800a110 <_free_r>
 800a818:	463c      	mov	r4, r7
 800a81a:	e7e0      	b.n	800a7de <_realloc_r+0x1e>

0800a81c <_malloc_usable_size_r>:
 800a81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a820:	1f18      	subs	r0, r3, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	bfbc      	itt	lt
 800a826:	580b      	ldrlt	r3, [r1, r0]
 800a828:	18c0      	addlt	r0, r0, r3
 800a82a:	4770      	bx	lr

0800a82c <_init>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr

0800a838 <_fini>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr
