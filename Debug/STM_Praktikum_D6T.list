
STM_Praktikum_D6T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d4c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f44  08006f10  08006f10  00007f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e54  08008e54  0000a094  2**0
                  CONTENTS
  4 .ARM          00000008  08008e54  08008e54  00009e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e5c  08008e5c  0000a094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e5c  08008e5c  00009e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e60  08008e60  00009e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08008e64  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000094  08008ef8  0000a094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08008ef8  0000a558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f45  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369d  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  000236a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8a  00000000  00000000  00024870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d29  00000000  00000000  000255fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cb8  00000000  00000000  00049323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce5ca  00000000  00000000  00061fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001305a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004954  00000000  00000000  001305e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00134f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000094 	.word	0x20000094
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006ef8 	.word	0x08006ef8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000098 	.word	0x20000098
 8000200:	08006ef8 	.word	0x08006ef8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <d6t_reading_to_lcd>:
#include "render.h"
#include "communication.h"



static void d6t_reading_to_lcd(I2C_HandleTypeDef* hi2c2){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	f5ad 5dc0 	sub.w	sp, sp, #6144	@ 0x1800
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000502:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8000506:	6018      	str	r0, [r3, #0]
	/// set configuration
	BSP_LCD_Init();
 8000508:	f001 ff94 	bl	8002434 <BSP_LCD_Init>
	BSP_LCD_Clear(0xffff);
 800050c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000510:	f002 f856 	bl	80025c0 <BSP_LCD_Clear>
	// create buffer for temperature values (raw, processed)
	uint8_t buffer[TEMP_VALUE_COUNT*2 + 3];
	int temp[TEMP_VALUE_COUNT+1];

	while (1){
		 read_sensor_data(buffer, hi2c2);
 8000514:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000518:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 800051c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000520:	f102 020c 	add.w	r2, r2, #12
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	4610      	mov	r0, r2
 8000528:	f000 fbdc 	bl	8000ce4 <read_sensor_data>
	     sensor_data_to_temperatures(buffer, temp);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	3b08      	subs	r3, #8
 8000532:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000536:	f102 020c 	add.w	r2, r2, #12
 800053a:	4619      	mov	r1, r3
 800053c:	4610      	mov	r0, r2
 800053e:	f000 fc1d 	bl	8000d7c <sensor_data_to_temperatures>
	     display_data_on_lcd(temp);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	3b08      	subs	r3, #8
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fd3f 	bl	8000fcc <display_data_on_lcd>
		 read_sensor_data(buffer, hi2c2);
 800054e:	bf00      	nop
 8000550:	e7e0      	b.n	8000514 <d6t_reading_to_lcd+0x20>
	...

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f002 f944 	bl	80027e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f810 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f8de 	bl	8000720 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000564:	f000 f880 	bl	8000668 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000568:	f000 f8ac 	bl	80006c4 <MX_I2C2_Init>
  HAL_I2C_Init(&hi2c2);
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <main+0x28>)
 800056e:	f004 f9ef 	bl	8004950 <HAL_I2C_Init>

  /* USER CODE BEGIN 2 */
  d6t_reading_to_lcd(&hi2c2);
 8000572:	4802      	ldr	r0, [pc, #8]	@ (800057c <main+0x28>)
 8000574:	f7ff ffbe 	bl	80004f4 <d6t_reading_to_lcd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x24>
 800057c:	20000104 	.word	0x20000104

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2234      	movs	r2, #52	@ 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 fc86 	bl	8006ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <SystemClock_Config+0xe0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a2c      	ldr	r2, [pc, #176]	@ (8000660 <SystemClock_Config+0xe0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <SystemClock_Config+0xe0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <SystemClock_Config+0xe4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a26      	ldr	r2, [pc, #152]	@ (8000664 <SystemClock_Config+0xe4>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <SystemClock_Config+0xe4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005dc:	2303      	movs	r3, #3
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	2301      	movs	r3, #1
 80005e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	2310      	movs	r3, #16
 80005ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005fc:	2348      	movs	r3, #72	@ 0x48
 80005fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000604:	2303      	movs	r3, #3
 8000606:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fc0b 	bl	8005e2c <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800061c:	f000 f9f2 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f005 f981 	bl	8005944 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000648:	f000 f9dc 	bl	8000a04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2000      	movs	r0, #0
 8000652:	f005 fa5d 	bl	8005b10 <HAL_RCC_MCOConfig>
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	@ 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	@ (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f004 f953 	bl	8004950 <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f9a8 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000b0 	.word	0x200000b0
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <MX_I2C2_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	@ (800071c <MX_I2C2_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_I2C2_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_I2C2_Init+0x50>)
 8000702:	f004 f925 	bl	8004950 <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f97a 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000104 	.word	0x20000104
 8000718:	40005800 	.word	0x40005800
 800071c:	000186a0 	.word	0x000186a0

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	@ 0x38
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	4baa      	ldr	r3, [pc, #680]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4aa9      	ldr	r2, [pc, #676]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4ba7      	ldr	r3, [pc, #668]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	623b      	str	r3, [r7, #32]
 8000750:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	4ba3      	ldr	r3, [pc, #652]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4aa2      	ldr	r2, [pc, #648]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4ba0      	ldr	r3, [pc, #640]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	61fb      	str	r3, [r7, #28]
 800076c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b9c      	ldr	r3, [pc, #624]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a9b      	ldr	r2, [pc, #620]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b99      	ldr	r3, [pc, #612]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b95      	ldr	r3, [pc, #596]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a94      	ldr	r2, [pc, #592]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b92      	ldr	r3, [pc, #584]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b8e      	ldr	r3, [pc, #568]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a8d      	ldr	r2, [pc, #564]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b8b      	ldr	r3, [pc, #556]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b87      	ldr	r3, [pc, #540]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a86      	ldr	r2, [pc, #536]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b84      	ldr	r3, [pc, #528]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b80      	ldr	r3, [pc, #512]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a7f      	ldr	r2, [pc, #508]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b7d      	ldr	r3, [pc, #500]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b79      	ldr	r3, [pc, #484]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a78      	ldr	r2, [pc, #480]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b76      	ldr	r3, [pc, #472]	@ (80009e4 <MX_GPIO_Init+0x2c4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	4873      	ldr	r0, [pc, #460]	@ (80009e8 <MX_GPIO_Init+0x2c8>)
 800081c:	f002 faf2 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000826:	4871      	ldr	r0, [pc, #452]	@ (80009ec <MX_GPIO_Init+0x2cc>)
 8000828:	f002 faec 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000832:	486f      	ldr	r0, [pc, #444]	@ (80009f0 <MX_GPIO_Init+0x2d0>)
 8000834:	f002 fae6 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083e:	486d      	ldr	r0, [pc, #436]	@ (80009f4 <MX_GPIO_Init+0x2d4>)
 8000840:	f002 fae0 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8000844:	230f      	movs	r3, #15
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000848:	2311      	movs	r3, #17
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4863      	ldr	r0, [pc, #396]	@ (80009e8 <MX_GPIO_Init+0x2c8>)
 800085c:	f002 f93e 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 8000860:	2310      	movs	r3, #16
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000870:	2308      	movs	r3, #8
 8000872:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	485b      	ldr	r0, [pc, #364]	@ (80009e8 <MX_GPIO_Init+0x2c8>)
 800087c:	f002 f92e 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 8000880:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4854      	ldr	r0, [pc, #336]	@ (80009ec <MX_GPIO_Init+0x2cc>)
 800089a:	f002 f91f 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800089e:	2304      	movs	r3, #4
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008ae:	2308      	movs	r3, #8
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	484f      	ldr	r0, [pc, #316]	@ (80009f8 <MX_GPIO_Init+0x2d8>)
 80008ba:	f002 f90f 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	484a      	ldr	r0, [pc, #296]	@ (80009fc <MX_GPIO_Init+0x2dc>)
 80008d4:	f002 f902 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 80008d8:	2302      	movs	r3, #2
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008e8:	2308      	movs	r3, #8
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	4843      	ldr	r0, [pc, #268]	@ (8000a00 <MX_GPIO_Init+0x2e0>)
 80008f4:	f002 f8f2 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 80008f8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	4837      	ldr	r0, [pc, #220]	@ (80009ec <MX_GPIO_Init+0x2cc>)
 800090e:	f002 f8e5 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8000912:	2393      	movs	r3, #147	@ 0x93
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	4833      	ldr	r0, [pc, #204]	@ (80009f4 <MX_GPIO_Init+0x2d4>)
 8000926:	f002 f8d9 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 800092a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800093c:	2305      	movs	r3, #5
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	482e      	ldr	r0, [pc, #184]	@ (8000a00 <MX_GPIO_Init+0x2e0>)
 8000948:	f002 f8c8 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800094c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <MX_GPIO_Init+0x2d0>)
 8000966:	f002 f8b9 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 800096a:	2324      	movs	r3, #36	@ 0x24
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	481d      	ldr	r0, [pc, #116]	@ (80009f4 <MX_GPIO_Init+0x2d4>)
 8000980:	f002 f8ac 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 8000984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800098a:	2311      	movs	r3, #17
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <MX_GPIO_Init+0x2d4>)
 800099e:	f002 f89d 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 80009a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	480f      	ldr	r0, [pc, #60]	@ (80009fc <MX_GPIO_Init+0x2dc>)
 80009c0:	f002 f88c 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 80009c4:	2308      	movs	r3, #8
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <MX_GPIO_Init+0x2d0>)
 80009d8:	f002 f880 	bl	8002adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3738      	adds	r7, #56	@ 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40021400 	.word	0x40021400
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40021800 	.word	0x40021800
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020400 	.word	0x40020400

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	@ 0x30
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b6c <HAL_I2C_MspInit+0x10c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12c      	bne.n	8000adc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a39      	ldr	r2, [pc, #228]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a9e:	23c0      	movs	r3, #192	@ 0xc0
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa2:	2312      	movs	r3, #18
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482e      	ldr	r0, [pc, #184]	@ (8000b74 <HAL_I2C_MspInit+0x114>)
 8000aba:	f002 f80f 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000ac8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ada:	e042      	b.n	8000b62 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a25      	ldr	r2, [pc, #148]	@ (8000b78 <HAL_I2C_MspInit+0x118>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d13d      	bne.n	8000b62 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a20      	ldr	r2, [pc, #128]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b08:	2312      	movs	r3, #18
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b14:	2304      	movs	r3, #4
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4815      	ldr	r0, [pc, #84]	@ (8000b74 <HAL_I2C_MspInit+0x114>)
 8000b20:	f001 ffdc 	bl	8002adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2a:	2312      	movs	r3, #18
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000b36:	2309      	movs	r3, #9
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <HAL_I2C_MspInit+0x114>)
 8000b42:	f001 ffcb 	bl	8002adc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000b50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_I2C_MspInit+0x110>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	@ 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40005800 	.word	0x40005800

08000b7c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000b90:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <HAL_FSMC_MspInit+0xa8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d140      	bne.n	8000c1a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <HAL_FSMC_MspInit+0xa8>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <HAL_FSMC_MspInit+0xac>)
 8000ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ba6:	4a20      	ldr	r2, [pc, #128]	@ (8000c28 <HAL_FSMC_MspInit+0xac>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <HAL_FSMC_MspInit+0xac>)
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = A0_Pin;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <HAL_FSMC_MspInit+0xb0>)
 8000bd4:	f001 ff82 	bl	8002adc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000bd8:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000bdc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <HAL_FSMC_MspInit+0xb4>)
 8000bf4:	f001 ff72 	bl	8002adc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000bf8:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000bfc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <HAL_FSMC_MspInit+0xb8>)
 8000c14:	f001 ff62 	bl	8002adc <HAL_GPIO_Init>
 8000c18:	e000      	b.n	8000c1c <HAL_FSMC_MspInit+0xa0>
    return;
 8000c1a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000158 	.word	0x20000158
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40021400 	.word	0x40021400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40020c00 	.word	0x40020c00

08000c38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000c40:	f7ff ff9c 	bl	8000b7c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f001 fdf1 	bl	8002888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <OTG_FS_IRQHandler+0x10>)
 8000cb2:	f002 f8c0 	bl	8002e36 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000178 	.word	0x20000178

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <read_sensor_data>:

/**
 * reads the raw temperature readings from the sensor into the readbuffer
 * Returns 0 if no sensor could be detected (else 1)
 */
int read_sensor_data(uint8_t* readbuffer, I2C_HandleTypeDef* hi2c2 ){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	 /// Each temperature reading consists of 2 8-Bit value (LOW-/HIGH-bit)
	 /// Additionally one PTAT reading and one Checksuum value is transmitted
	 int size = TEMP_VALUE_COUNT * 2 + 3;
 8000cee:	f640 0303 	movw	r3, #2051	@ 0x803
 8000cf2:	613b      	str	r3, [r7, #16]

	 /// Command for telling the sensor we want to read data
	 uint8_t cmd = 0x4c;
 8000cf4:	234c      	movs	r3, #76	@ 0x4c
 8000cf6:	73bb      	strb	r3, [r7, #14]

	 /// applying I2C settings to the external I2C port
	  HAL_StatusTypeDef status = HAL_I2C_Init(hi2c2);
 8000cf8:	6838      	ldr	r0, [r7, #0]
 8000cfa:	f003 fe29 	bl	8004950 <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]

	  int fails = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
	  do {
		  /// send command for preparing transmission
		  status = HAL_I2C_Master_Transmit(hi2c2, 0x14, &cmd, 1, 100);
 8000d06:	f107 020e 	add.w	r2, r7, #14
 8000d0a:	2364      	movs	r3, #100	@ 0x64
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	2114      	movs	r1, #20
 8000d12:	6838      	ldr	r0, [r7, #0]
 8000d14:	f003 ff60 	bl	8004bd8 <HAL_I2C_Master_Transmit>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(10);
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f001 fdd3 	bl	80028c8 <HAL_Delay>

		  /// if the connection failed more than 10 times in a row, return connection lost
		  if (status != HAL_OK && fails++ > CONNECTION_TRYS) return NO_CONNECTION;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <read_sensor_data+0x52>
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	617a      	str	r2, [r7, #20]
 8000d2e:	2b0a      	cmp	r3, #10
 8000d30:	dd01      	ble.n	8000d36 <read_sensor_data+0x52>
 8000d32:	2300      	movs	r3, #0
 8000d34:	e01e      	b.n	8000d74 <read_sensor_data+0x90>

		  /// receive the data from Sensor at port 0x14
		  status = HAL_I2C_Master_Receive(hi2c2, 0x14, readbuffer, size, HAL_MAX_DELAY);
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3e:	9200      	str	r2, [sp, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	2114      	movs	r1, #20
 8000d44:	6838      	ldr	r0, [r7, #0]
 8000d46:	f004 f845 	bl	8004dd4 <HAL_I2C_Master_Receive>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]

		  /// if everything was successful, end the function else wait and try again
		  if (status == HAL_OK && !(readbuffer[5] == 0xff && readbuffer[6] == 0xff)) break;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <read_sensor_data+0x84>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3305      	adds	r3, #5
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2bff      	cmp	r3, #255	@ 0xff
 8000d5c:	d109      	bne.n	8000d72 <read_sensor_data+0x8e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3306      	adds	r3, #6
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2bff      	cmp	r3, #255	@ 0xff
 8000d66:	d104      	bne.n	8000d72 <read_sensor_data+0x8e>
		  HAL_Delay(550);
 8000d68:	f240 2026 	movw	r0, #550	@ 0x226
 8000d6c:	f001 fdac 	bl	80028c8 <HAL_Delay>
		  status = HAL_I2C_Master_Transmit(hi2c2, 0x14, &cmd, 1, 100);
 8000d70:	e7c9      	b.n	8000d06 <read_sensor_data+0x22>
	  } while(1);
	  return SUCCESS;
 8000d72:	2301      	movs	r3, #1
  };
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <sensor_data_to_temperatures>:

/// converts the raw sensor readings into sensor data in 10*degrees celsius
int sensor_data_to_temperatures(uint8_t* sensor_data, int* temperatures){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	/// each reading consists of a high reading and a low reading,
	/// with high reading * 256 (max value 4 Bit) + low bits = temperature * 10
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e016      	b.n	8000dba <sensor_data_to_temperatures+0x3e>
	 	  temperatures[temp_index/2] = sensor_data[temp_index+1] * 256 + sensor_data[temp_index];
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	021a      	lsls	r2, r3, #8
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	440b      	add	r3, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	0fd9      	lsrs	r1, r3, #31
 8000da6:	440b      	add	r3, r1
 8000da8:	105b      	asrs	r3, r3, #1
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	440b      	add	r3, r1
 8000db0:	4402      	add	r2, r0
 8000db2:	601a      	str	r2, [r3, #0]
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3302      	adds	r3, #2
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f640 0201 	movw	r2, #2049	@ 0x801
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	dde3      	ble.n	8000d8c <sensor_data_to_temperatures+0x10>
	   }
	   return SUCCESS;
 8000dc4:	2301      	movs	r3, #1
};
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <pick_gradient_color>:
#include "render.h"


// perform linear uint16_terpolation between two colors
// source stackoverflow (with own adjustments, so no GPL License  needed)
uint16_t pick_gradient_color(uint16_t color1, uint16_t color2, float temperature_gradient) {
 8000dd2:	b480      	push	{r7}
 8000dd4:	b089      	sub	sp, #36	@ 0x24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460a      	mov	r2, r1
 8000ddc:	ed87 0a00 	vstr	s0, [r7]
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	4613      	mov	r3, r2
 8000de4:	80bb      	strh	r3, [r7, #4]

	/// convert rgb uint16_to rgb565:
	/// as in rgb the always 2 digit are one color #rrggbb,
	// but here the second and third bit overlapp from r-g and g-b
	uint16_t r1 = (color1 >> 11) & 0x1F;
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	0adb      	lsrs	r3, r3, #11
 8000dea:	83fb      	strh	r3, [r7, #30]
    uint16_t g1 = (color1 >> 5) & 0x3F;
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000df6:	83bb      	strh	r3, [r7, #28]
    uint16_t b1 = color1 & 0x1F;
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	837b      	strh	r3, [r7, #26]

    uint16_t r2 = (color2 >> 11) & 0x1F;
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	0adb      	lsrs	r3, r3, #11
 8000e04:	833b      	strh	r3, [r7, #24]
    uint16_t g2 = (color2 >> 5) & 0x3F;
 8000e06:	88bb      	ldrh	r3, [r7, #4]
 8000e08:	095b      	lsrs	r3, r3, #5
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e10:	82fb      	strh	r3, [r7, #22]
    uint16_t b2 = color2 & 0x1F;
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	82bb      	strh	r3, [r7, #20]

    /// apply ratios between the two colors by using the temperature gradient
    uint16_t r = (uint16_t)(r1 + temperature_gradient * (r2 - r1));
 8000e1a:	8bfb      	ldrh	r3, [r7, #30]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e24:	8b3a      	ldrh	r2, [r7, #24]
 8000e26:	8bfb      	ldrh	r3, [r7, #30]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e32:	edd7 7a00 	vldr	s15, [r7]
 8000e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e42:	ee17 3a90 	vmov	r3, s15
 8000e46:	827b      	strh	r3, [r7, #18]
    uint16_t g = (uint16_t)(g1 + temperature_gradient * (g2 - g1));
 8000e48:	8bbb      	ldrh	r3, [r7, #28]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e52:	8afa      	ldrh	r2, [r7, #22]
 8000e54:	8bbb      	ldrh	r3, [r7, #28]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e60:	edd7 7a00 	vldr	s15, [r7]
 8000e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e70:	ee17 3a90 	vmov	r3, s15
 8000e74:	823b      	strh	r3, [r7, #16]
    uint16_t b = (uint16_t)(b1 + temperature_gradient * (b2 - b1));
 8000e76:	8b7b      	ldrh	r3, [r7, #26]
 8000e78:	ee07 3a90 	vmov	s15, r3
 8000e7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e80:	8aba      	ldrh	r2, [r7, #20]
 8000e82:	8b7b      	ldrh	r3, [r7, #26]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e8e:	edd7 7a00 	vldr	s15, [r7]
 8000e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 3a90 	vmov	r3, s15
 8000ea2:	81fb      	strh	r3, [r7, #14]

    return ((r & 0x1F) << 11) | ((g & 0x3F) << 5) | (b & 0x1F);
 8000ea4:	8a7b      	ldrh	r3, [r7, #18]
 8000ea6:	02db      	lsls	r3, r3, #11
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	8a3b      	ldrh	r3, [r7, #16]
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	b29b      	uxth	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <convert_temp_to_color>:

/// convert the temperature values of the sensor [-10,70] to a color in the spectrum
///[-10,22]-> [blue, white],
///[ 22,36]-> [white, orange], (high change in color as its the mainly used area)
///[ 36,70]-> [orange, red]
uint16_t convert_temp_to_color(float temp) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	ed87 0a01 	vstr	s0, [r7, #4]
	// the sensor can operate with temperatures in [-10, 70]

    if (temp <= -10)
 8000ee2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee6:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8000eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	d801      	bhi.n	8000ef8 <convert_temp_to_color+0x20>
        return DARK_BLUE;
 8000ef4:	231f      	movs	r3, #31
 8000ef6:	e05d      	b.n	8000fb4 <convert_temp_to_color+0xdc>

    if (temp >= 70)
 8000ef8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000efc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000fbc <convert_temp_to_color+0xe4>
 8000f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	db02      	blt.n	8000f10 <convert_temp_to_color+0x38>
    	return DARK_RED;
 8000f0a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f0e:	e051      	b.n	8000fb4 <convert_temp_to_color+0xdc>

    if (temp < 22) {
 8000f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f14:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8000f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	d514      	bpl.n	8000f4c <convert_temp_to_color+0x74>
    	// map temperature from ]-10, 22[ to [0, 1] for the blue to white gradient
    	float temp_gradient = (temp + 10.f) / 32.0f;
 8000f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f26:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000f2e:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000fc0 <convert_temp_to_color+0xe8>
 8000f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f36:	edc7 7a03 	vstr	s15, [r7, #12]
    	return pick_gradient_color(DARK_BLUE, WHITE, temp_gradient);
 8000f3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f42:	201f      	movs	r0, #31
 8000f44:	f7ff ff45 	bl	8000dd2 <pick_gradient_color>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	e033      	b.n	8000fb4 <convert_temp_to_color+0xdc>
    }

    if (temp < 36) {
 8000f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f50:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000fc4 <convert_temp_to_color+0xec>
 8000f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	d515      	bpl.n	8000f8a <convert_temp_to_color+0xb2>
        	// map temperature from [-22, 36[ to [0, 1] for the blue to white gradient
        	float temp_gradient = (temp - 22.f) / 14.0f;
 8000f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f62:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8000f66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f6a:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 8000f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f72:	edc7 7a04 	vstr	s15, [r7, #16]
        	return pick_gradient_color(WHITE, ORANGE, temp_gradient);
 8000f76:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f7a:	f64f 51a0 	movw	r1, #64928	@ 0xfda0
 8000f7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f82:	f7ff ff26 	bl	8000dd2 <pick_gradient_color>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e014      	b.n	8000fb4 <convert_temp_to_color+0xdc>
        }


    // map temperature from [36, 70] to [0, 1] for the orange to red gradient
    float temp_gradient = (temp - 36.f) / 34.0f;
 8000f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000fc4 <convert_temp_to_color+0xec>
 8000f92:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f96:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000fc8 <convert_temp_to_color+0xf0>
 8000f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9e:	edc7 7a05 	vstr	s15, [r7, #20]
    return pick_gradient_color(ORANGE, DARK_RED, temp_gradient);
 8000fa2:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fa6:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000faa:	f64f 50a0 	movw	r0, #64928	@ 0xfda0
 8000fae:	f7ff ff10 	bl	8000dd2 <pick_gradient_color>
 8000fb2:	4603      	mov	r3, r0

}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	428c0000 	.word	0x428c0000
 8000fc0:	42000000 	.word	0x42000000
 8000fc4:	42100000 	.word	0x42100000
 8000fc8:	42080000 	.word	0x42080000

08000fcc <display_data_on_lcd>:

/// display the temperature values as an image on the LCD screen
/// make sure to initiate BSP_lcd before calling
void display_data_on_lcd(int* temperatures){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	  /// get params of the screen
	  int width = BSP_LCD_GetXSize()+10; // +10 for rounding errors
 8000fd4:	f001 fabc 	bl	8002550 <BSP_LCD_GetXSize>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	330a      	adds	r3, #10
 8000fdc:	617b      	str	r3, [r7, #20]
	  int height = BSP_LCD_GetYSize() +10;
 8000fde:	f001 fac3 	bl	8002568 <BSP_LCD_GetYSize>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	330a      	adds	r3, #10
 8000fe6:	613b      	str	r3, [r7, #16]

	  /// calculate Height / with of cells

	  int cell_width = width / H_CELL_COUNT;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da00      	bge.n	8000ff0 <display_data_on_lcd+0x24>
 8000fee:	331f      	adds	r3, #31
 8000ff0:	115b      	asrs	r3, r3, #5
 8000ff2:	60fb      	str	r3, [r7, #12]
	  int cell_hight = height/ V_CELL_COUNT;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	da00      	bge.n	8000ffc <display_data_on_lcd+0x30>
 8000ffa:	331f      	adds	r3, #31
 8000ffc:	115b      	asrs	r3, r3, #5
 8000ffe:	60bb      	str	r3, [r7, #8]

	  /// iterate over rows/columns
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	e03c      	b.n	8001080 <display_data_on_lcd+0xb4>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	e033      	b.n	8001074 <display_data_on_lcd+0xa8>
			  BSP_LCD_SetTextColor(
					  convert_temp_to_color(
							  /// +1 because of the PTAT temperature value at temperatures[0]
							  (float)temperatures[row * 32 + col+1] / 10.f
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	015a      	lsls	r2, r3, #5
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	4413      	add	r3, r2
 8001014:	3301      	adds	r3, #1
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			  BSP_LCD_SetTextColor(
 8001026:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800102a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800102e:	eeb0 0a47 	vmov.f32	s0, s14
 8001032:	f7ff ff51 	bl	8000ed8 <convert_temp_to_color>
 8001036:	4603      	mov	r3, r0
 8001038:	4618      	mov	r0, r3
 800103a:	f001 faa1 	bl	8002580 <BSP_LCD_SetTextColor>
										   )
							  );
			  BSP_LCD_FillRect(col * cell_width+10, row * cell_hight+10, cell_width, cell_hight);
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	b29a      	uxth	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b29b      	uxth	r3, r3
 8001046:	fb12 f303 	smulbb	r3, r2, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	330a      	adds	r3, #10
 800104e:	b298      	uxth	r0, r3
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	b29a      	uxth	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	b29b      	uxth	r3, r3
 8001058:	fb12 f303 	smulbb	r3, r2, r3
 800105c:	b29b      	uxth	r3, r3
 800105e:	330a      	adds	r3, #10
 8001060:	b299      	uxth	r1, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	b29a      	uxth	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	b29b      	uxth	r3, r3
 800106a:	f001 fb35 	bl	80026d8 <BSP_LCD_FillRect>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	3301      	adds	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2b1f      	cmp	r3, #31
 8001078:	ddc8      	ble.n	800100c <display_data_on_lcd+0x40>
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b1f      	cmp	r3, #31
 8001084:	ddbf      	ble.n	8001006 <display_data_on_lcd+0x3a>
			  // +20 = centering as the screen doesn't start by 0 and its better with a border on every side
		  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001094:	f7ff fe14 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	@ (80010d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	@ (80010dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f005 fef7 	bl	8006eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fa47 	bl	8000554 <main>
  bx  lr    
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010c8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80010d4:	08008e64 	.word	0x08008e64
  ldr r2, =_sbss
 80010d8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80010dc:	20000558 	.word	0x20000558

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>

080010e2 <ls016b8uy_Init>:
  * @brief  Initialize the LS016B8UY LCD Component.
  * @param  None
  * @retval None
  */
void ls016b8uy_Init(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
  uint8_t   parameter[4];

  /* Initialize LS016B8UY low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80010e8:	f001 f972 	bl	80023d0 <LCD_IO_Init>
  
  parameter[0] = 0x00;     /* VSYNC output */
 80010ec:	2300      	movs	r3, #0
 80010ee:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_VSYNC_OUTPUT, parameter, 1);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	2035      	movs	r0, #53	@ 0x35
 80010f8:	f000 f9a6 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x06;     /* 18 bits color mode */
 80010fc:	2306      	movs	r3, #6
 80010fe:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_COLOR_MODE, parameter, 1);
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	203a      	movs	r0, #58	@ 0x3a
 8001108:	f000 f99e 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x01;     /* Panel setting command <No.1 UN-Lock> */
 800110c:	2301      	movs	r3, #1
 800110e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0xFE;
 8001110:	23fe      	movs	r3, #254	@ 0xfe
 8001112:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_1, parameter, 2);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2202      	movs	r2, #2
 8001118:	4619      	mov	r1, r3
 800111a:	20b0      	movs	r0, #176	@ 0xb0
 800111c:	f000 f994 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0xDE;     /* Panel setting command <No.2 UN-Lock> */
 8001120:	23de      	movs	r3, #222	@ 0xde
 8001122:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x21;
 8001124:	2321      	movs	r3, #33	@ 0x21
 8001126:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_2, parameter, 2);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2202      	movs	r2, #2
 800112c:	4619      	mov	r1, r3
 800112e:	20b1      	movs	r0, #177	@ 0xb1
 8001130:	f000 f98a 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* V-Porch setting */
 8001134:	2305      	movs	r3, #5
 8001136:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 8001138:	2333      	movs	r3, #51	@ 0x33
 800113a:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_V_PORCH, parameter, 2);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2202      	movs	r2, #2
 8001140:	4619      	mov	r1, r3
 8001142:	20b7      	movs	r0, #183	@ 0xb7
 8001144:	f000 f980 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* Idle mode V-Porch setting */
 8001148:	2305      	movs	r3, #5
 800114a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 800114c:	2333      	movs	r3, #51	@ 0x33
 800114e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_IDLE_V_PORCH, parameter, 2);
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2202      	movs	r2, #2
 8001154:	4619      	mov	r1, r3
 8001156:	20b8      	movs	r0, #184	@ 0xb8
 8001158:	f000 f976 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x04;     /* panel timing setting */
 800115c:	2304      	movs	r3, #4
 800115e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x03;
 8001160:	2303      	movs	r3, #3
 8001162:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_1, parameter, 2);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2202      	movs	r2, #2
 8001168:	4619      	mov	r1, r3
 800116a:	20c8      	movs	r0, #200	@ 0xc8
 800116c:	f000 f96c 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x5E;     /* panel timing setting */
 8001170:	235e      	movs	r3, #94	@ 0x5e
 8001172:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x08;
 8001174:	2308      	movs	r3, #8
 8001176:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_2, parameter, 2);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2202      	movs	r2, #2
 800117c:	4619      	mov	r1, r3
 800117e:	20c9      	movs	r0, #201	@ 0xc9
 8001180:	f000 f962 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x0A;     /* panel timing setting */
 8001184:	230a      	movs	r3, #10
 8001186:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x0C;
 8001188:	230c      	movs	r3, #12
 800118a:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x02;
 800118c:	2302      	movs	r3, #2
 800118e:	71bb      	strb	r3, [r7, #6]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_3, parameter, 3);
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2203      	movs	r2, #3
 8001194:	4619      	mov	r1, r3
 8001196:	20ca      	movs	r0, #202	@ 0xca
 8001198:	f000 f956 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* panel timing setting */
 800119c:	2303      	movs	r3, #3
 800119e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x04;
 80011a0:	2304      	movs	r3, #4
 80011a2:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_4, parameter, 2);
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2202      	movs	r2, #2
 80011a8:	4619      	mov	r1, r3
 80011aa:	20cc      	movs	r0, #204	@ 0xcc
 80011ac:	f000 f94c 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x0C;     /* panel power setting */
 80011b0:	230c      	movs	r3, #12
 80011b2:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_POWER, parameter, 1);
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	20d0      	movs	r0, #208	@ 0xd0
 80011bc:	f000 f944 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x02;     /* Oscillator Setting = 2MHz */
 80011c0:	2302      	movs	r3, #2
 80011c2:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_OSCILLATOR, parameter, 1);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	20b3      	movs	r0, #179	@ 0xb3
 80011cc:	f000 f93c 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x53;     /* GVDD = 4.76V setting */
 80011d0:	2353      	movs	r3, #83	@ 0x53
 80011d2:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_GVDD, parameter, 1);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	20c0      	movs	r0, #192	@ 0xc0
 80011dc:	f000 f934 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Reload MTP After SLPOUT */
 80011e0:	2300      	movs	r3, #0
 80011e2:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x45;     /* VCOMH=3.76V */
 80011e4:	2345      	movs	r3, #69	@ 0x45
 80011e6:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_RELOAD_MTP_VCOMH, parameter, 2);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2202      	movs	r2, #2
 80011ec:	4619      	mov	r1, r3
 80011ee:	20c5      	movs	r0, #197	@ 0xc5
 80011f0:	f000 f92a 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* OP-Amp Ability. (Normal) */
 80011f4:	2303      	movs	r3, #3
 80011f6:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x12;     /* Step-up Cycle for AVDD Booster Freq./4 */
 80011f8:	2312      	movs	r3, #18
 80011fa:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_OPAMP, parameter, 2);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2202      	movs	r2, #2
 8001200:	4619      	mov	r1, r3
 8001202:	20c2      	movs	r0, #194	@ 0xc2
 8001204:	f000 f920 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Tearing Effect Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
 8001208:	2300      	movs	r3, #0
 800120a:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_TEARING_EFFECT, parameter, 1);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2201      	movs	r2, #1
 8001210:	4619      	mov	r1, r3
 8001212:	20dd      	movs	r0, #221	@ 0xdd
 8001214:	f000 f918 	bl	8001448 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_LOCK, parameter, 0);   /* Panel setting command <Lock> */
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	20b4      	movs	r0, #180	@ 0xb4
 8001220:	f000 f912 	bl	8001448 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_OUT, parameter, 0);            /* Sleep Out Command */
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	2011      	movs	r0, #17
 800122c:	f000 f90c 	bl	8001448 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 8001230:	2096      	movs	r0, #150	@ 0x96
 8001232:	f001 f8f4 	bl	800241e <LCD_IO_Delay>

  parameter[0] = 0x00;     /* CASET */
 8001236:	2300      	movs	r3, #0
 8001238:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x1E;
 800123a:	231e      	movs	r3, #30
 800123c:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 800123e:	2300      	movs	r3, #0
 8001240:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xD1;
 8001242:	23d1      	movs	r3, #209	@ 0xd1
 8001244:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2204      	movs	r2, #4
 800124a:	4619      	mov	r1, r3
 800124c:	202a      	movs	r0, #42	@ 0x2a
 800124e:	f000 f8fb 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 8001252:	2300      	movs	r3, #0
 8001254:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xB3;
 800125e:	23b3      	movs	r3, #179	@ 0xb3
 8001260:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2204      	movs	r2, #4
 8001266:	4619      	mov	r1, r3
 8001268:	202b      	movs	r0, #43	@ 0x2b
 800126a:	f000 f8ed 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x83;     /* Normal display for Driver Down side */
 800126e:	2383      	movs	r3, #131	@ 0x83
 8001270:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_NORMAL_DISPLAY, parameter, 1);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	2036      	movs	r0, #54	@ 0x36
 800127a:	f000 f8e5 	bl	8001448 <ls016b8uy_WriteReg>

  ls016b8uy_DisplayOn();   /* Display ON command */
 800127e:	f000 f804 	bl	800128a <ls016b8uy_DisplayOn>

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <ls016b8uy_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOn(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_ON, (uint8_t*)NULL, 0);    /* Display ON command */
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2029      	movs	r0, #41	@ 0x29
 8001294:	f000 f8d8 	bl	8001448 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_IDLE_MODE_OFF, (uint8_t*)NULL, 0); /* Idle mode OFF command */
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2038      	movs	r0, #56	@ 0x38
 800129e:	f000 f8d3 	bl	8001448 <ls016b8uy_WriteReg>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <ls016b8uy_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOff(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_OFF, (uint8_t*)NULL, 0);   /* Display OFF command */
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2028      	movs	r0, #40	@ 0x28
 80012b0:	f000 f8ca 	bl	8001448 <ls016b8uy_WriteReg>
  LCD_IO_Delay(20);   /* Wait for 20ms */
 80012b4:	2014      	movs	r0, #20
 80012b6:	f001 f8b2 	bl	800241e <LCD_IO_Delay>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_IN, (uint8_t*)NULL, 0);      /* Sleep In Command */
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2010      	movs	r0, #16
 80012c0:	f000 f8c2 	bl	8001448 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 80012c4:	2096      	movs	r0, #150	@ 0x96
 80012c6:	f001 f8aa 	bl	800241e <LCD_IO_Delay>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}

080012ce <ls016b8uy_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ls016b8uy_GetLcdPixelWidth(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_WIDTH;
 80012d2:	23b4      	movs	r3, #180	@ 0xb4
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <ls016b8uy_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ls016b8uy_GetLcdPixelHeight(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_HEIGHT;
 80012e2:	23b4      	movs	r3, #180	@ 0xb4
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <ls016b8uy_ReadID>:
  * @brief  Get the LS016B8UY ID.
  * @param  None
  * @retval The LS016B8UY ID 
  */
uint16_t ls016b8uy_ReadID(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 80012f2:	f001 f86d 	bl	80023d0 <LCD_IO_Init>
  /* TODO : LCD read ID command not known for now, so assumption that the connected LCD is LS016B8UY */
  return (LS016B8UY_ID);
 80012f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}

080012fe <ls016b8uy_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ls016b8uy_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	460a      	mov	r2, r1
 8001308:	80fb      	strh	r3, [r7, #6]
 800130a:	4613      	mov	r3, r2
 800130c:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];

  parameter[0] = 0x00;     /* CASET */
 800130e:	2300      	movs	r3, #0
 8001310:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x1E + Xpos;
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	331e      	adds	r3, #30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800131c:	2300      	movs	r3, #0
 800131e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xD1 + Xpos;
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	3b2f      	subs	r3, #47	@ 0x2f
 8001326:	b2db      	uxtb	r3, r3
 8001328:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2204      	movs	r2, #4
 8001330:	4619      	mov	r1, r3
 8001332:	202a      	movs	r0, #42	@ 0x2a
 8001334:	f000 f888 	bl	8001448 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 8001338:	2300      	movs	r3, #0
 800133a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xB3 + Ypos;
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3b4d      	subs	r3, #77	@ 0x4d
 800134c:	b2db      	uxtb	r3, r3
 800134e:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2204      	movs	r2, #4
 8001356:	4619      	mov	r1, r3
 8001358:	202b      	movs	r0, #43	@ 0x2b
 800135a:	f000 f875 	bl	8001448 <ls016b8uy_WriteReg>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <ls016b8uy_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ls016b8uy_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	460b      	mov	r3, r1
 8001372:	80bb      	strh	r3, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	807b      	strh	r3, [r7, #2]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2;

  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	0adb      	lsrs	r3, r3, #11
 800137c:	82fb      	strh	r3, [r7, #22]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	115b      	asrs	r3, r3, #5
 8001382:	b29b      	uxth	r3, r3
 8001384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001388:	82bb      	strh	r3, [r7, #20]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	827b      	strh	r3, [r7, #18]

  /* Prepare data to write with new pixel components and read old pixel component */
  rgb888_part1 = (r << 11) + (g << 2);
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	02db      	lsls	r3, r3, #11
 8001396:	b29a      	uxth	r2, r3
 8001398:	8abb      	ldrh	r3, [r7, #20]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	b29b      	uxth	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	823b      	strh	r3, [r7, #16]
  rgb888_part2 = (b << 11);
 80013a2:	8a7b      	ldrh	r3, [r7, #18]
 80013a4:	02db      	lsls	r3, r3, #11
 80013a6:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80013a8:	88ba      	ldrh	r2, [r7, #4]
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffa5 	bl	80012fe <ls016b8uy_SetCursor>

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	202c      	movs	r0, #44	@ 0x2c
 80013ba:	f000 f845 	bl	8001448 <ls016b8uy_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(rgb888_part1);
 80013be:	8a3b      	ldrh	r3, [r7, #16]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 f80b 	bl	80023dc <LCD_IO_WriteData>
  LCD_IO_WriteData(rgb888_part2);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f001 f807 	bl	80023dc <LCD_IO_WriteData>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <ls016b8uy_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ls016b8uy_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	460a      	mov	r2, r1
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4613      	mov	r3, r2
 80013e4:	80bb      	strh	r3, [r7, #4]
  LS016B8UY_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80013e6:	88ba      	ldrh	r2, [r7, #4]
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff86 	bl	80012fe <ls016b8uy_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ls016b8uy_ReadPixel_rgb888(Xpos, Ypos);
 80013f2:	88ba      	ldrh	r2, [r7, #4]
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f9e1 	bl	80017c0 <ls016b8uy_ReadPixel_rgb888>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	733a      	strb	r2, [r7, #12]
 8001404:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001408:	737a      	strb	r2, [r7, #13]
 800140a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800140e:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001410:	7b3b      	ldrb	r3, [r7, #12]
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001416:	7b7b      	ldrb	r3, [r7, #13]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	08db      	lsrs	r3, r3, #3
 8001420:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	b29b      	uxth	r3, r3
 8001426:	02db      	lsls	r3, r3, #11
 8001428:	b29a      	uxth	r2, r3
 800142a:	7dbb      	ldrb	r3, [r7, #22]
 800142c:	b29b      	uxth	r3, r3
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	b29b      	uxth	r3, r3
 8001432:	4413      	add	r3, r2
 8001434:	b29a      	uxth	r2, r3
 8001436:	7d7b      	ldrb	r3, [r7, #21]
 8001438:	b29b      	uxth	r3, r3
 800143a:	4413      	add	r3, r2
 800143c:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800143e:	8a7b      	ldrh	r3, [r7, #18]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <ls016b8uy_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ls016b8uy_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	4613      	mov	r3, r2
 8001456:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 ffcb 	bl	80023f6 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e009      	b.n	800147a <ls016b8uy_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 ffb4 	bl	80023dc <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	3301      	adds	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	429a      	cmp	r2, r3
 8001480:	d3f1      	bcc.n	8001466 <ls016b8uy_WriteReg+0x1e>
  }
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <ls016b8uy_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ls016b8uy_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800148c:	b490      	push	{r4, r7}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4604      	mov	r4, r0
 8001494:	4608      	mov	r0, r1
 8001496:	4611      	mov	r1, r2
 8001498:	461a      	mov	r2, r3
 800149a:	4623      	mov	r3, r4
 800149c:	80fb      	strh	r3, [r7, #6]
 800149e:	4603      	mov	r3, r0
 80014a0:	80bb      	strh	r3, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	807b      	strh	r3, [r7, #2]
 80014a6:	4613      	mov	r3, r2
 80014a8:	803b      	strh	r3, [r7, #0]
  if (Xpos < LS016B8UY_LCD_PIXEL_WIDTH)
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	2bb3      	cmp	r3, #179	@ 0xb3
 80014ae:	d803      	bhi.n	80014b8 <ls016b8uy_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80014b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001520 <ls016b8uy_SetDisplayWindow+0x94>)
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	8013      	strh	r3, [r2, #0]
 80014b6:	e002      	b.n	80014be <ls016b8uy_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <ls016b8uy_SetDisplayWindow+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < LS016B8UY_LCD_PIXEL_HEIGHT)
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	2bb3      	cmp	r3, #179	@ 0xb3
 80014c2:	d803      	bhi.n	80014cc <ls016b8uy_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80014c4:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <ls016b8uy_SetDisplayWindow+0x98>)
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	8013      	strh	r3, [r2, #0]
 80014ca:	e002      	b.n	80014d2 <ls016b8uy_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <ls016b8uy_SetDisplayWindow+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= LS016B8UY_LCD_PIXEL_WIDTH)
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4413      	add	r3, r2
 80014d8:	2bb4      	cmp	r3, #180	@ 0xb4
 80014da:	dc08      	bgt.n	80014ee <ls016b8uy_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	4413      	add	r3, r2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <ls016b8uy_SetDisplayWindow+0x9c>)
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	e002      	b.n	80014f4 <ls016b8uy_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = LS016B8UY_LCD_PIXEL_WIDTH - 1;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <ls016b8uy_SetDisplayWindow+0x9c>)
 80014f0:	22b3      	movs	r2, #179	@ 0xb3
 80014f2:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= LS016B8UY_LCD_PIXEL_HEIGHT)
 80014f4:	883a      	ldrh	r2, [r7, #0]
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	2bb4      	cmp	r3, #180	@ 0xb4
 80014fc:	dc08      	bgt.n	8001510 <ls016b8uy_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80014fe:	883a      	ldrh	r2, [r7, #0]
 8001500:	88bb      	ldrh	r3, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <ls016b8uy_SetDisplayWindow+0xa0>)
 800150c:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
  }
}
 800150e:	e002      	b.n	8001516 <ls016b8uy_SetDisplayWindow+0x8a>
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <ls016b8uy_SetDisplayWindow+0xa0>)
 8001512:	22b3      	movs	r2, #179	@ 0xb3
 8001514:	801a      	strh	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bc90      	pop	{r4, r7}
 800151e:	4770      	bx	lr
 8001520:	2000015c 	.word	0x2000015c
 8001524:	2000015e 	.word	0x2000015e
 8001528:	2000003c 	.word	0x2000003c
 800152c:	2000003e 	.word	0x2000003e

08001530 <ls016b8uy_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	80fb      	strh	r3, [r7, #6]
 8001542:	4603      	mov	r3, r0
 8001544:	80bb      	strh	r3, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	807b      	strh	r3, [r7, #2]
 800154a:	4613      	mov	r3, r2
 800154c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	82fb      	strh	r3, [r7, #22]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2, rgb888_part3;
  
  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	0adb      	lsrs	r3, r3, #11
 8001556:	82bb      	strh	r3, [r7, #20]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	115b      	asrs	r3, r3, #5
 800155c:	b29b      	uxth	r3, r3
 800155e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001562:	827b      	strh	r3, [r7, #18]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	823b      	strh	r3, [r7, #16]

  rgb888_part1 = (r << 11) + (g << 2); /* Build pattern first part to write in LCD RAM */
 800156c:	8abb      	ldrh	r3, [r7, #20]
 800156e:	02db      	lsls	r3, r3, #11
 8001570:	b29a      	uxth	r2, r3
 8001572:	8a7b      	ldrh	r3, [r7, #18]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	b29b      	uxth	r3, r3
 8001578:	4413      	add	r3, r2
 800157a:	81fb      	strh	r3, [r7, #14]
  rgb888_part2 = (b << 11) + (r << 3); /* Build pattern second part to write in LCD RAM */
 800157c:	8a3b      	ldrh	r3, [r7, #16]
 800157e:	02db      	lsls	r3, r3, #11
 8001580:	b29a      	uxth	r2, r3
 8001582:	8abb      	ldrh	r3, [r7, #20]
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	b29b      	uxth	r3, r3
 8001588:	4413      	add	r3, r2
 800158a:	81bb      	strh	r3, [r7, #12]
  rgb888_part3 = (g << 10) + (b << 3); /* Build pattern third part to write in LCD RAM */
 800158c:	8a7b      	ldrh	r3, [r7, #18]
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	b29a      	uxth	r2, r3
 8001592:	8a3b      	ldrh	r3, [r7, #16]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	b29b      	uxth	r3, r3
 8001598:	4413      	add	r3, r2
 800159a:	817b      	strh	r3, [r7, #10]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos); 
 800159c:	887a      	ldrh	r2, [r7, #2]
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff feab 	bl	80012fe <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	202c      	movs	r0, #44	@ 0x2c
 80015ae:	f7ff ff4b 	bl	8001448 <ls016b8uy_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter+=2)
 80015b2:	2300      	movs	r3, #0
 80015b4:	82fb      	strh	r3, [r7, #22]
 80015b6:	e013      	b.n	80015e0 <ls016b8uy_DrawHLine+0xb0>
  {
    /* Write 2 pixels at a time by performing 3 access (pixels coded on 24 bits in LCD RAM whereas access are coded on 16 bits) */
    LCD_IO_WriteData(rgb888_part1);
 80015b8:	89fb      	ldrh	r3, [r7, #14]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 ff0e 	bl	80023dc <LCD_IO_WriteData>
    LCD_IO_WriteData(rgb888_part2);
 80015c0:	89bb      	ldrh	r3, [r7, #12]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 ff0a 	bl	80023dc <LCD_IO_WriteData>
    if (counter != (Length-1))  /* When writing last pixel when Length is odd, the third part is not written */
 80015c8:	8afa      	ldrh	r2, [r7, #22]
 80015ca:	883b      	ldrh	r3, [r7, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d003      	beq.n	80015da <ls016b8uy_DrawHLine+0xaa>
    {
      LCD_IO_WriteData(rgb888_part3);
 80015d2:	897b      	ldrh	r3, [r7, #10]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 ff01 	bl	80023dc <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter+=2)
 80015da:	8afb      	ldrh	r3, [r7, #22]
 80015dc:	3302      	adds	r3, #2
 80015de:	82fb      	strh	r3, [r7, #22]
 80015e0:	8afa      	ldrh	r2, [r7, #22]
 80015e2:	883b      	ldrh	r3, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3e7      	bcc.n	80015b8 <ls016b8uy_DrawHLine+0x88>
    }
  }  
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}

080015f2 <ls016b8uy_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80015f2:	b590      	push	{r4, r7, lr}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4604      	mov	r4, r0
 80015fa:	4608      	mov	r0, r1
 80015fc:	4611      	mov	r1, r2
 80015fe:	461a      	mov	r2, r3
 8001600:	4623      	mov	r3, r4
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	4603      	mov	r3, r0
 8001606:	80bb      	strh	r3, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	88bb      	ldrh	r3, [r7, #4]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe6f 	bl	80012fe <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	202c      	movs	r0, #44	@ 0x2c
 8001626:	f7ff ff0f 	bl	8001448 <ls016b8uy_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800162a:	2300      	movs	r3, #0
 800162c:	81fb      	strh	r3, [r7, #14]
 800162e:	e00b      	b.n	8001648 <ls016b8uy_DrawVLine+0x56>
  {
    ls016b8uy_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001630:	887a      	ldrh	r2, [r7, #2]
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	4413      	add	r3, r2
 8001636:	b299      	uxth	r1, r3
 8001638:	88fa      	ldrh	r2, [r7, #6]
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fe92 	bl	8001366 <ls016b8uy_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	3301      	adds	r3, #1
 8001646:	81fb      	strh	r3, [r7, #14]
 8001648:	89fa      	ldrh	r2, [r7, #14]
 800164a:	883b      	ldrh	r3, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3ef      	bcc.n	8001630 <ls016b8uy_DrawVLine+0x3e>
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
	...

0800165c <ls016b8uy_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ls016b8uy_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	603a      	str	r2, [r7, #0]
 8001666:	80fb      	strh	r3, [r7, #6]
 8001668:	460b      	mov	r3, r1
 800166a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001678:	4b30      	ldr	r3, [pc, #192]	@ (800173c <ls016b8uy_DrawBitmap+0xe0>)
 800167a:	881a      	ldrh	r2, [r3, #0]
 800167c:	4b30      	ldr	r3, [pc, #192]	@ (8001740 <ls016b8uy_DrawBitmap+0xe4>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	b29b      	uxth	r3, r3
 8001684:	3301      	adds	r3, #1
 8001686:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001688:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <ls016b8uy_DrawBitmap+0xe8>)
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	4b2e      	ldr	r3, [pc, #184]	@ (8001748 <ls016b8uy_DrawBitmap+0xec>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	3301      	adds	r3, #1
 8001696:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3302      	adds	r3, #2
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3304      	adds	r3, #4
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	461a      	mov	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	330a      	adds	r3, #10
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	330c      	adds	r3, #12
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	041b      	lsls	r3, r3, #16
 80016c8:	461a      	mov	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4413      	add	r3, r2
 80016e0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80016e2:	88ba      	ldrh	r2, [r7, #4]
 80016e4:	89bb      	ldrh	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e01d      	b.n	8001728 <ls016b8uy_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY - 1);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fe00 	bl	80012fe <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	b29b      	uxth	r3, r3
 8001702:	3b01      	subs	r3, #1
 8001704:	b299      	uxth	r1, r3
 8001706:	89fb      	ldrh	r3, [r7, #14]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	4413      	add	r3, r2
 8001714:	89fa      	ldrh	r2, [r7, #14]
 8001716:	88f8      	ldrh	r0, [r7, #6]
 8001718:	f000 f89c 	bl	8001854 <ls016b8uy_DrawRGBHLine>
    nb_line++;
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	3301      	adds	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b01      	subs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8dd      	bhi.n	80016ec <ls016b8uy_DrawBitmap+0x90>
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000003c 	.word	0x2000003c
 8001740:	2000015c 	.word	0x2000015c
 8001744:	2000003e 	.word	0x2000003e
 8001748:	2000015e 	.word	0x2000015e

0800174c <ls016b8uy_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ls016b8uy_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	4604      	mov	r4, r0
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4623      	mov	r3, r4
 800175c:	80fb      	strh	r3, [r7, #6]
 800175e:	4603      	mov	r3, r0
 8001760:	80bb      	strh	r3, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	807b      	strh	r3, [r7, #2]
 8001766:	4613      	mov	r3, r2
 8001768:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e019      	b.n	80017a8 <ls016b8uy_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	b29a      	uxth	r2, r3
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fdbe 	bl	80012fe <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	b299      	uxth	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	6a3a      	ldr	r2, [r7, #32]
 8001792:	4413      	add	r3, r2
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	88f8      	ldrh	r0, [r7, #6]
 8001798:	f000 f85c 	bl	8001854 <ls016b8uy_DrawRGBHLine>
    nb_line++;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3301      	adds	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	88ba      	ldrh	r2, [r7, #4]
 80017aa:	883b      	ldrh	r3, [r7, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d3de      	bcc.n	8001774 <ls016b8uy_DrawRGBImage+0x28>
  }
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}

080017c0 <ls016b8uy_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static LS016B8UY_Rgb888 ls016b8uy_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	460a      	mov	r2, r1
 80017ca:	80fb      	strh	r3, [r7, #6]
 80017cc:	4613      	mov	r3, r2
 80017ce:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80017d0:	88ba      	ldrh	r2, [r7, #4]
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fd91 	bl	80012fe <ls016b8uy_SetCursor>
  /* Prepare to read LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	202e      	movs	r0, #46	@ 0x2e
 80017e2:	f7ff fe31 	bl	8001448 <ls016b8uy_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80017e6:	f000 fe13 	bl	8002410 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80017ea:	f000 fe11 	bl	8002410 <LCD_IO_ReadData>
 80017ee:	4603      	mov	r3, r0
 80017f0:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80017f2:	f000 fe0d 	bl	8002410 <LCD_IO_ReadData>
 80017f6:	4603      	mov	r3, r0
 80017f8:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80017fa:	8afb      	ldrh	r3, [r7, #22]
 80017fc:	121b      	asrs	r3, r3, #8
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f023 0303 	bic.w	r3, r3, #3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8001808:	8afb      	ldrh	r3, [r7, #22]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f023 0303 	bic.w	r3, r3, #3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8001814:	8abb      	ldrh	r3, [r7, #20]
 8001816:	121b      	asrs	r3, r3, #8
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	f107 020c 	add.w	r2, r7, #12
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	4611      	mov	r1, r2
 800182e:	8019      	strh	r1, [r3, #0]
 8001830:	3302      	adds	r3, #2
 8001832:	0c12      	lsrs	r2, r2, #16
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	7c3a      	ldrb	r2, [r7, #16]
 800183a:	f362 0307 	bfi	r3, r2, #0, #8
 800183e:	7c7a      	ldrb	r2, [r7, #17]
 8001840:	f362 230f 	bfi	r3, r2, #8, #8
 8001844:	7cba      	ldrb	r2, [r7, #18]
 8001846:	f362 4317 	bfi	r3, r2, #16, #8
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <ls016b8uy_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ls016b8uy_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4603      	mov	r3, r0
 800185e:	81fb      	strh	r3, [r7, #14]
 8001860:	460b      	mov	r3, r1
 8001862:	81bb      	strh	r3, [r7, #12]
 8001864:	4613      	mov	r3, r2
 8001866:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t posX;
  uint16_t r, g, b;
  uint16_t rgb888_part;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	61fb      	str	r3, [r7, #28]

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	202c      	movs	r0, #44	@ 0x2c
 8001876:	f7ff fde7 	bl	8001448 <ls016b8uy_WriteReg>

  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 800187a:	89fb      	ldrh	r3, [r7, #14]
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	e07b      	b.n	8001978 <ls016b8uy_DrawRGBHLine+0x124>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001880:	4b44      	ldr	r3, [pc, #272]	@ (8001994 <ls016b8uy_DrawRGBHLine+0x140>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	4293      	cmp	r3, r2
 800188a:	d372      	bcc.n	8001972 <ls016b8uy_DrawRGBHLine+0x11e>
 800188c:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <ls016b8uy_DrawRGBHLine+0x144>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	89ba      	ldrh	r2, [r7, #12]
 8001892:	429a      	cmp	r2, r3
 8001894:	d36d      	bcc.n	8001972 <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <ls016b8uy_DrawRGBHLine+0x148>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	4293      	cmp	r3, r2
 80018a0:	d867      	bhi.n	8001972 <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80018a2:	4b3f      	ldr	r3, [pc, #252]	@ (80019a0 <ls016b8uy_DrawRGBHLine+0x14c>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	89ba      	ldrh	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d862      	bhi.n	8001972 <ls016b8uy_DrawRGBHLine+0x11e>
    {
      /* Write pixels in LCD RAM after RGB565 -> RGB888 conversion */
      /* As data in LCD RAM are 24bits packed, three 16 bits writes access are needed to transmit 2 pixels data */

      r = (rgb565[i] & 0xF800) >> 11;      /* Extract red component from first RGB565 pixel data */
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	4413      	add	r3, r2
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	0adb      	lsrs	r3, r3, #11
 80018b8:	837b      	strh	r3, [r7, #26]
      g = (rgb565[i] & 0x07E0) >> 5;       /* Extract green component from first RGB565 pixel data  */
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	115b      	asrs	r3, r3, #5
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018cc:	833b      	strh	r3, [r7, #24]
      rgb888_part = (r << 11) + (g << 2);  /* Build data to be written in LCD RAM */
 80018ce:	8b7b      	ldrh	r3, [r7, #26]
 80018d0:	02db      	lsls	r3, r3, #11
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	8b3b      	ldrh	r3, [r7, #24]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4413      	add	r3, r2
 80018dc:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 80018de:	8afb      	ldrh	r3, [r7, #22]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fd7b 	bl	80023dc <LCD_IO_WriteData>

      b = (rgb565[i] & 0x001F) >> 0;       /* Extract blue component from first RGB565 pixel data  */
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	82bb      	strh	r3, [r7, #20]
      r = (rgb565[i+1] & 0xF800) >> 11;    /* Extract red component from second RGB565 pixel data  */
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	0adb      	lsrs	r3, r3, #11
 8001904:	837b      	strh	r3, [r7, #26]
      rgb888_part = (b << 11) + (r << 3);  /* Build data to be written in LCD RAM */
 8001906:	8abb      	ldrh	r3, [r7, #20]
 8001908:	02db      	lsls	r3, r3, #11
 800190a:	b29a      	uxth	r2, r3
 800190c:	8b7b      	ldrh	r3, [r7, #26]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	b29b      	uxth	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 8001916:	8afb      	ldrh	r3, [r7, #22]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fd5f 	bl	80023dc <LCD_IO_WriteData>

      if (posX != (Xsize + Xpos - 1))     /* When writing last pixel when size is odd, the third part is not written */
 800191e:	897a      	ldrh	r2, [r7, #10]
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	4413      	add	r3, r2
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	429a      	cmp	r2, r3
 800192a:	d01f      	beq.n	800196c <ls016b8uy_DrawRGBHLine+0x118>
      {
        g = (rgb565[i+1] & 0x07E0) >> 5;     /* Extract green component from second RGB565 pixel data */
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	115b      	asrs	r3, r3, #5
 800193a:	b29b      	uxth	r3, r3
 800193c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001940:	833b      	strh	r3, [r7, #24]
        b = (rgb565[i+1] & 0x001F) >> 0;     /* Extract blue component from second RGB565 pixel data */
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	3301      	adds	r3, #1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	82bb      	strh	r3, [r7, #20]
        rgb888_part = (g << 10) + (b << 3);  /* Build data to be written in LCD RAM */
 8001954:	8b3b      	ldrh	r3, [r7, #24]
 8001956:	029b      	lsls	r3, r3, #10
 8001958:	b29a      	uxth	r2, r3
 800195a:	8abb      	ldrh	r3, [r7, #20]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	b29b      	uxth	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	82fb      	strh	r3, [r7, #22]
        LCD_IO_WriteData(rgb888_part);
 8001964:	8afb      	ldrh	r3, [r7, #22]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fd38 	bl	80023dc <LCD_IO_WriteData>
      }

      i += 2;
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	3302      	adds	r3, #2
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	3302      	adds	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	897a      	ldrh	r2, [r7, #10]
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	4413      	add	r3, r2
 800197e:	461a      	mov	r2, r3
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	4293      	cmp	r3, r2
 8001984:	f4ff af7c 	bcc.w	8001880 <ls016b8uy_DrawRGBHLine+0x2c>
    }
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	@ 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000015c 	.word	0x2000015c
 8001998:	2000015e 	.word	0x2000015e
 800199c:	2000003c 	.word	0x2000003c
 80019a0:	2000003e 	.word	0x2000003e

080019a4 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019aa:	f000 fd11 	bl	80023d0 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2010      	movs	r0, #16
 80019b4:	f000 f9e3 	bl	8001d7e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80019b8:	200a      	movs	r0, #10
 80019ba:	f000 fd30 	bl	800241e <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 f9db 	bl	8001d7e <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80019c8:	20c8      	movs	r0, #200	@ 0xc8
 80019ca:	f000 fd28 	bl	800241e <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2011      	movs	r0, #17
 80019d4:	f000 f9d3 	bl	8001d7e <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80019d8:	2078      	movs	r0, #120	@ 0x78
 80019da:	f000 fd20 	bl	800241e <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80019de:	2300      	movs	r3, #0
 80019e0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80019e2:	463b      	mov	r3, r7
 80019e4:	2201      	movs	r2, #1
 80019e6:	4619      	mov	r1, r3
 80019e8:	2036      	movs	r0, #54	@ 0x36
 80019ea:	f000 f9c8 	bl	8001d7e <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80019ee:	2305      	movs	r3, #5
 80019f0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80019f2:	463b      	mov	r3, r7
 80019f4:	2201      	movs	r2, #1
 80019f6:	4619      	mov	r1, r3
 80019f8:	203a      	movs	r0, #58	@ 0x3a
 80019fa:	f000 f9c0 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2021      	movs	r0, #33	@ 0x21
 8001a04:	f000 f9bb 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a10:	2300      	movs	r3, #0
 8001a12:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a14:	23ef      	movs	r3, #239	@ 0xef
 8001a16:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	202a      	movs	r0, #42	@ 0x2a
 8001a20:	f000 f9ad 	bl	8001d7e <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a30:	23ef      	movs	r3, #239	@ 0xef
 8001a32:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001a34:	463b      	mov	r3, r7
 8001a36:	2204      	movs	r2, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	202b      	movs	r0, #43	@ 0x2b
 8001a3c:	f000 f99f 	bl	8001d7e <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001a40:	230c      	movs	r3, #12
 8001a42:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001a44:	230c      	movs	r3, #12
 8001a46:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001a4c:	2333      	movs	r3, #51	@ 0x33
 8001a4e:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001a50:	2333      	movs	r3, #51	@ 0x33
 8001a52:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001a54:	463b      	mov	r3, r7
 8001a56:	2205      	movs	r2, #5
 8001a58:	4619      	mov	r1, r3
 8001a5a:	20b2      	movs	r0, #178	@ 0xb2
 8001a5c:	f000 f98f 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001a60:	2335      	movs	r3, #53	@ 0x35
 8001a62:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001a64:	463b      	mov	r3, r7
 8001a66:	2201      	movs	r2, #1
 8001a68:	4619      	mov	r1, r3
 8001a6a:	20b7      	movs	r0, #183	@ 0xb7
 8001a6c:	f000 f987 	bl	8001d7e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001a70:	231f      	movs	r3, #31
 8001a72:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001a74:	463b      	mov	r3, r7
 8001a76:	2201      	movs	r2, #1
 8001a78:	4619      	mov	r1, r3
 8001a7a:	20bb      	movs	r0, #187	@ 0xbb
 8001a7c:	f000 f97f 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001a80:	232c      	movs	r3, #44	@ 0x2c
 8001a82:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001a84:	463b      	mov	r3, r7
 8001a86:	2201      	movs	r2, #1
 8001a88:	4619      	mov	r1, r3
 8001a8a:	20c0      	movs	r0, #192	@ 0xc0
 8001a8c:	f000 f977 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001a90:	2301      	movs	r3, #1
 8001a92:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001a94:	23c3      	movs	r3, #195	@ 0xc3
 8001a96:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	20c2      	movs	r0, #194	@ 0xc2
 8001aa0:	f000 f96d 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4619      	mov	r1, r3
 8001aae:	20c4      	movs	r0, #196	@ 0xc4
 8001ab0:	f000 f965 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2201      	movs	r2, #1
 8001abc:	4619      	mov	r1, r3
 8001abe:	20c6      	movs	r0, #198	@ 0xc6
 8001ac0:	f000 f95d 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001ac4:	23a4      	movs	r3, #164	@ 0xa4
 8001ac6:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001ac8:	23a1      	movs	r3, #161	@ 0xa1
 8001aca:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8001acc:	463b      	mov	r3, r7
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	20d0      	movs	r0, #208	@ 0xd0
 8001ad4:	f000 f953 	bl	8001d7e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001ad8:	23d0      	movs	r3, #208	@ 0xd0
 8001ada:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001adc:	2308      	movs	r3, #8
 8001ade:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001ae0:	2311      	movs	r3, #17
 8001ae2:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001ae8:	230c      	movs	r3, #12
 8001aea:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001aec:	2315      	movs	r3, #21
 8001aee:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001af0:	2339      	movs	r3, #57	@ 0x39
 8001af2:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001af4:	2333      	movs	r3, #51	@ 0x33
 8001af6:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001af8:	2350      	movs	r3, #80	@ 0x50
 8001afa:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001afc:	2336      	movs	r3, #54	@ 0x36
 8001afe:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001b00:	2313      	movs	r3, #19
 8001b02:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b04:	2314      	movs	r3, #20
 8001b06:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001b08:	2329      	movs	r3, #41	@ 0x29
 8001b0a:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001b0c:	232d      	movs	r3, #45	@ 0x2d
 8001b0e:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001b10:	463b      	mov	r3, r7
 8001b12:	220e      	movs	r2, #14
 8001b14:	4619      	mov	r1, r3
 8001b16:	20e0      	movs	r0, #224	@ 0xe0
 8001b18:	f000 f931 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001b1c:	23d0      	movs	r3, #208	@ 0xd0
 8001b1e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001b20:	2308      	movs	r3, #8
 8001b22:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001b24:	2310      	movs	r3, #16
 8001b26:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001b30:	2306      	movs	r3, #6
 8001b32:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001b34:	2339      	movs	r3, #57	@ 0x39
 8001b36:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001b38:	2344      	movs	r3, #68	@ 0x44
 8001b3a:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001b3c:	2351      	movs	r3, #81	@ 0x51
 8001b3e:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001b40:	230b      	movs	r3, #11
 8001b42:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001b44:	2316      	movs	r3, #22
 8001b46:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b48:	2314      	movs	r3, #20
 8001b4a:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001b4c:	232f      	movs	r3, #47	@ 0x2f
 8001b4e:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001b50:	2331      	movs	r3, #49	@ 0x31
 8001b52:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001b54:	463b      	mov	r3, r7
 8001b56:	220e      	movs	r2, #14
 8001b58:	4619      	mov	r1, r3
 8001b5a:	20e1      	movs	r0, #225	@ 0xe1
 8001b5c:	f000 f90f 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001b60:	f000 f847 	bl	8001bf2 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001b64:	2300      	movs	r3, #0
 8001b66:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2035      	movs	r0, #53	@ 0x35
 8001b70:	f000 f905 	bl	8001d7e <ST7789H2_WriteReg>

}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	723b      	strb	r3, [r7, #8]
 8001b8e:	e025      	b.n	8001bdc <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d120      	bne.n	8001bd8 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001ba2:	23f0      	movs	r3, #240	@ 0xf0
 8001ba4:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001baa:	2300      	movs	r3, #0
 8001bac:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	2033      	movs	r0, #51	@ 0x33
 8001bb8:	f000 f8e1 	bl	8001d7e <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001bc0:	2350      	movs	r3, #80	@ 0x50
 8001bc2:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	2037      	movs	r0, #55	@ 0x37
 8001bce:	f000 f8d6 	bl	8001d7e <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001bd2:	23c0      	movs	r3, #192	@ 0xc0
 8001bd4:	723b      	strb	r3, [r7, #8]
 8001bd6:	e001      	b.n	8001bdc <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001bd8:	2360      	movs	r3, #96	@ 0x60
 8001bda:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	2201      	movs	r2, #1
 8001be2:	4619      	mov	r1, r3
 8001be4:	2036      	movs	r0, #54	@ 0x36
 8001be6:	f000 f8ca 	bl	8001d7e <ST7789H2_WriteReg>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2029      	movs	r0, #41	@ 0x29
 8001bfc:	f000 f8bf 	bl	8001d7e <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2011      	movs	r0, #17
 8001c06:	f000 f8ba 	bl	8001d7e <ST7789H2_WriteReg>
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8001c14:	23fe      	movs	r3, #254	@ 0xfe
 8001c16:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	20bd      	movs	r0, #189	@ 0xbd
 8001c20:	f000 f8ad 	bl	8001d7e <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	2010      	movs	r0, #16
 8001c2a:	f000 f8a8 	bl	8001d7e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f000 fbf5 	bl	800241e <LCD_IO_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8001c40:	23f0      	movs	r3, #240	@ 0xf0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8001c50:	23f0      	movs	r3, #240	@ 0xf0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c60:	f000 fbb6 	bl	80023d0 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001c64:	2004      	movs	r0, #4
 8001c66:	f000 f8ac 	bl	8001dc2 <ST7789H2_ReadReg>
 8001c6a:	4603      	mov	r3, r0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	80fb      	strh	r3, [r7, #6]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8001c80:	2300      	movs	r3, #0
 8001c82:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	3b11      	subs	r3, #17
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	202a      	movs	r0, #42	@ 0x2a
 8001ca2:	f000 f86c 	bl	8001d7e <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001caa:	88bb      	ldrh	r3, [r7, #4]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3b11      	subs	r3, #17
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	202b      	movs	r0, #43	@ 0x2b
 8001cc8:	f000 f859 	bl	8001d7e <ST7789H2_WriteReg>
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	80bb      	strh	r3, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001ce6:	88ba      	ldrh	r2, [r7, #4]
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ffbf 	bl	8001c70 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	202c      	movs	r0, #44	@ 0x2c
 8001cf8:	f000 f841 	bl	8001d7e <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fb6c 	bl	80023dc <LCD_IO_WriteData>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	460a      	mov	r2, r1
 8001d16:	80fb      	strh	r3, [r7, #6]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001d1c:	88ba      	ldrh	r2, [r7, #4]
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ffa4 	bl	8001c70 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8001d28:	88ba      	ldrh	r2, [r7, #4]
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f9be 	bl	80020b0 <ST7789H2_ReadPixel_rgb888>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	733a      	strb	r2, [r7, #12]
 8001d3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d3e:	737a      	strb	r2, [r7, #13]
 8001d40:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d44:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001d46:	7b3b      	ldrb	r3, [r7, #12]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	08db      	lsrs	r3, r3, #3
 8001d56:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	02db      	lsls	r3, r3, #11
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	015b      	lsls	r3, r3, #5
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	7d7b      	ldrb	r3, [r7, #21]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8001d74:	8a7b      	ldrh	r3, [r7, #18]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	6039      	str	r1, [r7, #0]
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fb30 	bl	80023f6 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	e009      	b.n	8001db0 <ST7789H2_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fb19 	bl	80023dc <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	3301      	adds	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3f1      	bcc.n	8001d9c <ST7789H2_WriteReg+0x1e>
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fb11 	bl	80023f6 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8001dd4:	f000 fb1c 	bl	8002410 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8001dd8:	f000 fb1a 	bl	8002410 <LCD_IO_ReadData>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b2db      	uxtb	r3, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001de8:	b490      	push	{r4, r7}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4604      	mov	r4, r0
 8001df0:	4608      	mov	r0, r1
 8001df2:	4611      	mov	r1, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	4623      	mov	r3, r4
 8001df8:	80fb      	strh	r3, [r7, #6]
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80bb      	strh	r3, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
 8001e02:	4613      	mov	r3, r2
 8001e04:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	2bef      	cmp	r3, #239	@ 0xef
 8001e0a:	d803      	bhi.n	8001e14 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e7c <ST7789H2_SetDisplayWindow+0x94>)
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	8013      	strh	r3, [r2, #0]
 8001e12:	e002      	b.n	8001e1a <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <ST7789H2_SetDisplayWindow+0x94>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	2bef      	cmp	r3, #239	@ 0xef
 8001e1e:	d803      	bhi.n	8001e28 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8001e20:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <ST7789H2_SetDisplayWindow+0x98>)
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	8013      	strh	r3, [r2, #0]
 8001e26:	e002      	b.n	8001e2e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8001e28:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <ST7789H2_SetDisplayWindow+0x98>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	4413      	add	r3, r2
 8001e34:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e36:	dc08      	bgt.n	8001e4a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	e002      	b.n	8001e50 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e4c:	22ef      	movs	r2, #239	@ 0xef
 8001e4e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8001e50:	883a      	ldrh	r2, [r7, #0]
 8001e52:	88bb      	ldrh	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e58:	dc08      	bgt.n	8001e6c <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8001e5a:	883a      	ldrh	r2, [r7, #0]
 8001e5c:	88bb      	ldrh	r3, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e68:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8001e6a:	e002      	b.n	8001e72 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e6e:	22ef      	movs	r2, #239	@ 0xef
 8001e70:	801a      	strh	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc90      	pop	{r4, r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	20000160 	.word	0x20000160
 8001e80:	20000162 	.word	0x20000162
 8001e84:	20000078 	.word	0x20000078
 8001e88:	2000007a 	.word	0x2000007a

08001e8c <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4604      	mov	r4, r0
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	80fb      	strh	r3, [r7, #6]
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80bb      	strh	r3, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	807b      	strh	r3, [r7, #2]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	88bb      	ldrh	r3, [r7, #4]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fedd 	bl	8001c70 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	202c      	movs	r0, #44	@ 0x2c
 8001ebc:	f7ff ff5f 	bl	8001d7e <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	81fb      	strh	r3, [r7, #14]
 8001ec4:	e006      	b.n	8001ed4 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fa87 	bl	80023dc <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8001ece:	89fb      	ldrh	r3, [r7, #14]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	81fb      	strh	r3, [r7, #14]
 8001ed4:	89fa      	ldrh	r2, [r7, #14]
 8001ed6:	883b      	ldrh	r3, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d3f4      	bcc.n	8001ec6 <ST7789H2_DrawHLine+0x3a>
  }  
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}

08001ee6 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001ee6:	b590      	push	{r4, r7, lr}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4604      	mov	r4, r0
 8001eee:	4608      	mov	r0, r1
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4623      	mov	r3, r4
 8001ef6:	80fb      	strh	r3, [r7, #6]
 8001ef8:	4603      	mov	r3, r0
 8001efa:	80bb      	strh	r3, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001f04:	887a      	ldrh	r2, [r7, #2]
 8001f06:	88bb      	ldrh	r3, [r7, #4]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff feb0 	bl	8001c70 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	202c      	movs	r0, #44	@ 0x2c
 8001f16:	f7ff ff32 	bl	8001d7e <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	81fb      	strh	r3, [r7, #14]
 8001f1e:	e00b      	b.n	8001f38 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	89fb      	ldrh	r3, [r7, #14]
 8001f24:	4413      	add	r3, r2
 8001f26:	b299      	uxth	r1, r3
 8001f28:	88fa      	ldrh	r2, [r7, #6]
 8001f2a:	88bb      	ldrh	r3, [r7, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fed1 	bl	8001cd4 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001f32:	89fb      	ldrh	r3, [r7, #14]
 8001f34:	3301      	adds	r3, #1
 8001f36:	81fb      	strh	r3, [r7, #14]
 8001f38:	89fa      	ldrh	r2, [r7, #14]
 8001f3a:	883b      	ldrh	r3, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3ef      	bcc.n	8001f20 <ST7789H2_DrawVLine+0x3a>
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
	...

08001f4c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	603a      	str	r2, [r7, #0]
 8001f56:	80fb      	strh	r3, [r7, #6]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001f68:	4b30      	ldr	r3, [pc, #192]	@ (800202c <ST7789H2_DrawBitmap+0xe0>)
 8001f6a:	881a      	ldrh	r2, [r3, #0]
 8001f6c:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <ST7789H2_DrawBitmap+0xe4>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001f78:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <ST7789H2_DrawBitmap+0xe8>)
 8001f7a:	881a      	ldrh	r2, [r3, #0]
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <ST7789H2_DrawBitmap+0xec>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	3304      	adds	r3, #4
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	330a      	adds	r3, #10
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	041b      	lsls	r3, r3, #16
 8001fb8:	461a      	mov	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	4413      	add	r3, r2
 8001fd0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001fd2:	88ba      	ldrh	r2, [r7, #4]
 8001fd4:	89bb      	ldrh	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e01d      	b.n	8002018 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe41 	bl	8001c70 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4413      	add	r3, r2
 8002004:	89fa      	ldrh	r2, [r7, #14]
 8002006:	88f8      	ldrh	r0, [r7, #6]
 8002008:	f000 f89c 	bl	8002144 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	3301      	adds	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b01      	subs	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	88bb      	ldrh	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	d8dd      	bhi.n	8001fdc <ST7789H2_DrawBitmap+0x90>
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000078 	.word	0x20000078
 8002030:	20000160 	.word	0x20000160
 8002034:	2000007a 	.word	0x2000007a
 8002038:	20000162 	.word	0x20000162

0800203c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	4604      	mov	r4, r0
 8002044:	4608      	mov	r0, r1
 8002046:	4611      	mov	r1, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4623      	mov	r3, r4
 800204c:	80fb      	strh	r3, [r7, #6]
 800204e:	4603      	mov	r3, r0
 8002050:	80bb      	strh	r3, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	807b      	strh	r3, [r7, #2]
 8002056:	4613      	mov	r3, r2
 8002058:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800205e:	88bb      	ldrh	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e019      	b.n	8002098 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	b29a      	uxth	r2, r3
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fdff 	bl	8001c70 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	b299      	uxth	r1, r3
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	4413      	add	r3, r2
 8002084:	887a      	ldrh	r2, [r7, #2]
 8002086:	88f8      	ldrh	r0, [r7, #6]
 8002088:	f000 f85c 	bl	8002144 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	3301      	adds	r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3301      	adds	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	88ba      	ldrh	r2, [r7, #4]
 800209a:	883b      	ldrh	r3, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d3de      	bcc.n	8002064 <ST7789H2_DrawRGBImage+0x28>
  }
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}

080020b0 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	460a      	mov	r2, r1
 80020ba:	80fb      	strh	r3, [r7, #6]
 80020bc:	4613      	mov	r3, r2
 80020be:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80020c0:	88ba      	ldrh	r2, [r7, #4]
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fdd2 	bl	8001c70 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	202e      	movs	r0, #46	@ 0x2e
 80020d2:	f7ff fe54 	bl	8001d7e <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80020d6:	f000 f99b 	bl	8002410 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80020da:	f000 f999 	bl	8002410 <LCD_IO_ReadData>
 80020de:	4603      	mov	r3, r0
 80020e0:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80020e2:	f000 f995 	bl	8002410 <LCD_IO_ReadData>
 80020e6:	4603      	mov	r3, r0
 80020e8:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80020ea:	8afb      	ldrh	r3, [r7, #22]
 80020ec:	121b      	asrs	r3, r3, #8
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f023 0303 	bic.w	r3, r3, #3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80020f8:	8afb      	ldrh	r3, [r7, #22]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f023 0303 	bic.w	r3, r3, #3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002104:	8abb      	ldrh	r3, [r7, #20]
 8002106:	121b      	asrs	r3, r3, #8
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002112:	f107 0310 	add.w	r3, r7, #16
 8002116:	f107 020c 	add.w	r2, r7, #12
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	4611      	mov	r1, r2
 800211e:	8019      	strh	r1, [r3, #0]
 8002120:	3302      	adds	r3, #2
 8002122:	0c12      	lsrs	r2, r2, #16
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	2300      	movs	r3, #0
 8002128:	7c3a      	ldrb	r2, [r7, #16]
 800212a:	f362 0307 	bfi	r3, r2, #0, #8
 800212e:	7c7a      	ldrb	r2, [r7, #17]
 8002130:	f362 230f 	bfi	r3, r2, #8, #8
 8002134:	7cba      	ldrb	r2, [r7, #18]
 8002136:	f362 4317 	bfi	r3, r2, #16, #8
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	4603      	mov	r3, r0
 800214e:	81fb      	strh	r3, [r7, #14]
 8002150:	460b      	mov	r3, r1
 8002152:	81bb      	strh	r3, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	202c      	movs	r0, #44	@ 0x2c
 8002166:	f7ff fe0a 	bl	8001d7e <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800216a:	89fb      	ldrh	r3, [r7, #14]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	e029      	b.n	80021c4 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <ST7789H2_DrawRGBHLine+0x98>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4293      	cmp	r3, r2
 800217a:	d320      	bcc.n	80021be <ST7789H2_DrawRGBHLine+0x7a>
 800217c:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <ST7789H2_DrawRGBHLine+0x9c>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	89ba      	ldrh	r2, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	d31b      	bcc.n	80021be <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002186:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <ST7789H2_DrawRGBHLine+0xa0>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	4293      	cmp	r3, r2
 8002190:	d815      	bhi.n	80021be <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <ST7789H2_DrawRGBHLine+0xa4>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	89ba      	ldrh	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d810      	bhi.n	80021be <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 800219c:	897a      	ldrh	r2, [r7, #10]
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	441a      	add	r2, r3
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d007      	beq.n	80021b8 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4413      	add	r3, r2
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f912 	bl	80023dc <LCD_IO_WriteData>
      }      
      i++;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3301      	adds	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	897a      	ldrh	r2, [r7, #10]
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	4413      	add	r3, r2
 80021ca:	461a      	mov	r2, r3
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d3ce      	bcc.n	8002170 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000160 	.word	0x20000160
 80021e0:	20000162 	.word	0x20000162
 80021e4:	20000078 	.word	0x20000078
 80021e8:	2000007a 	.word	0x2000007a

080021ec <FMC_BANK1_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK1 MSP.
  */
static void FMC_BANK1_MspInit(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	@ 0x28
 80021f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b2e      	ldr	r3, [pc, #184]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 80021f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fa:	4a2d      	ldr	r2, [pc, #180]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6393      	str	r3, [r2, #56]	@ 0x38
 8002202:	4b2b      	ldr	r3, [pc, #172]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 8002204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a26      	ldr	r2, [pc, #152]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b24      	ldr	r3, [pc, #144]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a1f      	ldr	r2, [pc, #124]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 8002234:	f043 0310 	orr.w	r3, r3, #16
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 8002250:	f043 0320 	orr.w	r3, r3, #32
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <FMC_BANK1_MspInit+0xc4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002266:	2301      	movs	r3, #1
 8002268:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 800226e:	230c      	movs	r3, #12
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002272:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8002276:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	480d      	ldr	r0, [pc, #52]	@ (80022b4 <FMC_BANK1_MspInit+0xc8>)
 8002280:	f000 fc2c 	bl	8002adc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002284:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002288:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4809      	ldr	r0, [pc, #36]	@ (80022b8 <FMC_BANK1_MspInit+0xcc>)
 8002292:	f000 fc23 	bl	8002adc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 ;  
 8002296:	2301      	movs	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4806      	ldr	r0, [pc, #24]	@ (80022bc <FMC_BANK1_MspInit+0xd0>)
 80022a2:	f000 fc1b 	bl	8002adc <HAL_GPIO_Init>
}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	@ 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40021400 	.word	0x40021400

080022c0 <FMC_BANK1_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
static void FMC_BANK1_Init(void) 
{  
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0a2      	sub	sp, #136	@ 0x88
 80022c4:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 80022c6:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <FMC_BANK1_Init+0xac>)
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* Timing for READING */
  sram_timing.AddressSetupTime      = 9;
 80022d0:	2309      	movs	r3, #9
 80022d2:	61fb      	str	r3, [r7, #28]
  sram_timing.AddressHoldTime       = 1;
 80022d4:	2301      	movs	r3, #1
 80022d6:	623b      	str	r3, [r7, #32]
  sram_timing.DataSetupTime         = 36;
 80022d8:	2324      	movs	r3, #36	@ 0x24
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
  sram_timing.BusTurnAroundDuration = 1;
 80022dc:	2301      	movs	r3, #1
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sram_timing.CLKDivision           = 2;
 80022e0:	2302      	movs	r3, #2
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sram_timing.DataLatency           = 2;
 80022e4:	2302      	movs	r3, #2
 80022e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Timing for WRITING*/
  sram_timing_write.AddressSetupTime      = 1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 7;
 80022f4:	2307      	movs	r3, #7
 80022f6:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  sram_timing_write.CLKDivision           = 2;
 80022fc:	2302      	movs	r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
  sram_timing_write.DataLatency           = 2;
 8002300:	2302      	movs	r3, #2
 8002302:	617b      	str	r3, [r7, #20]
  sram_timing_write.AccessMode            = FSMC_ACCESS_MODE_A;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK1;
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	@ 0x40
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	647b      	str	r3, [r7, #68]	@ 0x44
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002310:	2300      	movs	r3, #0
 8002312:	64bb      	str	r3, [r7, #72]	@ 0x48
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002314:	2310      	movs	r3, #16
 8002316:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	653b      	str	r3, [r7, #80]	@ 0x50
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	657b      	str	r3, [r7, #84]	@ 0x54
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	65bb      	str	r3, [r7, #88]	@ 0x58
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002324:	2300      	movs	r3, #0
 8002326:	65fb      	str	r3, [r7, #92]	@ 0x5c
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800232c:	663b      	str	r3, [r7, #96]	@ 0x60
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	667b      	str	r3, [r7, #100]	@ 0x64
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002332:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002336:	66bb      	str	r3, [r7, #104]	@ 0x68
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	673b      	str	r3, [r7, #112]	@ 0x70
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002340:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002344:	67bb      	str	r3, [r7, #120]	@ 0x78
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002346:	2300      	movs	r3, #0
 8002348:	67fb      	str	r3, [r7, #124]	@ 0x7c
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800234a:	2300      	movs	r3, #0
 800234c:	677b      	str	r3, [r7, #116]	@ 0x74
  
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800234e:	f7ff ff4d 	bl	80021ec <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8002352:	463a      	mov	r2, r7
 8002354:	f107 011c 	add.w	r1, r7, #28
 8002358:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800235c:	4618      	mov	r0, r3
 800235e:	f003 ffe9 	bl	8006334 <HAL_SRAM_Init>
}
 8002362:	bf00      	nop
 8002364:	3788      	adds	r7, #136	@ 0x88
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	a0000104 	.word	0xa0000104

08002370 <FMC_BANK1_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK1_WriteData(uint16_t Data) 
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1->RAM = Data;
 800237a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	8053      	strh	r3, [r2, #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002382:	f3bf 8f4f 	dsb	sy
}
 8002386:	bf00      	nop
  __DSB();
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <FMC_BANK1_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK1_WriteReg(uint8_t Reg) 
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1->REG = Reg;
 800239e:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80023a2:	79fa      	ldrb	r2, [r7, #7]
 80023a4:	b292      	uxth	r2, r2
 80023a6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80023a8:	f3bf 8f4f 	dsb	sy
}
 80023ac:	bf00      	nop
  __DSB();
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <FMC_BANK1_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void) 
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  return FMC_BANK1->RAM;
 80023be:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80023c2:	885b      	ldrh	r3, [r3, #2]
 80023c4:	b29b      	uxth	r3, r3
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 80023d4:	f7ff ff74 	bl	80022c0 <FMC_BANK1_Init>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ffc1 	bl	8002370 <FMC_BANK1_WriteData>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ffc6 	bl	8002394 <FMC_BANK1_WriteReg>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8002414:	f7ff ffd1 	bl	80023ba <FMC_BANK1_ReadData>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	bd80      	pop	{r7, pc}

0800241e <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa4e 	bl	80028c8 <HAL_Delay>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002438:	2001      	movs	r0, #1
 800243a:	f000 f803 	bl	8002444 <BSP_LCD_InitEx>
 800243e:	4603      	mov	r3, r0
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}

08002444 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002450:	4b37      	ldr	r3, [pc, #220]	@ (8002530 <BSP_LCD_InitEx+0xec>)
 8002452:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002456:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002458:	4b35      	ldr	r3, [pc, #212]	@ (8002530 <BSP_LCD_InitEx+0xec>)
 800245a:	4a36      	ldr	r2, [pc, #216]	@ (8002534 <BSP_LCD_InitEx+0xf0>)
 800245c:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800245e:	4b34      	ldr	r3, [pc, #208]	@ (8002530 <BSP_LCD_InitEx+0xec>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002464:	f000 f962 	bl	800272c <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002468:	2201      	movs	r2, #1
 800246a:	2120      	movs	r1, #32
 800246c:	4832      	ldr	r0, [pc, #200]	@ (8002538 <BSP_LCD_InitEx+0xf4>)
 800246e:	f000 fcc9 	bl	8002e04 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002478:	4830      	ldr	r0, [pc, #192]	@ (800253c <BSP_LCD_InitEx+0xf8>)
 800247a:	f000 fcc3 	bl	8002e04 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800247e:	2005      	movs	r0, #5
 8002480:	f000 fa22 	bl	80028c8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800248a:	482c      	ldr	r0, [pc, #176]	@ (800253c <BSP_LCD_InitEx+0xf8>)
 800248c:	f000 fcba 	bl	8002e04 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002490:	200a      	movs	r0, #10
 8002492:	f000 fa19 	bl	80028c8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002496:	2200      	movs	r2, #0
 8002498:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800249c:	4827      	ldr	r0, [pc, #156]	@ (800253c <BSP_LCD_InitEx+0xf8>)
 800249e:	f000 fcb1 	bl	8002e04 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 80024a2:	2014      	movs	r0, #20
 80024a4:	f000 fa10 	bl	80028c8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024ae:	4823      	ldr	r0, [pc, #140]	@ (800253c <BSP_LCD_InitEx+0xf8>)
 80024b0:	f000 fca8 	bl	8002e04 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80024b4:	200a      	movs	r0, #10
 80024b6:	f000 fa07 	bl	80028c8 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 80024ba:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <BSP_LCD_InitEx+0xfc>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4798      	blx	r3
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b85      	cmp	r3, #133	@ 0x85
 80024c4:	d119      	bne.n	80024fa <BSP_LCD_InitEx+0xb6>
  {    
    LcdDrv = &ST7789H2_drv;
 80024c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <BSP_LCD_InitEx+0x100>)
 80024c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <BSP_LCD_InitEx+0xfc>)
 80024ca:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80024cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <BSP_LCD_InitEx+0x100>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80024da:	2000      	movs	r0, #0
 80024dc:	f7ff fb4e 	bl	8001b7c <ST7789H2_SetOrientation>
 80024e0:	e005      	b.n	80024ee <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d102      	bne.n	80024ee <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80024e8:	2002      	movs	r0, #2
 80024ea:	f7ff fb47 	bl	8001b7c <ST7789H2_SetOrientation>
    {
      /* Default landscape orientation is selected */
    }

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80024ee:	4816      	ldr	r0, [pc, #88]	@ (8002548 <BSP_LCD_InitEx+0x104>)
 80024f0:	f000 f856 	bl	80025a0 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e014      	b.n	8002524 <BSP_LCD_InitEx+0xe0>
  }
  else if(ls016b8uy_drv.ReadID() == LS016B8UY_ID)
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <BSP_LCD_InitEx+0x108>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4798      	blx	r3
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002508:	429a      	cmp	r2, r3
 800250a:	d10b      	bne.n	8002524 <BSP_LCD_InitEx+0xe0>
  {
    LcdDrv = &ls016b8uy_drv;
 800250c:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <BSP_LCD_InitEx+0x100>)
 800250e:	4a0f      	ldr	r2, [pc, #60]	@ (800254c <BSP_LCD_InitEx+0x108>)
 8002510:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002512:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <BSP_LCD_InitEx+0x100>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800251a:	480b      	ldr	r0, [pc, #44]	@ (8002548 <BSP_LCD_InitEx+0x104>)
 800251c:	f000 f840 	bl	80025a0 <BSP_LCD_SetFont>
    
    ret = LCD_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000164 	.word	0x20000164
 8002534:	2000007c 	.word	0x2000007c
 8002538:	40021400 	.word	0x40021400
 800253c:	40020c00 	.word	0x40020c00
 8002540:	20000040 	.word	0x20000040
 8002544:	20000170 	.word	0x20000170
 8002548:	20000084 	.word	0x20000084
 800254c:	20000004 	.word	0x20000004

08002550 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.   
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <BSP_LCD_GetXSize+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	4798      	blx	r3
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000170 	.word	0x20000170

08002568 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <BSP_LCD_GetYSize+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	4798      	blx	r3
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000170 	.word	0x20000170

08002580 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	4a03      	ldr	r2, [pc, #12]	@ (800259c <BSP_LCD_SetTextColor+0x1c>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	20000164 	.word	0x20000164

080025a0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80025a8:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <BSP_LCD_SetFont+0x1c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6093      	str	r3, [r2, #8]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000164 	.word	0x20000164

080025c0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <BSP_LCD_Clear+0x68>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4a13      	ldr	r2, [pc, #76]	@ (8002628 <BSP_LCD_Clear+0x68>)
 80025dc:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80025de:	f7ff ffc3 	bl	8002568 <BSP_LCD_GetYSize>
 80025e2:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e00d      	b.n	8002606 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	b29c      	uxth	r4, r3
 80025ee:	f7ff ffaf 	bl	8002550 <BSP_LCD_GetXSize>
 80025f2:	4603      	mov	r3, r0
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	4621      	mov	r1, r4
 80025fa:	2000      	movs	r0, #0
 80025fc:	f000 f832 	bl	8002664 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3301      	adds	r3, #1
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	429a      	cmp	r2, r3
 800260c:	d3ed      	bcc.n	80025ea <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 800260e:	4a06      	ldr	r2, [pc, #24]	@ (8002628 <BSP_LCD_Clear+0x68>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <BSP_LCD_Clear+0x68>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ffb0 	bl	8002580 <BSP_LCD_SetTextColor>
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	20000164 	.word	0x20000164

0800262c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	80fb      	strh	r3, [r7, #6]
 8002636:	460b      	mov	r3, r1
 8002638:	80bb      	strh	r3, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <BSP_LCD_DrawPixel+0x34>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002648:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <BSP_LCD_DrawPixel+0x34>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	88b9      	ldrh	r1, [r7, #4]
 8002652:	88f8      	ldrh	r0, [r7, #6]
 8002654:	4798      	blx	r3
  }
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000170 	.word	0x20000170

08002664 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
 800266e:	460b      	mov	r3, r1
 8002670:	80bb      	strh	r3, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <BSP_LCD_DrawHLine+0x6c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <BSP_LCD_DrawHLine+0x6c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a1c      	ldr	r4, [r3, #32]
 800268a:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <BSP_LCD_DrawHLine+0x70>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b298      	uxth	r0, r3
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	88ba      	ldrh	r2, [r7, #4]
 8002694:	88f9      	ldrh	r1, [r7, #6]
 8002696:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002698:	e015      	b.n	80026c6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e00e      	b.n	80026be <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	4413      	add	r3, r2
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <BSP_LCD_DrawHLine+0x70>)
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	b292      	uxth	r2, r2
 80026b0:	88b9      	ldrh	r1, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ffba 	bl	800262c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3301      	adds	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	887b      	ldrh	r3, [r7, #2]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3ec      	bcc.n	80026a0 <BSP_LCD_DrawHLine+0x3c>
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000170 	.word	0x20000170
 80026d4:	20000164 	.word	0x20000164

080026d8 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4604      	mov	r4, r0
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	80fb      	strh	r3, [r7, #6]
 80026ea:	4603      	mov	r3, r0
 80026ec:	80bb      	strh	r3, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	807b      	strh	r3, [r7, #2]
 80026f2:	4613      	mov	r3, r2
 80026f4:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80026f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <BSP_LCD_FillRect+0x50>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff3f 	bl	8002580 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8002702:	88bb      	ldrh	r3, [r7, #4]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	80ba      	strh	r2, [r7, #4]
 8002708:	887a      	ldrh	r2, [r7, #2]
 800270a:	88f8      	ldrh	r0, [r7, #6]
 800270c:	4619      	mov	r1, r3
 800270e:	f7ff ffa9 	bl	8002664 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8002712:	883b      	ldrh	r3, [r7, #0]
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	803a      	strh	r2, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f2      	bne.n	8002702 <BSP_LCD_FillRect+0x2a>
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	bf00      	nop
 8002728:	20000164 	.word	0x20000164

0800272c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	4a1f      	ldr	r2, [pc, #124]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 8002758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800275c:	6313      	str	r3, [r2, #48]	@ 0x30
 800275e:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 8002774:	f043 0320 	orr.w	r3, r3, #32
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <BSP_LCD_MspInit+0xa8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002786:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800278a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002790:	2302      	movs	r3, #2
 8002792:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002794:	2301      	movs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4619      	mov	r1, r3
 800279e:	480e      	ldr	r0, [pc, #56]	@ (80027d8 <BSP_LCD_MspInit+0xac>)
 80027a0:	f000 f99c 	bl	8002adc <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80027a4:	2310      	movs	r3, #16
 80027a6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80027ac:	f107 030c 	add.w	r3, r7, #12
 80027b0:	4619      	mov	r1, r3
 80027b2:	480a      	ldr	r0, [pc, #40]	@ (80027dc <BSP_LCD_MspInit+0xb0>)
 80027b4:	f000 f992 	bl	8002adc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80027b8:	2320      	movs	r3, #32
 80027ba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	4619      	mov	r1, r3
 80027c6:	4806      	ldr	r0, [pc, #24]	@ (80027e0 <BSP_LCD_MspInit+0xb4>)
 80027c8:	f000 f988 	bl	8002adc <HAL_GPIO_Init>
}
 80027cc:	bf00      	nop
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021800 	.word	0x40021800
 80027e0:	40021400 	.word	0x40021400

080027e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <HAL_Init+0x40>)
 80027ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <HAL_Init+0x40>)
 80027fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002800:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <HAL_Init+0x40>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800280a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280c:	2003      	movs	r0, #3
 800280e:	f000 f931 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002812:	2000      	movs	r0, #0
 8002814:	f000 f808 	bl	8002828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002818:	f7fe f8fa 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00

08002828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_InitTick+0x54>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <HAL_InitTick+0x58>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f93b 	bl	8002ac2 <HAL_SYSTICK_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e00e      	b.n	8002874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b0f      	cmp	r3, #15
 800285a:	d80a      	bhi.n	8002872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285c:	2200      	movs	r2, #0
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f000 f911 	bl	8002a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002868:	4a06      	ldr	r2, [pc, #24]	@ (8002884 <HAL_InitTick+0x5c>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000000 	.word	0x20000000
 8002880:	20000090 	.word	0x20000090
 8002884:	2000008c 	.word	0x2000008c

08002888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_IncTick+0x20>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_IncTick+0x24>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4413      	add	r3, r2
 8002898:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <HAL_IncTick+0x24>)
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000090 	.word	0x20000090
 80028ac:	20000174 	.word	0x20000174

080028b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <HAL_GetTick+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000174 	.word	0x20000174

080028c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff ffee 	bl	80028b0 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d005      	beq.n	80028ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e2:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <HAL_Delay+0x44>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ee:	bf00      	nop
 80028f0:	f7ff ffde 	bl	80028b0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d8f7      	bhi.n	80028f0 <HAL_Delay+0x28>
  {
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000090 	.word	0x20000090

08002910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <__NVIC_SetPriorityGrouping+0x44>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800292c:	4013      	ands	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800293c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002942:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <__NVIC_SetPriorityGrouping+0x44>)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	60d3      	str	r3, [r2, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800295c:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <__NVIC_GetPriorityGrouping+0x18>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 0307 	and.w	r3, r3, #7
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	@ (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	@ (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	@ 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f7ff ff8e 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff47 	bl	8002910 <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff5c 	bl	8002958 <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff8e 	bl	80029c8 <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5d 	bl	8002974 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffb0 	bl	8002a30 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	@ 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e165      	b.n	8002dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8154 	bne.w	8002dbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80ae 	beq.w	8002dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b5d      	ldr	r3, [pc, #372]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c72:	4b5a      	ldr	r3, [pc, #360]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7e:	4a58      	ldr	r2, [pc, #352]	@ (8002de0 <HAL_GPIO_Init+0x304>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8002de4 <HAL_GPIO_Init+0x308>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d025      	beq.n	8002cf6 <HAL_GPIO_Init+0x21a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4e      	ldr	r2, [pc, #312]	@ (8002de8 <HAL_GPIO_Init+0x30c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_GPIO_Init+0x216>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8002dec <HAL_GPIO_Init+0x310>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x212>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8002df0 <HAL_GPIO_Init+0x314>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x20e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002df4 <HAL_GPIO_Init+0x318>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x20a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8002df8 <HAL_GPIO_Init+0x31c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x206>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a49      	ldr	r2, [pc, #292]	@ (8002dfc <HAL_GPIO_Init+0x320>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x202>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d08:	4935      	ldr	r1, [pc, #212]	@ (8002de0 <HAL_GPIO_Init+0x304>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d16:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3a:	4a31      	ldr	r2, [pc, #196]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d40:	4b2f      	ldr	r3, [pc, #188]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d64:	4a26      	ldr	r2, [pc, #152]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6a:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db8:	4a11      	ldr	r2, [pc, #68]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	f67f ae96 	bls.w	8002af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3724      	adds	r7, #36	@ 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40021400 	.word	0x40021400
 8002dfc:	40021800 	.word	0x40021800
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e20:	e003      	b.n	8002e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fcdf 	bl	8006810 <USB_GetMode>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f040 80fb 	bne.w	8003050 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fca2 	bl	80067a8 <USB_ReadInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80f1 	beq.w	800304e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fc99 	bl	80067a8 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e80:	d104      	bne.n	8002e8c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002e8a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fc89 	bl	80067a8 <USB_ReadInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ea0:	d104      	bne.n	8002eac <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eaa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fc79 	bl	80067a8 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ebc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ec0:	d104      	bne.n	8002ecc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002eca:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 fc69 	bl	80067a8 <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d103      	bne.n	8002ee8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fc5b 	bl	80067a8 <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002efc:	d120      	bne.n	8002f40 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f06:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d113      	bne.n	8002f40 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f18:	2110      	movs	r1, #16
 8002f1a:	6938      	ldr	r0, [r7, #16]
 8002f1c:	f003 fb8c 	bl	8006638 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f20:	6938      	ldr	r0, [r7, #16]
 8002f22:	f003 fbbb 	bl	800669c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7a5b      	ldrb	r3, [r3, #9]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d105      	bne.n	8002f3a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2101      	movs	r1, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 fc79 	bl	800682c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f003 ff31 	bl	8006da2 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fc2f 	bl	80067a8 <USB_ReadInterrupts>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f54:	d102      	bne.n	8002f5c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f001 fc87 	bl	800486a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fc21 	bl	80067a8 <USB_ReadInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d106      	bne.n	8002f7e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f003 fefa 	bl	8006d6a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fc10 	bl	80067a8 <USB_ReadInterrupts>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f92:	d139      	bne.n	8003008 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fc84 	bl	80068a6 <USB_HC_ReadInterrupt>
 8002f9e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e025      	b.n	8002ff2 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d018      	beq.n	8002fec <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd0:	d106      	bne.n	8002fe0 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f859 	bl	8003090 <HCD_HC_IN_IRQHandler>
 8002fde:	e005      	b.n	8002fec <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 febb 	bl	8003d62 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	795b      	ldrb	r3, [r3, #5]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d3d3      	bcc.n	8002fa6 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003006:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fbcb 	bl	80067a8 <USB_ReadInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b10      	cmp	r3, #16
 800301a:	d101      	bne.n	8003020 <HAL_HCD_IRQHandler+0x1ea>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_HCD_IRQHandler+0x1ec>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d014      	beq.n	8003050 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0210 	bic.w	r2, r2, #16
 8003034:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f001 fb38 	bl	80046ac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0210 	orr.w	r2, r2, #16
 800304a:	619a      	str	r2, [r3, #24]
 800304c:	e000      	b.n	8003050 <HAL_HCD_IRQHandler+0x21a>
      return;
 800304e:	bf00      	nop
    }
  }
}
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_HCD_Stop+0x16>
 8003068:	2302      	movs	r3, #2
 800306a:	e00d      	b.n	8003088 <HAL_HCD_Stop+0x32>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f003 fd45 	bl	8006b08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fb8d 	bl	80067ce <USB_ReadChInterrupts>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d11a      	bne.n	80030f4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	2304      	movs	r3, #4
 80030ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	334d      	adds	r3, #77	@ 0x4d
 80030e0:	2207      	movs	r2, #7
 80030e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fbeb 	bl	80068c8 <USB_HC_Halt>
 80030f2:	e09e      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 fb66 	bl	80067ce <USB_ReadChInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800310c:	d11b      	bne.n	8003146 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311a:	461a      	mov	r2, r3
 800311c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003120:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	334d      	adds	r3, #77	@ 0x4d
 8003132:	2208      	movs	r2, #8
 8003134:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f003 fbc2 	bl	80068c8 <USB_HC_Halt>
 8003144:	e075      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f003 fb3d 	bl	80067ce <USB_ReadChInterrupts>
 8003154:	4603      	mov	r3, r0
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11a      	bne.n	8003194 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	2308      	movs	r3, #8
 800316e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334d      	adds	r3, #77	@ 0x4d
 8003180:	2206      	movs	r2, #6
 8003182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fb9b 	bl	80068c8 <USB_HC_Halt>
 8003192:	e04e      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f003 fb16 	bl	80067ce <USB_ReadChInterrupts>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ac:	d11b      	bne.n	80031e6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ba:	461a      	mov	r2, r3
 80031bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	334d      	adds	r3, #77	@ 0x4d
 80031d2:	2209      	movs	r2, #9
 80031d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fb72 	bl	80068c8 <USB_HC_Halt>
 80031e4:	e025      	b.n	8003232 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 faed 	bl	80067ce <USB_ReadChInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b80      	cmp	r3, #128	@ 0x80
 80031fc:	d119      	bne.n	8003232 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	334d      	adds	r3, #77	@ 0x4d
 8003220:	2207      	movs	r2, #7
 8003222:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f003 fb4b 	bl	80068c8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fac7 	bl	80067ce <USB_ReadChInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800324a:	d112      	bne.n	8003272 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f003 fb37 	bl	80068c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003266:	461a      	mov	r2, r3
 8003268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800326c:	6093      	str	r3, [r2, #8]
 800326e:	f000 bd75 	b.w	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f003 faa7 	bl	80067ce <USB_ReadChInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	f040 8128 	bne.w	80034dc <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003298:	461a      	mov	r2, r3
 800329a:	2320      	movs	r3, #32
 800329c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	331b      	adds	r3, #27
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d119      	bne.n	80032e8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	331b      	adds	r3, #27
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	799b      	ldrb	r3, [r3, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	3330      	adds	r3, #48	@ 0x30
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	1ac9      	subs	r1, r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4403      	add	r3, r0
 8003324:	3338      	adds	r3, #56	@ 0x38
 8003326:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334d      	adds	r3, #77	@ 0x4d
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3344      	adds	r3, #68	@ 0x44
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2301      	movs	r3, #1
 8003360:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	3326      	adds	r3, #38	@ 0x26
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3326      	adds	r3, #38	@ 0x26
 8003388:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800338a:	2b02      	cmp	r3, #2
 800338c:	d110      	bne.n	80033b0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f003 fa96 	bl	80068c8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a8:	461a      	mov	r2, r3
 80033aa:	2310      	movs	r3, #16
 80033ac:	6093      	str	r3, [r2, #8]
 80033ae:	e03d      	b.n	800342c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3326      	adds	r3, #38	@ 0x26
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d00a      	beq.n	80033dc <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3326      	adds	r3, #38	@ 0x26
 80033d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d127      	bne.n	800342c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033fa:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334c      	adds	r3, #76	@ 0x4c
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334c      	adds	r3, #76	@ 0x4c
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f003 fcc9 	bl	8006dbe <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	799b      	ldrb	r3, [r3, #6]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d13b      	bne.n	80034ac <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3338      	adds	r3, #56	@ 0x38
 8003444:	6819      	ldr	r1, [r3, #0]
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4403      	add	r3, r0
 8003454:	3328      	adds	r3, #40	@ 0x28
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	440b      	add	r3, r1
 800345a:	1e59      	subs	r1, r3, #1
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4403      	add	r3, r0
 800346a:	3328      	adds	r3, #40	@ 0x28
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8470 	beq.w	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	333c      	adds	r3, #60	@ 0x3c
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	f083 0301 	eor.w	r3, r3, #1
 8003494:	b2d8      	uxtb	r0, r3
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	333c      	adds	r3, #60	@ 0x3c
 80034a4:	4602      	mov	r2, r0
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	f000 bc58 	b.w	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	333c      	adds	r3, #60	@ 0x3c
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2d8      	uxtb	r0, r3
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	333c      	adds	r3, #60	@ 0x3c
 80034d4:	4602      	mov	r2, r0
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	f000 bc40 	b.w	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 f972 	bl	80067ce <USB_ReadChInterrupts>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d131      	bne.n	8003558 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003500:	461a      	mov	r2, r3
 8003502:	2320      	movs	r3, #32
 8003504:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	331a      	adds	r3, #26
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	f040 841f 	bne.w	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	331b      	adds	r3, #27
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334d      	adds	r3, #77	@ 0x4d
 8003542:	2203      	movs	r2, #3
 8003544:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f003 f9ba 	bl	80068c8 <USB_HC_Halt>
 8003554:	f000 bc02 	b.w	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f003 f934 	bl	80067ce <USB_ReadChInterrupts>
 8003566:	4603      	mov	r3, r0
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b02      	cmp	r3, #2
 800356e:	f040 8305 	bne.w	8003b7c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357e:	461a      	mov	r2, r3
 8003580:	2302      	movs	r3, #2
 8003582:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	334d      	adds	r3, #77	@ 0x4d
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d114      	bne.n	80035c4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	334d      	adds	r3, #77	@ 0x4d
 80035aa:	2202      	movs	r2, #2
 80035ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	334c      	adds	r3, #76	@ 0x4c
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e2cc      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334d      	adds	r3, #77	@ 0x4d
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d114      	bne.n	8003604 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334d      	adds	r3, #77	@ 0x4d
 80035ea:	2202      	movs	r2, #2
 80035ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334c      	adds	r3, #76	@ 0x4c
 80035fe:	2205      	movs	r2, #5
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e2ac      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	334d      	adds	r3, #77	@ 0x4d
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b07      	cmp	r3, #7
 8003618:	d00b      	beq.n	8003632 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	334d      	adds	r3, #77	@ 0x4d
 800362a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800362c:	2b09      	cmp	r3, #9
 800362e:	f040 80a6 	bne.w	800377e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	334d      	adds	r3, #77	@ 0x4d
 8003642:	2202      	movs	r2, #2
 8003644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3344      	adds	r3, #68	@ 0x44
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	1c59      	adds	r1, r3, #1
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4403      	add	r3, r0
 8003666:	3344      	adds	r3, #68	@ 0x44
 8003668:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3344      	adds	r3, #68	@ 0x44
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d943      	bls.n	8003708 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3344      	adds	r3, #68	@ 0x44
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	331a      	adds	r3, #26
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d123      	bne.n	80036f2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	331b      	adds	r3, #27
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	331c      	adds	r3, #28
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	0151      	lsls	r1, r2, #5
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	440a      	add	r2, r1
 80036e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334c      	adds	r3, #76	@ 0x4c
 8003702:	2204      	movs	r2, #4
 8003704:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003706:	e229      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334c      	adds	r3, #76	@ 0x4c
 8003718:	2202      	movs	r2, #2
 800371a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3326      	adds	r3, #38	@ 0x26
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	3326      	adds	r3, #38	@ 0x26
 8003742:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 8209 	bne.w	8003b5c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003760:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003768:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800377c:	e1ee      	b.n	8003b5c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	334d      	adds	r3, #77	@ 0x4d
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b05      	cmp	r3, #5
 8003792:	f040 80c8 	bne.w	8003926 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	334d      	adds	r3, #77	@ 0x4d
 80037a6:	2202      	movs	r2, #2
 80037a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	331b      	adds	r3, #27
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	f040 81ce 	bne.w	8003b5e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3326      	adds	r3, #38	@ 0x26
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d16b      	bne.n	80038b0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3348      	adds	r3, #72	@ 0x48
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1c59      	adds	r1, r3, #1
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4403      	add	r3, r0
 80037f8:	3348      	adds	r3, #72	@ 0x48
 80037fa:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	3348      	adds	r3, #72	@ 0x48
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d943      	bls.n	800389a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3348      	adds	r3, #72	@ 0x48
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	331b      	adds	r3, #27
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3344      	adds	r3, #68	@ 0x44
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d809      	bhi.n	8003864 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	331c      	adds	r3, #28
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	0151      	lsls	r1, r2, #5
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	440a      	add	r2, r1
 800387a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800387e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003882:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	334c      	adds	r3, #76	@ 0x4c
 8003894:	2204      	movs	r2, #4
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e014      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	334c      	adds	r3, #76	@ 0x4c
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e009      	b.n	80038c4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	334c      	adds	r3, #76	@ 0x4c
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3326      	adds	r3, #38	@ 0x26
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3326      	adds	r3, #38	@ 0x26
 80038ea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	f040 8136 	bne.w	8003b5e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003908:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003910:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e11b      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	334d      	adds	r3, #77	@ 0x4d
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b03      	cmp	r3, #3
 800393a:	f040 8081 	bne.w	8003a40 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	334d      	adds	r3, #77	@ 0x4d
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	331b      	adds	r3, #27
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	f040 80fa 	bne.w	8003b5e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	334c      	adds	r3, #76	@ 0x4c
 800397a:	2202      	movs	r2, #2
 800397c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	440a      	add	r2, r1
 8003994:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039bc:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039d8:	f023 0320 	bic.w	r3, r3, #32
 80039dc:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3326      	adds	r3, #38	@ 0x26
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3326      	adds	r3, #38	@ 0x26
 8003a04:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	f040 80a9 	bne.w	8003b5e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a22:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a2a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e08e      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	334d      	adds	r3, #77	@ 0x4d
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d143      	bne.n	8003ade <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	334d      	adds	r3, #77	@ 0x4d
 8003a66:	2202      	movs	r2, #2
 8003a68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	334c      	adds	r3, #76	@ 0x4c
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3326      	adds	r3, #38	@ 0x26
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3326      	adds	r3, #38	@ 0x26
 8003aa4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d159      	bne.n	8003b5e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ac0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ac8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e03f      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	334d      	adds	r3, #77	@ 0x4d
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d126      	bne.n	8003b42 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	@ 0x4d
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	3344      	adds	r3, #68	@ 0x44
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c59      	adds	r1, r3, #1
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4403      	add	r3, r0
 8003b28:	3344      	adds	r3, #68	@ 0x44
 8003b2a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334c      	adds	r3, #76	@ 0x4c
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	e00d      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	334d      	adds	r3, #77	@ 0x4d
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	f000 8100 	beq.w	8003d5a <HCD_HC_IN_IRQHandler+0xcca>
 8003b5a:	e000      	b.n	8003b5e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b5c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	334c      	adds	r3, #76	@ 0x4c
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f003 f922 	bl	8006dbe <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b7a:	e0ef      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 fe22 	bl	80067ce <USB_ReadChInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	d12f      	bne.n	8003bf4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2340      	movs	r3, #64	@ 0x40
 8003ba4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	334d      	adds	r3, #77	@ 0x4d
 8003bb6:	2205      	movs	r2, #5
 8003bb8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	331a      	adds	r3, #26
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3344      	adds	r3, #68	@ 0x44
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f002 fe6b 	bl	80068c8 <USB_HC_Halt>
 8003bf2:	e0b3      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f002 fde6 	bl	80067ce <USB_ReadChInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	f040 80a7 	bne.w	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3326      	adds	r3, #38	@ 0x26
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d11b      	bne.n	8003c5c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	3344      	adds	r3, #68	@ 0x44
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	334d      	adds	r3, #77	@ 0x4d
 8003c48:	2204      	movs	r2, #4
 8003c4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f002 fe37 	bl	80068c8 <USB_HC_Halt>
 8003c5a:	e03f      	b.n	8003cdc <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3326      	adds	r3, #38	@ 0x26
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3326      	adds	r3, #38	@ 0x26
 8003c82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d129      	bne.n	8003cdc <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3344      	adds	r3, #68	@ 0x44
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	799b      	ldrb	r3, [r3, #6]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HCD_HC_IN_IRQHandler+0xc2a>
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	331b      	adds	r3, #27
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d110      	bne.n	8003cdc <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	334d      	adds	r3, #77	@ 0x4d
 8003cca:	2204      	movs	r2, #4
 8003ccc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 fdf6 	bl	80068c8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	331b      	adds	r3, #27
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d129      	bne.n	8003d46 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	331b      	adds	r3, #27
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d24:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d40:	f043 0320 	orr.w	r3, r3, #32
 8003d44:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d52:	461a      	mov	r2, r3
 8003d54:	2310      	movs	r3, #16
 8003d56:	6093      	str	r3, [r2, #8]
 8003d58:	e000      	b.n	8003d5c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003d5a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f002 fd24 	bl	80067ce <USB_ReadChInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d11b      	bne.n	8003dc8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2304      	movs	r3, #4
 8003da0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334d      	adds	r3, #77	@ 0x4d
 8003db2:	2207      	movs	r2, #7
 8003db4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f002 fd82 	bl	80068c8 <USB_HC_Halt>
 8003dc4:	f000 bc6f 	b.w	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f002 fcfc 	bl	80067ce <USB_ReadChInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	f040 8082 	bne.w	8003ee6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dee:	461a      	mov	r2, r3
 8003df0:	2320      	movs	r3, #32
 8003df2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3319      	adds	r3, #25
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d124      	bne.n	8003e54 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3319      	adds	r3, #25
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	334c      	adds	r3, #76	@ 0x4c
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	334d      	adds	r3, #77	@ 0x4d
 8003e42:	2203      	movs	r2, #3
 8003e44:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f002 fd3a 	bl	80068c8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	331a      	adds	r3, #26
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	f040 841d 	bne.w	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	331b      	adds	r3, #27
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f040 8411 	bne.w	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	3326      	adds	r3, #38	@ 0x26
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d009      	beq.n	8003eae <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	331b      	adds	r3, #27
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	334d      	adds	r3, #77	@ 0x4d
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f002 fcfc 	bl	80068c8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3344      	adds	r3, #68	@ 0x44
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e3df      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 fc6d 	bl	80067ce <USB_ReadChInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003efe:	d111      	bne.n	8003f24 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f12:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f002 fcd3 	bl	80068c8 <USB_HC_Halt>
 8003f22:	e3c0      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 fc4e 	bl	80067ce <USB_ReadChInterrupts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d168      	bne.n	800400e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3344      	adds	r3, #68	@ 0x44
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f002 fc38 	bl	80067ce <USB_ReadChInterrupts>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d112      	bne.n	8003f8e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	3319      	adds	r3, #25
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2340      	movs	r3, #64	@ 0x40
 8003f8c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	331b      	adds	r3, #27
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d019      	beq.n	8003fd8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	331b      	adds	r3, #27
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	334d      	adds	r3, #77	@ 0x4d
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fc5e 	bl	80068c8 <USB_HC_Halt>
 800400c:	e34b      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f002 fbd9 	bl	80067ce <USB_ReadChInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	d139      	bne.n	800409a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	334d      	adds	r3, #77	@ 0x4d
 8004036:	2205      	movs	r2, #5
 8004038:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	331a      	adds	r3, #26
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3319      	adds	r3, #25
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3344      	adds	r3, #68	@ 0x44
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f002 fc21 	bl	80068c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004092:	461a      	mov	r2, r3
 8004094:	2340      	movs	r3, #64	@ 0x40
 8004096:	6093      	str	r3, [r2, #8]
 8004098:	e305      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f002 fb93 	bl	80067ce <USB_ReadChInterrupts>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d11a      	bne.n	80040e8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040be:	461a      	mov	r2, r3
 80040c0:	2308      	movs	r3, #8
 80040c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334d      	adds	r3, #77	@ 0x4d
 80040d4:	2206      	movs	r2, #6
 80040d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f002 fbf1 	bl	80068c8 <USB_HC_Halt>
 80040e6:	e2de      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f002 fb6c 	bl	80067ce <USB_ReadChInterrupts>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d144      	bne.n	800418a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3344      	adds	r3, #68	@ 0x44
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	334d      	adds	r3, #77	@ 0x4d
 8004124:	2204      	movs	r2, #4
 8004126:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3319      	adds	r3, #25
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d114      	bne.n	8004168 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	3318      	adds	r3, #24
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3319      	adds	r3, #25
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f002 fba9 	bl	80068c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004182:	461a      	mov	r2, r3
 8004184:	2310      	movs	r3, #16
 8004186:	6093      	str	r3, [r2, #8]
 8004188:	e28d      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f002 fb1b 	bl	80067ce <USB_ReadChInterrupts>
 8004198:	4603      	mov	r3, r0
 800419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419e:	2b80      	cmp	r3, #128	@ 0x80
 80041a0:	d169      	bne.n	8004276 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	799b      	ldrb	r3, [r3, #6]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d111      	bne.n	80041ce <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	334d      	adds	r3, #77	@ 0x4d
 80041ba:	2207      	movs	r2, #7
 80041bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f002 fb7e 	bl	80068c8 <USB_HC_Halt>
 80041cc:	e049      	b.n	8004262 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	3344      	adds	r3, #68	@ 0x44
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1c59      	adds	r1, r3, #1
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4403      	add	r3, r0
 80041ee:	3344      	adds	r3, #68	@ 0x44
 80041f0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3344      	adds	r3, #68	@ 0x44
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d922      	bls.n	800424e <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	3344      	adds	r3, #68	@ 0x44
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334c      	adds	r3, #76	@ 0x4c
 800422c:	2204      	movs	r2, #4
 800422e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334c      	adds	r3, #76	@ 0x4c
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f002 fdb9 	bl	8006dbe <HAL_HCD_HC_NotifyURBChange_Callback>
 800424c:	e009      	b.n	8004262 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	334c      	adds	r3, #76	@ 0x4c
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800426e:	461a      	mov	r2, r3
 8004270:	2380      	movs	r3, #128	@ 0x80
 8004272:	6093      	str	r3, [r2, #8]
 8004274:	e217      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f002 faa5 	bl	80067ce <USB_ReadChInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428e:	d11b      	bne.n	80042c8 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	334d      	adds	r3, #77	@ 0x4d
 80042a0:	2209      	movs	r2, #9
 80042a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f002 fb0b 	bl	80068c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042be:	461a      	mov	r2, r3
 80042c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042c4:	6093      	str	r3, [r2, #8]
 80042c6:	e1ee      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f002 fa7c 	bl	80067ce <USB_ReadChInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f040 81df 	bne.w	80046a0 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ee:	461a      	mov	r2, r3
 80042f0:	2302      	movs	r3, #2
 80042f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	334d      	adds	r3, #77	@ 0x4d
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	f040 8093 	bne.w	8004432 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	334d      	adds	r3, #77	@ 0x4d
 800431c:	2202      	movs	r2, #2
 800431e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	334c      	adds	r3, #76	@ 0x4c
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	3326      	adds	r3, #38	@ 0x26
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d00b      	beq.n	8004362 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3326      	adds	r3, #38	@ 0x26
 800435a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800435c:	2b03      	cmp	r3, #3
 800435e:	f040 8190 	bne.w	8004682 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	799b      	ldrb	r3, [r3, #6]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d115      	bne.n	8004396 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	333d      	adds	r3, #61	@ 0x3d
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	f083 0301 	eor.w	r3, r3, #1
 8004382:	b2d8      	uxtb	r0, r3
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	333d      	adds	r3, #61	@ 0x3d
 8004392:	4602      	mov	r2, r0
 8004394:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	799b      	ldrb	r3, [r3, #6]
 800439a:	2b01      	cmp	r3, #1
 800439c:	f040 8171 	bne.w	8004682 <HCD_HC_OUT_IRQHandler+0x920>
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	3334      	adds	r3, #52	@ 0x34
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8165 	beq.w	8004682 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	3334      	adds	r3, #52	@ 0x34
 80043c8:	6819      	ldr	r1, [r3, #0]
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4403      	add	r3, r0
 80043d8:	3328      	adds	r3, #40	@ 0x28
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	440b      	add	r3, r1
 80043de:	1e59      	subs	r1, r3, #1
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4403      	add	r3, r0
 80043ee:	3328      	adds	r3, #40	@ 0x28
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 813f 	beq.w	8004682 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	333d      	adds	r3, #61	@ 0x3d
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	78fa      	ldrb	r2, [r7, #3]
 8004418:	f083 0301 	eor.w	r3, r3, #1
 800441c:	b2d8      	uxtb	r0, r3
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	333d      	adds	r3, #61	@ 0x3d
 800442c:	4602      	mov	r2, r0
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e127      	b.n	8004682 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	334d      	adds	r3, #77	@ 0x4d
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d120      	bne.n	800448a <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	334d      	adds	r3, #77	@ 0x4d
 8004458:	2202      	movs	r2, #2
 800445a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	331b      	adds	r3, #27
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	f040 8107 	bne.w	8004682 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	334c      	adds	r3, #76	@ 0x4c
 8004484:	2202      	movs	r2, #2
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	e0fb      	b.n	8004682 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	334d      	adds	r3, #77	@ 0x4d
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d13a      	bne.n	8004516 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	334d      	adds	r3, #77	@ 0x4d
 80044b0:	2202      	movs	r2, #2
 80044b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334c      	adds	r3, #76	@ 0x4c
 80044c4:	2202      	movs	r2, #2
 80044c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	331b      	adds	r3, #27
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	f040 80d1 	bne.w	8004682 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	331b      	adds	r3, #27
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	78fa      	ldrb	r2, [r7, #3]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	440a      	add	r2, r1
 800450a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800450e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004512:	6053      	str	r3, [r2, #4]
 8004514:	e0b5      	b.n	8004682 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	334d      	adds	r3, #77	@ 0x4d
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b05      	cmp	r3, #5
 800452a:	d114      	bne.n	8004556 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	334d      	adds	r3, #77	@ 0x4d
 800453c:	2202      	movs	r2, #2
 800453e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	334c      	adds	r3, #76	@ 0x4c
 8004550:	2202      	movs	r2, #2
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	e095      	b.n	8004682 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	334d      	adds	r3, #77	@ 0x4d
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b06      	cmp	r3, #6
 800456a:	d114      	bne.n	8004596 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	334d      	adds	r3, #77	@ 0x4d
 800457c:	2202      	movs	r2, #2
 800457e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	334c      	adds	r3, #76	@ 0x4c
 8004590:	2205      	movs	r2, #5
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e075      	b.n	8004682 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	334d      	adds	r3, #77	@ 0x4d
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b07      	cmp	r3, #7
 80045aa:	d00a      	beq.n	80045c2 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	334d      	adds	r3, #77	@ 0x4d
 80045bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045be:	2b09      	cmp	r3, #9
 80045c0:	d170      	bne.n	80046a4 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	334d      	adds	r3, #77	@ 0x4d
 80045d2:	2202      	movs	r2, #2
 80045d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	3344      	adds	r3, #68	@ 0x44
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4403      	add	r3, r0
 80045f6:	3344      	adds	r3, #68	@ 0x44
 80045f8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	3344      	adds	r3, #68	@ 0x44
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d914      	bls.n	800463a <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	3344      	adds	r3, #68	@ 0x44
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334c      	adds	r3, #76	@ 0x4c
 8004634:	2204      	movs	r2, #4
 8004636:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004638:	e022      	b.n	8004680 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	334c      	adds	r3, #76	@ 0x4c
 800464a:	2202      	movs	r2, #2
 800464c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004664:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800466c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800466e:	78fb      	ldrb	r3, [r7, #3]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004680:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	334c      	adds	r3, #76	@ 0x4c
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f002 fb90 	bl	8006dbe <HAL_HCD_HC_NotifyURBChange_Callback>
 800469e:	e002      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80046a4:	bf00      	nop
  }
}
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	@ 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	0c5b      	lsrs	r3, r3, #17
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046e0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d004      	beq.n	80046f2 <HCD_RXQLVL_IRQHandler+0x46>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	f000 80b6 	beq.w	800485c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046f0:	e0b7      	b.n	8004862 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80b3 	beq.w	8004860 <HCD_RXQLVL_IRQHandler+0x1b4>
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4613      	mov	r3, r2
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	332c      	adds	r3, #44	@ 0x2c
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a7 	beq.w	8004860 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	3338      	adds	r3, #56	@ 0x38
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	18d1      	adds	r1, r2, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4403      	add	r3, r0
 8004736:	3334      	adds	r3, #52	@ 0x34
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4299      	cmp	r1, r3
 800473c:	f200 8083 	bhi.w	8004846 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	332c      	adds	r3, #44	@ 0x2c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	b292      	uxth	r2, r2
 800475a:	4619      	mov	r1, r3
 800475c:	f001 ffcc 	bl	80066f8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	332c      	adds	r3, #44	@ 0x2c
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	18d1      	adds	r1, r2, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4403      	add	r3, r0
 8004784:	332c      	adds	r3, #44	@ 0x2c
 8004786:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	3338      	adds	r3, #56	@ 0x38
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	18d1      	adds	r1, r2, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4403      	add	r3, r0
 80047ac:	3338      	adds	r3, #56	@ 0x38
 80047ae:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	0cdb      	lsrs	r3, r3, #19
 80047c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3328      	adds	r3, #40	@ 0x28
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4293      	cmp	r3, r2
 80047de:	d13f      	bne.n	8004860 <HCD_RXQLVL_IRQHandler+0x1b4>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d03c      	beq.n	8004860 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047fc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004804:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	4413      	add	r3, r2
 800480e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004812:	461a      	mov	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	333c      	adds	r3, #60	@ 0x3c
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	f083 0301 	eor.w	r3, r3, #1
 800482e:	b2d8      	uxtb	r0, r3
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	333c      	adds	r3, #60	@ 0x3c
 8004840:	4602      	mov	r2, r0
 8004842:	701a      	strb	r2, [r3, #0]
      break;
 8004844:	e00c      	b.n	8004860 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	334c      	adds	r3, #76	@ 0x4c
 8004856:	2204      	movs	r2, #4
 8004858:	701a      	strb	r2, [r3, #0]
      break;
 800485a:	e001      	b.n	8004860 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004860:	bf00      	nop
  }
}
 8004862:	bf00      	nop
 8004864:	3728      	adds	r7, #40	@ 0x28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004896:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d10b      	bne.n	80048ba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f002 fa6a 	bl	8006d86 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f043 0302 	orr.w	r3, r3, #2
 80048b8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d132      	bne.n	800492a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f043 0308 	orr.w	r3, r3, #8
 80048ca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d126      	bne.n	8004924 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	7a5b      	ldrb	r3, [r3, #9]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d113      	bne.n	8004906 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80048e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048e8:	d106      	bne.n	80048f8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2102      	movs	r1, #2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 ff9b 	bl	800682c <USB_InitFSLSPClkSel>
 80048f6:	e011      	b.n	800491c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2101      	movs	r1, #1
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 ff94 	bl	800682c <USB_InitFSLSPClkSel>
 8004904:	e00a      	b.n	800491c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	79db      	ldrb	r3, [r3, #7]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d106      	bne.n	800491c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004914:	461a      	mov	r2, r3
 8004916:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800491a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f002 fa5c 	bl	8006dda <HAL_HCD_PortEnabled_Callback>
 8004922:	e002      	b.n	800492a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f002 fa66 	bl	8006df6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b20      	cmp	r3, #32
 8004932:	d103      	bne.n	800493c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f043 0320 	orr.w	r3, r3, #32
 800493a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e12b      	b.n	8004bba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc f872 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	@ 0x24
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049b4:	f001 fa26 	bl	8005e04 <HAL_RCC_GetPCLK1Freq>
 80049b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4a81      	ldr	r2, [pc, #516]	@ (8004bc4 <HAL_I2C_Init+0x274>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d807      	bhi.n	80049d4 <HAL_I2C_Init+0x84>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a80      	ldr	r2, [pc, #512]	@ (8004bc8 <HAL_I2C_Init+0x278>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	bf94      	ite	ls
 80049cc:	2301      	movls	r3, #1
 80049ce:	2300      	movhi	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e006      	b.n	80049e2 <HAL_I2C_Init+0x92>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a7d      	ldr	r2, [pc, #500]	@ (8004bcc <HAL_I2C_Init+0x27c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	bf94      	ite	ls
 80049dc:	2301      	movls	r3, #1
 80049de:	2300      	movhi	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0e7      	b.n	8004bba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a78      	ldr	r2, [pc, #480]	@ (8004bd0 <HAL_I2C_Init+0x280>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	0c9b      	lsrs	r3, r3, #18
 80049f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a6a      	ldr	r2, [pc, #424]	@ (8004bc4 <HAL_I2C_Init+0x274>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d802      	bhi.n	8004a24 <HAL_I2C_Init+0xd4>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	3301      	adds	r3, #1
 8004a22:	e009      	b.n	8004a38 <HAL_I2C_Init+0xe8>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	4a69      	ldr	r2, [pc, #420]	@ (8004bd4 <HAL_I2C_Init+0x284>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	099b      	lsrs	r3, r3, #6
 8004a36:	3301      	adds	r3, #1
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	495c      	ldr	r1, [pc, #368]	@ (8004bc4 <HAL_I2C_Init+0x274>)
 8004a54:	428b      	cmp	r3, r1
 8004a56:	d819      	bhi.n	8004a8c <HAL_I2C_Init+0x13c>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1e59      	subs	r1, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a66:	1c59      	adds	r1, r3, #1
 8004a68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a6c:	400b      	ands	r3, r1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_I2C_Init+0x138>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1e59      	subs	r1, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a80:	3301      	adds	r3, #1
 8004a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a86:	e051      	b.n	8004b2c <HAL_I2C_Init+0x1dc>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	e04f      	b.n	8004b2c <HAL_I2C_Init+0x1dc>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d111      	bne.n	8004ab8 <HAL_I2C_Init+0x168>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1e58      	subs	r0, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	440b      	add	r3, r1
 8004aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	e012      	b.n	8004ade <HAL_I2C_Init+0x18e>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1e58      	subs	r0, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	0099      	lsls	r1, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Init+0x196>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e022      	b.n	8004b2c <HAL_I2C_Init+0x1dc>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10e      	bne.n	8004b0c <HAL_I2C_Init+0x1bc>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1e58      	subs	r0, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	440b      	add	r3, r1
 8004afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b00:	3301      	adds	r3, #1
 8004b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b0a:	e00f      	b.n	8004b2c <HAL_I2C_Init+0x1dc>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1e58      	subs	r0, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	0099      	lsls	r1, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b22:	3301      	adds	r3, #1
 8004b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	6809      	ldr	r1, [r1, #0]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69da      	ldr	r2, [r3, #28]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6911      	ldr	r1, [r2, #16]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68d2      	ldr	r2, [r2, #12]
 8004b66:	4311      	orrs	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	000186a0 	.word	0x000186a0
 8004bc8:	001e847f 	.word	0x001e847f
 8004bcc:	003d08ff 	.word	0x003d08ff
 8004bd0:	431bde83 	.word	0x431bde83
 8004bd4:	10624dd3 	.word	0x10624dd3

08004bd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	461a      	mov	r2, r3
 8004be4:	460b      	mov	r3, r1
 8004be6:	817b      	strh	r3, [r7, #10]
 8004be8:	4613      	mov	r3, r2
 8004bea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bec:	f7fd fe60 	bl	80028b0 <HAL_GetTick>
 8004bf0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	f040 80e0 	bne.w	8004dc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2319      	movs	r3, #25
 8004c06:	2201      	movs	r2, #1
 8004c08:	4970      	ldr	r1, [pc, #448]	@ (8004dcc <HAL_I2C_Master_Transmit+0x1f4>)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fc64 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0d3      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_I2C_Master_Transmit+0x50>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e0cc      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x1ea>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d007      	beq.n	8004c4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2221      	movs	r2, #33	@ 0x21
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	893a      	ldrh	r2, [r7, #8]
 8004c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a50      	ldr	r2, [pc, #320]	@ (8004dd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c90:	8979      	ldrh	r1, [r7, #10]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 face 	bl	8005238 <I2C_MasterRequestWrite>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e08d      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cbc:	e066      	b.n	8004d8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	6a39      	ldr	r1, [r7, #32]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fd22 	bl	800570c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00d      	beq.n	8004cea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d107      	bne.n	8004ce6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e06b      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	781a      	ldrb	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d11b      	bne.n	8004d60 <HAL_I2C_Master_Transmit+0x188>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d017      	beq.n	8004d60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	6a39      	ldr	r1, [r7, #32]
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fd19 	bl	800579c <I2C_WaitOnBTFFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00d      	beq.n	8004d8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d107      	bne.n	8004d88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e01a      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d194      	bne.n	8004cbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e000      	b.n	8004dc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	00100002 	.word	0x00100002
 8004dd0:	ffff0000 	.word	0xffff0000

08004dd4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	@ 0x30
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	461a      	mov	r2, r3
 8004de0:	460b      	mov	r3, r1
 8004de2:	817b      	strh	r3, [r7, #10]
 8004de4:	4613      	mov	r3, r2
 8004de6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de8:	f7fd fd62 	bl	80028b0 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	f040 8217 	bne.w	800522a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2319      	movs	r3, #25
 8004e02:	2201      	movs	r2, #1
 8004e04:	497c      	ldr	r1, [pc, #496]	@ (8004ff8 <HAL_I2C_Master_Receive+0x224>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fb66 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
 8004e14:	e20a      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_I2C_Master_Receive+0x50>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e203      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d007      	beq.n	8004e4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2222      	movs	r2, #34	@ 0x22
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2210      	movs	r2, #16
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	893a      	ldrh	r2, [r7, #8]
 8004e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a5c      	ldr	r2, [pc, #368]	@ (8004ffc <HAL_I2C_Master_Receive+0x228>)
 8004e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e8c:	8979      	ldrh	r1, [r7, #10]
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fa52 	bl	800533c <I2C_MasterRequestRead>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e1c4      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d113      	bne.n	8004ed2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	623b      	str	r3, [r7, #32]
 8004ebe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e198      	b.n	8005204 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d11b      	bne.n	8004f12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e178      	b.n	8005204 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d11b      	bne.n	8004f52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	e158      	b.n	8005204 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f78:	e144      	b.n	8005204 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	f200 80f1 	bhi.w	8005166 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d123      	bne.n	8004fd4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fc4b 	bl	800582c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e145      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fd2:	e117      	b.n	8005204 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d14e      	bne.n	800507a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4906      	ldr	r1, [pc, #24]	@ (8005000 <HAL_I2C_Master_Receive+0x22c>)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fa76 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e11a      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
 8004ff6:	bf00      	nop
 8004ff8:	00100002 	.word	0x00100002
 8004ffc:	ffff0000 	.word	0xffff0000
 8005000:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005078:	e0c4      	b.n	8005204 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005080:	2200      	movs	r2, #0
 8005082:	496c      	ldr	r1, [pc, #432]	@ (8005234 <HAL_I2C_Master_Receive+0x460>)
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fa27 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0cb      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	2200      	movs	r2, #0
 80050de:	4955      	ldr	r1, [pc, #340]	@ (8005234 <HAL_I2C_Master_Receive+0x460>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f9f9 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e09d      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005164:	e04e      	b.n	8005204 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005168:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fb5e 	bl	800582c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e058      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d124      	bne.n	8005204 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d107      	bne.n	80051d2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	f47f aeb6 	bne.w	8004f7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e000      	b.n	800522c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3728      	adds	r7, #40	@ 0x28
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	00010004 	.word	0x00010004

08005238 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	460b      	mov	r3, r1
 8005246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d006      	beq.n	8005262 <I2C_MasterRequestWrite+0x2a>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d003      	beq.n	8005262 <I2C_MasterRequestWrite+0x2a>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005260:	d108      	bne.n	8005274 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e00b      	b.n	800528c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	2b12      	cmp	r3, #18
 800527a:	d107      	bne.n	800528c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800528a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f91d 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052b2:	d103      	bne.n	80052bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e035      	b.n	800532c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c8:	d108      	bne.n	80052dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ca:	897b      	ldrh	r3, [r7, #10]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052d8:	611a      	str	r2, [r3, #16]
 80052da:	e01b      	b.n	8005314 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052dc:	897b      	ldrh	r3, [r7, #10]
 80052de:	11db      	asrs	r3, r3, #7
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 0306 	and.w	r3, r3, #6
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f063 030f 	orn	r3, r3, #15
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	490e      	ldr	r1, [pc, #56]	@ (8005334 <I2C_MasterRequestWrite+0xfc>)
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f966 	bl	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e010      	b.n	800532c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4907      	ldr	r1, [pc, #28]	@ (8005338 <I2C_MasterRequestWrite+0x100>)
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f956 	bl	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	00010008 	.word	0x00010008
 8005338:	00010002 	.word	0x00010002

0800533c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	607a      	str	r2, [r7, #4]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	460b      	mov	r3, r1
 800534a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005360:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d006      	beq.n	8005376 <I2C_MasterRequestRead+0x3a>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d003      	beq.n	8005376 <I2C_MasterRequestRead+0x3a>
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005374:	d108      	bne.n	8005388 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e00b      	b.n	80053a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538c:	2b11      	cmp	r3, #17
 800538e:	d107      	bne.n	80053a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800539e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f893 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c6:	d103      	bne.n	80053d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e079      	b.n	80054c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053dc:	d108      	bne.n	80053f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053de:	897b      	ldrh	r3, [r7, #10]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	611a      	str	r2, [r3, #16]
 80053ee:	e05f      	b.n	80054b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053f0:	897b      	ldrh	r3, [r7, #10]
 80053f2:	11db      	asrs	r3, r3, #7
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0306 	and.w	r3, r3, #6
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f063 030f 	orn	r3, r3, #15
 8005400:	b2da      	uxtb	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4930      	ldr	r1, [pc, #192]	@ (80054d0 <I2C_MasterRequestRead+0x194>)
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f8dc 	bl	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e054      	b.n	80054c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800541e:	897b      	ldrh	r3, [r7, #10]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4929      	ldr	r1, [pc, #164]	@ (80054d4 <I2C_MasterRequestRead+0x198>)
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f8cc 	bl	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e044      	b.n	80054c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005462:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f831 	bl	80054d8 <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00d      	beq.n	8005498 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800548a:	d103      	bne.n	8005494 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005492:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e017      	b.n	80054c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005498:	897b      	ldrh	r3, [r7, #10]
 800549a:	11db      	asrs	r3, r3, #7
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0306 	and.w	r3, r3, #6
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f063 030e 	orn	r3, r3, #14
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4907      	ldr	r1, [pc, #28]	@ (80054d4 <I2C_MasterRequestRead+0x198>)
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f888 	bl	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	00010008 	.word	0x00010008
 80054d4:	00010002 	.word	0x00010002

080054d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e8:	e048      	b.n	800557c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d044      	beq.n	800557c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7fd f9dd 	bl	80028b0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d139      	bne.n	800557c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10d      	bne.n	800552e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	43da      	mvns	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4013      	ands	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	e00c      	b.n	8005548 <I2C_WaitOnFlagUntilTimeout+0x70>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	43da      	mvns	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	429a      	cmp	r2, r3
 800554c:	d116      	bne.n	800557c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e023      	b.n	80055c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b01      	cmp	r3, #1
 8005584:	d10d      	bne.n	80055a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	43da      	mvns	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4013      	ands	r3, r2
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	e00c      	b.n	80055bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	43da      	mvns	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d093      	beq.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055da:	e071      	b.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ea:	d123      	bne.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005604:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005620:	f043 0204 	orr.w	r2, r3, #4
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e067      	b.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d041      	beq.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563c:	f7fd f938 	bl	80028b0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d302      	bcc.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d136      	bne.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d10c      	bne.n	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	43da      	mvns	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf14      	ite	ne
 800566e:	2301      	movne	r3, #1
 8005670:	2300      	moveq	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e00b      	b.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	43da      	mvns	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d016      	beq.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e021      	b.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	0c1b      	lsrs	r3, r3, #16
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10c      	bne.n	80056e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	43da      	mvns	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf14      	ite	ne
 80056dc:	2301      	movne	r3, #1
 80056de:	2300      	moveq	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e00b      	b.n	80056fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	43da      	mvns	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4013      	ands	r3, r2
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f47f af6d 	bne.w	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005718:	e034      	b.n	8005784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f8e3 	bl	80058e6 <I2C_IsAcknowledgeFailed>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e034      	b.n	8005794 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d028      	beq.n	8005784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fd f8bd 	bl	80028b0 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11d      	bne.n	8005784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005752:	2b80      	cmp	r3, #128	@ 0x80
 8005754:	d016      	beq.n	8005784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	f043 0220 	orr.w	r2, r3, #32
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e007      	b.n	8005794 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578e:	2b80      	cmp	r3, #128	@ 0x80
 8005790:	d1c3      	bne.n	800571a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057a8:	e034      	b.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f89b 	bl	80058e6 <I2C_IsAcknowledgeFailed>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e034      	b.n	8005824 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d028      	beq.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fd f875 	bl	80028b0 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11d      	bne.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d016      	beq.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e007      	b.n	8005824 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b04      	cmp	r3, #4
 8005820:	d1c3      	bne.n	80057aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005838:	e049      	b.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b10      	cmp	r3, #16
 8005846:	d119      	bne.n	800587c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0210 	mvn.w	r2, #16
 8005850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e030      	b.n	80058de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587c:	f7fd f818 	bl	80028b0 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	d302      	bcc.n	8005892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11d      	bne.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d016      	beq.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e007      	b.n	80058de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	d1ae      	bne.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fc:	d11b      	bne.n	8005936 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005906:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	f043 0204 	orr.w	r2, r3, #4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0cc      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005958:	4b68      	ldr	r3, [pc, #416]	@ (8005afc <HAL_RCC_ClockConfig+0x1b8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d90c      	bls.n	8005980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005966:	4b65      	ldr	r3, [pc, #404]	@ (8005afc <HAL_RCC_ClockConfig+0x1b8>)
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596e:	4b63      	ldr	r3, [pc, #396]	@ (8005afc <HAL_RCC_ClockConfig+0x1b8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d001      	beq.n	8005980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0b8      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d020      	beq.n	80059ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005998:	4b59      	ldr	r3, [pc, #356]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4a58      	ldr	r2, [pc, #352]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b0:	4b53      	ldr	r3, [pc, #332]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	4a52      	ldr	r2, [pc, #328]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059bc:	4b50      	ldr	r3, [pc, #320]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	494d      	ldr	r1, [pc, #308]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d044      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d107      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e2:	4b47      	ldr	r3, [pc, #284]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d119      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e07f      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d003      	beq.n	8005a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a02:	4b3f      	ldr	r3, [pc, #252]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e06f      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a12:	4b3b      	ldr	r3, [pc, #236]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e067      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a22:	4b37      	ldr	r3, [pc, #220]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f023 0203 	bic.w	r2, r3, #3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4934      	ldr	r1, [pc, #208]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a34:	f7fc ff3c 	bl	80028b0 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3c:	f7fc ff38 	bl	80028b0 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e04f      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	4b2b      	ldr	r3, [pc, #172]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 020c 	and.w	r2, r3, #12
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d1eb      	bne.n	8005a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a64:	4b25      	ldr	r3, [pc, #148]	@ (8005afc <HAL_RCC_ClockConfig+0x1b8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d20c      	bcs.n	8005a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b22      	ldr	r3, [pc, #136]	@ (8005afc <HAL_RCC_ClockConfig+0x1b8>)
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7a:	4b20      	ldr	r3, [pc, #128]	@ (8005afc <HAL_RCC_ClockConfig+0x1b8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e032      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a98:	4b19      	ldr	r3, [pc, #100]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4916      	ldr	r1, [pc, #88]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ab6:	4b12      	ldr	r3, [pc, #72]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	490e      	ldr	r1, [pc, #56]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005aca:	f000 f889 	bl	8005be0 <HAL_RCC_GetSysClockFreq>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b00 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	091b      	lsrs	r3, r3, #4
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	490a      	ldr	r1, [pc, #40]	@ (8005b04 <HAL_RCC_ClockConfig+0x1c0>)
 8005adc:	5ccb      	ldrb	r3, [r1, r3]
 8005ade:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae2:	4a09      	ldr	r2, [pc, #36]	@ (8005b08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ae6:	4b09      	ldr	r3, [pc, #36]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fc fe9c 	bl	8002828 <HAL_InitTick>

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40023c00 	.word	0x40023c00
 8005b00:	40023800 	.word	0x40023800
 8005b04:	08006f10 	.word	0x08006f10
 8005b08:	20000000 	.word	0x20000000
 8005b0c:	2000008c 	.word	0x2000008c

08005b10 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08c      	sub	sp, #48	@ 0x30
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d129      	bne.n	8005b76 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b32:	4b28      	ldr	r3, [pc, #160]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005b3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b44:	2302      	movs	r3, #2
 8005b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b50:	2300      	movs	r3, #0
 8005b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005b54:	f107 031c 	add.w	r3, r7, #28
 8005b58:	4619      	mov	r1, r3
 8005b5a:	481f      	ldr	r0, [pc, #124]	@ (8005bd8 <HAL_RCC_MCOConfig+0xc8>)
 8005b5c:	f7fc ffbe 	bl	8002adc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005b60:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	4919      	ldr	r1, [pc, #100]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005b74:	e029      	b.n	8005bca <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7e:	4a15      	ldr	r2, [pc, #84]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005b80:	f043 0304 	orr.w	r3, r3, #4
 8005b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b86:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005ba8:	f107 031c 	add.w	r3, r7, #28
 8005bac:	4619      	mov	r1, r3
 8005bae:	480b      	ldr	r0, [pc, #44]	@ (8005bdc <HAL_RCC_MCOConfig+0xcc>)
 8005bb0:	f7fc ff94 	bl	8002adc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005bb4:	4b07      	ldr	r3, [pc, #28]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	00d9      	lsls	r1, r3, #3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	4903      	ldr	r1, [pc, #12]	@ (8005bd4 <HAL_RCC_MCOConfig+0xc4>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	608b      	str	r3, [r1, #8]
}
 8005bca:	bf00      	nop
 8005bcc:	3730      	adds	r7, #48	@ 0x30
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40020000 	.word	0x40020000
 8005bdc:	40020800 	.word	0x40020800

08005be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be4:	b094      	sub	sp, #80	@ 0x50
 8005be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bec:	2300      	movs	r3, #0
 8005bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bf8:	4b79      	ldr	r3, [pc, #484]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 030c 	and.w	r3, r3, #12
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d00d      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x40>
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	f200 80e1 	bhi.w	8005dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0x34>
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d003      	beq.n	8005c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c12:	e0db      	b.n	8005dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c14:	4b73      	ldr	r3, [pc, #460]	@ (8005de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c16:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005c18:	e0db      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c1a:	4b73      	ldr	r3, [pc, #460]	@ (8005de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c1e:	e0d8      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c20:	4b6f      	ldr	r3, [pc, #444]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c28:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d063      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c36:	4b6a      	ldr	r3, [pc, #424]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	099b      	lsrs	r3, r3, #6
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c52:	4622      	mov	r2, r4
 8005c54:	462b      	mov	r3, r5
 8005c56:	f04f 0000 	mov.w	r0, #0
 8005c5a:	f04f 0100 	mov.w	r1, #0
 8005c5e:	0159      	lsls	r1, r3, #5
 8005c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c64:	0150      	lsls	r0, r2, #5
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	1a51      	subs	r1, r2, r1
 8005c6e:	6139      	str	r1, [r7, #16]
 8005c70:	4629      	mov	r1, r5
 8005c72:	eb63 0301 	sbc.w	r3, r3, r1
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c84:	4659      	mov	r1, fp
 8005c86:	018b      	lsls	r3, r1, #6
 8005c88:	4651      	mov	r1, sl
 8005c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c8e:	4651      	mov	r1, sl
 8005c90:	018a      	lsls	r2, r1, #6
 8005c92:	4651      	mov	r1, sl
 8005c94:	ebb2 0801 	subs.w	r8, r2, r1
 8005c98:	4659      	mov	r1, fp
 8005c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cb2:	4690      	mov	r8, r2
 8005cb4:	4699      	mov	r9, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	eb18 0303 	adds.w	r3, r8, r3
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	462b      	mov	r3, r5
 8005cc0:	eb49 0303 	adc.w	r3, r9, r3
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	024b      	lsls	r3, r1, #9
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cdc:	4621      	mov	r1, r4
 8005cde:	024a      	lsls	r2, r1, #9
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cf0:	f7fa fa88 	bl	8000204 <__aeabi_uldivmod>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cfc:	e058      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfe:	4b38      	ldr	r3, [pc, #224]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	099b      	lsrs	r3, r3, #6
 8005d04:	2200      	movs	r2, #0
 8005d06:	4618      	mov	r0, r3
 8005d08:	4611      	mov	r1, r2
 8005d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d0e:	623b      	str	r3, [r7, #32]
 8005d10:	2300      	movs	r3, #0
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	f04f 0000 	mov.w	r0, #0
 8005d20:	f04f 0100 	mov.w	r1, #0
 8005d24:	0159      	lsls	r1, r3, #5
 8005d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d2a:	0150      	lsls	r0, r2, #5
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4641      	mov	r1, r8
 8005d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d36:	4649      	mov	r1, r9
 8005d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d50:	ebb2 040a 	subs.w	r4, r2, sl
 8005d54:	eb63 050b 	sbc.w	r5, r3, fp
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	00eb      	lsls	r3, r5, #3
 8005d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d66:	00e2      	lsls	r2, r4, #3
 8005d68:	4614      	mov	r4, r2
 8005d6a:	461d      	mov	r5, r3
 8005d6c:	4643      	mov	r3, r8
 8005d6e:	18e3      	adds	r3, r4, r3
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	464b      	mov	r3, r9
 8005d74:	eb45 0303 	adc.w	r3, r5, r3
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d86:	4629      	mov	r1, r5
 8005d88:	028b      	lsls	r3, r1, #10
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d90:	4621      	mov	r1, r4
 8005d92:	028a      	lsls	r2, r1, #10
 8005d94:	4610      	mov	r0, r2
 8005d96:	4619      	mov	r1, r3
 8005d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	61fa      	str	r2, [r7, #28]
 8005da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da4:	f7fa fa2e 	bl	8000204 <__aeabi_uldivmod>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4613      	mov	r3, r2
 8005dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005db0:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	0c1b      	lsrs	r3, r3, #16
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	3301      	adds	r3, #1
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005dc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dca:	e002      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dcc:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3750      	adds	r7, #80	@ 0x50
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800
 8005de4:	00f42400 	.word	0x00f42400
 8005de8:	007a1200 	.word	0x007a1200

08005dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005df0:	4b03      	ldr	r3, [pc, #12]	@ (8005e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005df2:	681b      	ldr	r3, [r3, #0]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20000000 	.word	0x20000000

08005e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e08:	f7ff fff0 	bl	8005dec <HAL_RCC_GetHCLKFreq>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	0a9b      	lsrs	r3, r3, #10
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	4903      	ldr	r1, [pc, #12]	@ (8005e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e1a:	5ccb      	ldrb	r3, [r1, r3]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40023800 	.word	0x40023800
 8005e28:	08006f20 	.word	0x08006f20

08005e2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e273      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d075      	beq.n	8005f36 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e4a:	4b88      	ldr	r3, [pc, #544]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d00c      	beq.n	8005e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e56:	4b85      	ldr	r3, [pc, #532]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d112      	bne.n	8005e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e62:	4b82      	ldr	r3, [pc, #520]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	4b7e      	ldr	r3, [pc, #504]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d05b      	beq.n	8005f34 <HAL_RCC_OscConfig+0x108>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d157      	bne.n	8005f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e24e      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e90:	d106      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x74>
 8005e92:	4b76      	ldr	r3, [pc, #472]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a75      	ldr	r2, [pc, #468]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e01d      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x98>
 8005eaa:	4b70      	ldr	r3, [pc, #448]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a6f      	ldr	r2, [pc, #444]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a6c      	ldr	r2, [pc, #432]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e00b      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ec4:	4b69      	ldr	r3, [pc, #420]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a68      	ldr	r2, [pc, #416]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	4b66      	ldr	r3, [pc, #408]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a65      	ldr	r2, [pc, #404]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d013      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fc fce4 	bl	80028b0 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fc fce0 	bl	80028b0 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	@ 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e213      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efe:	4b5b      	ldr	r3, [pc, #364]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f0      	beq.n	8005eec <HAL_RCC_OscConfig+0xc0>
 8005f0a:	e014      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fc fcd0 	bl	80028b0 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fc fccc 	bl	80028b0 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	@ 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e1ff      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f26:	4b51      	ldr	r3, [pc, #324]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0xe8>
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d063      	beq.n	800600a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f42:	4b4a      	ldr	r3, [pc, #296]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 030c 	and.w	r3, r3, #12
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4e:	4b47      	ldr	r3, [pc, #284]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d11c      	bne.n	8005f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f5a:	4b44      	ldr	r3, [pc, #272]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d116      	bne.n	8005f94 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f66:	4b41      	ldr	r3, [pc, #260]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_RCC_OscConfig+0x152>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d001      	beq.n	8005f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e1d3      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4937      	ldr	r1, [pc, #220]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f92:	e03a      	b.n	800600a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d020      	beq.n	8005fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f9c:	4b34      	ldr	r3, [pc, #208]	@ (8006070 <HAL_RCC_OscConfig+0x244>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa2:	f7fc fc85 	bl	80028b0 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005faa:	f7fc fc81 	bl	80028b0 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e1b4      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc8:	4b28      	ldr	r3, [pc, #160]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	4925      	ldr	r1, [pc, #148]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]
 8005fdc:	e015      	b.n	800600a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fde:	4b24      	ldr	r3, [pc, #144]	@ (8006070 <HAL_RCC_OscConfig+0x244>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe4:	f7fc fc64 	bl	80028b0 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fec:	f7fc fc60 	bl	80028b0 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e193      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d036      	beq.n	8006084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d016      	beq.n	800604c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601e:	4b15      	ldr	r3, [pc, #84]	@ (8006074 <HAL_RCC_OscConfig+0x248>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fc fc44 	bl	80028b0 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800602c:	f7fc fc40 	bl	80028b0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e173      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603e:	4b0b      	ldr	r3, [pc, #44]	@ (800606c <HAL_RCC_OscConfig+0x240>)
 8006040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x200>
 800604a:	e01b      	b.n	8006084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800604c:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <HAL_RCC_OscConfig+0x248>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7fc fc2d 	bl	80028b0 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	e00e      	b.n	8006078 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605a:	f7fc fc29 	bl	80028b0 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d907      	bls.n	8006078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e15c      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
 800606c:	40023800 	.word	0x40023800
 8006070:	42470000 	.word	0x42470000
 8006074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006078:	4b8a      	ldr	r3, [pc, #552]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800607a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ea      	bne.n	800605a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8097 	beq.w	80061c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006096:	4b83      	ldr	r3, [pc, #524]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10f      	bne.n	80060c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a2:	2300      	movs	r3, #0
 80060a4:	60bb      	str	r3, [r7, #8]
 80060a6:	4b7f      	ldr	r3, [pc, #508]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	4a7e      	ldr	r2, [pc, #504]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 80060ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80060b2:	4b7c      	ldr	r3, [pc, #496]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c2:	4b79      	ldr	r3, [pc, #484]	@ (80062a8 <HAL_RCC_OscConfig+0x47c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d118      	bne.n	8006100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ce:	4b76      	ldr	r3, [pc, #472]	@ (80062a8 <HAL_RCC_OscConfig+0x47c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a75      	ldr	r2, [pc, #468]	@ (80062a8 <HAL_RCC_OscConfig+0x47c>)
 80060d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060da:	f7fc fbe9 	bl	80028b0 <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e2:	f7fc fbe5 	bl	80028b0 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e118      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f4:	4b6c      	ldr	r3, [pc, #432]	@ (80062a8 <HAL_RCC_OscConfig+0x47c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f0      	beq.n	80060e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d106      	bne.n	8006116 <HAL_RCC_OscConfig+0x2ea>
 8006108:	4b66      	ldr	r3, [pc, #408]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610c:	4a65      	ldr	r2, [pc, #404]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	6713      	str	r3, [r2, #112]	@ 0x70
 8006114:	e01c      	b.n	8006150 <HAL_RCC_OscConfig+0x324>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b05      	cmp	r3, #5
 800611c:	d10c      	bne.n	8006138 <HAL_RCC_OscConfig+0x30c>
 800611e:	4b61      	ldr	r3, [pc, #388]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006122:	4a60      	ldr	r2, [pc, #384]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006124:	f043 0304 	orr.w	r3, r3, #4
 8006128:	6713      	str	r3, [r2, #112]	@ 0x70
 800612a:	4b5e      	ldr	r3, [pc, #376]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612e:	4a5d      	ldr	r2, [pc, #372]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	6713      	str	r3, [r2, #112]	@ 0x70
 8006136:	e00b      	b.n	8006150 <HAL_RCC_OscConfig+0x324>
 8006138:	4b5a      	ldr	r3, [pc, #360]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613c:	4a59      	ldr	r2, [pc, #356]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	6713      	str	r3, [r2, #112]	@ 0x70
 8006144:	4b57      	ldr	r3, [pc, #348]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006148:	4a56      	ldr	r2, [pc, #344]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800614a:	f023 0304 	bic.w	r3, r3, #4
 800614e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fc fbaa 	bl	80028b0 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615e:	e00a      	b.n	8006176 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f7fc fba6 	bl	80028b0 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e0d7      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006176:	4b4b      	ldr	r3, [pc, #300]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0ee      	beq.n	8006160 <HAL_RCC_OscConfig+0x334>
 8006182:	e014      	b.n	80061ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fc fb94 	bl	80028b0 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fc fb90 	bl	80028b0 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0c1      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a2:	4b40      	ldr	r3, [pc, #256]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1ee      	bne.n	800618c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061ae:	7dfb      	ldrb	r3, [r7, #23]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d105      	bne.n	80061c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b4:	4b3b      	ldr	r3, [pc, #236]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 80061b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b8:	4a3a      	ldr	r2, [pc, #232]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 80061ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80ad 	beq.w	8006324 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ca:	4b36      	ldr	r3, [pc, #216]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d060      	beq.n	8006298 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d145      	bne.n	800626a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061de:	4b33      	ldr	r3, [pc, #204]	@ (80062ac <HAL_RCC_OscConfig+0x480>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e4:	f7fc fb64 	bl	80028b0 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fc fb60 	bl	80028b0 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e093      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061fe:	4b29      	ldr	r3, [pc, #164]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69da      	ldr	r2, [r3, #28]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	019b      	lsls	r3, r3, #6
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	3b01      	subs	r3, #1
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	061b      	lsls	r3, r3, #24
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006234:	071b      	lsls	r3, r3, #28
 8006236:	491b      	ldr	r1, [pc, #108]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800623c:	4b1b      	ldr	r3, [pc, #108]	@ (80062ac <HAL_RCC_OscConfig+0x480>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006242:	f7fc fb35 	bl	80028b0 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624a:	f7fc fb31 	bl	80028b0 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e064      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625c:	4b11      	ldr	r3, [pc, #68]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x41e>
 8006268:	e05c      	b.n	8006324 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626a:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <HAL_RCC_OscConfig+0x480>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fc fb1e 	bl	80028b0 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006278:	f7fc fb1a 	bl	80028b0 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e04d      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800628a:	4b06      	ldr	r3, [pc, #24]	@ (80062a4 <HAL_RCC_OscConfig+0x478>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x44c>
 8006296:	e045      	b.n	8006324 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e040      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
 80062a4:	40023800 	.word	0x40023800
 80062a8:	40007000 	.word	0x40007000
 80062ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006330 <HAL_RCC_OscConfig+0x504>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d030      	beq.n	8006320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d129      	bne.n	8006320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d122      	bne.n	8006320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062e0:	4013      	ands	r3, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d119      	bne.n	8006320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	3b01      	subs	r3, #1
 80062fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d10f      	bne.n	8006320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d107      	bne.n	8006320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800631c:	429a      	cmp	r2, r3
 800631e:	d001      	beq.n	8006324 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800

08006334 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e038      	b.n	80063bc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7fa fc6a 	bl	8000c38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3308      	adds	r3, #8
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f000 f828 	bl	80063c4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	461a      	mov	r2, r3
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	f000 f8b0 	bl	80064e4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6858      	ldr	r0, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	f000 f8f7 	bl	8006584 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	6892      	ldr	r2, [r2, #8]
 800639e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	6892      	ldr	r2, [r2, #8]
 80063aa:	f041 0101 	orr.w	r1, r1, #1
 80063ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	f023 0101 	bic.w	r1, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d102      	bne.n	80063f4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80063ee:	2340      	movs	r3, #64	@ 0x40
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e001      	b.n	80063f8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006404:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800640a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006410:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006416:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800641c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006422:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006428:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800642e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006434:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800645c:	4b20      	ldr	r3, [pc, #128]	@ (80064e0 <FSMC_NORSRAM_Init+0x11c>)
 800645e:	60fb      	str	r3, [r7, #12]

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  mask |= FSMC_BCR1_CCLKEN;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006466:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800646e:	60fb      	str	r3, [r7, #12]
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006476:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	43db      	mvns	r3, r3
 8006486:	ea02 0103 	and.w	r1, r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4319      	orrs	r1, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800649c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064a0:	d10c      	bne.n	80064bc <FSMC_NORSRAM_Init+0xf8>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d008      	beq.n	80064bc <FSMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	601a      	str	r2, [r3, #0]
  }
#endif
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d006      	beq.n	80064d2 <FSMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	0008fb7f 	.word	0x0008fb7f

080064e4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fa:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	431a      	orrs	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	431a      	orrs	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	431a      	orrs	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	3b01      	subs	r3, #1
 8006520:	051b      	lsls	r3, r3, #20
 8006522:	431a      	orrs	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	3b02      	subs	r3, #2
 800652a:	061b      	lsls	r3, r3, #24
 800652c:	431a      	orrs	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	4313      	orrs	r3, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	3201      	adds	r2, #1
 8006538:	4319      	orrs	r1, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006548:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800654c:	d113      	bne.n	8006576 <FSMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006556:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	3b01      	subs	r3, #1
 800655e:	051b      	lsls	r3, r3, #20
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006598:	d11d      	bne.n	80065d6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065a2:	4b13      	ldr	r3, [pc, #76]	@ (80065f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	6811      	ldr	r1, [r2, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	6852      	ldr	r2, [r2, #4]
 80065ae:	0112      	lsls	r2, r2, #4
 80065b0:	4311      	orrs	r1, r2
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	6892      	ldr	r2, [r2, #8]
 80065b6:	0212      	lsls	r2, r2, #8
 80065b8:	4311      	orrs	r1, r2
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	6992      	ldr	r2, [r2, #24]
 80065be:	4311      	orrs	r1, r2
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	68d2      	ldr	r2, [r2, #12]
 80065c4:	0412      	lsls	r2, r2, #16
 80065c6:	430a      	orrs	r2, r1
 80065c8:	ea43 0102 	orr.w	r1, r3, r2
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80065d4:	e005      	b.n	80065e2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80065de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	cff00000 	.word	0xcff00000

080065f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f043 0201 	orr.w	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f023 0201 	bic.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006652:	d901      	bls.n	8006658 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e01b      	b.n	8006690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	daf2      	bge.n	8006646 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	019b      	lsls	r3, r3, #6
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800667c:	d901      	bls.n	8006682 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e006      	b.n	8006690 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b20      	cmp	r3, #32
 800668c:	d0f0      	beq.n	8006670 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066b4:	d901      	bls.n	80066ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e018      	b.n	80066ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	daf2      	bge.n	80066a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2210      	movs	r2, #16
 80066ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066d8:	d901      	bls.n	80066de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e006      	b.n	80066ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d0f0      	beq.n	80066cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b08b      	sub	sp, #44	@ 0x2c
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	089b      	lsrs	r3, r3, #2
 8006712:	b29b      	uxth	r3, r3
 8006714:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	e014      	b.n	800674e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	3301      	adds	r3, #1
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	3301      	adds	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	3301      	adds	r3, #1
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	3301      	adds	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	3301      	adds	r3, #1
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	6a3a      	ldr	r2, [r7, #32]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	429a      	cmp	r2, r3
 8006754:	d3e6      	bcc.n	8006724 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006756:	8bfb      	ldrh	r3, [r7, #30]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01e      	beq.n	800679a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006766:	461a      	mov	r2, r3
 8006768:	f107 0310 	add.w	r3, r7, #16
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	b2db      	uxtb	r3, r3
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
 800677c:	b2da      	uxtb	r2, r3
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	701a      	strb	r2, [r3, #0]
      i++;
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	3301      	adds	r3, #1
 8006786:	623b      	str	r3, [r7, #32]
      pDest++;
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	3301      	adds	r3, #1
 800678c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800678e:	8bfb      	ldrh	r3, [r7, #30]
 8006790:	3b01      	subs	r3, #1
 8006792:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006794:	8bfb      	ldrh	r3, [r7, #30]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1ea      	bne.n	8006770 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800679c:	4618      	mov	r0, r3
 800679e:	372c      	adds	r7, #44	@ 0x2c
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4013      	ands	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067c0:	68fb      	ldr	r3, [r7, #12]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006802:	68bb      	ldr	r3, [r7, #8]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	f003 0301 	and.w	r3, r3, #1
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006864:	4313      	orrs	r3, r2
 8006866:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d107      	bne.n	800687e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006874:	461a      	mov	r2, r3
 8006876:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800687a:	6053      	str	r3, [r2, #4]
 800687c:	e00c      	b.n	8006898 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d107      	bne.n	8006894 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800688a:	461a      	mov	r2, r3
 800688c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006890:	6053      	str	r3, [r2, #4]
 8006892:	e001      	b.n	8006898 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	b29b      	uxth	r3, r3
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b089      	sub	sp, #36	@ 0x24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	0c9b      	lsrs	r3, r3, #18
 80068f0:	f003 0303 	and.w	r3, r3, #3
 80068f4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	0fdb      	lsrs	r3, r3, #31
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	0fdb      	lsrs	r3, r3, #31
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b20      	cmp	r3, #32
 800692c:	d10d      	bne.n	800694a <USB_HC_Halt+0x82>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <USB_HC_Halt+0x82>
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d002      	beq.n	8006946 <USB_HC_Halt+0x7e>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b03      	cmp	r3, #3
 8006944:	d101      	bne.n	800694a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e0d8      	b.n	8006afc <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <USB_HC_Halt+0x8e>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d173      	bne.n	8006a3e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	440a      	add	r2, r1
 800696c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006970:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006974:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d14a      	bne.n	8006a18 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d133      	bne.n	80069f6 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069da:	d82e      	bhi.n	8006a3a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069f2:	d0ec      	beq.n	80069ce <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069f4:	e081      	b.n	8006afa <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a16:	e070      	b.n	8006afa <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a38:	e05f      	b.n	8006afa <USB_HC_Halt+0x232>
            break;
 8006a3a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a3c:	e05d      	b.n	8006afa <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a5c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d133      	bne.n	8006ad6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a8c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aa8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006aac:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006aba:	d81d      	bhi.n	8006af8 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ace:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ad2:	d0ec      	beq.n	8006aae <USB_HC_Halt+0x1e6>
 8006ad4:	e011      	b.n	8006afa <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006af0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e000      	b.n	8006afa <USB_HC_Halt+0x232>
          break;
 8006af8:	bf00      	nop
    }
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3724      	adds	r7, #36	@ 0x24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff fd7a 	bl	8006616 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b22:	2110      	movs	r1, #16
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fd87 	bl	8006638 <USB_FlushTxFifo>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff fdb1 	bl	800669c <USB_FlushRxFifo>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	e01f      	b.n	8006b8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7e:	461a      	mov	r2, r3
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	3301      	adds	r3, #1
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b0f      	cmp	r3, #15
 8006b8e:	d9dc      	bls.n	8006b4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b90:	2300      	movs	r3, #0
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	e034      	b.n	8006c00 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bca:	461a      	mov	r2, r3
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bdc:	d80c      	bhi.n	8006bf8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bf4:	d0ec      	beq.n	8006bd0 <USB_StopHost+0xc8>
 8006bf6:	e000      	b.n	8006bfa <USB_StopHost+0xf2>
        break;
 8006bf8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	61bb      	str	r3, [r7, #24]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b0f      	cmp	r3, #15
 8006c04:	d9c7      	bls.n	8006b96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff fce9 	bl	80065f4 <USB_EnableGlobalInt>

  return ret;
 8006c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f804 	bl	8006c50 <USBH_HandleSof>
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b0b      	cmp	r3, #11
 8006c60:	d10a      	bne.n	8006c78 <USBH_HandleSof+0x28>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
  }
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006c90:	bf00      	nop
}
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006cac:	bf00      	nop
}
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f883 	bl	8006e12 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	791b      	ldrb	r3, [r3, #4]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f80b 	bl	8006d2e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	795b      	ldrb	r3, [r3, #5]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f805 	bl	8006d2e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	2b0f      	cmp	r3, #15
 8006d3e:	d80d      	bhi.n	8006d5c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	33e0      	adds	r3, #224	@ 0xe0
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	33e0      	adds	r3, #224	@ 0xe0
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff ff57 	bl	8006c2c <USBH_LL_IncTimer>
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff ff8f 	bl	8006cb8 <USBH_LL_Connect>
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ff98 	bl	8006ce6 <USBH_LL_Disconnect>
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	70fb      	strb	r3, [r7, #3]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff ff49 	bl	8006c80 <USBH_LL_PortEnabled>
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff ff49 	bl	8006c9c <USBH_LL_PortDisabled>
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fc f914 	bl	8003056 <HAL_HCD_Stop>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 f807 	bl	8006e48 <USBH_Get_USB_Status>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d817      	bhi.n	8006e8c <USBH_Get_USB_Status+0x44>
 8006e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <USBH_Get_USB_Status+0x1c>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006e7b 	.word	0x08006e7b
 8006e6c:	08006e81 	.word	0x08006e81
 8006e70:	08006e87 	.word	0x08006e87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
    break;
 8006e78:	e00b      	b.n	8006e92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e7e:	e008      	b.n	8006e92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
    break;
 8006e84:	e005      	b.n	8006e92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006e86:	2302      	movs	r3, #2
 8006e88:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8a:	e002      	b.n	8006e92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e90:	bf00      	nop
  }
  return usb_status;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <memset>:
 8006ea0:	4402      	add	r2, r0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d100      	bne.n	8006eaa <memset+0xa>
 8006ea8:	4770      	bx	lr
 8006eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8006eae:	e7f9      	b.n	8006ea4 <memset+0x4>

08006eb0 <__libc_init_array>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ee8 <__libc_init_array+0x38>)
 8006eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8006eec <__libc_init_array+0x3c>)
 8006eb6:	1b64      	subs	r4, r4, r5
 8006eb8:	10a4      	asrs	r4, r4, #2
 8006eba:	2600      	movs	r6, #0
 8006ebc:	42a6      	cmp	r6, r4
 8006ebe:	d109      	bne.n	8006ed4 <__libc_init_array+0x24>
 8006ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ef0 <__libc_init_array+0x40>)
 8006ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ef4 <__libc_init_array+0x44>)
 8006ec4:	f000 f818 	bl	8006ef8 <_init>
 8006ec8:	1b64      	subs	r4, r4, r5
 8006eca:	10a4      	asrs	r4, r4, #2
 8006ecc:	2600      	movs	r6, #0
 8006ece:	42a6      	cmp	r6, r4
 8006ed0:	d105      	bne.n	8006ede <__libc_init_array+0x2e>
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed8:	4798      	blx	r3
 8006eda:	3601      	adds	r6, #1
 8006edc:	e7ee      	b.n	8006ebc <__libc_init_array+0xc>
 8006ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee2:	4798      	blx	r3
 8006ee4:	3601      	adds	r6, #1
 8006ee6:	e7f2      	b.n	8006ece <__libc_init_array+0x1e>
 8006ee8:	08008e5c 	.word	0x08008e5c
 8006eec:	08008e5c 	.word	0x08008e5c
 8006ef0:	08008e5c 	.word	0x08008e5c
 8006ef4:	08008e60 	.word	0x08008e60

08006ef8 <_init>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr

08006f04 <_fini>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr
