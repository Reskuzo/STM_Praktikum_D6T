
STM_Praktikum_D6T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f44  080095e0  080095e0  0000a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b524  0800b524  0000d094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b524  0800b524  0000c524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b52c  0800b52c  0000d094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b52c  0800b52c  0000c52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b530  0800b530  0000c530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800b534  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000094  0800b5c8  0000d094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  0800b5c8  0000d8e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018466  00000000  00000000  0000d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040dd  00000000  00000000  0002552a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00029608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7d  00000000  00000000  0002a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024da2  00000000  00000000  0002b7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdea  00000000  00000000  0005054f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd931  00000000  00000000  0006d339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ac6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd0  00000000  00000000  0013acb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0013fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000094 	.word	0x20000094
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080095c8 	.word	0x080095c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000098 	.word	0x20000098
 8000200:	080095c8 	.word	0x080095c8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <d6t_reading_to_lcd>:
#include "render.h"
#include "communication.h"



static void d6t_reading_to_lcd(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	f5ad 5dc0 	sub.w	sp, sp, #6144	@ 0x1800
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	/// set configuration
	BSP_LCD_Init();
 80004fe:	f001 ffa9 	bl	8002454 <BSP_LCD_Init>
	BSP_LCD_Clear(0xffff);
 8000502:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000506:	f002 f86b 	bl	80025e0 <BSP_LCD_Clear>
	// create buffer for temperature values (raw, processed)
	uint8_t buffer[TEMP_VALUE_COUNT*2 + 3];
	int temp[TEMP_VALUE_COUNT+1];

	while (1){
		 read_sensor_data(buffer);
 800050a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800050e:	f103 0304 	add.w	r3, r3, #4
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fbf2 	bl	8000cfc <read_sensor_data>
	     sensor_data_to_temperatures(buffer, temp);
 8000518:	f107 0308 	add.w	r3, r7, #8
 800051c:	3b08      	subs	r3, #8
 800051e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000522:	f102 0204 	add.w	r2, r2, #4
 8000526:	4619      	mov	r1, r3
 8000528:	4610      	mov	r0, r2
 800052a:	f000 fc39 	bl	8000da0 <sensor_data_to_temperatures>
	     display_data_on_lcd(temp);
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	3b08      	subs	r3, #8
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fd59 	bl	8000fec <display_data_on_lcd>
		 read_sensor_data(buffer);
 800053a:	bf00      	nop
 800053c:	e7e5      	b.n	800050a <d6t_reading_to_lcd+0x16>
	...

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f002 f95e 	bl	8002804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f810 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f8cc 	bl	80006e8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000550:	f000 f882 	bl	8000658 <MX_I2C2_Init>
  HAL_I2C_Init(&hi2c2);
 8000554:	4804      	ldr	r0, [pc, #16]	@ (8000568 <main+0x28>)
 8000556:	f004 fceb 	bl	8004f30 <HAL_I2C_Init>
  MX_IWDG_Init();
 800055a:	f000 f8ab 	bl	80006b4 <MX_IWDG_Init>

  /* USER CODE BEGIN 2 */
  d6t_reading_to_lcd();
 800055e:	f7ff ffc9 	bl	80004f4 <d6t_reading_to_lcd>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000562:	f008 fe51 	bl	8009208 <MX_USB_HOST_Process>
 8000566:	e7fc      	b.n	8000562 <main+0x22>
 8000568:	200000b0 	.word	0x200000b0

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	@ 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 fff8 	bl	8009570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b2e      	ldr	r3, [pc, #184]	@ (8000650 <SystemClock_Config+0xe4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a2d      	ldr	r2, [pc, #180]	@ (8000650 <SystemClock_Config+0xe4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000650 <SystemClock_Config+0xe4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b28      	ldr	r3, [pc, #160]	@ (8000654 <SystemClock_Config+0xe8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a27      	ldr	r2, [pc, #156]	@ (8000654 <SystemClock_Config+0xe8>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <SystemClock_Config+0xe8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80005c8:	230b      	movs	r3, #11
 80005ca:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2310      	movs	r3, #16
 80005d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005ec:	2348      	movs	r3, #72	@ 0x48
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f4:	2303      	movs	r3, #3
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4618      	mov	r0, r3
 8000602:	f005 ff55 	bl	80064b0 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800060c:	f000 fa3a 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f005 fccb 	bl	8005fc8 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000638:	f000 fa24 	bl	8000a84 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	2000      	movs	r0, #0
 8000642:	f005 fda7 	bl	8006194 <HAL_RCC_MCOConfig>
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	@ 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_I2C2_Init+0x50>)
 800065e:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <MX_I2C2_Init+0x54>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_I2C2_Init+0x50>)
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_I2C2_Init+0x58>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_I2C2_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_I2C2_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_I2C2_Init+0x50>)
 8000676:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800067a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <MX_I2C2_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_I2C2_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <MX_I2C2_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_I2C2_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <MX_I2C2_Init+0x50>)
 8000696:	f004 fc4b 	bl	8004f30 <HAL_I2C_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f000 f9f0 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000b0 	.word	0x200000b0
 80006ac:	40005800 	.word	0x40005800
 80006b0:	000186a0 	.word	0x000186a0

080006b4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_IWDG_Init+0x2c>)
 80006ba:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <MX_IWDG_Init+0x30>)
 80006bc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <MX_IWDG_Init+0x2c>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_IWDG_Init+0x2c>)
 80006c6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80006ca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <MX_IWDG_Init+0x2c>)
 80006ce:	f005 fc29 	bl	8005f24 <HAL_IWDG_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80006d8:	f000 f9d4 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000104 	.word	0x20000104
 80006e4:	40003000 	.word	0x40003000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	@ 0x38
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
 8000702:	4bb2      	ldr	r3, [pc, #712]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4ab1      	ldr	r2, [pc, #708]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4baf      	ldr	r3, [pc, #700]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	623b      	str	r3, [r7, #32]
 8000718:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	4bab      	ldr	r3, [pc, #684]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4aaa      	ldr	r2, [pc, #680]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4ba8      	ldr	r3, [pc, #672]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	61fb      	str	r3, [r7, #28]
 8000734:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	4ba4      	ldr	r3, [pc, #656]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4aa3      	ldr	r2, [pc, #652]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4ba1      	ldr	r3, [pc, #644]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0320 	and.w	r3, r3, #32
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	4b9d      	ldr	r3, [pc, #628]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a9c      	ldr	r2, [pc, #624]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b9a      	ldr	r3, [pc, #616]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b96      	ldr	r3, [pc, #600]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a95      	ldr	r2, [pc, #596]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b93      	ldr	r3, [pc, #588]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b8f      	ldr	r3, [pc, #572]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a8e      	ldr	r2, [pc, #568]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b8c      	ldr	r3, [pc, #560]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b88      	ldr	r3, [pc, #544]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a87      	ldr	r2, [pc, #540]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b85      	ldr	r3, [pc, #532]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b81      	ldr	r3, [pc, #516]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a80      	ldr	r2, [pc, #512]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b7e      	ldr	r3, [pc, #504]	@ (80009cc <MX_GPIO_Init+0x2e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	210f      	movs	r1, #15
 80007e2:	487b      	ldr	r0, [pc, #492]	@ (80009d0 <MX_GPIO_Init+0x2e8>)
 80007e4:	f002 fb1e 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80007ee:	4879      	ldr	r0, [pc, #484]	@ (80009d4 <MX_GPIO_Init+0x2ec>)
 80007f0:	f002 fb18 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	4877      	ldr	r0, [pc, #476]	@ (80009d8 <MX_GPIO_Init+0x2f0>)
 80007fc:	f002 fb12 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000806:	4875      	ldr	r0, [pc, #468]	@ (80009dc <MX_GPIO_Init+0x2f4>)
 8000808:	f002 fb0c 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 800080c:	230f      	movs	r3, #15
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000810:	2311      	movs	r3, #17
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	486b      	ldr	r0, [pc, #428]	@ (80009d0 <MX_GPIO_Init+0x2e8>)
 8000824:	f002 f96a 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 8000828:	2310      	movs	r3, #16
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000838:	2308      	movs	r3, #8
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4863      	ldr	r0, [pc, #396]	@ (80009d0 <MX_GPIO_Init+0x2e8>)
 8000844:	f002 f95a 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 8000848:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	485c      	ldr	r0, [pc, #368]	@ (80009d4 <MX_GPIO_Init+0x2ec>)
 8000862:	f002 f94b 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO3_Pin QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8000866:	23c0      	movs	r3, #192	@ 0xc0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000876:	2309      	movs	r3, #9
 8000878:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	4619      	mov	r1, r3
 8000880:	4854      	ldr	r0, [pc, #336]	@ (80009d4 <MX_GPIO_Init+0x2ec>)
 8000882:	f002 f93b 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8000886:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000898:	230a      	movs	r3, #10
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800089c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a0:	4619      	mov	r1, r3
 80008a2:	484c      	ldr	r0, [pc, #304]	@ (80009d4 <MX_GPIO_Init+0x2ec>)
 80008a4:	f002 f92a 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008b8:	2308      	movs	r3, #8
 80008ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	4847      	ldr	r0, [pc, #284]	@ (80009e0 <MX_GPIO_Init+0x2f8>)
 80008c4:	f002 f91a 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80008c8:	2301      	movs	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4841      	ldr	r0, [pc, #260]	@ (80009e4 <MX_GPIO_Init+0x2fc>)
 80008de:	f002 f90d 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 80008e2:	2302      	movs	r3, #2
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008f2:	2308      	movs	r3, #8
 80008f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	483a      	ldr	r0, [pc, #232]	@ (80009e8 <MX_GPIO_Init+0x300>)
 80008fe:	f002 f8fd 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000902:	2304      	movs	r3, #4
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000912:	2309      	movs	r3, #9
 8000914:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4832      	ldr	r0, [pc, #200]	@ (80009e8 <MX_GPIO_Init+0x300>)
 800091e:	f002 f8ed 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 8000922:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	4827      	ldr	r0, [pc, #156]	@ (80009d4 <MX_GPIO_Init+0x2ec>)
 8000938:	f002 f8e0 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 800093c:	2393      	movs	r3, #147	@ 0x93
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	4823      	ldr	r0, [pc, #140]	@ (80009dc <MX_GPIO_Init+0x2f4>)
 8000950:	f002 f8d4 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 8000954:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000966:	2305      	movs	r3, #5
 8000968:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	481d      	ldr	r0, [pc, #116]	@ (80009e8 <MX_GPIO_Init+0x300>)
 8000972:	f002 f8c3 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000976:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	4812      	ldr	r0, [pc, #72]	@ (80009d8 <MX_GPIO_Init+0x2f0>)
 8000990:	f002 f8b4 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 8000994:	2324      	movs	r3, #36	@ 0x24
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000998:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_GPIO_Init+0x2f4>)
 80009aa:	f002 f8a7 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80009ae:	2340      	movs	r3, #64	@ 0x40
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009be:	230a      	movs	r3, #10
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	e010      	b.n	80009ec <MX_GPIO_Init+0x304>
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40021400 	.word	0x40021400
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400
 80009ec:	4821      	ldr	r0, [pc, #132]	@ (8000a74 <MX_GPIO_Init+0x38c>)
 80009ee:	f002 f885 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 80009f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009f8:	2311      	movs	r3, #17
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481a      	ldr	r0, [pc, #104]	@ (8000a74 <MX_GPIO_Init+0x38c>)
 8000a0c:	f002 f876 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 8000a10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <MX_GPIO_Init+0x390>)
 8000a2e:	f002 f865 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <MX_GPIO_Init+0x394>)
 8000a46:	f002 f859 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a4a:	23c0      	movs	r3, #192	@ 0xc0
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4e:	2312      	movs	r3, #18
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_GPIO_Init+0x398>)
 8000a66:	f002 f849 	bl	8002afc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3738      	adds	r7, #56	@ 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	40020400 	.word	0x40020400

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <HAL_I2C_MspInit+0xa8>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d13d      	bne.n	8000b7e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <HAL_I2C_MspInit+0xac>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a20      	ldr	r2, [pc, #128]	@ (8000b8c <HAL_I2C_MspInit+0xac>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <HAL_I2C_MspInit+0xac>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b24:	2312      	movs	r3, #18
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b30:	2304      	movs	r3, #4
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <HAL_I2C_MspInit+0xb0>)
 8000b3c:	f001 ffde 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b46:	2312      	movs	r3, #18
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000b52:	2309      	movs	r3, #9
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <HAL_I2C_MspInit+0xb0>)
 8000b5e:	f001 ffcd 	bl	8002afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_I2C_MspInit+0xac>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_I2C_MspInit+0xac>)
 8000b6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_I2C_MspInit+0xac>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	@ 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40005800 	.word	0x40005800
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000ba8:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <HAL_FSMC_MspInit+0xa8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d140      	bne.n	8000c32 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <HAL_FSMC_MspInit+0xa8>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <HAL_FSMC_MspInit+0xac>)
 8000bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bbe:	4a20      	ldr	r2, [pc, #128]	@ (8000c40 <HAL_FSMC_MspInit+0xac>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <HAL_FSMC_MspInit+0xac>)
 8000bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = A0_Pin;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000be2:	230c      	movs	r3, #12
 8000be4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <HAL_FSMC_MspInit+0xb0>)
 8000bec:	f001 ff86 	bl	8002afc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000bf0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000bf4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c02:	230c      	movs	r3, #12
 8000c04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480f      	ldr	r0, [pc, #60]	@ (8000c48 <HAL_FSMC_MspInit+0xb4>)
 8000c0c:	f001 ff76 	bl	8002afc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000c10:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000c14:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c22:	230c      	movs	r3, #12
 8000c24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <HAL_FSMC_MspInit+0xb8>)
 8000c2c:	f001 ff66 	bl	8002afc <HAL_GPIO_Init>
 8000c30:	e000      	b.n	8000c34 <HAL_FSMC_MspInit+0xa0>
    return;
 8000c32:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000110 	.word	0x20000110
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000c58:	f7ff ff9c 	bl	8000b94 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f001 fdf5 	bl	80028a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <OTG_FS_IRQHandler+0x10>)
 8000cca:	f002 fb1b 	bl	8003304 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000508 	.word	0x20000508

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <read_sensor_data>:

/**
 * reads the raw temperature readings from the sensor into the readbuffer
 * Returns 0 if no sensor could be detected (else 1)
 */
int read_sensor_data(uint8_t* readbuffer){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	6078      	str	r0, [r7, #4]
	 /// Each temperature reading consists of 2 8-Bit value (LOW-/HIGH-bit)
	 /// Additionally one PTAT reading and one Checksuum value is transmitted
	 int size = TEMP_VALUE_COUNT * 2 + 3;
 8000d04:	f640 0303 	movw	r3, #2051	@ 0x803
 8000d08:	613b      	str	r3, [r7, #16]

	 /// Command for telling the sensor we want to read data
	 uint8_t cmd = 0x4c;
 8000d0a:	234c      	movs	r3, #76	@ 0x4c
 8000d0c:	73bb      	strb	r3, [r7, #14]

	 /// applying I2C settings to the external I2C port
	  HAL_StatusTypeDef status = HAL_I2C_Init(&hi2c2);
 8000d0e:	4822      	ldr	r0, [pc, #136]	@ (8000d98 <read_sensor_data+0x9c>)
 8000d10:	f004 f90e 	bl	8004f30 <HAL_I2C_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
	  HAL_IWDG_Refresh(&hiwdg);
 8000d18:	4820      	ldr	r0, [pc, #128]	@ (8000d9c <read_sensor_data+0xa0>)
 8000d1a:	f005 f945 	bl	8005fa8 <HAL_IWDG_Refresh>


	  int fails = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
	  do {
		  /// send command for preparing transmission
		  status = HAL_I2C_Master_Transmit(&hi2c2, 0x14, &cmd, 1, 100);
 8000d22:	f107 020e 	add.w	r2, r7, #14
 8000d26:	2364      	movs	r3, #100	@ 0x64
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	2114      	movs	r1, #20
 8000d2e:	481a      	ldr	r0, [pc, #104]	@ (8000d98 <read_sensor_data+0x9c>)
 8000d30:	f004 fa42 	bl	80051b8 <HAL_I2C_Master_Transmit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(10);
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f001 fdd5 	bl	80028e8 <HAL_Delay>

		  /// if the connection failed more than 10 times in a row, return connection lost
		  if (status != HAL_OK && fails++ > CONNECTION_TRYS) return NO_CONNECTION;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <read_sensor_data+0x56>
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	617a      	str	r2, [r7, #20]
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	dd01      	ble.n	8000d52 <read_sensor_data+0x56>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e01e      	b.n	8000d90 <read_sensor_data+0x94>

		  /// receive the data from Sensor at port 0x14
		  status = HAL_I2C_Master_Receive(&hi2c2, 0x14, readbuffer, size, HAL_MAX_DELAY);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	2114      	movs	r1, #20
 8000d60:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <read_sensor_data+0x9c>)
 8000d62:	f004 fb27 	bl	80053b4 <HAL_I2C_Master_Receive>
 8000d66:	4603      	mov	r3, r0
 8000d68:	73fb      	strb	r3, [r7, #15]

		  /// if everything was successful, end the function else wait and try again
		  if (status == HAL_OK && !(readbuffer[5] == 0xff && readbuffer[6] == 0xff)) break;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d109      	bne.n	8000d84 <read_sensor_data+0x88>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3305      	adds	r3, #5
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2bff      	cmp	r3, #255	@ 0xff
 8000d78:	d109      	bne.n	8000d8e <read_sensor_data+0x92>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3306      	adds	r3, #6
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2bff      	cmp	r3, #255	@ 0xff
 8000d82:	d104      	bne.n	8000d8e <read_sensor_data+0x92>
		  HAL_Delay(550);
 8000d84:	f240 2026 	movw	r0, #550	@ 0x226
 8000d88:	f001 fdae 	bl	80028e8 <HAL_Delay>
		  status = HAL_I2C_Master_Transmit(&hi2c2, 0x14, &cmd, 1, 100);
 8000d8c:	e7c9      	b.n	8000d22 <read_sensor_data+0x26>
	  } while(1);
	  return SUCCESS;
 8000d8e:	2301      	movs	r3, #1
  };
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000b0 	.word	0x200000b0
 8000d9c:	20000104 	.word	0x20000104

08000da0 <sensor_data_to_temperatures>:

/// converts the raw sensor readings into sensor data in 10*degrees celsius
int sensor_data_to_temperatures(uint8_t* sensor_data, int* temperatures){
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	/// each reading consists of a high reading and a low reading,
	/// with high reading * 256 (max value 4 Bit) + low bits = temperature * 10
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	e016      	b.n	8000dde <sensor_data_to_temperatures+0x3e>
	 	  temperatures[temp_index/2] = sensor_data[temp_index+1] * 256 + sensor_data[temp_index];
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3301      	adds	r3, #1
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	021a      	lsls	r2, r3, #8
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	0fd9      	lsrs	r1, r3, #31
 8000dca:	440b      	add	r3, r1
 8000dcc:	105b      	asrs	r3, r3, #1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	6839      	ldr	r1, [r7, #0]
 8000dd2:	440b      	add	r3, r1
 8000dd4:	4402      	add	r2, r0
 8000dd6:	601a      	str	r2, [r3, #0]
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f640 0201 	movw	r2, #2049	@ 0x801
 8000de4:	4293      	cmp	r3, r2
 8000de6:	dde3      	ble.n	8000db0 <sensor_data_to_temperatures+0x10>
	   }
	   return SUCCESS;
 8000de8:	2301      	movs	r3, #1
};
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <pick_gradient_color>:
#include "render.h"


// perform linear uint16_terpolation between two colors
// source stackoverflow (with own adjustments, so no GPL License  needed)
uint16_t pick_gradient_color(uint16_t color1, uint16_t color2, float temperature_gradient) {
 8000df6:	b480      	push	{r7}
 8000df8:	b089      	sub	sp, #36	@ 0x24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	460a      	mov	r2, r1
 8000e00:	ed87 0a00 	vstr	s0, [r7]
 8000e04:	80fb      	strh	r3, [r7, #6]
 8000e06:	4613      	mov	r3, r2
 8000e08:	80bb      	strh	r3, [r7, #4]

	/// convert rgb uint16_to rgb565:
	/// as in rgb the always 2 digit are one color #rrggbb,
	// but here the second and third bit overlapp from r-g and g-b
	uint16_t r1 = (color1 >> 11) & 0x1F;
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	0adb      	lsrs	r3, r3, #11
 8000e0e:	83fb      	strh	r3, [r7, #30]
    uint16_t g1 = (color1 >> 5) & 0x3F;
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e1a:	83bb      	strh	r3, [r7, #28]
    uint16_t b1 = color1 & 0x1F;
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	837b      	strh	r3, [r7, #26]

    uint16_t r2 = (color2 >> 11) & 0x1F;
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	0adb      	lsrs	r3, r3, #11
 8000e28:	833b      	strh	r3, [r7, #24]
    uint16_t g2 = (color2 >> 5) & 0x3F;
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	095b      	lsrs	r3, r3, #5
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e34:	82fb      	strh	r3, [r7, #22]
    uint16_t b2 = color2 & 0x1F;
 8000e36:	88bb      	ldrh	r3, [r7, #4]
 8000e38:	f003 031f 	and.w	r3, r3, #31
 8000e3c:	82bb      	strh	r3, [r7, #20]

    /// apply ratios between the two colors by using the temperature gradient
    uint16_t r = (uint16_t)(r1 + temperature_gradient * (r2 - r1));
 8000e3e:	8bfb      	ldrh	r3, [r7, #30]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e48:	8b3a      	ldrh	r2, [r7, #24]
 8000e4a:	8bfb      	ldrh	r3, [r7, #30]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e56:	edd7 7a00 	vldr	s15, [r7]
 8000e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e66:	ee17 3a90 	vmov	r3, s15
 8000e6a:	827b      	strh	r3, [r7, #18]
    uint16_t g = (uint16_t)(g1 + temperature_gradient * (g2 - g1));
 8000e6c:	8bbb      	ldrh	r3, [r7, #28]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e76:	8afa      	ldrh	r2, [r7, #22]
 8000e78:	8bbb      	ldrh	r3, [r7, #28]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e84:	edd7 7a00 	vldr	s15, [r7]
 8000e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e94:	ee17 3a90 	vmov	r3, s15
 8000e98:	823b      	strh	r3, [r7, #16]
    uint16_t b = (uint16_t)(b1 + temperature_gradient * (b2 - b1));
 8000e9a:	8b7b      	ldrh	r3, [r7, #26]
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea4:	8aba      	ldrh	r2, [r7, #20]
 8000ea6:	8b7b      	ldrh	r3, [r7, #26]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eb2:	edd7 7a00 	vldr	s15, [r7]
 8000eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec2:	ee17 3a90 	vmov	r3, s15
 8000ec6:	81fb      	strh	r3, [r7, #14]

    return ((r & 0x1F) << 11) | ((g & 0x3F) << 5) | (b & 0x1F);
 8000ec8:	8a7b      	ldrh	r3, [r7, #18]
 8000eca:	02db      	lsls	r3, r3, #11
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	8a3b      	ldrh	r3, [r7, #16]
 8000ed0:	015b      	lsls	r3, r3, #5
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b29b      	uxth	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <convert_temp_to_color>:

/// convert the temperature values of the sensor [-10,70] to a color in the spectrum
///[-10,22]-> [blue, white],
///[ 22,36]-> [white, orange], (high change in color as its the mainly used area)
///[ 36,70]-> [orange, red]
uint16_t convert_temp_to_color(float temp) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
	// the sensor can operate with temperatures in [-10, 70]

    if (temp <= -10)
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8000f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	d801      	bhi.n	8000f1c <convert_temp_to_color+0x20>
        return DARK_BLUE;
 8000f18:	231f      	movs	r3, #31
 8000f1a:	e05d      	b.n	8000fd8 <convert_temp_to_color+0xdc>

    if (temp >= 70)
 8000f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f20:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000fe0 <convert_temp_to_color+0xe4>
 8000f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2c:	db02      	blt.n	8000f34 <convert_temp_to_color+0x38>
    	return DARK_RED;
 8000f2e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f32:	e051      	b.n	8000fd8 <convert_temp_to_color+0xdc>

    if (temp < ROOM_TEMP) {
 8000f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f38:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8000f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d514      	bpl.n	8000f70 <convert_temp_to_color+0x74>
    	// map temperature from ]-10, 22[ to [0, 1] for the blue to white gradient
    	float temp_gradient = (temp + 10.f) / (ROOM_TEMP+10.f);
 8000f46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000f52:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000fe4 <convert_temp_to_color+0xe8>
 8000f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5a:	edc7 7a03 	vstr	s15, [r7, #12]
    	return pick_gradient_color(DARK_BLUE, WHITE, temp_gradient);
 8000f5e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f62:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f66:	201f      	movs	r0, #31
 8000f68:	f7ff ff45 	bl	8000df6 <pick_gradient_color>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	e033      	b.n	8000fd8 <convert_temp_to_color+0xdc>
    }

    if (temp < BODY_TEMP) {
 8000f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f74:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000fe4 <convert_temp_to_color+0xe8>
 8000f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d515      	bpl.n	8000fae <convert_temp_to_color+0xb2>
        	// map temperature from [-22, 36[ to [0, 1] for the blue to white gradient
        	float temp_gradient = (temp - ROOM_TEMP) / (BODY_TEMP-ROOM_TEMP);
 8000f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f86:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8000f8a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f8e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f96:	edc7 7a04 	vstr	s15, [r7, #16]
        	return pick_gradient_color(WHITE, ORANGE, temp_gradient);
 8000f9a:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f9e:	f64f 4147 	movw	r1, #64583	@ 0xfc47
 8000fa2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000fa6:	f7ff ff26 	bl	8000df6 <pick_gradient_color>
 8000faa:	4603      	mov	r3, r0
 8000fac:	e014      	b.n	8000fd8 <convert_temp_to_color+0xdc>
        }


    // map temperature from [36, 70] to [0, 1] for the orange to red gradient
    float temp_gradient = (temp - BODY_TEMP) / (70.f-BODY_TEMP);
 8000fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000fe4 <convert_temp_to_color+0xe8>
 8000fb6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000fba:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000fe8 <convert_temp_to_color+0xec>
 8000fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc2:	edc7 7a05 	vstr	s15, [r7, #20]
    return pick_gradient_color(ORANGE, DARK_RED, temp_gradient);
 8000fc6:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fca:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000fce:	f64f 4047 	movw	r0, #64583	@ 0xfc47
 8000fd2:	f7ff ff10 	bl	8000df6 <pick_gradient_color>
 8000fd6:	4603      	mov	r3, r0

}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	428c0000 	.word	0x428c0000
 8000fe4:	42100000 	.word	0x42100000
 8000fe8:	42080000 	.word	0x42080000

08000fec <display_data_on_lcd>:

/// display the temperature values as an image on the LCD screen
/// make sure to initiate BSP_lcd before calling
void display_data_on_lcd(int* temperatures){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	  /// get params of the screen
	  int width = BSP_LCD_GetXSize()+10; // +10 for rounding errors
 8000ff4:	f001 fabc 	bl	8002570 <BSP_LCD_GetXSize>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	330a      	adds	r3, #10
 8000ffc:	617b      	str	r3, [r7, #20]
	  int height = BSP_LCD_GetYSize() +10;
 8000ffe:	f001 fac3 	bl	8002588 <BSP_LCD_GetYSize>
 8001002:	4603      	mov	r3, r0
 8001004:	330a      	adds	r3, #10
 8001006:	613b      	str	r3, [r7, #16]

	  /// calculate Height / with of cells

	  int cell_width = width / H_CELL_COUNT;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da00      	bge.n	8001010 <display_data_on_lcd+0x24>
 800100e:	331f      	adds	r3, #31
 8001010:	115b      	asrs	r3, r3, #5
 8001012:	60fb      	str	r3, [r7, #12]
	  int cell_hight = height/ V_CELL_COUNT;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	da00      	bge.n	800101c <display_data_on_lcd+0x30>
 800101a:	331f      	adds	r3, #31
 800101c:	115b      	asrs	r3, r3, #5
 800101e:	60bb      	str	r3, [r7, #8]

	  /// iterate over rows/columns
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	e03c      	b.n	80010a0 <display_data_on_lcd+0xb4>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	e033      	b.n	8001094 <display_data_on_lcd+0xa8>
			  BSP_LCD_SetTextColor(
					  convert_temp_to_color(
							  /// +1 because of the PTAT temperature value at temperatures[0]
							  (float)temperatures[row * 32 + col+1] / 10.f
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	015a      	lsls	r2, r3, #5
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	4413      	add	r3, r2
 8001034:	3301      	adds	r3, #1
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			  BSP_LCD_SetTextColor(
 8001046:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800104a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800104e:	eeb0 0a47 	vmov.f32	s0, s14
 8001052:	f7ff ff53 	bl	8000efc <convert_temp_to_color>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	f001 faa1 	bl	80025a0 <BSP_LCD_SetTextColor>
										   )
							  );
			  BSP_LCD_FillRect(col * cell_width+10, row * cell_hight+10, cell_width, cell_hight);
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	b29a      	uxth	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	b29b      	uxth	r3, r3
 8001066:	fb12 f303 	smulbb	r3, r2, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	330a      	adds	r3, #10
 800106e:	b298      	uxth	r0, r3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	b29a      	uxth	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	b29b      	uxth	r3, r3
 8001078:	fb12 f303 	smulbb	r3, r2, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	330a      	adds	r3, #10
 8001080:	b299      	uxth	r1, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	b29a      	uxth	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	b29b      	uxth	r3, r3
 800108a:	f001 fb35 	bl	80026f8 <BSP_LCD_FillRect>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	3301      	adds	r3, #1
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b1f      	cmp	r3, #31
 8001098:	ddc8      	ble.n	800102c <display_data_on_lcd+0x40>
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b1f      	cmp	r3, #31
 80010a4:	ddbf      	ble.n	8001026 <display_data_on_lcd+0x3a>
			  // +20 = centering as the screen doesn't start by 0 and its better with a border on every side
		  }
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010b4:	f7ff fe10 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	@ (80010fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f008 fa4f 	bl	8009580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fa2d 	bl	8000540 <main>
  bx  lr    
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010e8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80010f4:	0800b534 	.word	0x0800b534
  ldr r2, =_sbss
 80010f8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80010fc:	200008e8 	.word	0x200008e8

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>

08001102 <ls016b8uy_Init>:
  * @brief  Initialize the LS016B8UY LCD Component.
  * @param  None
  * @retval None
  */
void ls016b8uy_Init(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
  uint8_t   parameter[4];

  /* Initialize LS016B8UY low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001108:	f001 f972 	bl	80023f0 <LCD_IO_Init>
  
  parameter[0] = 0x00;     /* VSYNC output */
 800110c:	2300      	movs	r3, #0
 800110e:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_VSYNC_OUTPUT, parameter, 1);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	2035      	movs	r0, #53	@ 0x35
 8001118:	f000 f9a6 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x06;     /* 18 bits color mode */
 800111c:	2306      	movs	r3, #6
 800111e:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_COLOR_MODE, parameter, 1);
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	203a      	movs	r0, #58	@ 0x3a
 8001128:	f000 f99e 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x01;     /* Panel setting command <No.1 UN-Lock> */
 800112c:	2301      	movs	r3, #1
 800112e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0xFE;
 8001130:	23fe      	movs	r3, #254	@ 0xfe
 8001132:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_1, parameter, 2);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2202      	movs	r2, #2
 8001138:	4619      	mov	r1, r3
 800113a:	20b0      	movs	r0, #176	@ 0xb0
 800113c:	f000 f994 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0xDE;     /* Panel setting command <No.2 UN-Lock> */
 8001140:	23de      	movs	r3, #222	@ 0xde
 8001142:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x21;
 8001144:	2321      	movs	r3, #33	@ 0x21
 8001146:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_2, parameter, 2);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2202      	movs	r2, #2
 800114c:	4619      	mov	r1, r3
 800114e:	20b1      	movs	r0, #177	@ 0xb1
 8001150:	f000 f98a 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* V-Porch setting */
 8001154:	2305      	movs	r3, #5
 8001156:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 8001158:	2333      	movs	r3, #51	@ 0x33
 800115a:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_V_PORCH, parameter, 2);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2202      	movs	r2, #2
 8001160:	4619      	mov	r1, r3
 8001162:	20b7      	movs	r0, #183	@ 0xb7
 8001164:	f000 f980 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* Idle mode V-Porch setting */
 8001168:	2305      	movs	r3, #5
 800116a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 800116c:	2333      	movs	r3, #51	@ 0x33
 800116e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_IDLE_V_PORCH, parameter, 2);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2202      	movs	r2, #2
 8001174:	4619      	mov	r1, r3
 8001176:	20b8      	movs	r0, #184	@ 0xb8
 8001178:	f000 f976 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x04;     /* panel timing setting */
 800117c:	2304      	movs	r3, #4
 800117e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x03;
 8001180:	2303      	movs	r3, #3
 8001182:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_1, parameter, 2);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2202      	movs	r2, #2
 8001188:	4619      	mov	r1, r3
 800118a:	20c8      	movs	r0, #200	@ 0xc8
 800118c:	f000 f96c 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x5E;     /* panel timing setting */
 8001190:	235e      	movs	r3, #94	@ 0x5e
 8001192:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x08;
 8001194:	2308      	movs	r3, #8
 8001196:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_2, parameter, 2);
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2202      	movs	r2, #2
 800119c:	4619      	mov	r1, r3
 800119e:	20c9      	movs	r0, #201	@ 0xc9
 80011a0:	f000 f962 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x0A;     /* panel timing setting */
 80011a4:	230a      	movs	r3, #10
 80011a6:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x0C;
 80011a8:	230c      	movs	r3, #12
 80011aa:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x02;
 80011ac:	2302      	movs	r3, #2
 80011ae:	71bb      	strb	r3, [r7, #6]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_3, parameter, 3);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2203      	movs	r2, #3
 80011b4:	4619      	mov	r1, r3
 80011b6:	20ca      	movs	r0, #202	@ 0xca
 80011b8:	f000 f956 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* panel timing setting */
 80011bc:	2303      	movs	r3, #3
 80011be:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x04;
 80011c0:	2304      	movs	r3, #4
 80011c2:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_4, parameter, 2);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2202      	movs	r2, #2
 80011c8:	4619      	mov	r1, r3
 80011ca:	20cc      	movs	r0, #204	@ 0xcc
 80011cc:	f000 f94c 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x0C;     /* panel power setting */
 80011d0:	230c      	movs	r3, #12
 80011d2:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_POWER, parameter, 1);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	20d0      	movs	r0, #208	@ 0xd0
 80011dc:	f000 f944 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x02;     /* Oscillator Setting = 2MHz */
 80011e0:	2302      	movs	r3, #2
 80011e2:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_OSCILLATOR, parameter, 1);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2201      	movs	r2, #1
 80011e8:	4619      	mov	r1, r3
 80011ea:	20b3      	movs	r0, #179	@ 0xb3
 80011ec:	f000 f93c 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x53;     /* GVDD = 4.76V setting */
 80011f0:	2353      	movs	r3, #83	@ 0x53
 80011f2:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_GVDD, parameter, 1);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2201      	movs	r2, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	20c0      	movs	r0, #192	@ 0xc0
 80011fc:	f000 f934 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Reload MTP After SLPOUT */
 8001200:	2300      	movs	r3, #0
 8001202:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x45;     /* VCOMH=3.76V */
 8001204:	2345      	movs	r3, #69	@ 0x45
 8001206:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_RELOAD_MTP_VCOMH, parameter, 2);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2202      	movs	r2, #2
 800120c:	4619      	mov	r1, r3
 800120e:	20c5      	movs	r0, #197	@ 0xc5
 8001210:	f000 f92a 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* OP-Amp Ability. (Normal) */
 8001214:	2303      	movs	r3, #3
 8001216:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x12;     /* Step-up Cycle for AVDD Booster Freq./4 */
 8001218:	2312      	movs	r3, #18
 800121a:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_OPAMP, parameter, 2);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2202      	movs	r2, #2
 8001220:	4619      	mov	r1, r3
 8001222:	20c2      	movs	r0, #194	@ 0xc2
 8001224:	f000 f920 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Tearing Effect Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
 8001228:	2300      	movs	r3, #0
 800122a:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_TEARING_EFFECT, parameter, 1);
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	20dd      	movs	r0, #221	@ 0xdd
 8001234:	f000 f918 	bl	8001468 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_LOCK, parameter, 0);   /* Panel setting command <Lock> */
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	20b4      	movs	r0, #180	@ 0xb4
 8001240:	f000 f912 	bl	8001468 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_OUT, parameter, 0);            /* Sleep Out Command */
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	2011      	movs	r0, #17
 800124c:	f000 f90c 	bl	8001468 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 8001250:	2096      	movs	r0, #150	@ 0x96
 8001252:	f001 f8f4 	bl	800243e <LCD_IO_Delay>

  parameter[0] = 0x00;     /* CASET */
 8001256:	2300      	movs	r3, #0
 8001258:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x1E;
 800125a:	231e      	movs	r3, #30
 800125c:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xD1;
 8001262:	23d1      	movs	r3, #209	@ 0xd1
 8001264:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2204      	movs	r2, #4
 800126a:	4619      	mov	r1, r3
 800126c:	202a      	movs	r0, #42	@ 0x2a
 800126e:	f000 f8fb 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 8001272:	2300      	movs	r3, #0
 8001274:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x00;
 8001276:	2300      	movs	r3, #0
 8001278:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xB3;
 800127e:	23b3      	movs	r3, #179	@ 0xb3
 8001280:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2204      	movs	r2, #4
 8001286:	4619      	mov	r1, r3
 8001288:	202b      	movs	r0, #43	@ 0x2b
 800128a:	f000 f8ed 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x83;     /* Normal display for Driver Down side */
 800128e:	2383      	movs	r3, #131	@ 0x83
 8001290:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_NORMAL_DISPLAY, parameter, 1);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2201      	movs	r2, #1
 8001296:	4619      	mov	r1, r3
 8001298:	2036      	movs	r0, #54	@ 0x36
 800129a:	f000 f8e5 	bl	8001468 <ls016b8uy_WriteReg>

  ls016b8uy_DisplayOn();   /* Display ON command */
 800129e:	f000 f804 	bl	80012aa <ls016b8uy_DisplayOn>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <ls016b8uy_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOn(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_ON, (uint8_t*)NULL, 0);    /* Display ON command */
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2029      	movs	r0, #41	@ 0x29
 80012b4:	f000 f8d8 	bl	8001468 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_IDLE_MODE_OFF, (uint8_t*)NULL, 0); /* Idle mode OFF command */
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2038      	movs	r0, #56	@ 0x38
 80012be:	f000 f8d3 	bl	8001468 <ls016b8uy_WriteReg>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <ls016b8uy_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOff(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_OFF, (uint8_t*)NULL, 0);   /* Display OFF command */
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2028      	movs	r0, #40	@ 0x28
 80012d0:	f000 f8ca 	bl	8001468 <ls016b8uy_WriteReg>
  LCD_IO_Delay(20);   /* Wait for 20ms */
 80012d4:	2014      	movs	r0, #20
 80012d6:	f001 f8b2 	bl	800243e <LCD_IO_Delay>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_IN, (uint8_t*)NULL, 0);      /* Sleep In Command */
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2010      	movs	r0, #16
 80012e0:	f000 f8c2 	bl	8001468 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 80012e4:	2096      	movs	r0, #150	@ 0x96
 80012e6:	f001 f8aa 	bl	800243e <LCD_IO_Delay>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <ls016b8uy_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ls016b8uy_GetLcdPixelWidth(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_WIDTH;
 80012f2:	23b4      	movs	r3, #180	@ 0xb4
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <ls016b8uy_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ls016b8uy_GetLcdPixelHeight(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_HEIGHT;
 8001302:	23b4      	movs	r3, #180	@ 0xb4
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <ls016b8uy_ReadID>:
  * @brief  Get the LS016B8UY ID.
  * @param  None
  * @retval The LS016B8UY ID 
  */
uint16_t ls016b8uy_ReadID(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8001312:	f001 f86d 	bl	80023f0 <LCD_IO_Init>
  /* TODO : LCD read ID command not known for now, so assumption that the connected LCD is LS016B8UY */
  return (LS016B8UY_ID);
 8001316:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}

0800131e <ls016b8uy_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ls016b8uy_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	460a      	mov	r2, r1
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4613      	mov	r3, r2
 800132c:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];

  parameter[0] = 0x00;     /* CASET */
 800132e:	2300      	movs	r3, #0
 8001330:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x1E + Xpos;
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	331e      	adds	r3, #30
 8001338:	b2db      	uxtb	r3, r3
 800133a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800133c:	2300      	movs	r3, #0
 800133e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xD1 + Xpos;
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3b2f      	subs	r3, #47	@ 0x2f
 8001346:	b2db      	uxtb	r3, r3
 8001348:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2204      	movs	r2, #4
 8001350:	4619      	mov	r1, r3
 8001352:	202a      	movs	r0, #42	@ 0x2a
 8001354:	f000 f888 	bl	8001468 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 8001358:	2300      	movs	r3, #0
 800135a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xB3 + Ypos;
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3b4d      	subs	r3, #77	@ 0x4d
 800136c:	b2db      	uxtb	r3, r3
 800136e:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2204      	movs	r2, #4
 8001376:	4619      	mov	r1, r3
 8001378:	202b      	movs	r0, #43	@ 0x2b
 800137a:	f000 f875 	bl	8001468 <ls016b8uy_WriteReg>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <ls016b8uy_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ls016b8uy_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	80fb      	strh	r3, [r7, #6]
 8001390:	460b      	mov	r3, r1
 8001392:	80bb      	strh	r3, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	807b      	strh	r3, [r7, #2]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2;

  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	0adb      	lsrs	r3, r3, #11
 800139c:	82fb      	strh	r3, [r7, #22]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	115b      	asrs	r3, r3, #5
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013a8:	82bb      	strh	r3, [r7, #20]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	827b      	strh	r3, [r7, #18]

  /* Prepare data to write with new pixel components and read old pixel component */
  rgb888_part1 = (r << 11) + (g << 2);
 80013b2:	8afb      	ldrh	r3, [r7, #22]
 80013b4:	02db      	lsls	r3, r3, #11
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	8abb      	ldrh	r3, [r7, #20]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	823b      	strh	r3, [r7, #16]
  rgb888_part2 = (b << 11);
 80013c2:	8a7b      	ldrh	r3, [r7, #18]
 80013c4:	02db      	lsls	r3, r3, #11
 80013c6:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80013c8:	88ba      	ldrh	r2, [r7, #4]
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ffa5 	bl	800131e <ls016b8uy_SetCursor>

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	202c      	movs	r0, #44	@ 0x2c
 80013da:	f000 f845 	bl	8001468 <ls016b8uy_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(rgb888_part1);
 80013de:	8a3b      	ldrh	r3, [r7, #16]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 f80b 	bl	80023fc <LCD_IO_WriteData>
  LCD_IO_WriteData(rgb888_part2);
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 f807 	bl	80023fc <LCD_IO_WriteData>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <ls016b8uy_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ls016b8uy_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	460a      	mov	r2, r1
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	4613      	mov	r3, r2
 8001404:	80bb      	strh	r3, [r7, #4]
  LS016B8UY_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8001406:	88ba      	ldrh	r2, [r7, #4]
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff86 	bl	800131e <ls016b8uy_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ls016b8uy_ReadPixel_rgb888(Xpos, Ypos);
 8001412:	88ba      	ldrh	r2, [r7, #4]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f9e1 	bl	80017e0 <ls016b8uy_ReadPixel_rgb888>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	733a      	strb	r2, [r7, #12]
 8001424:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001428:	737a      	strb	r2, [r7, #13]
 800142a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800142e:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001430:	7b3b      	ldrb	r3, [r7, #12]
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	08db      	lsrs	r3, r3, #3
 8001440:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	b29b      	uxth	r3, r3
 8001446:	02db      	lsls	r3, r3, #11
 8001448:	b29a      	uxth	r2, r3
 800144a:	7dbb      	ldrb	r3, [r7, #22]
 800144c:	b29b      	uxth	r3, r3
 800144e:	015b      	lsls	r3, r3, #5
 8001450:	b29b      	uxth	r3, r3
 8001452:	4413      	add	r3, r2
 8001454:	b29a      	uxth	r2, r3
 8001456:	7d7b      	ldrb	r3, [r7, #21]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800145e:	8a7b      	ldrh	r3, [r7, #18]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <ls016b8uy_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ls016b8uy_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 ffcb 	bl	8002416 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e009      	b.n	800149a <ls016b8uy_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 ffb4 	bl	80023fc <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	3301      	adds	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3f1      	bcc.n	8001486 <ls016b8uy_WriteReg+0x1e>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <ls016b8uy_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ls016b8uy_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80014ac:	b490      	push	{r4, r7}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4604      	mov	r4, r0
 80014b4:	4608      	mov	r0, r1
 80014b6:	4611      	mov	r1, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	4623      	mov	r3, r4
 80014bc:	80fb      	strh	r3, [r7, #6]
 80014be:	4603      	mov	r3, r0
 80014c0:	80bb      	strh	r3, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	807b      	strh	r3, [r7, #2]
 80014c6:	4613      	mov	r3, r2
 80014c8:	803b      	strh	r3, [r7, #0]
  if (Xpos < LS016B8UY_LCD_PIXEL_WIDTH)
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	2bb3      	cmp	r3, #179	@ 0xb3
 80014ce:	d803      	bhi.n	80014d8 <ls016b8uy_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80014d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001540 <ls016b8uy_SetDisplayWindow+0x94>)
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	8013      	strh	r3, [r2, #0]
 80014d6:	e002      	b.n	80014de <ls016b8uy_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <ls016b8uy_SetDisplayWindow+0x94>)
 80014da:	2200      	movs	r2, #0
 80014dc:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < LS016B8UY_LCD_PIXEL_HEIGHT)
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	2bb3      	cmp	r3, #179	@ 0xb3
 80014e2:	d803      	bhi.n	80014ec <ls016b8uy_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80014e4:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <ls016b8uy_SetDisplayWindow+0x98>)
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	8013      	strh	r3, [r2, #0]
 80014ea:	e002      	b.n	80014f2 <ls016b8uy_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <ls016b8uy_SetDisplayWindow+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= LS016B8UY_LCD_PIXEL_WIDTH)
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4413      	add	r3, r2
 80014f8:	2bb4      	cmp	r3, #180	@ 0xb4
 80014fa:	dc08      	bgt.n	800150e <ls016b8uy_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80014fc:	887a      	ldrh	r2, [r7, #2]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <ls016b8uy_SetDisplayWindow+0x9c>)
 800150a:	801a      	strh	r2, [r3, #0]
 800150c:	e002      	b.n	8001514 <ls016b8uy_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = LS016B8UY_LCD_PIXEL_WIDTH - 1;
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <ls016b8uy_SetDisplayWindow+0x9c>)
 8001510:	22b3      	movs	r2, #179	@ 0xb3
 8001512:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= LS016B8UY_LCD_PIXEL_HEIGHT)
 8001514:	883a      	ldrh	r2, [r7, #0]
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	2bb4      	cmp	r3, #180	@ 0xb4
 800151c:	dc08      	bgt.n	8001530 <ls016b8uy_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 800151e:	883a      	ldrh	r2, [r7, #0]
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	b29b      	uxth	r3, r3
 8001526:	3b01      	subs	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <ls016b8uy_SetDisplayWindow+0xa0>)
 800152c:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
  }
}
 800152e:	e002      	b.n	8001536 <ls016b8uy_SetDisplayWindow+0x8a>
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <ls016b8uy_SetDisplayWindow+0xa0>)
 8001532:	22b3      	movs	r2, #179	@ 0xb3
 8001534:	801a      	strh	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bc90      	pop	{r4, r7}
 800153e:	4770      	bx	lr
 8001540:	20000114 	.word	0x20000114
 8001544:	20000116 	.word	0x20000116
 8001548:	2000003c 	.word	0x2000003c
 800154c:	2000003e 	.word	0x2000003e

08001550 <ls016b8uy_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	4604      	mov	r4, r0
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	80fb      	strh	r3, [r7, #6]
 8001562:	4603      	mov	r3, r0
 8001564:	80bb      	strh	r3, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]
 800156a:	4613      	mov	r3, r2
 800156c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	82fb      	strh	r3, [r7, #22]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2, rgb888_part3;
  
  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	0adb      	lsrs	r3, r3, #11
 8001576:	82bb      	strh	r3, [r7, #20]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	115b      	asrs	r3, r3, #5
 800157c:	b29b      	uxth	r3, r3
 800157e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001582:	827b      	strh	r3, [r7, #18]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	823b      	strh	r3, [r7, #16]

  rgb888_part1 = (r << 11) + (g << 2); /* Build pattern first part to write in LCD RAM */
 800158c:	8abb      	ldrh	r3, [r7, #20]
 800158e:	02db      	lsls	r3, r3, #11
 8001590:	b29a      	uxth	r2, r3
 8001592:	8a7b      	ldrh	r3, [r7, #18]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	b29b      	uxth	r3, r3
 8001598:	4413      	add	r3, r2
 800159a:	81fb      	strh	r3, [r7, #14]
  rgb888_part2 = (b << 11) + (r << 3); /* Build pattern second part to write in LCD RAM */
 800159c:	8a3b      	ldrh	r3, [r7, #16]
 800159e:	02db      	lsls	r3, r3, #11
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	8abb      	ldrh	r3, [r7, #20]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	81bb      	strh	r3, [r7, #12]
  rgb888_part3 = (g << 10) + (b << 3); /* Build pattern third part to write in LCD RAM */
 80015ac:	8a7b      	ldrh	r3, [r7, #18]
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	8a3b      	ldrh	r3, [r7, #16]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	817b      	strh	r3, [r7, #10]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos); 
 80015bc:	887a      	ldrh	r2, [r7, #2]
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff feab 	bl	800131e <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	202c      	movs	r0, #44	@ 0x2c
 80015ce:	f7ff ff4b 	bl	8001468 <ls016b8uy_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter+=2)
 80015d2:	2300      	movs	r3, #0
 80015d4:	82fb      	strh	r3, [r7, #22]
 80015d6:	e013      	b.n	8001600 <ls016b8uy_DrawHLine+0xb0>
  {
    /* Write 2 pixels at a time by performing 3 access (pixels coded on 24 bits in LCD RAM whereas access are coded on 16 bits) */
    LCD_IO_WriteData(rgb888_part1);
 80015d8:	89fb      	ldrh	r3, [r7, #14]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 ff0e 	bl	80023fc <LCD_IO_WriteData>
    LCD_IO_WriteData(rgb888_part2);
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 ff0a 	bl	80023fc <LCD_IO_WriteData>
    if (counter != (Length-1))  /* When writing last pixel when Length is odd, the third part is not written */
 80015e8:	8afa      	ldrh	r2, [r7, #22]
 80015ea:	883b      	ldrh	r3, [r7, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d003      	beq.n	80015fa <ls016b8uy_DrawHLine+0xaa>
    {
      LCD_IO_WriteData(rgb888_part3);
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 ff01 	bl	80023fc <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter+=2)
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	3302      	adds	r3, #2
 80015fe:	82fb      	strh	r3, [r7, #22]
 8001600:	8afa      	ldrh	r2, [r7, #22]
 8001602:	883b      	ldrh	r3, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3e7      	bcc.n	80015d8 <ls016b8uy_DrawHLine+0x88>
    }
  }  
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}

08001612 <ls016b8uy_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001612:	b590      	push	{r4, r7, lr}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	4604      	mov	r4, r0
 800161a:	4608      	mov	r0, r1
 800161c:	4611      	mov	r1, r2
 800161e:	461a      	mov	r2, r3
 8001620:	4623      	mov	r3, r4
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	4603      	mov	r3, r0
 8001626:	80bb      	strh	r3, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8001634:	887a      	ldrh	r2, [r7, #2]
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fe6f 	bl	800131e <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	202c      	movs	r0, #44	@ 0x2c
 8001646:	f7ff ff0f 	bl	8001468 <ls016b8uy_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800164a:	2300      	movs	r3, #0
 800164c:	81fb      	strh	r3, [r7, #14]
 800164e:	e00b      	b.n	8001668 <ls016b8uy_DrawVLine+0x56>
  {
    ls016b8uy_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001650:	887a      	ldrh	r2, [r7, #2]
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	4413      	add	r3, r2
 8001656:	b299      	uxth	r1, r3
 8001658:	88fa      	ldrh	r2, [r7, #6]
 800165a:	88bb      	ldrh	r3, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fe92 	bl	8001386 <ls016b8uy_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	3301      	adds	r3, #1
 8001666:	81fb      	strh	r3, [r7, #14]
 8001668:	89fa      	ldrh	r2, [r7, #14]
 800166a:	883b      	ldrh	r3, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3ef      	bcc.n	8001650 <ls016b8uy_DrawVLine+0x3e>
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}
	...

0800167c <ls016b8uy_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ls016b8uy_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
 8001688:	460b      	mov	r3, r1
 800168a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001698:	4b30      	ldr	r3, [pc, #192]	@ (800175c <ls016b8uy_DrawBitmap+0xe0>)
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <ls016b8uy_DrawBitmap+0xe4>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80016a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <ls016b8uy_DrawBitmap+0xe8>)
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <ls016b8uy_DrawBitmap+0xec>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3302      	adds	r3, #2
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3304      	adds	r3, #4
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	461a      	mov	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	330a      	adds	r3, #10
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	330c      	adds	r3, #12
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	461a      	mov	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001702:	88ba      	ldrh	r2, [r7, #4]
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	e01d      	b.n	8001748 <ls016b8uy_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY - 1);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe00 	bl	800131e <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b299      	uxth	r1, r3
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	89fa      	ldrh	r2, [r7, #14]
 8001736:	88f8      	ldrh	r0, [r7, #6]
 8001738:	f000 f89c 	bl	8001874 <ls016b8uy_DrawRGBHLine>
    nb_line++;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	3301      	adds	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b01      	subs	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8dd      	bhi.n	800170c <ls016b8uy_DrawBitmap+0x90>
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000003c 	.word	0x2000003c
 8001760:	20000114 	.word	0x20000114
 8001764:	2000003e 	.word	0x2000003e
 8001768:	20000116 	.word	0x20000116

0800176c <ls016b8uy_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ls016b8uy_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	4603      	mov	r3, r0
 8001780:	80bb      	strh	r3, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e019      	b.n	80017c8 <ls016b8uy_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	b29a      	uxth	r2, r3
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fdbe 	bl	800131e <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	b299      	uxth	r1, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	4413      	add	r3, r2
 80017b4:	887a      	ldrh	r2, [r7, #2]
 80017b6:	88f8      	ldrh	r0, [r7, #6]
 80017b8:	f000 f85c 	bl	8001874 <ls016b8uy_DrawRGBHLine>
    nb_line++;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3301      	adds	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	88ba      	ldrh	r2, [r7, #4]
 80017ca:	883b      	ldrh	r3, [r7, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d3de      	bcc.n	8001794 <ls016b8uy_DrawRGBImage+0x28>
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <ls016b8uy_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static LS016B8UY_Rgb888 ls016b8uy_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	460a      	mov	r2, r1
 80017ea:	80fb      	strh	r3, [r7, #6]
 80017ec:	4613      	mov	r3, r2
 80017ee:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fd91 	bl	800131e <ls016b8uy_SetCursor>
  /* Prepare to read LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	202e      	movs	r0, #46	@ 0x2e
 8001802:	f7ff fe31 	bl	8001468 <ls016b8uy_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8001806:	f000 fe13 	bl	8002430 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 800180a:	f000 fe11 	bl	8002430 <LCD_IO_ReadData>
 800180e:	4603      	mov	r3, r0
 8001810:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8001812:	f000 fe0d 	bl	8002430 <LCD_IO_ReadData>
 8001816:	4603      	mov	r3, r0
 8001818:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 800181a:	8afb      	ldrh	r3, [r7, #22]
 800181c:	121b      	asrs	r3, r3, #8
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f023 0303 	bic.w	r3, r3, #3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8001828:	8afb      	ldrh	r3, [r7, #22]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f023 0303 	bic.w	r3, r3, #3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8001834:	8abb      	ldrh	r3, [r7, #20]
 8001836:	121b      	asrs	r3, r3, #8
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f023 0303 	bic.w	r3, r3, #3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	f107 020c 	add.w	r2, r7, #12
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4611      	mov	r1, r2
 800184e:	8019      	strh	r1, [r3, #0]
 8001850:	3302      	adds	r3, #2
 8001852:	0c12      	lsrs	r2, r2, #16
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	2300      	movs	r3, #0
 8001858:	7c3a      	ldrb	r2, [r7, #16]
 800185a:	f362 0307 	bfi	r3, r2, #0, #8
 800185e:	7c7a      	ldrb	r2, [r7, #17]
 8001860:	f362 230f 	bfi	r3, r2, #8, #8
 8001864:	7cba      	ldrb	r2, [r7, #18]
 8001866:	f362 4317 	bfi	r3, r2, #16, #8
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <ls016b8uy_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ls016b8uy_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	4603      	mov	r3, r0
 800187e:	81fb      	strh	r3, [r7, #14]
 8001880:	460b      	mov	r3, r1
 8001882:	81bb      	strh	r3, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t posX;
  uint16_t r, g, b;
  uint16_t rgb888_part;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	61fb      	str	r3, [r7, #28]

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	202c      	movs	r0, #44	@ 0x2c
 8001896:	f7ff fde7 	bl	8001468 <ls016b8uy_WriteReg>

  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	623b      	str	r3, [r7, #32]
 800189e:	e07b      	b.n	8001998 <ls016b8uy_DrawRGBHLine+0x124>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80018a0:	4b44      	ldr	r3, [pc, #272]	@ (80019b4 <ls016b8uy_DrawRGBHLine+0x140>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d372      	bcc.n	8001992 <ls016b8uy_DrawRGBHLine+0x11e>
 80018ac:	4b42      	ldr	r3, [pc, #264]	@ (80019b8 <ls016b8uy_DrawRGBHLine+0x144>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	89ba      	ldrh	r2, [r7, #12]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d36d      	bcc.n	8001992 <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <ls016b8uy_DrawRGBHLine+0x148>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	4293      	cmp	r3, r2
 80018c0:	d867      	bhi.n	8001992 <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80018c2:	4b3f      	ldr	r3, [pc, #252]	@ (80019c0 <ls016b8uy_DrawRGBHLine+0x14c>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	89ba      	ldrh	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d862      	bhi.n	8001992 <ls016b8uy_DrawRGBHLine+0x11e>
    {
      /* Write pixels in LCD RAM after RGB565 -> RGB888 conversion */
      /* As data in LCD RAM are 24bits packed, three 16 bits writes access are needed to transmit 2 pixels data */

      r = (rgb565[i] & 0xF800) >> 11;      /* Extract red component from first RGB565 pixel data */
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	4413      	add	r3, r2
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	0adb      	lsrs	r3, r3, #11
 80018d8:	837b      	strh	r3, [r7, #26]
      g = (rgb565[i] & 0x07E0) >> 5;       /* Extract green component from first RGB565 pixel data  */
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	115b      	asrs	r3, r3, #5
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018ec:	833b      	strh	r3, [r7, #24]
      rgb888_part = (r << 11) + (g << 2);  /* Build data to be written in LCD RAM */
 80018ee:	8b7b      	ldrh	r3, [r7, #26]
 80018f0:	02db      	lsls	r3, r3, #11
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	8b3b      	ldrh	r3, [r7, #24]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 80018fe:	8afb      	ldrh	r3, [r7, #22]
 8001900:	4618      	mov	r0, r3
 8001902:	f000 fd7b 	bl	80023fc <LCD_IO_WriteData>

      b = (rgb565[i] & 0x001F) >> 0;       /* Extract blue component from first RGB565 pixel data  */
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	82bb      	strh	r3, [r7, #20]
      r = (rgb565[i+1] & 0xF800) >> 11;    /* Extract red component from second RGB565 pixel data  */
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	3301      	adds	r3, #1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	0adb      	lsrs	r3, r3, #11
 8001924:	837b      	strh	r3, [r7, #26]
      rgb888_part = (b << 11) + (r << 3);  /* Build data to be written in LCD RAM */
 8001926:	8abb      	ldrh	r3, [r7, #20]
 8001928:	02db      	lsls	r3, r3, #11
 800192a:	b29a      	uxth	r2, r3
 800192c:	8b7b      	ldrh	r3, [r7, #26]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	b29b      	uxth	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 8001936:	8afb      	ldrh	r3, [r7, #22]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fd5f 	bl	80023fc <LCD_IO_WriteData>

      if (posX != (Xsize + Xpos - 1))     /* When writing last pixel when size is odd, the third part is not written */
 800193e:	897a      	ldrh	r2, [r7, #10]
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	4413      	add	r3, r2
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	429a      	cmp	r2, r3
 800194a:	d01f      	beq.n	800198c <ls016b8uy_DrawRGBHLine+0x118>
      {
        g = (rgb565[i+1] & 0x07E0) >> 5;     /* Extract green component from second RGB565 pixel data */
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	3301      	adds	r3, #1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	115b      	asrs	r3, r3, #5
 800195a:	b29b      	uxth	r3, r3
 800195c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001960:	833b      	strh	r3, [r7, #24]
        b = (rgb565[i+1] & 0x001F) >> 0;     /* Extract blue component from second RGB565 pixel data */
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	82bb      	strh	r3, [r7, #20]
        rgb888_part = (g << 10) + (b << 3);  /* Build data to be written in LCD RAM */
 8001974:	8b3b      	ldrh	r3, [r7, #24]
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	b29a      	uxth	r2, r3
 800197a:	8abb      	ldrh	r3, [r7, #20]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	82fb      	strh	r3, [r7, #22]
        LCD_IO_WriteData(rgb888_part);
 8001984:	8afb      	ldrh	r3, [r7, #22]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fd38 	bl	80023fc <LCD_IO_WriteData>
      }

      i += 2;
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	3302      	adds	r3, #2
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	3302      	adds	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	897a      	ldrh	r2, [r7, #10]
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	4413      	add	r3, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	4293      	cmp	r3, r2
 80019a4:	f4ff af7c 	bcc.w	80018a0 <ls016b8uy_DrawRGBHLine+0x2c>
    }
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	@ 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000114 	.word	0x20000114
 80019b8:	20000116 	.word	0x20000116
 80019bc:	2000003c 	.word	0x2000003c
 80019c0:	2000003e 	.word	0x2000003e

080019c4 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019ca:	f000 fd11 	bl	80023f0 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2010      	movs	r0, #16
 80019d4:	f000 f9e3 	bl	8001d9e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80019d8:	200a      	movs	r0, #10
 80019da:	f000 fd30 	bl	800243e <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 f9db 	bl	8001d9e <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80019e8:	20c8      	movs	r0, #200	@ 0xc8
 80019ea:	f000 fd28 	bl	800243e <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	2011      	movs	r0, #17
 80019f4:	f000 f9d3 	bl	8001d9e <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80019f8:	2078      	movs	r0, #120	@ 0x78
 80019fa:	f000 fd20 	bl	800243e <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80019fe:	2300      	movs	r3, #0
 8001a00:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001a02:	463b      	mov	r3, r7
 8001a04:	2201      	movs	r2, #1
 8001a06:	4619      	mov	r1, r3
 8001a08:	2036      	movs	r0, #54	@ 0x36
 8001a0a:	f000 f9c8 	bl	8001d9e <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8001a0e:	2305      	movs	r3, #5
 8001a10:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001a12:	463b      	mov	r3, r7
 8001a14:	2201      	movs	r2, #1
 8001a16:	4619      	mov	r1, r3
 8001a18:	203a      	movs	r0, #58	@ 0x3a
 8001a1a:	f000 f9c0 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2021      	movs	r0, #33	@ 0x21
 8001a24:	f000 f9bb 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a30:	2300      	movs	r3, #0
 8001a32:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a34:	23ef      	movs	r3, #239	@ 0xef
 8001a36:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	202a      	movs	r0, #42	@ 0x2a
 8001a40:	f000 f9ad 	bl	8001d9e <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001a44:	2300      	movs	r3, #0
 8001a46:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001a50:	23ef      	movs	r3, #239	@ 0xef
 8001a52:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001a54:	463b      	mov	r3, r7
 8001a56:	2204      	movs	r2, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	202b      	movs	r0, #43	@ 0x2b
 8001a5c:	f000 f99f 	bl	8001d9e <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001a60:	230c      	movs	r3, #12
 8001a62:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001a64:	230c      	movs	r3, #12
 8001a66:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001a6c:	2333      	movs	r3, #51	@ 0x33
 8001a6e:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001a70:	2333      	movs	r3, #51	@ 0x33
 8001a72:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001a74:	463b      	mov	r3, r7
 8001a76:	2205      	movs	r2, #5
 8001a78:	4619      	mov	r1, r3
 8001a7a:	20b2      	movs	r0, #178	@ 0xb2
 8001a7c:	f000 f98f 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001a80:	2335      	movs	r3, #53	@ 0x35
 8001a82:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001a84:	463b      	mov	r3, r7
 8001a86:	2201      	movs	r2, #1
 8001a88:	4619      	mov	r1, r3
 8001a8a:	20b7      	movs	r0, #183	@ 0xb7
 8001a8c:	f000 f987 	bl	8001d9e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001a90:	231f      	movs	r3, #31
 8001a92:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001a94:	463b      	mov	r3, r7
 8001a96:	2201      	movs	r2, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	20bb      	movs	r0, #187	@ 0xbb
 8001a9c:	f000 f97f 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001aa0:	232c      	movs	r3, #44	@ 0x2c
 8001aa2:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	20c0      	movs	r0, #192	@ 0xc0
 8001aac:	f000 f977 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001ab4:	23c3      	movs	r3, #195	@ 0xc3
 8001ab6:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2202      	movs	r2, #2
 8001abc:	4619      	mov	r1, r3
 8001abe:	20c2      	movs	r0, #194	@ 0xc2
 8001ac0:	f000 f96d 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2201      	movs	r2, #1
 8001acc:	4619      	mov	r1, r3
 8001ace:	20c4      	movs	r0, #196	@ 0xc4
 8001ad0:	f000 f965 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2201      	movs	r2, #1
 8001adc:	4619      	mov	r1, r3
 8001ade:	20c6      	movs	r0, #198	@ 0xc6
 8001ae0:	f000 f95d 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001ae4:	23a4      	movs	r3, #164	@ 0xa4
 8001ae6:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001ae8:	23a1      	movs	r3, #161	@ 0xa1
 8001aea:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8001aec:	463b      	mov	r3, r7
 8001aee:	2202      	movs	r2, #2
 8001af0:	4619      	mov	r1, r3
 8001af2:	20d0      	movs	r0, #208	@ 0xd0
 8001af4:	f000 f953 	bl	8001d9e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001af8:	23d0      	movs	r3, #208	@ 0xd0
 8001afa:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001afc:	2308      	movs	r3, #8
 8001afe:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001b00:	2311      	movs	r3, #17
 8001b02:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001b04:	2308      	movs	r3, #8
 8001b06:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001b08:	230c      	movs	r3, #12
 8001b0a:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001b0c:	2315      	movs	r3, #21
 8001b0e:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001b10:	2339      	movs	r3, #57	@ 0x39
 8001b12:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001b14:	2333      	movs	r3, #51	@ 0x33
 8001b16:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001b18:	2350      	movs	r3, #80	@ 0x50
 8001b1a:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001b1c:	2336      	movs	r3, #54	@ 0x36
 8001b1e:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001b20:	2313      	movs	r3, #19
 8001b22:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b24:	2314      	movs	r3, #20
 8001b26:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001b28:	2329      	movs	r3, #41	@ 0x29
 8001b2a:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001b2c:	232d      	movs	r3, #45	@ 0x2d
 8001b2e:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001b30:	463b      	mov	r3, r7
 8001b32:	220e      	movs	r2, #14
 8001b34:	4619      	mov	r1, r3
 8001b36:	20e0      	movs	r0, #224	@ 0xe0
 8001b38:	f000 f931 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001b3c:	23d0      	movs	r3, #208	@ 0xd0
 8001b3e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001b40:	2308      	movs	r3, #8
 8001b42:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001b44:	2310      	movs	r3, #16
 8001b46:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001b4c:	2306      	movs	r3, #6
 8001b4e:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001b50:	2306      	movs	r3, #6
 8001b52:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001b54:	2339      	movs	r3, #57	@ 0x39
 8001b56:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001b58:	2344      	movs	r3, #68	@ 0x44
 8001b5a:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001b5c:	2351      	movs	r3, #81	@ 0x51
 8001b5e:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001b60:	230b      	movs	r3, #11
 8001b62:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001b64:	2316      	movs	r3, #22
 8001b66:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001b68:	2314      	movs	r3, #20
 8001b6a:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001b6c:	232f      	movs	r3, #47	@ 0x2f
 8001b6e:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001b70:	2331      	movs	r3, #49	@ 0x31
 8001b72:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001b74:	463b      	mov	r3, r7
 8001b76:	220e      	movs	r2, #14
 8001b78:	4619      	mov	r1, r3
 8001b7a:	20e1      	movs	r0, #225	@ 0xe1
 8001b7c:	f000 f90f 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001b80:	f000 f847 	bl	8001c12 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001b84:	2300      	movs	r3, #0
 8001b86:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	2035      	movs	r0, #53	@ 0x35
 8001b90:	f000 f905 	bl	8001d9e <ST7789H2_WriteReg>

}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001baa:	2300      	movs	r3, #0
 8001bac:	723b      	strb	r3, [r7, #8]
 8001bae:	e025      	b.n	8001bfc <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d120      	bne.n	8001bf8 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001bc2:	23f0      	movs	r3, #240	@ 0xf0
 8001bc4:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001bca:	2300      	movs	r3, #0
 8001bcc:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2206      	movs	r2, #6
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2033      	movs	r0, #51	@ 0x33
 8001bd8:	f000 f8e1 	bl	8001d9e <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001be0:	2350      	movs	r3, #80	@ 0x50
 8001be2:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	2202      	movs	r2, #2
 8001bea:	4619      	mov	r1, r3
 8001bec:	2037      	movs	r0, #55	@ 0x37
 8001bee:	f000 f8d6 	bl	8001d9e <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001bf2:	23c0      	movs	r3, #192	@ 0xc0
 8001bf4:	723b      	strb	r3, [r7, #8]
 8001bf6:	e001      	b.n	8001bfc <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001bf8:	2360      	movs	r3, #96	@ 0x60
 8001bfa:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	2201      	movs	r2, #1
 8001c02:	4619      	mov	r1, r3
 8001c04:	2036      	movs	r0, #54	@ 0x36
 8001c06:	f000 f8ca 	bl	8001d9e <ST7789H2_WriteReg>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2029      	movs	r0, #41	@ 0x29
 8001c1c:	f000 f8bf 	bl	8001d9e <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2011      	movs	r0, #17
 8001c26:	f000 f8ba 	bl	8001d9e <ST7789H2_WriteReg>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8001c34:	23fe      	movs	r3, #254	@ 0xfe
 8001c36:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	20bd      	movs	r0, #189	@ 0xbd
 8001c40:	f000 f8ad 	bl	8001d9e <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2010      	movs	r0, #16
 8001c4a:	f000 f8a8 	bl	8001d9e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001c4e:	200a      	movs	r0, #10
 8001c50:	f000 fbf5 	bl	800243e <LCD_IO_Delay>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8001c60:	23f0      	movs	r3, #240	@ 0xf0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8001c70:	23f0      	movs	r3, #240	@ 0xf0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c80:	f000 fbb6 	bl	80023f0 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001c84:	2004      	movs	r0, #4
 8001c86:	f000 f8ac 	bl	8001de2 <ST7789H2_ReadReg>
 8001c8a:	4603      	mov	r3, r0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	460a      	mov	r2, r1
 8001c9a:	80fb      	strh	r3, [r7, #6]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3b11      	subs	r3, #17
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	202a      	movs	r0, #42	@ 0x2a
 8001cc2:	f000 f86c 	bl	8001d9e <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001cca:	88bb      	ldrh	r3, [r7, #4]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	3b11      	subs	r3, #17
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	202b      	movs	r0, #43	@ 0x2b
 8001ce8:	f000 f859 	bl	8001d9e <ST7789H2_WriteReg>
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001d06:	88ba      	ldrh	r2, [r7, #4]
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ffbf 	bl	8001c90 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	202c      	movs	r0, #44	@ 0x2c
 8001d18:	f000 f841 	bl	8001d9e <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fb6c 	bl	80023fc <LCD_IO_WriteData>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	460a      	mov	r2, r1
 8001d36:	80fb      	strh	r3, [r7, #6]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001d3c:	88ba      	ldrh	r2, [r7, #4]
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ffa4 	bl	8001c90 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8001d48:	88ba      	ldrh	r2, [r7, #4]
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f9be 	bl	80020d0 <ST7789H2_ReadPixel_rgb888>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	733a      	strb	r2, [r7, #12]
 8001d5a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d5e:	737a      	strb	r2, [r7, #13]
 8001d60:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d64:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001d72:	7bbb      	ldrb	r3, [r7, #14]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	02db      	lsls	r3, r3, #11
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	7dbb      	ldrb	r3, [r7, #22]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	015b      	lsls	r3, r3, #5
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	7d7b      	ldrb	r3, [r7, #21]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8001d94:	8a7b      	ldrh	r3, [r7, #18]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	6039      	str	r1, [r7, #0]
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	4613      	mov	r3, r2
 8001dac:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fb30 	bl	8002416 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e009      	b.n	8001dd0 <ST7789H2_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fb19 	bl	80023fc <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d3f1      	bcc.n	8001dbc <ST7789H2_WriteReg+0x1e>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fb11 	bl	8002416 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8001df4:	f000 fb1c 	bl	8002430 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8001df8:	f000 fb1a 	bl	8002430 <LCD_IO_ReadData>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b2db      	uxtb	r3, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001e08:	b490      	push	{r4, r7}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	80fb      	strh	r3, [r7, #6]
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80bb      	strh	r3, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	807b      	strh	r3, [r7, #2]
 8001e22:	4613      	mov	r3, r2
 8001e24:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	2bef      	cmp	r3, #239	@ 0xef
 8001e2a:	d803      	bhi.n	8001e34 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <ST7789H2_SetDisplayWindow+0x94>)
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	8013      	strh	r3, [r2, #0]
 8001e32:	e002      	b.n	8001e3a <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8001e34:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <ST7789H2_SetDisplayWindow+0x94>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8001e3a:	88bb      	ldrh	r3, [r7, #4]
 8001e3c:	2bef      	cmp	r3, #239	@ 0xef
 8001e3e:	d803      	bhi.n	8001e48 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8001e40:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <ST7789H2_SetDisplayWindow+0x98>)
 8001e42:	88bb      	ldrh	r3, [r7, #4]
 8001e44:	8013      	strh	r3, [r2, #0]
 8001e46:	e002      	b.n	8001e4e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8001e48:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <ST7789H2_SetDisplayWindow+0x98>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	4413      	add	r3, r2
 8001e54:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e56:	dc08      	bgt.n	8001e6a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8001e58:	887a      	ldrh	r2, [r7, #2]
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	e002      	b.n	8001e70 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <ST7789H2_SetDisplayWindow+0x9c>)
 8001e6c:	22ef      	movs	r2, #239	@ 0xef
 8001e6e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8001e70:	883a      	ldrh	r2, [r7, #0]
 8001e72:	88bb      	ldrh	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e78:	dc08      	bgt.n	8001e8c <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8001e7a:	883a      	ldrh	r2, [r7, #0]
 8001e7c:	88bb      	ldrh	r3, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e88:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8001e8a:	e002      	b.n	8001e92 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <ST7789H2_SetDisplayWindow+0xa0>)
 8001e8e:	22ef      	movs	r2, #239	@ 0xef
 8001e90:	801a      	strh	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc90      	pop	{r4, r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	20000118 	.word	0x20000118
 8001ea0:	2000011a 	.word	0x2000011a
 8001ea4:	20000078 	.word	0x20000078
 8001ea8:	2000007a 	.word	0x2000007a

08001eac <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4623      	mov	r3, r4
 8001ebc:	80fb      	strh	r3, [r7, #6]
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80bb      	strh	r3, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	807b      	strh	r3, [r7, #2]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	88bb      	ldrh	r3, [r7, #4]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fedd 	bl	8001c90 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	202c      	movs	r0, #44	@ 0x2c
 8001edc:	f7ff ff5f 	bl	8001d9e <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	81fb      	strh	r3, [r7, #14]
 8001ee4:	e006      	b.n	8001ef4 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fa87 	bl	80023fc <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8001eee:	89fb      	ldrh	r3, [r7, #14]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	81fb      	strh	r3, [r7, #14]
 8001ef4:	89fa      	ldrh	r2, [r7, #14]
 8001ef6:	883b      	ldrh	r3, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d3f4      	bcc.n	8001ee6 <ST7789H2_DrawHLine+0x3a>
  }  
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}

08001f06 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001f06:	b590      	push	{r4, r7, lr}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	4608      	mov	r0, r1
 8001f10:	4611      	mov	r1, r2
 8001f12:	461a      	mov	r2, r3
 8001f14:	4623      	mov	r3, r4
 8001f16:	80fb      	strh	r3, [r7, #6]
 8001f18:	4603      	mov	r3, r0
 8001f1a:	80bb      	strh	r3, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001f24:	887a      	ldrh	r2, [r7, #2]
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff feb0 	bl	8001c90 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	202c      	movs	r0, #44	@ 0x2c
 8001f36:	f7ff ff32 	bl	8001d9e <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	81fb      	strh	r3, [r7, #14]
 8001f3e:	e00b      	b.n	8001f58 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001f40:	887a      	ldrh	r2, [r7, #2]
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	4413      	add	r3, r2
 8001f46:	b299      	uxth	r1, r3
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fed1 	bl	8001cf4 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	3301      	adds	r3, #1
 8001f56:	81fb      	strh	r3, [r7, #14]
 8001f58:	89fa      	ldrh	r2, [r7, #14]
 8001f5a:	883b      	ldrh	r3, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3ef      	bcc.n	8001f40 <ST7789H2_DrawVLine+0x3a>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
	...

08001f6c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	603a      	str	r2, [r7, #0]
 8001f76:	80fb      	strh	r3, [r7, #6]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <ST7789H2_DrawBitmap+0xe0>)
 8001f8a:	881a      	ldrh	r2, [r3, #0]
 8001f8c:	4b30      	ldr	r3, [pc, #192]	@ (8002050 <ST7789H2_DrawBitmap+0xe4>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001f98:	4b2e      	ldr	r3, [pc, #184]	@ (8002054 <ST7789H2_DrawBitmap+0xe8>)
 8001f9a:	881a      	ldrh	r2, [r3, #0]
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <ST7789H2_DrawBitmap+0xec>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	3302      	adds	r3, #2
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	330a      	adds	r3, #10
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	330c      	adds	r3, #12
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	461a      	mov	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4413      	add	r3, r2
 8001ff0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001ff2:	88ba      	ldrh	r2, [r7, #4]
 8001ff4:	89bb      	ldrh	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e01d      	b.n	8002038 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fe41 	bl	8001c90 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b299      	uxth	r1, r3
 8002016:	89fb      	ldrh	r3, [r7, #14]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	89fa      	ldrh	r2, [r7, #14]
 8002026:	88f8      	ldrh	r0, [r7, #6]
 8002028:	f000 f89c 	bl	8002164 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	3301      	adds	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b01      	subs	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8dd      	bhi.n	8001ffc <ST7789H2_DrawBitmap+0x90>
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000078 	.word	0x20000078
 8002050:	20000118 	.word	0x20000118
 8002054:	2000007a 	.word	0x2000007a
 8002058:	2000011a 	.word	0x2000011a

0800205c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	4604      	mov	r4, r0
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	461a      	mov	r2, r3
 800206a:	4623      	mov	r3, r4
 800206c:	80fb      	strh	r3, [r7, #6]
 800206e:	4603      	mov	r3, r0
 8002070:	80bb      	strh	r3, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]
 8002076:	4613      	mov	r3, r2
 8002078:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800207e:	88bb      	ldrh	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e019      	b.n	80020b8 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	b29a      	uxth	r2, r3
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fdff 	bl	8001c90 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	b299      	uxth	r1, r3
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	4413      	add	r3, r2
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	88f8      	ldrh	r0, [r7, #6]
 80020a8:	f000 f85c 	bl	8002164 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	3301      	adds	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3301      	adds	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	88ba      	ldrh	r2, [r7, #4]
 80020ba:	883b      	ldrh	r3, [r7, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d3de      	bcc.n	8002084 <ST7789H2_DrawRGBImage+0x28>
  }
}
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd90      	pop	{r4, r7, pc}

080020d0 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	460a      	mov	r2, r1
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	4613      	mov	r3, r2
 80020de:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80020e0:	88ba      	ldrh	r2, [r7, #4]
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fdd2 	bl	8001c90 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	202e      	movs	r0, #46	@ 0x2e
 80020f2:	f7ff fe54 	bl	8001d9e <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80020f6:	f000 f99b 	bl	8002430 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80020fa:	f000 f999 	bl	8002430 <LCD_IO_ReadData>
 80020fe:	4603      	mov	r3, r0
 8002100:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002102:	f000 f995 	bl	8002430 <LCD_IO_ReadData>
 8002106:	4603      	mov	r3, r0
 8002108:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 800210a:	8afb      	ldrh	r3, [r7, #22]
 800210c:	121b      	asrs	r3, r3, #8
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f023 0303 	bic.w	r3, r3, #3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002118:	8afb      	ldrh	r3, [r7, #22]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f023 0303 	bic.w	r3, r3, #3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002124:	8abb      	ldrh	r3, [r7, #20]
 8002126:	121b      	asrs	r3, r3, #8
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	f107 020c 	add.w	r2, r7, #12
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	4611      	mov	r1, r2
 800213e:	8019      	strh	r1, [r3, #0]
 8002140:	3302      	adds	r3, #2
 8002142:	0c12      	lsrs	r2, r2, #16
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	7c3a      	ldrb	r2, [r7, #16]
 800214a:	f362 0307 	bfi	r3, r2, #0, #8
 800214e:	7c7a      	ldrb	r2, [r7, #17]
 8002150:	f362 230f 	bfi	r3, r2, #8, #8
 8002154:	7cba      	ldrb	r2, [r7, #18]
 8002156:	f362 4317 	bfi	r3, r2, #16, #8
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	4603      	mov	r3, r0
 800216e:	81fb      	strh	r3, [r7, #14]
 8002170:	460b      	mov	r3, r1
 8002172:	81bb      	strh	r3, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	202c      	movs	r0, #44	@ 0x2c
 8002186:	f7ff fe0a 	bl	8001d9e <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	e029      	b.n	80021e4 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <ST7789H2_DrawRGBHLine+0x98>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4293      	cmp	r3, r2
 800219a:	d320      	bcc.n	80021de <ST7789H2_DrawRGBHLine+0x7a>
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <ST7789H2_DrawRGBHLine+0x9c>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	89ba      	ldrh	r2, [r7, #12]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d31b      	bcc.n	80021de <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <ST7789H2_DrawRGBHLine+0xa0>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d815      	bhi.n	80021de <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <ST7789H2_DrawRGBHLine+0xa4>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	89ba      	ldrh	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d810      	bhi.n	80021de <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 80021bc:	897a      	ldrh	r2, [r7, #10]
 80021be:	89fb      	ldrh	r3, [r7, #14]
 80021c0:	441a      	add	r2, r3
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d007      	beq.n	80021d8 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4413      	add	r3, r2
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f912 	bl	80023fc <LCD_IO_WriteData>
      }      
      i++;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	3301      	adds	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	897a      	ldrh	r2, [r7, #10]
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	4413      	add	r3, r2
 80021ea:	461a      	mov	r2, r3
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d3ce      	bcc.n	8002190 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000118 	.word	0x20000118
 8002200:	2000011a 	.word	0x2000011a
 8002204:	20000078 	.word	0x20000078
 8002208:	2000007a 	.word	0x2000007a

0800220c <FMC_BANK1_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK1 MSP.
  */
static void FMC_BANK1_MspInit(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	@ 0x28
 8002210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b2e      	ldr	r3, [pc, #184]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221a:	4a2d      	ldr	r2, [pc, #180]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6393      	str	r3, [r2, #56]	@ 0x38
 8002222:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b27      	ldr	r3, [pc, #156]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a26      	ldr	r2, [pc, #152]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b24      	ldr	r3, [pc, #144]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002254:	f043 0310 	orr.w	r3, r3, #16
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a18      	ldr	r2, [pc, #96]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002270:	f043 0320 	orr.w	r3, r3, #32
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <FMC_BANK1_MspInit+0xc4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002286:	2301      	movs	r3, #1
 8002288:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 800228e:	230c      	movs	r3, #12
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002292:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8002296:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	480d      	ldr	r0, [pc, #52]	@ (80022d4 <FMC_BANK1_MspInit+0xc8>)
 80022a0:	f000 fc2c 	bl	8002afc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 80022a4:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80022a8:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4809      	ldr	r0, [pc, #36]	@ (80022d8 <FMC_BANK1_MspInit+0xcc>)
 80022b2:	f000 fc23 	bl	8002afc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 ;  
 80022b6:	2301      	movs	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4806      	ldr	r0, [pc, #24]	@ (80022dc <FMC_BANK1_MspInit+0xd0>)
 80022c2:	f000 fc1b 	bl	8002afc <HAL_GPIO_Init>
}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	@ 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40021400 	.word	0x40021400

080022e0 <FMC_BANK1_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
static void FMC_BANK1_Init(void) 
{  
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0a2      	sub	sp, #136	@ 0x88
 80022e4:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 80022e6:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 80022ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <FMC_BANK1_Init+0xac>)
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* Timing for READING */
  sram_timing.AddressSetupTime      = 9;
 80022f0:	2309      	movs	r3, #9
 80022f2:	61fb      	str	r3, [r7, #28]
  sram_timing.AddressHoldTime       = 1;
 80022f4:	2301      	movs	r3, #1
 80022f6:	623b      	str	r3, [r7, #32]
  sram_timing.DataSetupTime         = 36;
 80022f8:	2324      	movs	r3, #36	@ 0x24
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sram_timing.BusTurnAroundDuration = 1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sram_timing.CLKDivision           = 2;
 8002300:	2302      	movs	r3, #2
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sram_timing.DataLatency           = 2;
 8002304:	2302      	movs	r3, #2
 8002306:	633b      	str	r3, [r7, #48]	@ 0x30
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Timing for WRITING*/
  sram_timing_write.AddressSetupTime      = 1;
 800230c:	2301      	movs	r3, #1
 800230e:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 8002310:	2301      	movs	r3, #1
 8002312:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 7;
 8002314:	2307      	movs	r3, #7
 8002316:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  sram_timing_write.CLKDivision           = 2;
 800231c:	2302      	movs	r3, #2
 800231e:	613b      	str	r3, [r7, #16]
  sram_timing_write.DataLatency           = 2;
 8002320:	2302      	movs	r3, #2
 8002322:	617b      	str	r3, [r7, #20]
  sram_timing_write.AccessMode            = FSMC_ACCESS_MODE_A;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK1;
 8002328:	2300      	movs	r3, #0
 800232a:	643b      	str	r3, [r7, #64]	@ 0x40
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	647b      	str	r3, [r7, #68]	@ 0x44
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002330:	2300      	movs	r3, #0
 8002332:	64bb      	str	r3, [r7, #72]	@ 0x48
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002334:	2310      	movs	r3, #16
 8002336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	653b      	str	r3, [r7, #80]	@ 0x50
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	657b      	str	r3, [r7, #84]	@ 0x54
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	65bb      	str	r3, [r7, #88]	@ 0x58
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002344:	2300      	movs	r3, #0
 8002346:	65fb      	str	r3, [r7, #92]	@ 0x5c
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800234c:	663b      	str	r3, [r7, #96]	@ 0x60
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	667b      	str	r3, [r7, #100]	@ 0x64
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002352:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002356:	66bb      	str	r3, [r7, #104]	@ 0x68
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	673b      	str	r3, [r7, #112]	@ 0x70
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002360:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002364:	67bb      	str	r3, [r7, #120]	@ 0x78
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002366:	2300      	movs	r3, #0
 8002368:	67fb      	str	r3, [r7, #124]	@ 0x7c
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800236a:	2300      	movs	r3, #0
 800236c:	677b      	str	r3, [r7, #116]	@ 0x74
  
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800236e:	f7ff ff4d 	bl	800220c <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8002372:	463a      	mov	r2, r7
 8002374:	f107 011c 	add.w	r1, r7, #28
 8002378:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800237c:	4618      	mov	r0, r3
 800237e:	f004 fb1b 	bl	80069b8 <HAL_SRAM_Init>
}
 8002382:	bf00      	nop
 8002384:	3788      	adds	r7, #136	@ 0x88
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	a0000104 	.word	0xa0000104

08002390 <FMC_BANK1_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK1_WriteData(uint16_t Data) 
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1->RAM = Data;
 800239a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	8053      	strh	r3, [r2, #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80023a2:	f3bf 8f4f 	dsb	sy
}
 80023a6:	bf00      	nop
  __DSB();
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <FMC_BANK1_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK1_WriteReg(uint8_t Reg) 
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1->REG = Reg;
 80023be:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80023c2:	79fa      	ldrb	r2, [r7, #7]
 80023c4:	b292      	uxth	r2, r2
 80023c6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80023c8:	f3bf 8f4f 	dsb	sy
}
 80023cc:	bf00      	nop
  __DSB();
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <FMC_BANK1_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void) 
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  return FMC_BANK1->RAM;
 80023de:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80023e2:	885b      	ldrh	r3, [r3, #2]
 80023e4:	b29b      	uxth	r3, r3
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 80023f4:	f7ff ff74 	bl	80022e0 <FMC_BANK1_Init>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ffc1 	bl	8002390 <FMC_BANK1_WriteData>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffc6 	bl	80023b4 <FMC_BANK1_WriteReg>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8002434:	f7ff ffd1 	bl	80023da <FMC_BANK1_ReadData>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	bd80      	pop	{r7, pc}

0800243e <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa4e 	bl	80028e8 <HAL_Delay>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002458:	2001      	movs	r0, #1
 800245a:	f000 f803 	bl	8002464 <BSP_LCD_InitEx>
 800245e:	4603      	mov	r3, r0
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}

08002464 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002470:	4b37      	ldr	r3, [pc, #220]	@ (8002550 <BSP_LCD_InitEx+0xec>)
 8002472:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002476:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002478:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <BSP_LCD_InitEx+0xec>)
 800247a:	4a36      	ldr	r2, [pc, #216]	@ (8002554 <BSP_LCD_InitEx+0xf0>)
 800247c:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800247e:	4b34      	ldr	r3, [pc, #208]	@ (8002550 <BSP_LCD_InitEx+0xec>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002484:	f000 f962 	bl	800274c <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	2120      	movs	r1, #32
 800248c:	4832      	ldr	r0, [pc, #200]	@ (8002558 <BSP_LCD_InitEx+0xf4>)
 800248e:	f000 fcc9 	bl	8002e24 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002498:	4830      	ldr	r0, [pc, #192]	@ (800255c <BSP_LCD_InitEx+0xf8>)
 800249a:	f000 fcc3 	bl	8002e24 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800249e:	2005      	movs	r0, #5
 80024a0:	f000 fa22 	bl	80028e8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024aa:	482c      	ldr	r0, [pc, #176]	@ (800255c <BSP_LCD_InitEx+0xf8>)
 80024ac:	f000 fcba 	bl	8002e24 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80024b0:	200a      	movs	r0, #10
 80024b2:	f000 fa19 	bl	80028e8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024bc:	4827      	ldr	r0, [pc, #156]	@ (800255c <BSP_LCD_InitEx+0xf8>)
 80024be:	f000 fcb1 	bl	8002e24 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 80024c2:	2014      	movs	r0, #20
 80024c4:	f000 fa10 	bl	80028e8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024ce:	4823      	ldr	r0, [pc, #140]	@ (800255c <BSP_LCD_InitEx+0xf8>)
 80024d0:	f000 fca8 	bl	8002e24 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80024d4:	200a      	movs	r0, #10
 80024d6:	f000 fa07 	bl	80028e8 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <BSP_LCD_InitEx+0xfc>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4798      	blx	r3
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b85      	cmp	r3, #133	@ 0x85
 80024e4:	d119      	bne.n	800251a <BSP_LCD_InitEx+0xb6>
  {    
    LcdDrv = &ST7789H2_drv;
 80024e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <BSP_LCD_InitEx+0x100>)
 80024e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002560 <BSP_LCD_InitEx+0xfc>)
 80024ea:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80024ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <BSP_LCD_InitEx+0x100>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7ff fb4e 	bl	8001b9c <ST7789H2_SetOrientation>
 8002500:	e005      	b.n	800250e <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d102      	bne.n	800250e <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002508:	2002      	movs	r0, #2
 800250a:	f7ff fb47 	bl	8001b9c <ST7789H2_SetOrientation>
    {
      /* Default landscape orientation is selected */
    }

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800250e:	4816      	ldr	r0, [pc, #88]	@ (8002568 <BSP_LCD_InitEx+0x104>)
 8002510:	f000 f856 	bl	80025c0 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e014      	b.n	8002544 <BSP_LCD_InitEx+0xe0>
  }
  else if(ls016b8uy_drv.ReadID() == LS016B8UY_ID)
 800251a:	4b14      	ldr	r3, [pc, #80]	@ (800256c <BSP_LCD_InitEx+0x108>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4798      	blx	r3
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002528:	429a      	cmp	r2, r3
 800252a:	d10b      	bne.n	8002544 <BSP_LCD_InitEx+0xe0>
  {
    LcdDrv = &ls016b8uy_drv;
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <BSP_LCD_InitEx+0x100>)
 800252e:	4a0f      	ldr	r2, [pc, #60]	@ (800256c <BSP_LCD_InitEx+0x108>)
 8002530:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002532:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <BSP_LCD_InitEx+0x100>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800253a:	480b      	ldr	r0, [pc, #44]	@ (8002568 <BSP_LCD_InitEx+0x104>)
 800253c:	f000 f840 	bl	80025c0 <BSP_LCD_SetFont>
    
    ret = LCD_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000011c 	.word	0x2000011c
 8002554:	2000007c 	.word	0x2000007c
 8002558:	40021400 	.word	0x40021400
 800255c:	40020c00 	.word	0x40020c00
 8002560:	20000040 	.word	0x20000040
 8002564:	20000128 	.word	0x20000128
 8002568:	20000084 	.word	0x20000084
 800256c:	20000004 	.word	0x20000004

08002570 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.   
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <BSP_LCD_GetXSize+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257a:	4798      	blx	r3
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000128 	.word	0x20000128

08002588 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <BSP_LCD_GetYSize+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002592:	4798      	blx	r3
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000128 	.word	0x20000128

080025a0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	4a03      	ldr	r2, [pc, #12]	@ (80025bc <BSP_LCD_SetTextColor+0x1c>)
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	2000011c 	.word	0x2000011c

080025c0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80025c8:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <BSP_LCD_SetFont+0x1c>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6093      	str	r3, [r2, #8]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	2000011c 	.word	0x2000011c

080025e0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <BSP_LCD_Clear+0x68>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	4a13      	ldr	r2, [pc, #76]	@ (8002648 <BSP_LCD_Clear+0x68>)
 80025fc:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80025fe:	f7ff ffc3 	bl	8002588 <BSP_LCD_GetYSize>
 8002602:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e00d      	b.n	8002626 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	b29c      	uxth	r4, r3
 800260e:	f7ff ffaf 	bl	8002570 <BSP_LCD_GetXSize>
 8002612:	4603      	mov	r3, r0
 8002614:	b29b      	uxth	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	4621      	mov	r1, r4
 800261a:	2000      	movs	r0, #0
 800261c:	f000 f832 	bl	8002684 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3301      	adds	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	d3ed      	bcc.n	800260a <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 800262e:	4a06      	ldr	r2, [pc, #24]	@ (8002648 <BSP_LCD_Clear+0x68>)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002634:	4b04      	ldr	r3, [pc, #16]	@ (8002648 <BSP_LCD_Clear+0x68>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ffb0 	bl	80025a0 <BSP_LCD_SetTextColor>
}
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	2000011c 	.word	0x2000011c

0800264c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	80fb      	strh	r3, [r7, #6]
 8002656:	460b      	mov	r3, r1
 8002658:	80bb      	strh	r3, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <BSP_LCD_DrawPixel+0x34>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002668:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <BSP_LCD_DrawPixel+0x34>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	88b9      	ldrh	r1, [r7, #4]
 8002672:	88f8      	ldrh	r0, [r7, #6]
 8002674:	4798      	blx	r3
  }
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000128 	.word	0x20000128

08002684 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
 800268e:	460b      	mov	r3, r1
 8002690:	80bb      	strh	r3, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <BSP_LCD_DrawHLine+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80026a4:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <BSP_LCD_DrawHLine+0x6c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a1c      	ldr	r4, [r3, #32]
 80026aa:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <BSP_LCD_DrawHLine+0x70>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b298      	uxth	r0, r3
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	88ba      	ldrh	r2, [r7, #4]
 80026b4:	88f9      	ldrh	r1, [r7, #6]
 80026b6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80026b8:	e015      	b.n	80026e6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e00e      	b.n	80026de <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	4413      	add	r3, r2
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <BSP_LCD_DrawHLine+0x70>)
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	b292      	uxth	r2, r2
 80026d0:	88b9      	ldrh	r1, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ffba 	bl	800264c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3301      	adds	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d3ec      	bcc.n	80026c0 <BSP_LCD_DrawHLine+0x3c>
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000128 	.word	0x20000128
 80026f4:	2000011c 	.word	0x2000011c

080026f8 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4623      	mov	r3, r4
 8002708:	80fb      	strh	r3, [r7, #6]
 800270a:	4603      	mov	r3, r0
 800270c:	80bb      	strh	r3, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	807b      	strh	r3, [r7, #2]
 8002712:	4613      	mov	r3, r2
 8002714:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002716:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <BSP_LCD_FillRect+0x50>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff3f 	bl	80025a0 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8002722:	88bb      	ldrh	r3, [r7, #4]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	80ba      	strh	r2, [r7, #4]
 8002728:	887a      	ldrh	r2, [r7, #2]
 800272a:	88f8      	ldrh	r0, [r7, #6]
 800272c:	4619      	mov	r1, r3
 800272e:	f7ff ffa9 	bl	8002684 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8002732:	883b      	ldrh	r3, [r7, #0]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	803a      	strh	r2, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f2      	bne.n	8002722 <BSP_LCD_FillRect+0x2a>
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bd90      	pop	{r4, r7, pc}
 8002746:	bf00      	nop
 8002748:	2000011c 	.word	0x2000011c

0800274c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a26      	ldr	r2, [pc, #152]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a1f      	ldr	r2, [pc, #124]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 8002778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 8002794:	f043 0320 	orr.w	r3, r3, #32
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <BSP_LCD_MspInit+0xa8>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 80027a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027aa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80027b4:	2301      	movs	r3, #1
 80027b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	4619      	mov	r1, r3
 80027be:	480e      	ldr	r0, [pc, #56]	@ (80027f8 <BSP_LCD_MspInit+0xac>)
 80027c0:	f000 f99c 	bl	8002afc <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80027c4:	2310      	movs	r3, #16
 80027c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	4619      	mov	r1, r3
 80027d2:	480a      	ldr	r0, [pc, #40]	@ (80027fc <BSP_LCD_MspInit+0xb0>)
 80027d4:	f000 f992 	bl	8002afc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80027d8:	2320      	movs	r3, #32
 80027da:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	4619      	mov	r1, r3
 80027e6:	4806      	ldr	r0, [pc, #24]	@ (8002800 <BSP_LCD_MspInit+0xb4>)
 80027e8:	f000 f988 	bl	8002afc <HAL_GPIO_Init>
}
 80027ec:	bf00      	nop
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020c00 	.word	0x40020c00
 80027fc:	40021800 	.word	0x40021800
 8002800:	40021400 	.word	0x40021400

08002804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002808:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0d      	ldr	r2, [pc, #52]	@ (8002844 <HAL_Init+0x40>)
 800280e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0a      	ldr	r2, [pc, #40]	@ (8002844 <HAL_Init+0x40>)
 800281a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800281e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002820:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <HAL_Init+0x40>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a07      	ldr	r2, [pc, #28]	@ (8002844 <HAL_Init+0x40>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282c:	2003      	movs	r0, #3
 800282e:	f000 f931 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002832:	2000      	movs	r0, #0
 8002834:	f000 f808 	bl	8002848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002838:	f7fe f92a 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023c00 	.word	0x40023c00

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_InitTick+0x54>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_InitTick+0x58>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f93b 	bl	8002ae2 <HAL_SYSTICK_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00e      	b.n	8002894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d80a      	bhi.n	8002892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800287c:	2200      	movs	r2, #0
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f000 f911 	bl	8002aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002888:	4a06      	ldr	r2, [pc, #24]	@ (80028a4 <HAL_InitTick+0x5c>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000000 	.word	0x20000000
 80028a0:	20000090 	.word	0x20000090
 80028a4:	2000008c 	.word	0x2000008c

080028a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_IncTick+0x20>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_IncTick+0x24>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	4a04      	ldr	r2, [pc, #16]	@ (80028cc <HAL_IncTick+0x24>)
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000090 	.word	0x20000090
 80028cc:	2000012c 	.word	0x2000012c

080028d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return uwTick;
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	2000012c 	.word	0x2000012c

080028e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d005      	beq.n	800290e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002902:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <HAL_Delay+0x44>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800290e:	bf00      	nop
 8002910:	f7ff ffde 	bl	80028d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d8f7      	bhi.n	8002910 <HAL_Delay+0x28>
  {
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000090 	.word	0x20000090

08002930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002940:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800294c:	4013      	ands	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800295c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002962:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60d3      	str	r3, [r2, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <__NVIC_GetPriorityGrouping+0x18>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0307 	and.w	r3, r3, #7
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	@ (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	@ 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a60:	d301      	bcc.n	8002a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a66:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <SysTick_Config+0x40>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6e:	210f      	movs	r1, #15
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f7ff ff8e 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <SysTick_Config+0x40>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <SysTick_Config+0x40>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff47 	bl	8002930 <__NVIC_SetPriorityGrouping>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002abc:	f7ff ff5c 	bl	8002978 <__NVIC_GetPriorityGrouping>
 8002ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff8e 	bl	80029e8 <NVIC_EncodePriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff5d 	bl	8002994 <__NVIC_SetPriority>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffb0 	bl	8002a50 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e165      	b.n	8002de4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 8154 	bne.w	8002dde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d005      	beq.n	8002b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d130      	bne.n	8002bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 0201 	and.w	r2, r3, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d017      	beq.n	8002bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d123      	bne.n	8002c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80ae 	beq.w	8002dde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b5d      	ldr	r3, [pc, #372]	@ (8002dfc <HAL_GPIO_Init+0x300>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dfc <HAL_GPIO_Init+0x300>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c92:	4b5a      	ldr	r3, [pc, #360]	@ (8002dfc <HAL_GPIO_Init+0x300>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9e:	4a58      	ldr	r2, [pc, #352]	@ (8002e00 <HAL_GPIO_Init+0x304>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e04 <HAL_GPIO_Init+0x308>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d025      	beq.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8002e08 <HAL_GPIO_Init+0x30c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <HAL_GPIO_Init+0x216>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e0c <HAL_GPIO_Init+0x310>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d019      	beq.n	8002d0e <HAL_GPIO_Init+0x212>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4c      	ldr	r2, [pc, #304]	@ (8002e10 <HAL_GPIO_Init+0x314>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x20e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e14 <HAL_GPIO_Init+0x318>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_Init+0x20a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4a      	ldr	r2, [pc, #296]	@ (8002e18 <HAL_GPIO_Init+0x31c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x206>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a49      	ldr	r2, [pc, #292]	@ (8002e1c <HAL_GPIO_Init+0x320>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_Init+0x202>
 8002cfa:	2306      	movs	r3, #6
 8002cfc:	e00c      	b.n	8002d18 <HAL_GPIO_Init+0x21c>
 8002cfe:	2307      	movs	r3, #7
 8002d00:	e00a      	b.n	8002d18 <HAL_GPIO_Init+0x21c>
 8002d02:	2305      	movs	r3, #5
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x21c>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x21c>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x21c>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x21c>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x21c>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	@ (8002e00 <HAL_GPIO_Init+0x304>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b3a      	ldr	r3, [pc, #232]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a31      	ldr	r2, [pc, #196]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b2f      	ldr	r3, [pc, #188]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1c      	ldr	r2, [pc, #112]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a11      	ldr	r2, [pc, #68]	@ (8002e20 <HAL_GPIO_Init+0x324>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f ae96 	bls.w	8002b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	@ 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40021400 	.word	0x40021400
 8002e1c:	40021800 	.word	0x40021800
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
 8002e30:	4613      	mov	r3, r2
 8002e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e34:	787b      	ldrb	r3, [r7, #1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e40:	e003      	b.n	8002e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	041a      	lsls	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002e56:	b590      	push	{r4, r7, lr}
 8002e58:	b08b      	sub	sp, #44	@ 0x2c
 8002e5a:	af04      	add	r7, sp, #16
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	4608      	mov	r0, r1
 8002e60:	4611      	mov	r1, r2
 8002e62:	461a      	mov	r2, r3
 8002e64:	4603      	mov	r3, r0
 8002e66:	70fb      	strb	r3, [r7, #3]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70bb      	strb	r3, [r7, #2]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002e70:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002e72:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_HCD_HC_Init+0x2c>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e09d      	b.n	8002fbe <HAL_HCD_HC_Init+0x168>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3319      	adds	r3, #25
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3314      	adds	r3, #20
 8002eae:	787a      	ldrb	r2, [r7, #1]
 8002eb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3315      	adds	r3, #21
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3326      	adds	r3, #38	@ 0x26
 8002ed6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002eda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	78bb      	ldrb	r3, [r7, #2]
 8002ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ee4:	b2d8      	uxtb	r0, r3
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3316      	adds	r3, #22
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fb82 	bl	8003606 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002f02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da0a      	bge.n	8002f20 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3317      	adds	r3, #23
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e009      	b.n	8002f34 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3317      	adds	r3, #23
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 f897 	bl	800706c <USB_GetHostSpeed>
 8002f3e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002f40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10b      	bne.n	8002f60 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002f48:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d107      	bne.n	8002f60 <HAL_HCD_HC_Init+0x10a>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2bbc      	cmp	r3, #188	@ 0xbc
 8002f5a:	d901      	bls.n	8002f60 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002f5c:	23bc      	movs	r3, #188	@ 0xbc
 8002f5e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3318      	adds	r3, #24
 8002f70:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002f74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	b298      	uxth	r0, r3
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3328      	adds	r3, #40	@ 0x28
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	787c      	ldrb	r4, [r7, #1]
 8002f98:	78ba      	ldrb	r2, [r7, #2]
 8002f9a:	78f9      	ldrb	r1, [r7, #3]
 8002f9c:	9302      	str	r3, [sp, #8]
 8002f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	4623      	mov	r3, r4
 8002fac:	f004 f876 	bl	800709c <USB_HC_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd90      	pop	{r4, r7, pc}
	...

08002fc8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	70fb      	strb	r3, [r7, #3]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	70bb      	strb	r3, [r7, #2]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3317      	adds	r3, #23
 8002ff2:	78ba      	ldrb	r2, [r7, #2]
 8002ff4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3326      	adds	r3, #38	@ 0x26
 8003006:	787a      	ldrb	r2, [r7, #1]
 8003008:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800300a:	7c3b      	ldrb	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d114      	bne.n	800303a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	332a      	adds	r3, #42	@ 0x2a
 8003020:	2203      	movs	r2, #3
 8003022:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3319      	adds	r3, #25
 8003034:	7f3a      	ldrb	r2, [r7, #28]
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e009      	b.n	800304e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	332a      	adds	r3, #42	@ 0x2a
 800304a:	2202      	movs	r2, #2
 800304c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800304e:	787b      	ldrb	r3, [r7, #1]
 8003050:	2b03      	cmp	r3, #3
 8003052:	f200 8102 	bhi.w	800325a <HAL_HCD_HC_SubmitRequest+0x292>
 8003056:	a201      	add	r2, pc, #4	@ (adr r2, 800305c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	0800306d 	.word	0x0800306d
 8003060:	08003245 	.word	0x08003245
 8003064:	08003131 	.word	0x08003131
 8003068:	080031bb 	.word	0x080031bb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800306c:	7c3b      	ldrb	r3, [r7, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	f040 80f5 	bne.w	800325e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003074:	78bb      	ldrb	r3, [r7, #2]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d12d      	bne.n	80030d6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800307a:	8b3b      	ldrh	r3, [r7, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	333d      	adds	r3, #61	@ 0x3d
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	333d      	adds	r3, #61	@ 0x3d
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	332a      	adds	r3, #42	@ 0x2a
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80030be:	e0ce      	b.n	800325e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	332a      	adds	r3, #42	@ 0x2a
 80030d0:	2202      	movs	r2, #2
 80030d2:	701a      	strb	r2, [r3, #0]
      break;
 80030d4:	e0c3      	b.n	800325e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	331a      	adds	r3, #26
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f040 80b8 	bne.w	800325e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	333c      	adds	r3, #60	@ 0x3c
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	332a      	adds	r3, #42	@ 0x2a
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
      break;
 8003118:	e0a1      	b.n	800325e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	332a      	adds	r3, #42	@ 0x2a
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
      break;
 800312e:	e096      	b.n	800325e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003130:	78bb      	ldrb	r3, [r7, #2]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d120      	bne.n	8003178 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	333d      	adds	r3, #61	@ 0x3d
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	332a      	adds	r3, #42	@ 0x2a
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003160:	e07e      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	332a      	adds	r3, #42	@ 0x2a
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
      break;
 8003176:	e073      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	333c      	adds	r3, #60	@ 0x3c
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	332a      	adds	r3, #42	@ 0x2a
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
      break;
 80031a2:	e05d      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	332a      	adds	r3, #42	@ 0x2a
 80031b4:	2202      	movs	r2, #2
 80031b6:	701a      	strb	r2, [r3, #0]
      break;
 80031b8:	e052      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80031ba:	78bb      	ldrb	r3, [r7, #2]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d120      	bne.n	8003202 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	333d      	adds	r3, #61	@ 0x3d
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	332a      	adds	r3, #42	@ 0x2a
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031ea:	e039      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	332a      	adds	r3, #42	@ 0x2a
 80031fc:	2202      	movs	r2, #2
 80031fe:	701a      	strb	r2, [r3, #0]
      break;
 8003200:	e02e      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	333c      	adds	r3, #60	@ 0x3c
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	332a      	adds	r3, #42	@ 0x2a
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
      break;
 800322c:	e018      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	332a      	adds	r3, #42	@ 0x2a
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
      break;
 8003242:	e00d      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	332a      	adds	r3, #42	@ 0x2a
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
      break;
 8003258:	e002      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800325e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	332c      	adds	r3, #44	@ 0x2c
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	8b39      	ldrh	r1, [r7, #24]
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4403      	add	r3, r0
 8003284:	3334      	adds	r3, #52	@ 0x34
 8003286:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334c      	adds	r3, #76	@ 0x4c
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	3338      	adds	r3, #56	@ 0x38
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3315      	adds	r3, #21
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	334d      	adds	r3, #77	@ 0x4d
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3310      	adds	r3, #16
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	1d19      	adds	r1, r3, #4
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	799b      	ldrb	r3, [r3, #6]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f003 ffe8 	bl	80072c8 <USB_HC_StartXfer>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop

08003304 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fdf8 	bl	8006f10 <USB_GetMode>
 8003320:	4603      	mov	r3, r0
 8003322:	2b01      	cmp	r3, #1
 8003324:	f040 80fb 	bne.w	800351e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f003 fdbb 	bl	8006ea8 <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80f1 	beq.w	800351c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f003 fdb2 	bl	8006ea8 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800334e:	d104      	bne.n	800335a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003358:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f003 fda2 	bl	8006ea8 <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800336a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800336e:	d104      	bne.n	800337a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003378:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f003 fd92 	bl	8006ea8 <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800338a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800338e:	d104      	bne.n	800339a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003398:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fd82 	bl	8006ea8 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d103      	bne.n	80033b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2202      	movs	r2, #2
 80033b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 fd74 	bl	8006ea8 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ca:	d120      	bne.n	800340e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80033d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d113      	bne.n	800340e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80033e6:	2110      	movs	r1, #16
 80033e8:	6938      	ldr	r0, [r7, #16]
 80033ea:	f003 fc67 	bl	8006cbc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80033ee:	6938      	ldr	r0, [r7, #16]
 80033f0:	f003 fc96 	bl	8006d20 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7a5b      	ldrb	r3, [r3, #9]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d105      	bne.n	8003408 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f003 fd92 	bl	8006f2c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f005 ff23 	bl	8009254 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f003 fd48 	bl	8006ea8 <USB_ReadInterrupts>
 8003418:	4603      	mov	r3, r0
 800341a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800341e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003422:	d102      	bne.n	800342a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f001 fd10 	bl	8004e4a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f003 fd3a 	bl	8006ea8 <USB_ReadInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b08      	cmp	r3, #8
 800343c:	d106      	bne.n	800344c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f005 feec 	bl	800921c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2208      	movs	r2, #8
 800344a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f003 fd29 	bl	8006ea8 <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003460:	d139      	bne.n	80034d6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f004 f972 	bl	8007750 <USB_HC_ReadInterrupt>
 800346c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e025      	b.n	80034c0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d018      	beq.n	80034ba <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349e:	d106      	bne.n	80034ae <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8e2 	bl	8003670 <HCD_HC_IN_IRQHandler>
 80034ac:	e005      	b.n	80034ba <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 ff44 	bl	8004342 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3301      	adds	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	795b      	ldrb	r3, [r3, #5]
 80034c4:	461a      	mov	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d3d3      	bcc.n	8003474 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fce4 	bl	8006ea8 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d101      	bne.n	80034ee <HAL_HCD_IRQHandler+0x1ea>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_HCD_IRQHandler+0x1ec>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d014      	beq.n	800351e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0210 	bic.w	r2, r2, #16
 8003502:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f001 fbc1 	bl	8004c8c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0210 	orr.w	r2, r2, #16
 8003518:	619a      	str	r2, [r3, #24]
 800351a:	e000      	b.n	800351e <HAL_HCD_IRQHandler+0x21a>
      return;
 800351c:	bf00      	nop
    }
  }
}
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_HCD_Start+0x16>
 8003536:	2302      	movs	r3, #2
 8003538:	e013      	b.n	8003562 <HAL_HCD_Start+0x3e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f003 fd56 	bl	8006ffa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f003 fb90 	bl	8006c78 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_HCD_Stop+0x16>
 800357c:	2302      	movs	r3, #2
 800357e:	e00d      	b.n	800359c <HAL_HCD_Stop+0x32>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f004 fa10 	bl	80079b2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 fcf8 	bl	8006fa6 <USB_ResetPort>
 80035b6:	4603      	mov	r3, r0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	334c      	adds	r3, #76	@ 0x4c
 80035dc:	781b      	ldrb	r3, [r3, #0]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 fd38 	bl	800706c <USB_GetHostSpeed>
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	331a      	adds	r3, #26
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	331b      	adds	r3, #27
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3325      	adds	r3, #37	@ 0x25
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3324      	adds	r3, #36	@ 0x24
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fc1d 	bl	8006ece <USB_ReadChInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d11a      	bne.n	80036d4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036aa:	461a      	mov	r2, r3
 80036ac:	2304      	movs	r3, #4
 80036ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	334d      	adds	r3, #77	@ 0x4d
 80036c0:	2207      	movs	r2, #7
 80036c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 f850 	bl	8007772 <USB_HC_Halt>
 80036d2:	e09e      	b.n	8003812 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 fbf6 	bl	8006ece <USB_ReadChInterrupts>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ec:	d11b      	bne.n	8003726 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036fa:	461a      	mov	r2, r3
 80036fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003700:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	334d      	adds	r3, #77	@ 0x4d
 8003712:	2208      	movs	r2, #8
 8003714:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f004 f827 	bl	8007772 <USB_HC_Halt>
 8003724:	e075      	b.n	8003812 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f003 fbcd 	bl	8006ece <USB_ReadChInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	d11a      	bne.n	8003774 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	2308      	movs	r3, #8
 800374e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334d      	adds	r3, #77	@ 0x4d
 8003760:	2206      	movs	r2, #6
 8003762:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f004 f800 	bl	8007772 <USB_HC_Halt>
 8003772:	e04e      	b.n	8003812 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f003 fba6 	bl	8006ece <USB_ReadChInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378c:	d11b      	bne.n	80037c6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379a:	461a      	mov	r2, r3
 800379c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334d      	adds	r3, #77	@ 0x4d
 80037b2:	2209      	movs	r2, #9
 80037b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 ffd7 	bl	8007772 <USB_HC_Halt>
 80037c4:	e025      	b.n	8003812 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 fb7d 	bl	8006ece <USB_ReadChInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037da:	2b80      	cmp	r3, #128	@ 0x80
 80037dc:	d119      	bne.n	8003812 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	334d      	adds	r3, #77	@ 0x4d
 8003800:	2207      	movs	r2, #7
 8003802:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f003 ffb0 	bl	8007772 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f003 fb57 	bl	8006ece <USB_ReadChInterrupts>
 8003820:	4603      	mov	r3, r0
 8003822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800382a:	d112      	bne.n	8003852 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f003 ff9c 	bl	8007772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003846:	461a      	mov	r2, r3
 8003848:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800384c:	6093      	str	r3, [r2, #8]
 800384e:	f000 bd75 	b.w	800433c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f003 fb37 	bl	8006ece <USB_ReadChInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	f040 8128 	bne.w	8003abc <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	2320      	movs	r3, #32
 800387c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	331b      	adds	r3, #27
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d119      	bne.n	80038c8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	331b      	adds	r3, #27
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	799b      	ldrb	r3, [r3, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01b      	beq.n	8003908 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	3330      	adds	r3, #48	@ 0x30
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	1ac9      	subs	r1, r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4403      	add	r3, r0
 8003904:	3338      	adds	r3, #56	@ 0x38
 8003906:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	334d      	adds	r3, #77	@ 0x4d
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3344      	adds	r3, #68	@ 0x44
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800393c:	461a      	mov	r2, r3
 800393e:	2301      	movs	r3, #1
 8003940:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3326      	adds	r3, #38	@ 0x26
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	3326      	adds	r3, #38	@ 0x26
 8003968:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800396a:	2b02      	cmp	r3, #2
 800396c:	d110      	bne.n	8003990 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f003 fefb 	bl	8007772 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003988:	461a      	mov	r2, r3
 800398a:	2310      	movs	r3, #16
 800398c:	6093      	str	r3, [r2, #8]
 800398e:	e03d      	b.n	8003a0c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3326      	adds	r3, #38	@ 0x26
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d00a      	beq.n	80039bc <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3326      	adds	r3, #38	@ 0x26
 80039b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d127      	bne.n	8003a0c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	0151      	lsls	r1, r2, #5
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	440a      	add	r2, r1
 80039d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039da:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	334c      	adds	r3, #76	@ 0x4c
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	334c      	adds	r3, #76	@ 0x4c
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f005 fc32 	bl	8009270 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	799b      	ldrb	r3, [r3, #6]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d13b      	bne.n	8003a8c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3338      	adds	r3, #56	@ 0x38
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4403      	add	r3, r0
 8003a34:	3328      	adds	r3, #40	@ 0x28
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	440b      	add	r3, r1
 8003a3a:	1e59      	subs	r1, r3, #1
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4403      	add	r3, r0
 8003a4a:	3328      	adds	r3, #40	@ 0x28
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8470 	beq.w	800433c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	333c      	adds	r3, #60	@ 0x3c
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	f083 0301 	eor.w	r3, r3, #1
 8003a74:	b2d8      	uxtb	r0, r3
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	333c      	adds	r3, #60	@ 0x3c
 8003a84:	4602      	mov	r2, r0
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	f000 bc58 	b.w	800433c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	333c      	adds	r3, #60	@ 0x3c
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	f083 0301 	eor.w	r3, r3, #1
 8003aa4:	b2d8      	uxtb	r0, r3
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	333c      	adds	r3, #60	@ 0x3c
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	f000 bc40 	b.w	800433c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f003 fa02 	bl	8006ece <USB_ReadChInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d131      	bne.n	8003b38 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	331a      	adds	r3, #26
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	f040 841f 	bne.w	800433c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	331b      	adds	r3, #27
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	334d      	adds	r3, #77	@ 0x4d
 8003b22:	2203      	movs	r2, #3
 8003b24:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f003 fe1f 	bl	8007772 <USB_HC_Halt>
 8003b34:	f000 bc02 	b.w	800433c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 f9c4 	bl	8006ece <USB_ReadChInterrupts>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	f040 8305 	bne.w	800415c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2302      	movs	r3, #2
 8003b62:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	334d      	adds	r3, #77	@ 0x4d
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d114      	bne.n	8003ba4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	334d      	adds	r3, #77	@ 0x4d
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	334c      	adds	r3, #76	@ 0x4c
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e2cc      	b.n	800413e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	334d      	adds	r3, #77	@ 0x4d
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d114      	bne.n	8003be4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	334d      	adds	r3, #77	@ 0x4d
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	334c      	adds	r3, #76	@ 0x4c
 8003bde:	2205      	movs	r2, #5
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e2ac      	b.n	800413e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	334d      	adds	r3, #77	@ 0x4d
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b07      	cmp	r3, #7
 8003bf8:	d00b      	beq.n	8003c12 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	334d      	adds	r3, #77	@ 0x4d
 8003c0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c0c:	2b09      	cmp	r3, #9
 8003c0e:	f040 80a6 	bne.w	8003d5e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	334d      	adds	r3, #77	@ 0x4d
 8003c22:	2202      	movs	r2, #2
 8003c24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	3344      	adds	r3, #68	@ 0x44
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	1c59      	adds	r1, r3, #1
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4403      	add	r3, r0
 8003c46:	3344      	adds	r3, #68	@ 0x44
 8003c48:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3344      	adds	r3, #68	@ 0x44
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d943      	bls.n	8003ce8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3344      	adds	r3, #68	@ 0x44
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	331a      	adds	r3, #26
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d123      	bne.n	8003cd2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	331b      	adds	r3, #27
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	331c      	adds	r3, #28
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334c      	adds	r3, #76	@ 0x4c
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ce6:	e229      	b.n	800413c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	334c      	adds	r3, #76	@ 0x4c
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3326      	adds	r3, #38	@ 0x26
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3326      	adds	r3, #38	@ 0x26
 8003d22:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f040 8209 	bne.w	800413c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d40:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d48:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d5c:	e1ee      	b.n	800413c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	334d      	adds	r3, #77	@ 0x4d
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	f040 80c8 	bne.w	8003f06 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	334d      	adds	r3, #77	@ 0x4d
 8003d86:	2202      	movs	r2, #2
 8003d88:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	331b      	adds	r3, #27
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 81ce 	bne.w	800413e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3326      	adds	r3, #38	@ 0x26
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d16b      	bne.n	8003e90 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3348      	adds	r3, #72	@ 0x48
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	1c59      	adds	r1, r3, #1
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4403      	add	r3, r0
 8003dd8:	3348      	adds	r3, #72	@ 0x48
 8003dda:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3348      	adds	r3, #72	@ 0x48
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d943      	bls.n	8003e7a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	3348      	adds	r3, #72	@ 0x48
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	331b      	adds	r3, #27
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	3344      	adds	r3, #68	@ 0x44
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d809      	bhi.n	8003e44 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	331c      	adds	r3, #28
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e62:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	334c      	adds	r3, #76	@ 0x4c
 8003e74:	2204      	movs	r2, #4
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e014      	b.n	8003ea4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	334c      	adds	r3, #76	@ 0x4c
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e009      	b.n	8003ea4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	334c      	adds	r3, #76	@ 0x4c
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3326      	adds	r3, #38	@ 0x26
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3326      	adds	r3, #38	@ 0x26
 8003eca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	f040 8136 	bne.w	800413e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ee8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ef0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e11b      	b.n	800413e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	334d      	adds	r3, #77	@ 0x4d
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	f040 8081 	bne.w	8004020 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	334d      	adds	r3, #77	@ 0x4d
 8003f2e:	2202      	movs	r2, #2
 8003f30:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	331b      	adds	r3, #27
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	f040 80fa 	bne.w	800413e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	334c      	adds	r3, #76	@ 0x4c
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	0151      	lsls	r1, r2, #5
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	440a      	add	r2, r1
 8003f74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f7c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f9c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fb8:	f023 0320 	bic.w	r3, r3, #32
 8003fbc:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3326      	adds	r3, #38	@ 0x26
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3326      	adds	r3, #38	@ 0x26
 8003fe4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	f040 80a9 	bne.w	800413e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004002:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800400a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004018:	461a      	mov	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e08e      	b.n	800413e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	334d      	adds	r3, #77	@ 0x4d
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b04      	cmp	r3, #4
 8004034:	d143      	bne.n	80040be <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	334d      	adds	r3, #77	@ 0x4d
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	334c      	adds	r3, #76	@ 0x4c
 800405a:	2202      	movs	r2, #2
 800405c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3326      	adds	r3, #38	@ 0x26
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3326      	adds	r3, #38	@ 0x26
 8004084:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004086:	2b02      	cmp	r3, #2
 8004088:	d159      	bne.n	800413e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040a0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040a8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040b6:	461a      	mov	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	e03f      	b.n	800413e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	334d      	adds	r3, #77	@ 0x4d
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d126      	bne.n	8004122 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	334d      	adds	r3, #77	@ 0x4d
 80040e4:	2202      	movs	r2, #2
 80040e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	3344      	adds	r3, #68	@ 0x44
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4403      	add	r3, r0
 8004108:	3344      	adds	r3, #68	@ 0x44
 800410a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	334c      	adds	r3, #76	@ 0x4c
 800411c:	2204      	movs	r2, #4
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e00d      	b.n	800413e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	334d      	adds	r3, #77	@ 0x4d
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b02      	cmp	r3, #2
 8004136:	f000 8100 	beq.w	800433a <HCD_HC_IN_IRQHandler+0xcca>
 800413a:	e000      	b.n	800413e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800413c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	334c      	adds	r3, #76	@ 0x4c
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f005 f88b 	bl	8009270 <HAL_HCD_HC_NotifyURBChange_Callback>
 800415a:	e0ef      	b.n	800433c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f002 feb2 	bl	8006ece <USB_ReadChInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b40      	cmp	r3, #64	@ 0x40
 8004172:	d12f      	bne.n	80041d4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004180:	461a      	mov	r2, r3
 8004182:	2340      	movs	r3, #64	@ 0x40
 8004184:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	334d      	adds	r3, #77	@ 0x4d
 8004196:	2205      	movs	r2, #5
 8004198:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	331a      	adds	r3, #26
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	3344      	adds	r3, #68	@ 0x44
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f003 fad0 	bl	8007772 <USB_HC_Halt>
 80041d2:	e0b3      	b.n	800433c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f002 fe76 	bl	8006ece <USB_ReadChInterrupts>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	f040 80a7 	bne.w	800433c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	3326      	adds	r3, #38	@ 0x26
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d11b      	bne.n	800423c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	3344      	adds	r3, #68	@ 0x44
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	334d      	adds	r3, #77	@ 0x4d
 8004228:	2204      	movs	r2, #4
 800422a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f003 fa9c 	bl	8007772 <USB_HC_Halt>
 800423a:	e03f      	b.n	80042bc <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3326      	adds	r3, #38	@ 0x26
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	3326      	adds	r3, #38	@ 0x26
 8004262:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004264:	2b02      	cmp	r3, #2
 8004266:	d129      	bne.n	80042bc <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	3344      	adds	r3, #68	@ 0x44
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	799b      	ldrb	r3, [r3, #6]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HCD_HC_IN_IRQHandler+0xc2a>
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	331b      	adds	r3, #27
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d110      	bne.n	80042bc <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	334d      	adds	r3, #77	@ 0x4d
 80042aa:	2204      	movs	r2, #4
 80042ac:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f003 fa5b 	bl	8007772 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	331b      	adds	r3, #27
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d129      	bne.n	8004326 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	331b      	adds	r3, #27
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004304:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	440a      	add	r2, r1
 800431c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004320:	f043 0320 	orr.w	r3, r3, #32
 8004324:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004332:	461a      	mov	r2, r3
 8004334:	2310      	movs	r3, #16
 8004336:	6093      	str	r3, [r2, #8]
 8004338:	e000      	b.n	800433c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800433a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b086      	sub	sp, #24
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f002 fdb4 	bl	8006ece <USB_ReadChInterrupts>
 8004366:	4603      	mov	r3, r0
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b04      	cmp	r3, #4
 800436e:	d11b      	bne.n	80043a8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437c:	461a      	mov	r2, r3
 800437e:	2304      	movs	r3, #4
 8004380:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	334d      	adds	r3, #77	@ 0x4d
 8004392:	2207      	movs	r2, #7
 8004394:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 f9e7 	bl	8007772 <USB_HC_Halt>
 80043a4:	f000 bc6f 	b.w	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f002 fd8c 	bl	8006ece <USB_ReadChInterrupts>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b20      	cmp	r3, #32
 80043be:	f040 8082 	bne.w	80044c6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ce:	461a      	mov	r2, r3
 80043d0:	2320      	movs	r3, #32
 80043d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3319      	adds	r3, #25
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d124      	bne.n	8004434 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	3319      	adds	r3, #25
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	334c      	adds	r3, #76	@ 0x4c
 800440e:	2202      	movs	r2, #2
 8004410:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	334d      	adds	r3, #77	@ 0x4d
 8004422:	2203      	movs	r2, #3
 8004424:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	4611      	mov	r1, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f003 f99f 	bl	8007772 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	331a      	adds	r3, #26
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b01      	cmp	r3, #1
 8004448:	f040 841d 	bne.w	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	331b      	adds	r3, #27
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 8411 	bne.w	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	3326      	adds	r3, #38	@ 0x26
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d009      	beq.n	800448e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	331b      	adds	r3, #27
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	334d      	adds	r3, #77	@ 0x4d
 800449e:	2203      	movs	r2, #3
 80044a0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f003 f961 	bl	8007772 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	3344      	adds	r3, #68	@ 0x44
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e3df      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f002 fcfd 	bl	8006ece <USB_ReadChInterrupts>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044de:	d111      	bne.n	8004504 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f003 f938 	bl	8007772 <USB_HC_Halt>
 8004502:	e3c0      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f002 fcde 	bl	8006ece <USB_ReadChInterrupts>
 8004512:	4603      	mov	r3, r0
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d168      	bne.n	80045ee <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	3344      	adds	r3, #68	@ 0x44
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f002 fcc8 	bl	8006ece <USB_ReadChInterrupts>
 800453e:	4603      	mov	r3, r0
 8004540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004544:	2b40      	cmp	r3, #64	@ 0x40
 8004546:	d112      	bne.n	800456e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	3319      	adds	r3, #25
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004568:	461a      	mov	r2, r3
 800456a:	2340      	movs	r3, #64	@ 0x40
 800456c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	331b      	adds	r3, #27
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d019      	beq.n	80045b8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	331b      	adds	r3, #27
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	2301      	movs	r3, #1
 80045c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	334d      	adds	r3, #77	@ 0x4d
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f003 f8c3 	bl	8007772 <USB_HC_Halt>
 80045ec:	e34b      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	4611      	mov	r1, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f002 fc69 	bl	8006ece <USB_ReadChInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004602:	2b40      	cmp	r3, #64	@ 0x40
 8004604:	d139      	bne.n	800467a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	334d      	adds	r3, #77	@ 0x4d
 8004616:	2205      	movs	r2, #5
 8004618:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	331a      	adds	r3, #26
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3319      	adds	r3, #25
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	3344      	adds	r3, #68	@ 0x44
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f003 f886 	bl	8007772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004672:	461a      	mov	r2, r3
 8004674:	2340      	movs	r3, #64	@ 0x40
 8004676:	6093      	str	r3, [r2, #8]
 8004678:	e305      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f002 fc23 	bl	8006ece <USB_ReadChInterrupts>
 8004688:	4603      	mov	r3, r0
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b08      	cmp	r3, #8
 8004690:	d11a      	bne.n	80046c8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800469e:	461a      	mov	r2, r3
 80046a0:	2308      	movs	r3, #8
 80046a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	334d      	adds	r3, #77	@ 0x4d
 80046b4:	2206      	movs	r2, #6
 80046b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f003 f856 	bl	8007772 <USB_HC_Halt>
 80046c6:	e2de      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f002 fbfc 	bl	8006ece <USB_ReadChInterrupts>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d144      	bne.n	800476a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3344      	adds	r3, #68	@ 0x44
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334d      	adds	r3, #77	@ 0x4d
 8004704:	2204      	movs	r2, #4
 8004706:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3319      	adds	r3, #25
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d114      	bne.n	8004748 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	3318      	adds	r3, #24
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3319      	adds	r3, #25
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f003 f80e 	bl	8007772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004762:	461a      	mov	r2, r3
 8004764:	2310      	movs	r3, #16
 8004766:	6093      	str	r3, [r2, #8]
 8004768:	e28d      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f002 fbab 	bl	8006ece <USB_ReadChInterrupts>
 8004778:	4603      	mov	r3, r0
 800477a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477e:	2b80      	cmp	r3, #128	@ 0x80
 8004780:	d169      	bne.n	8004856 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	799b      	ldrb	r3, [r3, #6]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d111      	bne.n	80047ae <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	334d      	adds	r3, #77	@ 0x4d
 800479a:	2207      	movs	r2, #7
 800479c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f002 ffe3 	bl	8007772 <USB_HC_Halt>
 80047ac:	e049      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3344      	adds	r3, #68	@ 0x44
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	1c59      	adds	r1, r3, #1
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4403      	add	r3, r0
 80047ce:	3344      	adds	r3, #68	@ 0x44
 80047d0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3344      	adds	r3, #68	@ 0x44
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d922      	bls.n	800482e <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3344      	adds	r3, #68	@ 0x44
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	334c      	adds	r3, #76	@ 0x4c
 800480c:	2204      	movs	r2, #4
 800480e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	334c      	adds	r3, #76	@ 0x4c
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f004 fd22 	bl	8009270 <HAL_HCD_HC_NotifyURBChange_Callback>
 800482c:	e009      	b.n	8004842 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	334c      	adds	r3, #76	@ 0x4c
 800483e:	2202      	movs	r2, #2
 8004840:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800484e:	461a      	mov	r2, r3
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	6093      	str	r3, [r2, #8]
 8004854:	e217      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f002 fb35 	bl	8006ece <USB_ReadChInterrupts>
 8004864:	4603      	mov	r3, r0
 8004866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486e:	d11b      	bne.n	80048a8 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	334d      	adds	r3, #77	@ 0x4d
 8004880:	2209      	movs	r2, #9
 8004882:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f002 ff70 	bl	8007772 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800489e:	461a      	mov	r2, r3
 80048a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048a4:	6093      	str	r3, [r2, #8]
 80048a6:	e1ee      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	4611      	mov	r1, r2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f002 fb0c 	bl	8006ece <USB_ReadChInterrupts>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b02      	cmp	r3, #2
 80048be:	f040 81df 	bne.w	8004c80 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ce:	461a      	mov	r2, r3
 80048d0:	2302      	movs	r3, #2
 80048d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	334d      	adds	r3, #77	@ 0x4d
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	f040 8093 	bne.w	8004a12 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	334d      	adds	r3, #77	@ 0x4d
 80048fc:	2202      	movs	r2, #2
 80048fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	334c      	adds	r3, #76	@ 0x4c
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	3326      	adds	r3, #38	@ 0x26
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d00b      	beq.n	8004942 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	3326      	adds	r3, #38	@ 0x26
 800493a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800493c:	2b03      	cmp	r3, #3
 800493e:	f040 8190 	bne.w	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	799b      	ldrb	r3, [r3, #6]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d115      	bne.n	8004976 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	333d      	adds	r3, #61	@ 0x3d
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	f083 0301 	eor.w	r3, r3, #1
 8004962:	b2d8      	uxtb	r0, r3
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	333d      	adds	r3, #61	@ 0x3d
 8004972:	4602      	mov	r2, r0
 8004974:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	799b      	ldrb	r3, [r3, #6]
 800497a:	2b01      	cmp	r3, #1
 800497c:	f040 8171 	bne.w	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	4613      	mov	r3, r2
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	3334      	adds	r3, #52	@ 0x34
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8165 	beq.w	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	3334      	adds	r3, #52	@ 0x34
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4403      	add	r3, r0
 80049b8:	3328      	adds	r3, #40	@ 0x28
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	440b      	add	r3, r1
 80049be:	1e59      	subs	r1, r3, #1
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4403      	add	r3, r0
 80049ce:	3328      	adds	r3, #40	@ 0x28
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 813f 	beq.w	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	333d      	adds	r3, #61	@ 0x3d
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	f083 0301 	eor.w	r3, r3, #1
 80049fc:	b2d8      	uxtb	r0, r3
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	333d      	adds	r3, #61	@ 0x3d
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e127      	b.n	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	334d      	adds	r3, #77	@ 0x4d
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d120      	bne.n	8004a6a <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	334d      	adds	r3, #77	@ 0x4d
 8004a38:	2202      	movs	r2, #2
 8004a3a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a3c:	78fa      	ldrb	r2, [r7, #3]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	331b      	adds	r3, #27
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	f040 8107 	bne.w	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	334c      	adds	r3, #76	@ 0x4c
 8004a64:	2202      	movs	r2, #2
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e0fb      	b.n	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	334d      	adds	r3, #77	@ 0x4d
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d13a      	bne.n	8004af6 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	334d      	adds	r3, #77	@ 0x4d
 8004a90:	2202      	movs	r2, #2
 8004a92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	334c      	adds	r3, #76	@ 0x4c
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	331b      	adds	r3, #27
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	f040 80d1 	bne.w	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	331b      	adds	r3, #27
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af2:	6053      	str	r3, [r2, #4]
 8004af4:	e0b5      	b.n	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004af6:	78fa      	ldrb	r2, [r7, #3]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	334d      	adds	r3, #77	@ 0x4d
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	d114      	bne.n	8004b36 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	334d      	adds	r3, #77	@ 0x4d
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	334c      	adds	r3, #76	@ 0x4c
 8004b30:	2202      	movs	r2, #2
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e095      	b.n	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	334d      	adds	r3, #77	@ 0x4d
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b06      	cmp	r3, #6
 8004b4a:	d114      	bne.n	8004b76 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334d      	adds	r3, #77	@ 0x4d
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	334c      	adds	r3, #76	@ 0x4c
 8004b70:	2205      	movs	r2, #5
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e075      	b.n	8004c62 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	334d      	adds	r3, #77	@ 0x4d
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b07      	cmp	r3, #7
 8004b8a:	d00a      	beq.n	8004ba2 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	334d      	adds	r3, #77	@ 0x4d
 8004b9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b9e:	2b09      	cmp	r3, #9
 8004ba0:	d170      	bne.n	8004c84 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	334d      	adds	r3, #77	@ 0x4d
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3344      	adds	r3, #68	@ 0x44
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	1c59      	adds	r1, r3, #1
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4403      	add	r3, r0
 8004bd6:	3344      	adds	r3, #68	@ 0x44
 8004bd8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	3344      	adds	r3, #68	@ 0x44
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d914      	bls.n	8004c1a <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3344      	adds	r3, #68	@ 0x44
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	334c      	adds	r3, #76	@ 0x4c
 8004c14:	2204      	movs	r2, #4
 8004c16:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c18:	e022      	b.n	8004c60 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	334c      	adds	r3, #76	@ 0x4c
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c44:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c4c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c60:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	334c      	adds	r3, #76	@ 0x4c
 8004c72:	781a      	ldrb	r2, [r3, #0]
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f004 faf9 	bl	8009270 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c7e:	e002      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004c84:	bf00      	nop
  }
}
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	@ 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	0c5b      	lsrs	r3, r3, #17
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cc0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d004      	beq.n	8004cd2 <HCD_RXQLVL_IRQHandler+0x46>
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	f000 80b6 	beq.w	8004e3c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004cd0:	e0b7      	b.n	8004e42 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80b3 	beq.w	8004e40 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	332c      	adds	r3, #44	@ 0x2c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a7 	beq.w	8004e40 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3338      	adds	r3, #56	@ 0x38
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	18d1      	adds	r1, r2, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4403      	add	r3, r0
 8004d16:	3334      	adds	r3, #52	@ 0x34
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	f200 8083 	bhi.w	8004e26 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	332c      	adds	r3, #44	@ 0x2c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	b292      	uxth	r2, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f002 f85c 	bl	8006df8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4613      	mov	r3, r2
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	332c      	adds	r3, #44	@ 0x2c
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	18d1      	adds	r1, r2, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4403      	add	r3, r0
 8004d64:	332c      	adds	r3, #44	@ 0x2c
 8004d66:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	3338      	adds	r3, #56	@ 0x38
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	18d1      	adds	r1, r2, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4613      	mov	r3, r2
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4403      	add	r3, r0
 8004d8c:	3338      	adds	r3, #56	@ 0x38
 8004d8e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	0cdb      	lsrs	r3, r3, #19
 8004da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4613      	mov	r3, r2
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	3328      	adds	r3, #40	@ 0x28
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d13f      	bne.n	8004e40 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d03c      	beq.n	8004e40 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ddc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004de4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df2:	461a      	mov	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	333c      	adds	r3, #60	@ 0x3c
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	f083 0301 	eor.w	r3, r3, #1
 8004e0e:	b2d8      	uxtb	r0, r3
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4613      	mov	r3, r2
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	333c      	adds	r3, #60	@ 0x3c
 8004e20:	4602      	mov	r2, r0
 8004e22:	701a      	strb	r2, [r3, #0]
      break;
 8004e24:	e00c      	b.n	8004e40 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	334c      	adds	r3, #76	@ 0x4c
 8004e36:	2204      	movs	r2, #4
 8004e38:	701a      	strb	r2, [r3, #0]
      break;
 8004e3a:	e001      	b.n	8004e40 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004e40:	bf00      	nop
  }
}
 8004e42:	bf00      	nop
 8004e44:	3728      	adds	r7, #40	@ 0x28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004e76:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d10b      	bne.n	8004e9a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d102      	bne.n	8004e92 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f004 f9d3 	bl	8009238 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f043 0302 	orr.w	r3, r3, #2
 8004e98:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d132      	bne.n	8004f0a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f043 0308 	orr.w	r3, r3, #8
 8004eaa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d126      	bne.n	8004f04 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7a5b      	ldrb	r3, [r3, #9]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d113      	bne.n	8004ee6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004ec4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ec8:	d106      	bne.n	8004ed8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2102      	movs	r1, #2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f002 f82b 	bl	8006f2c <USB_InitFSLSPClkSel>
 8004ed6:	e011      	b.n	8004efc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2101      	movs	r1, #1
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f002 f824 	bl	8006f2c <USB_InitFSLSPClkSel>
 8004ee4:	e00a      	b.n	8004efc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	79db      	ldrb	r3, [r3, #7]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d106      	bne.n	8004efc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004efa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f004 f9c5 	bl	800928c <HAL_HCD_PortEnabled_Callback>
 8004f02:	e002      	b.n	8004f0a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f004 f9cf 	bl	80092a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d103      	bne.n	8004f1c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f043 0320 	orr.w	r3, r3, #32
 8004f1a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004f22:	461a      	mov	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	6013      	str	r3, [r2, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e12b      	b.n	800519a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fb fdc2 	bl	8000ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	@ 0x24
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f94:	f001 fa78 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 8004f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4a81      	ldr	r2, [pc, #516]	@ (80051a4 <HAL_I2C_Init+0x274>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d807      	bhi.n	8004fb4 <HAL_I2C_Init+0x84>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a80      	ldr	r2, [pc, #512]	@ (80051a8 <HAL_I2C_Init+0x278>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	bf94      	ite	ls
 8004fac:	2301      	movls	r3, #1
 8004fae:	2300      	movhi	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e006      	b.n	8004fc2 <HAL_I2C_Init+0x92>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a7d      	ldr	r2, [pc, #500]	@ (80051ac <HAL_I2C_Init+0x27c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	bf94      	ite	ls
 8004fbc:	2301      	movls	r3, #1
 8004fbe:	2300      	movhi	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0e7      	b.n	800519a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a78      	ldr	r2, [pc, #480]	@ (80051b0 <HAL_I2C_Init+0x280>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	0c9b      	lsrs	r3, r3, #18
 8004fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a6a      	ldr	r2, [pc, #424]	@ (80051a4 <HAL_I2C_Init+0x274>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d802      	bhi.n	8005004 <HAL_I2C_Init+0xd4>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3301      	adds	r3, #1
 8005002:	e009      	b.n	8005018 <HAL_I2C_Init+0xe8>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	4a69      	ldr	r2, [pc, #420]	@ (80051b4 <HAL_I2C_Init+0x284>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	099b      	lsrs	r3, r3, #6
 8005016:	3301      	adds	r3, #1
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	430b      	orrs	r3, r1
 800501e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800502a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	495c      	ldr	r1, [pc, #368]	@ (80051a4 <HAL_I2C_Init+0x274>)
 8005034:	428b      	cmp	r3, r1
 8005036:	d819      	bhi.n	800506c <HAL_I2C_Init+0x13c>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1e59      	subs	r1, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	fbb1 f3f3 	udiv	r3, r1, r3
 8005046:	1c59      	adds	r1, r3, #1
 8005048:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800504c:	400b      	ands	r3, r1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_I2C_Init+0x138>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1e59      	subs	r1, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005060:	3301      	adds	r3, #1
 8005062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005066:	e051      	b.n	800510c <HAL_I2C_Init+0x1dc>
 8005068:	2304      	movs	r3, #4
 800506a:	e04f      	b.n	800510c <HAL_I2C_Init+0x1dc>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d111      	bne.n	8005098 <HAL_I2C_Init+0x168>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1e58      	subs	r0, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	440b      	add	r3, r1
 8005082:	fbb0 f3f3 	udiv	r3, r0, r3
 8005086:	3301      	adds	r3, #1
 8005088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	e012      	b.n	80050be <HAL_I2C_Init+0x18e>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1e58      	subs	r0, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	0099      	lsls	r1, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ae:	3301      	adds	r3, #1
 80050b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_I2C_Init+0x196>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e022      	b.n	800510c <HAL_I2C_Init+0x1dc>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10e      	bne.n	80050ec <HAL_I2C_Init+0x1bc>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1e58      	subs	r0, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	440b      	add	r3, r1
 80050dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e0:	3301      	adds	r3, #1
 80050e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ea:	e00f      	b.n	800510c <HAL_I2C_Init+0x1dc>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1e58      	subs	r0, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6859      	ldr	r1, [r3, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	0099      	lsls	r1, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005102:	3301      	adds	r3, #1
 8005104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005108:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	6809      	ldr	r1, [r1, #0]
 8005110:	4313      	orrs	r3, r2
 8005112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800513a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6911      	ldr	r1, [r2, #16]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	4311      	orrs	r1, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	430b      	orrs	r3, r1
 800514e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	000186a0 	.word	0x000186a0
 80051a8:	001e847f 	.word	0x001e847f
 80051ac:	003d08ff 	.word	0x003d08ff
 80051b0:	431bde83 	.word	0x431bde83
 80051b4:	10624dd3 	.word	0x10624dd3

080051b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	461a      	mov	r2, r3
 80051c4:	460b      	mov	r3, r1
 80051c6:	817b      	strh	r3, [r7, #10]
 80051c8:	4613      	mov	r3, r2
 80051ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051cc:	f7fd fb80 	bl	80028d0 <HAL_GetTick>
 80051d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b20      	cmp	r3, #32
 80051dc:	f040 80e0 	bne.w	80053a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2319      	movs	r3, #25
 80051e6:	2201      	movs	r2, #1
 80051e8:	4970      	ldr	r1, [pc, #448]	@ (80053ac <HAL_I2C_Master_Transmit+0x1f4>)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fc64 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0d3      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_I2C_Master_Transmit+0x50>
 8005204:	2302      	movs	r3, #2
 8005206:	e0cc      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x1ea>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	d007      	beq.n	800522e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800523c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2221      	movs	r2, #33	@ 0x21
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2210      	movs	r2, #16
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	893a      	ldrh	r2, [r7, #8]
 800525e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a50      	ldr	r2, [pc, #320]	@ (80053b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800526e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005270:	8979      	ldrh	r1, [r7, #10]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6a3a      	ldr	r2, [r7, #32]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 face 	bl	8005818 <I2C_MasterRequestWrite>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e08d      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800529c:	e066      	b.n	800536c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	6a39      	ldr	r1, [r7, #32]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fd22 	bl	8005cec <I2C_WaitOnTXEFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d107      	bne.n	80052c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e06b      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	781a      	ldrb	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d11b      	bne.n	8005340 <HAL_I2C_Master_Transmit+0x188>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530c:	2b00      	cmp	r3, #0
 800530e:	d017      	beq.n	8005340 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	6a39      	ldr	r1, [r7, #32]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fd19 	bl	8005d7c <I2C_WaitOnBTFFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	2b04      	cmp	r3, #4
 8005356:	d107      	bne.n	8005368 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005366:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e01a      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	d194      	bne.n	800529e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	00100002 	.word	0x00100002
 80053b0:	ffff0000 	.word	0xffff0000

080053b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	@ 0x30
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	461a      	mov	r2, r3
 80053c0:	460b      	mov	r3, r1
 80053c2:	817b      	strh	r3, [r7, #10]
 80053c4:	4613      	mov	r3, r2
 80053c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053c8:	f7fd fa82 	bl	80028d0 <HAL_GetTick>
 80053cc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	f040 8217 	bne.w	800580a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2319      	movs	r3, #25
 80053e2:	2201      	movs	r2, #1
 80053e4:	497c      	ldr	r1, [pc, #496]	@ (80055d8 <HAL_I2C_Master_Receive+0x224>)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fb66 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
 80053f4:	e20a      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_I2C_Master_Receive+0x50>
 8005400:	2302      	movs	r3, #2
 8005402:	e203      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d007      	beq.n	800542a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0201 	orr.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005438:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2222      	movs	r2, #34	@ 0x22
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2210      	movs	r2, #16
 8005446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	893a      	ldrh	r2, [r7, #8]
 800545a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a5c      	ldr	r2, [pc, #368]	@ (80055dc <HAL_I2C_Master_Receive+0x228>)
 800546a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800546c:	8979      	ldrh	r1, [r7, #10]
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fa52 	bl	800591c <I2C_MasterRequestRead>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e1c4      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005486:	2b00      	cmp	r3, #0
 8005488:	d113      	bne.n	80054b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e198      	b.n	80057e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d11b      	bne.n	80054f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	61fb      	str	r3, [r7, #28]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e178      	b.n	80057e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d11b      	bne.n	8005532 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005508:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005518:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	61bb      	str	r3, [r7, #24]
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	e158      	b.n	80057e4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005540:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005558:	e144      	b.n	80057e4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555e:	2b03      	cmp	r3, #3
 8005560:	f200 80f1 	bhi.w	8005746 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005568:	2b01      	cmp	r3, #1
 800556a:	d123      	bne.n	80055b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800556c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fc4b 	bl	8005e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e145      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80055b2:	e117      	b.n	80057e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d14e      	bne.n	800565a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	2200      	movs	r2, #0
 80055c4:	4906      	ldr	r1, [pc, #24]	@ (80055e0 <HAL_I2C_Master_Receive+0x22c>)
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fa76 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e11a      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
 80055d6:	bf00      	nop
 80055d8:	00100002 	.word	0x00100002
 80055dc:	ffff0000 	.word	0xffff0000
 80055e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005658:	e0c4      	b.n	80057e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	2200      	movs	r2, #0
 8005662:	496c      	ldr	r1, [pc, #432]	@ (8005814 <HAL_I2C_Master_Receive+0x460>)
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fa27 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0cb      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	2200      	movs	r2, #0
 80056be:	4955      	ldr	r1, [pc, #340]	@ (8005814 <HAL_I2C_Master_Receive+0x460>)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f9f9 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e09d      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005744:	e04e      	b.n	80057e4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005748:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fb5e 	bl	8005e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e058      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b04      	cmp	r3, #4
 8005798:	d124      	bne.n	80057e4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d107      	bne.n	80057b2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f47f aeb6 	bne.w	800555a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	e000      	b.n	800580c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800580a:	2302      	movs	r3, #2
  }
}
 800580c:	4618      	mov	r0, r3
 800580e:	3728      	adds	r7, #40	@ 0x28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	00010004 	.word	0x00010004

08005818 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	460b      	mov	r3, r1
 8005826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d006      	beq.n	8005842 <I2C_MasterRequestWrite+0x2a>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d003      	beq.n	8005842 <I2C_MasterRequestWrite+0x2a>
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005840:	d108      	bne.n	8005854 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e00b      	b.n	800586c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005858:	2b12      	cmp	r3, #18
 800585a:	d107      	bne.n	800586c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800586a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f91d 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005892:	d103      	bne.n	800589c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e035      	b.n	800590c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058a8:	d108      	bne.n	80058bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e01b      	b.n	80058f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	11db      	asrs	r3, r3, #7
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f063 030f 	orn	r3, r3, #15
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	490e      	ldr	r1, [pc, #56]	@ (8005914 <I2C_MasterRequestWrite+0xfc>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f966 	bl	8005bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e010      	b.n	800590c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4907      	ldr	r1, [pc, #28]	@ (8005918 <I2C_MasterRequestWrite+0x100>)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f956 	bl	8005bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	00010008 	.word	0x00010008
 8005918:	00010002 	.word	0x00010002

0800591c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	460b      	mov	r3, r1
 800592a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005940:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d006      	beq.n	8005956 <I2C_MasterRequestRead+0x3a>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d003      	beq.n	8005956 <I2C_MasterRequestRead+0x3a>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005954:	d108      	bne.n	8005968 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e00b      	b.n	8005980 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596c:	2b11      	cmp	r3, #17
 800596e:	d107      	bne.n	8005980 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800597e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f893 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a6:	d103      	bne.n	80059b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e079      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059bc:	d108      	bne.n	80059d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059be:	897b      	ldrh	r3, [r7, #10]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	611a      	str	r2, [r3, #16]
 80059ce:	e05f      	b.n	8005a90 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	11db      	asrs	r3, r3, #7
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	f003 0306 	and.w	r3, r3, #6
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f063 030f 	orn	r3, r3, #15
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4930      	ldr	r1, [pc, #192]	@ (8005ab0 <I2C_MasterRequestRead+0x194>)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f8dc 	bl	8005bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e054      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059fe:	897b      	ldrh	r3, [r7, #10]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4929      	ldr	r1, [pc, #164]	@ (8005ab4 <I2C_MasterRequestRead+0x198>)
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f8cc 	bl	8005bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e044      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f831 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6a:	d103      	bne.n	8005a74 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a72:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e017      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a78:	897b      	ldrh	r3, [r7, #10]
 8005a7a:	11db      	asrs	r3, r3, #7
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f003 0306 	and.w	r3, r3, #6
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f063 030e 	orn	r3, r3, #14
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4907      	ldr	r1, [pc, #28]	@ (8005ab4 <I2C_MasterRequestRead+0x198>)
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f888 	bl	8005bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	00010008 	.word	0x00010008
 8005ab4:	00010002 	.word	0x00010002

08005ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ac8:	e048      	b.n	8005b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d044      	beq.n	8005b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fc fefd 	bl	80028d0 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d139      	bne.n	8005b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	0c1b      	lsrs	r3, r3, #16
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10d      	bne.n	8005b0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	43da      	mvns	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	bf0c      	ite	eq
 8005b04:	2301      	moveq	r3, #1
 8005b06:	2300      	movne	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	e00c      	b.n	8005b28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	43da      	mvns	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d116      	bne.n	8005b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b48:	f043 0220 	orr.w	r2, r3, #32
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e023      	b.n	8005ba4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	0c1b      	lsrs	r3, r3, #16
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10d      	bne.n	8005b82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	43da      	mvns	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	e00c      	b.n	8005b9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	43da      	mvns	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d093      	beq.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bba:	e071      	b.n	8005ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bca:	d123      	bne.n	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005be4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c00:	f043 0204 	orr.w	r2, r3, #4
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e067      	b.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d041      	beq.n	8005ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1c:	f7fc fe58 	bl	80028d0 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d302      	bcc.n	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d136      	bne.n	8005ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10c      	bne.n	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	43da      	mvns	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf14      	ite	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	2300      	moveq	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	e00b      	b.n	8005c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	43da      	mvns	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d016      	beq.n	8005ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	f043 0220 	orr.w	r2, r3, #32
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e021      	b.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d10c      	bne.n	8005cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	43da      	mvns	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e00b      	b.n	8005cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	43da      	mvns	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bf14      	ite	ne
 8005cd6:	2301      	movne	r3, #1
 8005cd8:	2300      	moveq	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f47f af6d 	bne.w	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cf8:	e034      	b.n	8005d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f8e3 	bl	8005ec6 <I2C_IsAcknowledgeFailed>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e034      	b.n	8005d74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d028      	beq.n	8005d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d12:	f7fc fddd 	bl	80028d0 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d11d      	bne.n	8005d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d32:	2b80      	cmp	r3, #128	@ 0x80
 8005d34:	d016      	beq.n	8005d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	f043 0220 	orr.w	r2, r3, #32
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e007      	b.n	8005d74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6e:	2b80      	cmp	r3, #128	@ 0x80
 8005d70:	d1c3      	bne.n	8005cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d88:	e034      	b.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f89b 	bl	8005ec6 <I2C_IsAcknowledgeFailed>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e034      	b.n	8005e04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d028      	beq.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da2:	f7fc fd95 	bl	80028d0 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d302      	bcc.n	8005db8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d11d      	bne.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d016      	beq.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de0:	f043 0220 	orr.w	r2, r3, #32
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e007      	b.n	8005e04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d1c3      	bne.n	8005d8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e18:	e049      	b.n	8005eae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d119      	bne.n	8005e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0210 	mvn.w	r2, #16
 8005e30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e030      	b.n	8005ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5c:	f7fc fd38 	bl	80028d0 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d302      	bcc.n	8005e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d11d      	bne.n	8005eae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7c:	2b40      	cmp	r3, #64	@ 0x40
 8005e7e:	d016      	beq.n	8005eae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e007      	b.n	8005ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b40      	cmp	r3, #64	@ 0x40
 8005eba:	d1ae      	bne.n	8005e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005edc:	d11b      	bne.n	8005f16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ee6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	f043 0204 	orr.w	r2, r3, #4
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e034      	b.n	8005fa0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005f48:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6852      	ldr	r2, [r2, #4]
 8005f52:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6892      	ldr	r2, [r2, #8]
 8005f5c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005f5e:	f7fc fcb7 	bl	80028d0 <HAL_GetTick>
 8005f62:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005f64:	e00f      	b.n	8005f86 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005f66:	f7fc fcb3 	bl	80028d0 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b31      	cmp	r3, #49	@ 0x31
 8005f72:	d908      	bls.n	8005f86 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e00c      	b.n	8005fa0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e8      	bne.n	8005f66 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005fb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0cc      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b68      	ldr	r3, [pc, #416]	@ (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d90c      	bls.n	8006004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b65      	ldr	r3, [pc, #404]	@ (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b63      	ldr	r3, [pc, #396]	@ (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0b8      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d020      	beq.n	8006052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800601c:	4b59      	ldr	r3, [pc, #356]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4a58      	ldr	r2, [pc, #352]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006034:	4b53      	ldr	r3, [pc, #332]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	4a52      	ldr	r2, [pc, #328]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800603a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800603e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006040:	4b50      	ldr	r3, [pc, #320]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	494d      	ldr	r1, [pc, #308]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	4313      	orrs	r3, r2
 8006050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d044      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d107      	bne.n	8006076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006066:	4b47      	ldr	r3, [pc, #284]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d119      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e07f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d003      	beq.n	8006086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006082:	2b03      	cmp	r3, #3
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006086:	4b3f      	ldr	r3, [pc, #252]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e06f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006096:	4b3b      	ldr	r3, [pc, #236]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e067      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060a6:	4b37      	ldr	r3, [pc, #220]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f023 0203 	bic.w	r2, r3, #3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4934      	ldr	r1, [pc, #208]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060b8:	f7fc fc0a 	bl	80028d0 <HAL_GetTick>
 80060bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c0:	f7fc fc06 	bl	80028d0 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e04f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 020c 	and.w	r2, r3, #12
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d1eb      	bne.n	80060c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060e8:	4b25      	ldr	r3, [pc, #148]	@ (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d20c      	bcs.n	8006110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f6:	4b22      	ldr	r3, [pc, #136]	@ (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fe:	4b20      	ldr	r3, [pc, #128]	@ (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d001      	beq.n	8006110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e032      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800611c:	4b19      	ldr	r3, [pc, #100]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4916      	ldr	r1, [pc, #88]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800613a:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	490e      	ldr	r1, [pc, #56]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800614e:	f000 f889 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 8006152:	4602      	mov	r2, r0
 8006154:	4b0b      	ldr	r3, [pc, #44]	@ (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	490a      	ldr	r1, [pc, #40]	@ (8006188 <HAL_RCC_ClockConfig+0x1c0>)
 8006160:	5ccb      	ldrb	r3, [r1, r3]
 8006162:	fa22 f303 	lsr.w	r3, r2, r3
 8006166:	4a09      	ldr	r2, [pc, #36]	@ (800618c <HAL_RCC_ClockConfig+0x1c4>)
 8006168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800616a:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <HAL_RCC_ClockConfig+0x1c8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7fc fb6a 	bl	8002848 <HAL_InitTick>

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40023c00 	.word	0x40023c00
 8006184:	40023800 	.word	0x40023800
 8006188:	080095e0 	.word	0x080095e0
 800618c:	20000000 	.word	0x20000000
 8006190:	2000008c 	.word	0x2000008c

08006194 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	@ 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d129      	bne.n	80061fa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	4b2b      	ldr	r3, [pc, #172]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 80061ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80061b6:	4b28      	ldr	r3, [pc, #160]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80061c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c8:	2302      	movs	r3, #2
 80061ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061cc:	2303      	movs	r3, #3
 80061ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80061d4:	2300      	movs	r3, #0
 80061d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80061d8:	f107 031c 	add.w	r3, r7, #28
 80061dc:	4619      	mov	r1, r3
 80061de:	481f      	ldr	r0, [pc, #124]	@ (800625c <HAL_RCC_MCOConfig+0xc8>)
 80061e0:	f7fc fc8c 	bl	8002afc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80061e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	430b      	orrs	r3, r1
 80061f2:	4919      	ldr	r1, [pc, #100]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80061f8:	e029      	b.n	800624e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	4b16      	ldr	r3, [pc, #88]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006202:	4a15      	ldr	r2, [pc, #84]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 8006204:	f043 0304 	orr.w	r3, r3, #4
 8006208:	6313      	str	r3, [r2, #48]	@ 0x30
 800620a:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800621a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621c:	2302      	movs	r3, #2
 800621e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006220:	2303      	movs	r3, #3
 8006222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006224:	2300      	movs	r3, #0
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006228:	2300      	movs	r3, #0
 800622a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800622c:	f107 031c 	add.w	r3, r7, #28
 8006230:	4619      	mov	r1, r3
 8006232:	480b      	ldr	r0, [pc, #44]	@ (8006260 <HAL_RCC_MCOConfig+0xcc>)
 8006234:	f7fc fc62 	bl	8002afc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006238:	4b07      	ldr	r3, [pc, #28]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	00d9      	lsls	r1, r3, #3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	430b      	orrs	r3, r1
 8006248:	4903      	ldr	r1, [pc, #12]	@ (8006258 <HAL_RCC_MCOConfig+0xc4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
}
 800624e:	bf00      	nop
 8006250:	3730      	adds	r7, #48	@ 0x30
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40023800 	.word	0x40023800
 800625c:	40020000 	.word	0x40020000
 8006260:	40020800 	.word	0x40020800

08006264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006268:	b094      	sub	sp, #80	@ 0x50
 800626a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006270:	2300      	movs	r3, #0
 8006272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006274:	2300      	movs	r3, #0
 8006276:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800627c:	4b79      	ldr	r3, [pc, #484]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 030c 	and.w	r3, r3, #12
 8006284:	2b08      	cmp	r3, #8
 8006286:	d00d      	beq.n	80062a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006288:	2b08      	cmp	r3, #8
 800628a:	f200 80e1 	bhi.w	8006450 <HAL_RCC_GetSysClockFreq+0x1ec>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <HAL_RCC_GetSysClockFreq+0x34>
 8006292:	2b04      	cmp	r3, #4
 8006294:	d003      	beq.n	800629e <HAL_RCC_GetSysClockFreq+0x3a>
 8006296:	e0db      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006298:	4b73      	ldr	r3, [pc, #460]	@ (8006468 <HAL_RCC_GetSysClockFreq+0x204>)
 800629a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800629c:	e0db      	b.n	8006456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800629e:	4b73      	ldr	r3, [pc, #460]	@ (800646c <HAL_RCC_GetSysClockFreq+0x208>)
 80062a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062a2:	e0d8      	b.n	8006456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d063      	beq.n	8006382 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	099b      	lsrs	r3, r3, #6
 80062c0:	2200      	movs	r2, #0
 80062c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ce:	2300      	movs	r3, #0
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062d6:	4622      	mov	r2, r4
 80062d8:	462b      	mov	r3, r5
 80062da:	f04f 0000 	mov.w	r0, #0
 80062de:	f04f 0100 	mov.w	r1, #0
 80062e2:	0159      	lsls	r1, r3, #5
 80062e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062e8:	0150      	lsls	r0, r2, #5
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4621      	mov	r1, r4
 80062f0:	1a51      	subs	r1, r2, r1
 80062f2:	6139      	str	r1, [r7, #16]
 80062f4:	4629      	mov	r1, r5
 80062f6:	eb63 0301 	sbc.w	r3, r3, r1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006308:	4659      	mov	r1, fp
 800630a:	018b      	lsls	r3, r1, #6
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006312:	4651      	mov	r1, sl
 8006314:	018a      	lsls	r2, r1, #6
 8006316:	4651      	mov	r1, sl
 8006318:	ebb2 0801 	subs.w	r8, r2, r1
 800631c:	4659      	mov	r1, fp
 800631e:	eb63 0901 	sbc.w	r9, r3, r1
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800632e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006336:	4690      	mov	r8, r2
 8006338:	4699      	mov	r9, r3
 800633a:	4623      	mov	r3, r4
 800633c:	eb18 0303 	adds.w	r3, r8, r3
 8006340:	60bb      	str	r3, [r7, #8]
 8006342:	462b      	mov	r3, r5
 8006344:	eb49 0303 	adc.w	r3, r9, r3
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006356:	4629      	mov	r1, r5
 8006358:	024b      	lsls	r3, r1, #9
 800635a:	4621      	mov	r1, r4
 800635c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006360:	4621      	mov	r1, r4
 8006362:	024a      	lsls	r2, r1, #9
 8006364:	4610      	mov	r0, r2
 8006366:	4619      	mov	r1, r3
 8006368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800636a:	2200      	movs	r2, #0
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800636e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006374:	f7f9 ff46 	bl	8000204 <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4613      	mov	r3, r2
 800637e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006380:	e058      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006382:	4b38      	ldr	r3, [pc, #224]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	2200      	movs	r2, #0
 800638a:	4618      	mov	r0, r3
 800638c:	4611      	mov	r1, r2
 800638e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	2300      	movs	r3, #0
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24
 8006398:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800639c:	4642      	mov	r2, r8
 800639e:	464b      	mov	r3, r9
 80063a0:	f04f 0000 	mov.w	r0, #0
 80063a4:	f04f 0100 	mov.w	r1, #0
 80063a8:	0159      	lsls	r1, r3, #5
 80063aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ae:	0150      	lsls	r0, r2, #5
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4641      	mov	r1, r8
 80063b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80063ba:	4649      	mov	r1, r9
 80063bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063d4:	ebb2 040a 	subs.w	r4, r2, sl
 80063d8:	eb63 050b 	sbc.w	r5, r3, fp
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	00eb      	lsls	r3, r5, #3
 80063e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ea:	00e2      	lsls	r2, r4, #3
 80063ec:	4614      	mov	r4, r2
 80063ee:	461d      	mov	r5, r3
 80063f0:	4643      	mov	r3, r8
 80063f2:	18e3      	adds	r3, r4, r3
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	464b      	mov	r3, r9
 80063f8:	eb45 0303 	adc.w	r3, r5, r3
 80063fc:	607b      	str	r3, [r7, #4]
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800640a:	4629      	mov	r1, r5
 800640c:	028b      	lsls	r3, r1, #10
 800640e:	4621      	mov	r1, r4
 8006410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006414:	4621      	mov	r1, r4
 8006416:	028a      	lsls	r2, r1, #10
 8006418:	4610      	mov	r0, r2
 800641a:	4619      	mov	r1, r3
 800641c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800641e:	2200      	movs	r2, #0
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	61fa      	str	r2, [r7, #28]
 8006424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006428:	f7f9 feec 	bl	8000204 <__aeabi_uldivmod>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4613      	mov	r3, r2
 8006432:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006434:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	3301      	adds	r3, #1
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006448:	fbb2 f3f3 	udiv	r3, r2, r3
 800644c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800644e:	e002      	b.n	8006456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006450:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <HAL_RCC_GetSysClockFreq+0x204>)
 8006452:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006458:	4618      	mov	r0, r3
 800645a:	3750      	adds	r7, #80	@ 0x50
 800645c:	46bd      	mov	sp, r7
 800645e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006462:	bf00      	nop
 8006464:	40023800 	.word	0x40023800
 8006468:	00f42400 	.word	0x00f42400
 800646c:	007a1200 	.word	0x007a1200

08006470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006474:	4b03      	ldr	r3, [pc, #12]	@ (8006484 <HAL_RCC_GetHCLKFreq+0x14>)
 8006476:	681b      	ldr	r3, [r3, #0]
}
 8006478:	4618      	mov	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000000 	.word	0x20000000

08006488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800648c:	f7ff fff0 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 8006490:	4602      	mov	r2, r0
 8006492:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	0a9b      	lsrs	r3, r3, #10
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	4903      	ldr	r1, [pc, #12]	@ (80064ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800649e:	5ccb      	ldrb	r3, [r1, r3]
 80064a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40023800 	.word	0x40023800
 80064ac:	080095f0 	.word	0x080095f0

080064b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e273      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d075      	beq.n	80065ba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80064ce:	4b88      	ldr	r3, [pc, #544]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d00c      	beq.n	80064f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064da:	4b85      	ldr	r3, [pc, #532]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d112      	bne.n	800650c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064e6:	4b82      	ldr	r3, [pc, #520]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064f2:	d10b      	bne.n	800650c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f4:	4b7e      	ldr	r3, [pc, #504]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d05b      	beq.n	80065b8 <HAL_RCC_OscConfig+0x108>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d157      	bne.n	80065b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e24e      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006514:	d106      	bne.n	8006524 <HAL_RCC_OscConfig+0x74>
 8006516:	4b76      	ldr	r3, [pc, #472]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a75      	ldr	r2, [pc, #468]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e01d      	b.n	8006560 <HAL_RCC_OscConfig+0xb0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0x98>
 800652e:	4b70      	ldr	r3, [pc, #448]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a6f      	ldr	r2, [pc, #444]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b6d      	ldr	r3, [pc, #436]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a6c      	ldr	r2, [pc, #432]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e00b      	b.n	8006560 <HAL_RCC_OscConfig+0xb0>
 8006548:	4b69      	ldr	r3, [pc, #420]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a68      	ldr	r2, [pc, #416]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 800654e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4b66      	ldr	r3, [pc, #408]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a65      	ldr	r2, [pc, #404]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 800655a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d013      	beq.n	8006590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fc f9b2 	bl	80028d0 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006570:	f7fc f9ae 	bl	80028d0 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	@ 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e213      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	4b5b      	ldr	r3, [pc, #364]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0xc0>
 800658e:	e014      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fc f99e 	bl	80028d0 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006598:	f7fc f99a 	bl	80028d0 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	@ 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e1ff      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065aa:	4b51      	ldr	r3, [pc, #324]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0xe8>
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d063      	beq.n	800668e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80065c6:	4b4a      	ldr	r3, [pc, #296]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065d2:	4b47      	ldr	r3, [pc, #284]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d11c      	bne.n	8006618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065de:	4b44      	ldr	r3, [pc, #272]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d116      	bne.n	8006618 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ea:	4b41      	ldr	r3, [pc, #260]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_RCC_OscConfig+0x152>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d001      	beq.n	8006602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e1d3      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006602:	4b3b      	ldr	r3, [pc, #236]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4937      	ldr	r1, [pc, #220]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006616:	e03a      	b.n	800668e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006620:	4b34      	ldr	r3, [pc, #208]	@ (80066f4 <HAL_RCC_OscConfig+0x244>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006626:	f7fc f953 	bl	80028d0 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800662e:	f7fc f94f 	bl	80028d0 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e1b4      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006640:	4b2b      	ldr	r3, [pc, #172]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664c:	4b28      	ldr	r3, [pc, #160]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	4925      	ldr	r1, [pc, #148]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]
 8006660:	e015      	b.n	800668e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006662:	4b24      	ldr	r3, [pc, #144]	@ (80066f4 <HAL_RCC_OscConfig+0x244>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006668:	f7fc f932 	bl	80028d0 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006670:	f7fc f92e 	bl	80028d0 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e193      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006682:	4b1b      	ldr	r3, [pc, #108]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f0      	bne.n	8006670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d036      	beq.n	8006708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d016      	beq.n	80066d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066a2:	4b15      	ldr	r3, [pc, #84]	@ (80066f8 <HAL_RCC_OscConfig+0x248>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7fc f912 	bl	80028d0 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066b0:	f7fc f90e 	bl	80028d0 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e173      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c2:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <HAL_RCC_OscConfig+0x240>)
 80066c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0x200>
 80066ce:	e01b      	b.n	8006708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d0:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <HAL_RCC_OscConfig+0x248>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d6:	f7fc f8fb 	bl	80028d0 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066dc:	e00e      	b.n	80066fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066de:	f7fc f8f7 	bl	80028d0 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d907      	bls.n	80066fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e15c      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
 80066f0:	40023800 	.word	0x40023800
 80066f4:	42470000 	.word	0x42470000
 80066f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066fc:	4b8a      	ldr	r3, [pc, #552]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80066fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ea      	bne.n	80066de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8097 	beq.w	8006844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006716:	2300      	movs	r3, #0
 8006718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800671a:	4b83      	ldr	r3, [pc, #524]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10f      	bne.n	8006746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	4b7f      	ldr	r3, [pc, #508]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	4a7e      	ldr	r2, [pc, #504]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 8006730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006734:	6413      	str	r3, [r2, #64]	@ 0x40
 8006736:	4b7c      	ldr	r3, [pc, #496]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800673e:	60bb      	str	r3, [r7, #8]
 8006740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006746:	4b79      	ldr	r3, [pc, #484]	@ (800692c <HAL_RCC_OscConfig+0x47c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d118      	bne.n	8006784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006752:	4b76      	ldr	r3, [pc, #472]	@ (800692c <HAL_RCC_OscConfig+0x47c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a75      	ldr	r2, [pc, #468]	@ (800692c <HAL_RCC_OscConfig+0x47c>)
 8006758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800675c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800675e:	f7fc f8b7 	bl	80028d0 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006766:	f7fc f8b3 	bl	80028d0 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e118      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006778:	4b6c      	ldr	r3, [pc, #432]	@ (800692c <HAL_RCC_OscConfig+0x47c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f0      	beq.n	8006766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d106      	bne.n	800679a <HAL_RCC_OscConfig+0x2ea>
 800678c:	4b66      	ldr	r3, [pc, #408]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006790:	4a65      	ldr	r2, [pc, #404]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	6713      	str	r3, [r2, #112]	@ 0x70
 8006798:	e01c      	b.n	80067d4 <HAL_RCC_OscConfig+0x324>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b05      	cmp	r3, #5
 80067a0:	d10c      	bne.n	80067bc <HAL_RCC_OscConfig+0x30c>
 80067a2:	4b61      	ldr	r3, [pc, #388]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a6:	4a60      	ldr	r2, [pc, #384]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067a8:	f043 0304 	orr.w	r3, r3, #4
 80067ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ae:	4b5e      	ldr	r3, [pc, #376]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b2:	4a5d      	ldr	r2, [pc, #372]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ba:	e00b      	b.n	80067d4 <HAL_RCC_OscConfig+0x324>
 80067bc:	4b5a      	ldr	r3, [pc, #360]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c0:	4a59      	ldr	r2, [pc, #356]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c8:	4b57      	ldr	r3, [pc, #348]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067cc:	4a56      	ldr	r2, [pc, #344]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067ce:	f023 0304 	bic.w	r3, r3, #4
 80067d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d015      	beq.n	8006808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fc f878 	bl	80028d0 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e2:	e00a      	b.n	80067fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067e4:	f7fc f874 	bl	80028d0 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e0d7      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0ee      	beq.n	80067e4 <HAL_RCC_OscConfig+0x334>
 8006806:	e014      	b.n	8006832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006808:	f7fc f862 	bl	80028d0 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800680e:	e00a      	b.n	8006826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006810:	f7fc f85e 	bl	80028d0 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800681e:	4293      	cmp	r3, r2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e0c1      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006826:	4b40      	ldr	r3, [pc, #256]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1ee      	bne.n	8006810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d105      	bne.n	8006844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006838:	4b3b      	ldr	r3, [pc, #236]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 800683a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683c:	4a3a      	ldr	r2, [pc, #232]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 800683e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006842:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80ad 	beq.w	80069a8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800684e:	4b36      	ldr	r3, [pc, #216]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 030c 	and.w	r3, r3, #12
 8006856:	2b08      	cmp	r3, #8
 8006858:	d060      	beq.n	800691c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d145      	bne.n	80068ee <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006862:	4b33      	ldr	r3, [pc, #204]	@ (8006930 <HAL_RCC_OscConfig+0x480>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006868:	f7fc f832 	bl	80028d0 <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006870:	f7fc f82e 	bl	80028d0 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e093      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006882:	4b29      	ldr	r3, [pc, #164]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f0      	bne.n	8006870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69da      	ldr	r2, [r3, #28]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	019b      	lsls	r3, r3, #6
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	3b01      	subs	r3, #1
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	061b      	lsls	r3, r3, #24
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b8:	071b      	lsls	r3, r3, #28
 80068ba:	491b      	ldr	r1, [pc, #108]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006930 <HAL_RCC_OscConfig+0x480>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c6:	f7fc f803 	bl	80028d0 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ce:	f7fb ffff 	bl	80028d0 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e064      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068e0:	4b11      	ldr	r3, [pc, #68]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCC_OscConfig+0x41e>
 80068ec:	e05c      	b.n	80069a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ee:	4b10      	ldr	r3, [pc, #64]	@ (8006930 <HAL_RCC_OscConfig+0x480>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f4:	f7fb ffec 	bl	80028d0 <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068fc:	f7fb ffe8 	bl	80028d0 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e04d      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800690e:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <HAL_RCC_OscConfig+0x478>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x44c>
 800691a:	e045      	b.n	80069a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d107      	bne.n	8006934 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e040      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
 8006928:	40023800 	.word	0x40023800
 800692c:	40007000 	.word	0x40007000
 8006930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006934:	4b1f      	ldr	r3, [pc, #124]	@ (80069b4 <HAL_RCC_OscConfig+0x504>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d030      	beq.n	80069a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800694c:	429a      	cmp	r2, r3
 800694e:	d129      	bne.n	80069a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695a:	429a      	cmp	r2, r3
 800695c:	d122      	bne.n	80069a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006964:	4013      	ands	r3, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800696a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800696c:	4293      	cmp	r3, r2
 800696e:	d119      	bne.n	80069a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	3b01      	subs	r3, #1
 800697e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006980:	429a      	cmp	r2, r3
 8006982:	d10f      	bne.n	80069a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006990:	429a      	cmp	r2, r3
 8006992:	d107      	bne.n	80069a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d001      	beq.n	80069a8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	40023800 	.word	0x40023800

080069b8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e038      	b.n	8006a40 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7fa f934 	bl	8000c50 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3308      	adds	r3, #8
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f000 f828 	bl	8006a48 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	461a      	mov	r2, r3
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	f000 f8b0 	bl	8006b68 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6858      	ldr	r0, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	f000 f8f7 	bl	8006c08 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	6892      	ldr	r2, [r2, #8]
 8006a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	6892      	ldr	r2, [r2, #8]
 8006a2e:	f041 0101 	orr.w	r1, r1, #1
 8006a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	f023 0101 	bic.w	r1, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d102      	bne.n	8006a78 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006a72:	2340      	movs	r3, #64	@ 0x40
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e001      	b.n	8006a7c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006a88:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006a8e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006a94:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006a9a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006aa0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006aa6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006aac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006ab2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006ab8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006ae0:	4b20      	ldr	r3, [pc, #128]	@ (8006b64 <FSMC_NORSRAM_Init+0x11c>)
 8006ae2:	60fb      	str	r3, [r7, #12]

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  mask |= FSMC_BCR1_CCLKEN;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aea:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006af2:	60fb      	str	r3, [r7, #12]
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006afa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	ea02 0103 	and.w	r1, r2, r3
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	4319      	orrs	r1, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b24:	d10c      	bne.n	8006b40 <FSMC_NORSRAM_Init+0xf8>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <FSMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	601a      	str	r2, [r3, #0]
  }
#endif
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d006      	beq.n	8006b56 <FSMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	0008fb7f 	.word	0x0008fb7f

08006b68 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	431a      	orrs	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	051b      	lsls	r3, r3, #20
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	3b02      	subs	r3, #2
 8006bae:	061b      	lsls	r3, r3, #24
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	3201      	adds	r2, #1
 8006bbc:	4319      	orrs	r1, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bd0:	d113      	bne.n	8006bfa <FSMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bda:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	051b      	lsls	r3, r3, #20
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c1c:	d11d      	bne.n	8006c5a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c26:	4b13      	ldr	r3, [pc, #76]	@ (8006c74 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	6811      	ldr	r1, [r2, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	6852      	ldr	r2, [r2, #4]
 8006c32:	0112      	lsls	r2, r2, #4
 8006c34:	4311      	orrs	r1, r2
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	6892      	ldr	r2, [r2, #8]
 8006c3a:	0212      	lsls	r2, r2, #8
 8006c3c:	4311      	orrs	r1, r2
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	6992      	ldr	r2, [r2, #24]
 8006c42:	4311      	orrs	r1, r2
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	68d2      	ldr	r2, [r2, #12]
 8006c48:	0412      	lsls	r2, r2, #16
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	ea43 0102 	orr.w	r1, r3, r2
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006c58:	e005      	b.n	8006c66 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	cff00000 	.word	0xcff00000

08006c78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f043 0201 	orr.w	r2, r3, #1
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f023 0201 	bic.w	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cd6:	d901      	bls.n	8006cdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e01b      	b.n	8006d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	daf2      	bge.n	8006cca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	019b      	lsls	r3, r3, #6
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d00:	d901      	bls.n	8006d06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e006      	b.n	8006d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d0f0      	beq.n	8006cf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d38:	d901      	bls.n	8006d3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e018      	b.n	8006d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	daf2      	bge.n	8006d2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2210      	movs	r2, #16
 8006d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d5c:	d901      	bls.n	8006d62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e006      	b.n	8006d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f003 0310 	and.w	r3, r3, #16
 8006d6a:	2b10      	cmp	r3, #16
 8006d6c:	d0f0      	beq.n	8006d50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	@ 0x24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4611      	mov	r1, r2
 8006d88:	461a      	mov	r2, r3
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	71fb      	strb	r3, [r7, #7]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d123      	bne.n	8006dea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006da2:	88bb      	ldrh	r3, [r7, #4]
 8006da4:	3303      	adds	r3, #3
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	e018      	b.n	8006de2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	031a      	lsls	r2, r3, #12
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	3301      	adds	r3, #1
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d3e2      	bcc.n	8006db0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3724      	adds	r7, #36	@ 0x24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b08b      	sub	sp, #44	@ 0x2c
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	089b      	lsrs	r3, r3, #2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e1e:	2300      	movs	r3, #0
 8006e20:	623b      	str	r3, [r7, #32]
 8006e22:	e014      	b.n	8006e4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	3301      	adds	r3, #1
 8006e34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	3301      	adds	r3, #1
 8006e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	3301      	adds	r3, #1
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	3301      	adds	r3, #1
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	6a3a      	ldr	r2, [r7, #32]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d3e6      	bcc.n	8006e24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e56:	8bfb      	ldrh	r3, [r7, #30]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01e      	beq.n	8006e9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e66:	461a      	mov	r2, r3
 8006e68:	f107 0310 	add.w	r3, r7, #16
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	701a      	strb	r2, [r3, #0]
      i++;
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	3301      	adds	r3, #1
 8006e86:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e8e:	8bfb      	ldrh	r3, [r7, #30]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e94:	8bfb      	ldrh	r3, [r7, #30]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1ea      	bne.n	8006e70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	372c      	adds	r7, #44	@ 0x2c
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	4013      	ands	r3, r2
 8006f00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f02:	68bb      	ldr	r3, [r7, #8]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	68f9      	ldr	r1, [r7, #12]
 8006f60:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006f64:	4313      	orrs	r3, r2
 8006f66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d107      	bne.n	8006f7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f74:	461a      	mov	r2, r3
 8006f76:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006f7a:	6053      	str	r3, [r2, #4]
 8006f7c:	e00c      	b.n	8006f98 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d107      	bne.n	8006f94 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006f90:	6053      	str	r3, [r2, #4]
 8006f92:	e001      	b.n	8006f98 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006fc6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006fd6:	2064      	movs	r0, #100	@ 0x64
 8006fd8:	f7fb fc86 	bl	80028e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fe8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006fea:	200a      	movs	r0, #10
 8006fec:	f7fb fc7c 	bl	80028e8 <HAL_Delay>

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800701e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <USB_DriveVbus+0x44>
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d106      	bne.n	800703e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800703c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007048:	d109      	bne.n	800705e <USB_DriveVbus+0x64>
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007058:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800705c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	0c5b      	lsrs	r3, r3, #17
 800708a:	f003 0303 	and.w	r3, r3, #3
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	70fb      	strb	r3, [r7, #3]
 80070ae:	460b      	mov	r3, r1
 80070b0:	70bb      	strb	r3, [r7, #2]
 80070b2:	4613      	mov	r3, r2
 80070b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ca:	461a      	mov	r2, r3
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295
 80070d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80070d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d867      	bhi.n	80071aa <USB_HC_Init+0x10e>
 80070da:	a201      	add	r2, pc, #4	@ (adr r2, 80070e0 <USB_HC_Init+0x44>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	080070f1 	.word	0x080070f1
 80070e4:	0800716d 	.word	0x0800716d
 80070e8:	080070f1 	.word	0x080070f1
 80070ec:	0800712f 	.word	0x0800712f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070fc:	461a      	mov	r2, r3
 80070fe:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007102:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007104:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007108:	2b00      	cmp	r3, #0
 800710a:	da51      	bge.n	80071b0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4413      	add	r3, r2
 8007114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	440a      	add	r2, r1
 8007122:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800712a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800712c:	e040      	b.n	80071b0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713a:	461a      	mov	r2, r3
 800713c:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007140:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007142:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da34      	bge.n	80071b4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4413      	add	r3, r2
 8007152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	440a      	add	r2, r1
 8007160:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007168:	60d3      	str	r3, [r2, #12]
      }

      break;
 800716a:	e023      	b.n	80071b4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007178:	461a      	mov	r2, r3
 800717a:	f240 2325 	movw	r3, #549	@ 0x225
 800717e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007180:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007184:	2b00      	cmp	r3, #0
 8007186:	da17      	bge.n	80071b8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	4413      	add	r3, r2
 8007190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	0151      	lsls	r1, r2, #5
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	440a      	add	r2, r1
 800719e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071a2:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80071a6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80071a8:	e006      	b.n	80071b8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	77fb      	strb	r3, [r7, #31]
      break;
 80071ae:	e004      	b.n	80071ba <USB_HC_Init+0x11e>
      break;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <USB_HC_Init+0x11e>
      break;
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <USB_HC_Init+0x11e>
      break;
 80071b8:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c6:	461a      	mov	r2, r3
 80071c8:	2300      	movs	r3, #0
 80071ca:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071e6:	f043 0302 	orr.w	r3, r3, #2
 80071ea:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	2101      	movs	r1, #1
 80071fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007200:	6939      	ldr	r1, [r7, #16]
 8007202:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007206:	4313      	orrs	r3, r2
 8007208:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007216:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800721a:	2b00      	cmp	r3, #0
 800721c:	da03      	bge.n	8007226 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800721e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	e001      	b.n	800722a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff ff1e 	bl	800706c <USB_GetHostSpeed>
 8007230:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007232:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007236:	2b02      	cmp	r3, #2
 8007238:	d106      	bne.n	8007248 <USB_HC_Init+0x1ac>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d003      	beq.n	8007248 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007240:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e001      	b.n	800724c <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800724c:	787b      	ldrb	r3, [r7, #1]
 800724e:	059b      	lsls	r3, r3, #22
 8007250:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007254:	78bb      	ldrb	r3, [r7, #2]
 8007256:	02db      	lsls	r3, r3, #11
 8007258:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800725c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800725e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007262:	049b      	lsls	r3, r3, #18
 8007264:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007268:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800726a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800726c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007270:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	431a      	orrs	r2, r3
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	440a      	add	r2, r1
 8007282:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800728a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800728c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007290:	2b03      	cmp	r3, #3
 8007292:	d003      	beq.n	800729c <USB_HC_Init+0x200>
 8007294:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007298:	2b01      	cmp	r3, #1
 800729a:	d10f      	bne.n	80072bc <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072ba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80072bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop

080072c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08c      	sub	sp, #48	@ 0x30
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80072e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072e4:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	799b      	ldrb	r3, [r3, #6]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d158      	bne.n	80073a0 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80072ee:	2301      	movs	r3, #1
 80072f0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	78db      	ldrb	r3, [r3, #3]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	8a92      	ldrh	r2, [r2, #20]
 8007300:	fb03 f202 	mul.w	r2, r3, r2
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	61da      	str	r2, [r3, #28]
 8007308:	e079      	b.n	80073fe <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7c9b      	ldrb	r3, [r3, #18]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d130      	bne.n	8007374 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	2bbc      	cmp	r3, #188	@ 0xbc
 8007318:	d918      	bls.n	800734c <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	8a9b      	ldrh	r3, [r3, #20]
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d003      	beq.n	800733c <USB_HC_StartXfer+0x74>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d103      	bne.n	8007344 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2202      	movs	r2, #2
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	e05c      	b.n	80073fe <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2201      	movs	r2, #1
 8007348:	60da      	str	r2, [r3, #12]
 800734a:	e058      	b.n	80073fe <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d007      	beq.n	800736c <USB_HC_StartXfer+0xa4>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d003      	beq.n	800736c <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2204      	movs	r2, #4
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	e048      	b.n	80073fe <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2203      	movs	r2, #3
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	e044      	b.n	80073fe <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d10d      	bne.n	8007396 <USB_HC_StartXfer+0xce>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	8a92      	ldrh	r2, [r2, #20]
 8007382:	4293      	cmp	r3, r2
 8007384:	d907      	bls.n	8007396 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007386:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	8a92      	ldrh	r2, [r2, #20]
 800738c:	fb03 f202 	mul.w	r2, r3, r2
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	61da      	str	r2, [r3, #28]
 8007394:	e033      	b.n	80073fe <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	61da      	str	r2, [r3, #28]
 800739e:	e02e      	b.n	80073fe <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d018      	beq.n	80073da <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	8a92      	ldrh	r2, [r2, #20]
 80073b0:	4413      	add	r3, r2
 80073b2:	3b01      	subs	r3, #1
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	8a92      	ldrh	r2, [r2, #20]
 80073b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80073be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80073c0:	8b7b      	ldrh	r3, [r7, #26]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d90b      	bls.n	80073de <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80073c6:	8b7b      	ldrh	r3, [r7, #26]
 80073c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	8a92      	ldrh	r2, [r2, #20]
 80073d0:	fb03 f202 	mul.w	r2, r3, r2
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	61da      	str	r2, [r3, #28]
 80073d8:	e001      	b.n	80073de <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80073da:	2301      	movs	r3, #1
 80073dc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	78db      	ldrb	r3, [r3, #3]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	8a92      	ldrh	r2, [r2, #20]
 80073ec:	fb03 f202 	mul.w	r2, r3, r2
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	61da      	str	r2, [r3, #28]
 80073f4:	e003      	b.n	80073fe <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6a1a      	ldr	r2, [r3, #32]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007406:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007408:	04d9      	lsls	r1, r3, #19
 800740a:	4ba4      	ldr	r3, [pc, #656]	@ (800769c <USB_HC_StartXfer+0x3d4>)
 800740c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800740e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	7d9b      	ldrb	r3, [r3, #22]
 8007414:	075b      	lsls	r3, r3, #29
 8007416:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800741a:	69f9      	ldr	r1, [r7, #28]
 800741c:	0148      	lsls	r0, r1, #5
 800741e:	6a39      	ldr	r1, [r7, #32]
 8007420:	4401      	add	r1, r0
 8007422:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007426:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007428:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d009      	beq.n	8007444 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6999      	ldr	r1, [r3, #24]
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	4413      	add	r3, r2
 800743c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007440:	460a      	mov	r2, r1
 8007442:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	bf0c      	ite	eq
 8007454:	2301      	moveq	r3, #1
 8007456:	2300      	movne	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	4413      	add	r3, r2
 8007464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	0151      	lsls	r1, r2, #5
 800746e:	6a3a      	ldr	r2, [r7, #32]
 8007470:	440a      	add	r2, r1
 8007472:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007476:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800747a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	4413      	add	r3, r2
 8007484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	7e7b      	ldrb	r3, [r7, #25]
 800748c:	075b      	lsls	r3, r3, #29
 800748e:	69f9      	ldr	r1, [r7, #28]
 8007490:	0148      	lsls	r0, r1, #5
 8007492:	6a39      	ldr	r1, [r7, #32]
 8007494:	4401      	add	r1, r0
 8007496:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800749a:	4313      	orrs	r3, r2
 800749c:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	799b      	ldrb	r3, [r3, #6]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	f040 80c4 	bne.w	8007630 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	7c5b      	ldrb	r3, [r3, #17]
 80074ac:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80074b2:	4313      	orrs	r3, r2
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80074c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80074c4:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80074e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	79db      	ldrb	r3, [r3, #7]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d123      	bne.n	8007536 <USB_HC_StartXfer+0x26e>
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	78db      	ldrb	r3, [r3, #3]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d11f      	bne.n	8007536 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	6a3a      	ldr	r2, [r7, #32]
 800750a:	440a      	add	r2, r1
 800750c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007514:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	4413      	add	r3, r2
 800751e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	6a3a      	ldr	r2, [r7, #32]
 800752a:	440a      	add	r2, r1
 800752c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007534:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	7c9b      	ldrb	r3, [r3, #18]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d003      	beq.n	8007546 <USB_HC_StartXfer+0x27e>
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	7c9b      	ldrb	r3, [r3, #18]
 8007542:	2b03      	cmp	r3, #3
 8007544:	d117      	bne.n	8007576 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800754a:	2b01      	cmp	r3, #1
 800754c:	d113      	bne.n	8007576 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	78db      	ldrb	r3, [r3, #3]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d10f      	bne.n	8007576 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	4413      	add	r3, r2
 800755e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	69fa      	ldr	r2, [r7, #28]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	440a      	add	r2, r1
 800756c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007574:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	7c9b      	ldrb	r3, [r3, #18]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d163      	bne.n	8007646 <USB_HC_StartXfer+0x37e>
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	78db      	ldrb	r3, [r3, #3]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d15f      	bne.n	8007646 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	3b01      	subs	r3, #1
 800758c:	2b03      	cmp	r3, #3
 800758e:	d859      	bhi.n	8007644 <USB_HC_StartXfer+0x37c>
 8007590:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <USB_HC_StartXfer+0x2d0>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075cb 	.word	0x080075cb
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	0800760f 	.word	0x0800760f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	6a3a      	ldr	r2, [r7, #32]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075c6:	6053      	str	r3, [r2, #4]
          break;
 80075c8:	e03d      	b.n	8007646 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	6a3a      	ldr	r2, [r7, #32]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075e4:	f043 030e 	orr.w	r3, r3, #14
 80075e8:	6053      	str	r3, [r2, #4]
          break;
 80075ea:	e02c      	b.n	8007646 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	6a3a      	ldr	r2, [r7, #32]
 8007600:	440a      	add	r2, r1
 8007602:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800760a:	6053      	str	r3, [r2, #4]
          break;
 800760c:	e01b      	b.n	8007646 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	4413      	add	r3, r2
 8007616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	6a3a      	ldr	r2, [r7, #32]
 8007622:	440a      	add	r2, r1
 8007624:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800762c:	6053      	str	r3, [r2, #4]
          break;
 800762e:	e00a      	b.n	8007646 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763c:	461a      	mov	r2, r3
 800763e:	2300      	movs	r3, #0
 8007640:	6053      	str	r3, [r2, #4]
 8007642:	e000      	b.n	8007646 <USB_HC_StartXfer+0x37e>
          break;
 8007644:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	4413      	add	r3, r2
 800764e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800765c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	78db      	ldrb	r3, [r3, #3]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d004      	beq.n	8007670 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800766c:	613b      	str	r3, [r7, #16]
 800766e:	e003      	b.n	8007678 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007676:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800767e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	4413      	add	r3, r2
 8007688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800768c:	461a      	mov	r2, r3
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	e055      	b.n	8007748 <USB_HC_StartXfer+0x480>
 800769c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	78db      	ldrb	r3, [r3, #3]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d14e      	bne.n	8007746 <USB_HC_StartXfer+0x47e>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d04a      	beq.n	8007746 <USB_HC_StartXfer+0x47e>
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	79db      	ldrb	r3, [r3, #7]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d146      	bne.n	8007746 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	7c9b      	ldrb	r3, [r3, #18]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d831      	bhi.n	8007724 <USB_HC_StartXfer+0x45c>
 80076c0:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <USB_HC_StartXfer+0x400>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076d9 	.word	0x080076d9
 80076cc:	080076fd 	.word	0x080076fd
 80076d0:	080076d9 	.word	0x080076d9
 80076d4:	080076fd 	.word	0x080076fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	3303      	adds	r3, #3
 80076de:	089b      	lsrs	r3, r3, #2
 80076e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80076e2:	8afa      	ldrh	r2, [r7, #22]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d91c      	bls.n	8007728 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	f043 0220 	orr.w	r2, r3, #32
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80076fa:	e015      	b.n	8007728 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	3303      	adds	r3, #3
 8007702:	089b      	lsrs	r3, r3, #2
 8007704:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007706:	8afa      	ldrh	r2, [r7, #22]
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	b29b      	uxth	r3, r3
 8007712:	429a      	cmp	r2, r3
 8007714:	d90a      	bls.n	800772c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	619a      	str	r2, [r3, #24]
        }
        break;
 8007722:	e003      	b.n	800772c <USB_HC_StartXfer+0x464>

      default:
        break;
 8007724:	bf00      	nop
 8007726:	e002      	b.n	800772e <USB_HC_StartXfer+0x466>
        break;
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <USB_HC_StartXfer+0x466>
        break;
 800772c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6999      	ldr	r1, [r3, #24]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	785a      	ldrb	r2, [r3, #1]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	b29b      	uxth	r3, r3
 800773c:	2000      	movs	r0, #0
 800773e:	9000      	str	r0, [sp, #0]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff fb1b 	bl	8006d7c <USB_WritePacket>
  }

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3728      	adds	r7, #40	@ 0x28
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	b29b      	uxth	r3, r3
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007772:	b480      	push	{r7}
 8007774:	b089      	sub	sp, #36	@ 0x24
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	0c9b      	lsrs	r3, r3, #18
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	0fdb      	lsrs	r3, r3, #31
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	0fdb      	lsrs	r3, r3, #31
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d10d      	bne.n	80077f4 <USB_HC_Halt+0x82>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <USB_HC_Halt+0x82>
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d002      	beq.n	80077f0 <USB_HC_Halt+0x7e>
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d101      	bne.n	80077f4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	e0d8      	b.n	80079a6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <USB_HC_Halt+0x8e>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d173      	bne.n	80078e8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	4413      	add	r3, r2
 8007808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	440a      	add	r2, r1
 8007816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800781a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800781e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d14a      	bne.n	80078c2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007830:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d133      	bne.n	80078a0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	440a      	add	r2, r1
 800784e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007852:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007856:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	0151      	lsls	r1, r2, #5
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	440a      	add	r2, r1
 800786e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007872:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007876:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	3301      	adds	r3, #1
 800787c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007884:	d82e      	bhi.n	80078e4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800789c:	d0ec      	beq.n	8007878 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800789e:	e081      	b.n	80079a4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078be:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078c0:	e070      	b.n	80079a4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078e2:	e05f      	b.n	80079a4 <USB_HC_Halt+0x232>
            break;
 80078e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078e6:	e05d      	b.n	80079a4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007902:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007906:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d133      	bne.n	8007980 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	440a      	add	r2, r1
 800792e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007932:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007936:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	4413      	add	r3, r2
 8007940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	0151      	lsls	r1, r2, #5
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	440a      	add	r2, r1
 800794e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007952:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007956:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3301      	adds	r3, #1
 800795c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007964:	d81d      	bhi.n	80079a2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4413      	add	r3, r2
 800796e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800797c:	d0ec      	beq.n	8007958 <USB_HC_Halt+0x1e6>
 800797e:	e011      	b.n	80079a4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	4413      	add	r3, r2
 8007988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	440a      	add	r2, r1
 8007996:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800799a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	e000      	b.n	80079a4 <USB_HC_Halt+0x232>
          break;
 80079a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3724      	adds	r7, #36	@ 0x24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b088      	sub	sp, #32
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff f967 	bl	8006c9a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079cc:	2110      	movs	r1, #16
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff f974 	bl	8006cbc <USB_FlushTxFifo>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff f99e 	bl	8006d20 <USB_FlushRxFifo>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e01f      	b.n	8007a34 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a0a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a12:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a1a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a28:	461a      	mov	r2, r3
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2b0f      	cmp	r3, #15
 8007a38:	d9dc      	bls.n	80079f4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	e034      	b.n	8007aaa <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a56:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a5e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a66:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a74:	461a      	mov	r2, r3
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a86:	d80c      	bhi.n	8007aa2 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a9e:	d0ec      	beq.n	8007a7a <USB_StopHost+0xc8>
 8007aa0:	e000      	b.n	8007aa4 <USB_StopHost+0xf2>
        break;
 8007aa2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b0f      	cmp	r3, #15
 8007aae:	d9c7      	bls.n	8007a40 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8007abc:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff f8d6 	bl	8006c78 <USB_EnableGlobalInt>

  return ret;
 8007acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	e009      	b.n	8007afc <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	33e0      	adds	r3, #224	@ 0xe0
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	2200      	movs	r2, #0
 8007af4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	d9f2      	bls.n	8007ae8 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b02:	2300      	movs	r3, #0
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	e009      	b.n	8007b1c <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b22:	d3f1      	bcc.n	8007b08 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2240      	movs	r2, #64	@ 0x40
 8007b48:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	331c      	adds	r3, #28
 8007b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 fcf8 	bl	8009570 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f001 fcef 	bl	8009570 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b98:	2212      	movs	r2, #18
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 fce7 	bl	8009570 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007ba8:	223e      	movs	r2, #62	@ 0x3e
 8007baa:	2100      	movs	r1, #0
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 fcdf 	bl	8009570 <memset>

  return USBH_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fb7d 	bl	80092c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007bca:	2101      	movs	r1, #1
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 fc64 	bl	800949a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af04      	add	r7, sp, #16
 8007be2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007be4:	2302      	movs	r3, #2
 8007be6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d102      	bne.n	8007bfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b0b      	cmp	r3, #11
 8007c06:	f200 81bb 	bhi.w	8007f80 <USBH_Process+0x3a4>
 8007c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c10 <USBH_Process+0x34>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c41 	.word	0x08007c41
 8007c14:	08007c73 	.word	0x08007c73
 8007c18:	08007cdb 	.word	0x08007cdb
 8007c1c:	08007f1b 	.word	0x08007f1b
 8007c20:	08007f81 	.word	0x08007f81
 8007c24:	08007d7b 	.word	0x08007d7b
 8007c28:	08007ec1 	.word	0x08007ec1
 8007c2c:	08007db1 	.word	0x08007db1
 8007c30:	08007dd1 	.word	0x08007dd1
 8007c34:	08007def 	.word	0x08007def
 8007c38:	08007e33 	.word	0x08007e33
 8007c3c:	08007f03 	.word	0x08007f03
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 819b 	beq.w	8007f84 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007c54:	20c8      	movs	r0, #200	@ 0xc8
 8007c56:	f001 fc37 	bl	80094c8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 fb8f 	bl	800937e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c70:	e188      	b.n	8007f84 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d107      	bne.n	8007c8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c8a:	e18a      	b.n	8007fa2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c96:	d914      	bls.n	8007cc2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d903      	bls.n	8007cba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	220d      	movs	r2, #13
 8007cb6:	701a      	strb	r2, [r3, #0]
      break;
 8007cb8:	e173      	b.n	8007fa2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
      break;
 8007cc0:	e16f      	b.n	8007fa2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007cc8:	f103 020a 	add.w	r2, r3, #10
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007cd2:	200a      	movs	r0, #10
 8007cd4:	f001 fbf8 	bl	80094c8 <USBH_Delay>
      break;
 8007cd8:	e163      	b.n	8007fa2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cea:	2104      	movs	r1, #4
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007cf0:	2064      	movs	r0, #100	@ 0x64
 8007cf2:	f001 fbe9 	bl	80094c8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 fb1a 	bl	8009330 <USBH_LL_GetSpeed>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	461a      	mov	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2205      	movs	r2, #5
 8007d0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 fa16 	bl	8009140 <USBH_AllocPipe>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007d1c:	2180      	movs	r1, #128	@ 0x80
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fa0e 	bl	8009140 <USBH_AllocPipe>
 8007d24:	4603      	mov	r3, r0
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7919      	ldrb	r1, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d40:	9202      	str	r2, [sp, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	9201      	str	r2, [sp, #4]
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2280      	movs	r2, #128	@ 0x80
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 f9d8 	bl	8009102 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	7959      	ldrb	r1, [r3, #5]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d66:	9202      	str	r2, [sp, #8]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	9201      	str	r2, [sp, #4]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2200      	movs	r2, #0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 f9c5 	bl	8009102 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d78:	e113      	b.n	8007fa2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f916 	bl	8007fac <USBH_HandleEnum>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f040 80fd 	bne.w	8007f88 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d103      	bne.n	8007da8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2208      	movs	r2, #8
 8007da4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007da6:	e0ef      	b.n	8007f88 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2207      	movs	r2, #7
 8007dac:	701a      	strb	r2, [r3, #0]
      break;
 8007dae:	e0eb      	b.n	8007f88 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80e8 	beq.w	8007f8c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2208      	movs	r2, #8
 8007dcc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007dce:	e0dd      	b.n	8007f8c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fc2b 	bl	8008634 <USBH_SetCfg>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 80d5 	bne.w	8007f90 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2209      	movs	r2, #9
 8007dea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dec:	e0d0      	b.n	8007f90 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d016      	beq.n	8007e2a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fc3b 	bl	800867a <USBH_SetFeature>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	220a      	movs	r2, #10
 8007e14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e16:	e0bd      	b.n	8007f94 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	f040 80b9 	bne.w	8007f94 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	220a      	movs	r2, #10
 8007e26:	701a      	strb	r2, [r3, #0]
      break;
 8007e28:	e0b4      	b.n	8007f94 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	220a      	movs	r2, #10
 8007e2e:	701a      	strb	r2, [r3, #0]
      break;
 8007e30:	e0b0      	b.n	8007f94 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80ad 	beq.w	8007f98 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
 8007e4a:	e016      	b.n	8007e7a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e4c:	7bfa      	ldrb	r2, [r7, #15]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	32de      	adds	r2, #222	@ 0xde
 8007e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e56:	791a      	ldrb	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d108      	bne.n	8007e74 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e62:	7bfa      	ldrb	r2, [r7, #15]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	32de      	adds	r2, #222	@ 0xde
 8007e68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007e72:	e005      	b.n	8007e80 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	3301      	adds	r3, #1
 8007e78:	73fb      	strb	r3, [r7, #15]
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0e5      	beq.n	8007e4c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d016      	beq.n	8007eb8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ea8:	2103      	movs	r1, #3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007eae:	e073      	b.n	8007f98 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	220d      	movs	r2, #13
 8007eb4:	701a      	strb	r2, [r3, #0]
      break;
 8007eb6:	e06f      	b.n	8007f98 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	220d      	movs	r2, #13
 8007ebc:	701a      	strb	r2, [r3, #0]
      break;
 8007ebe:	e06b      	b.n	8007f98 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d017      	beq.n	8007efa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d103      	bne.n	8007eea <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	220b      	movs	r2, #11
 8007ee6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ee8:	e058      	b.n	8007f9c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d154      	bne.n	8007f9c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	220d      	movs	r2, #13
 8007ef6:	701a      	strb	r2, [r3, #0]
      break;
 8007ef8:	e050      	b.n	8007f9c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	220d      	movs	r2, #13
 8007efe:	701a      	strb	r2, [r3, #0]
      break;
 8007f00:	e04c      	b.n	8007f9c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d049      	beq.n	8007fa0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
      }
      break;
 8007f18:	e042      	b.n	8007fa0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fdd7 	bl	8007ad6 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f56:	2105      	movs	r1, #5
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d107      	bne.n	8007f78 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff fe23 	bl	8007bbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f76:	e014      	b.n	8007fa2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 f9a3 	bl	80092c4 <USBH_LL_Start>
      break;
 8007f7e:	e010      	b.n	8007fa2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007f80:	bf00      	nop
 8007f82:	e00e      	b.n	8007fa2 <USBH_Process+0x3c6>
      break;
 8007f84:	bf00      	nop
 8007f86:	e00c      	b.n	8007fa2 <USBH_Process+0x3c6>
      break;
 8007f88:	bf00      	nop
 8007f8a:	e00a      	b.n	8007fa2 <USBH_Process+0x3c6>
    break;
 8007f8c:	bf00      	nop
 8007f8e:	e008      	b.n	8007fa2 <USBH_Process+0x3c6>
      break;
 8007f90:	bf00      	nop
 8007f92:	e006      	b.n	8007fa2 <USBH_Process+0x3c6>
      break;
 8007f94:	bf00      	nop
 8007f96:	e004      	b.n	8007fa2 <USBH_Process+0x3c6>
      break;
 8007f98:	bf00      	nop
 8007f9a:	e002      	b.n	8007fa2 <USBH_Process+0x3c6>
      break;
 8007f9c:	bf00      	nop
 8007f9e:	e000      	b.n	8007fa2 <USBH_Process+0x3c6>
      break;
 8007fa0:	bf00      	nop
  }
  return USBH_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af04      	add	r7, sp, #16
 8007fb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	2b07      	cmp	r3, #7
 8007fc2:	f200 81bd 	bhi.w	8008340 <USBH_HandleEnum+0x394>
 8007fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fcc <USBH_HandleEnum+0x20>)
 8007fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fcc:	08007fed 	.word	0x08007fed
 8007fd0:	080080a7 	.word	0x080080a7
 8007fd4:	08008111 	.word	0x08008111
 8007fd8:	0800819b 	.word	0x0800819b
 8007fdc:	08008205 	.word	0x08008205
 8007fe0:	08008275 	.word	0x08008275
 8007fe4:	080082bb 	.word	0x080082bb
 8007fe8:	08008301 	.word	0x08008301
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007fec:	2108      	movs	r1, #8
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa3d 	bl	800846e <USBH_Get_DevDesc>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d12e      	bne.n	800805c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	7919      	ldrb	r1, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008022:	9202      	str	r2, [sp, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	9201      	str	r2, [sp, #4]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	4603      	mov	r3, r0
 800802c:	2280      	movs	r2, #128	@ 0x80
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f867 	bl	8009102 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	7959      	ldrb	r1, [r3, #5]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008048:	9202      	str	r2, [sp, #8]
 800804a:	2200      	movs	r2, #0
 800804c:	9201      	str	r2, [sp, #4]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4603      	mov	r3, r0
 8008052:	2200      	movs	r2, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 f854 	bl	8009102 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800805a:	e173      	b.n	8008344 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b03      	cmp	r3, #3
 8008060:	f040 8170 	bne.w	8008344 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800806a:	3301      	adds	r3, #1
 800806c:	b2da      	uxtb	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800807a:	2b03      	cmp	r3, #3
 800807c:	d903      	bls.n	8008086 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	220d      	movs	r2, #13
 8008082:	701a      	strb	r2, [r3, #0]
      break;
 8008084:	e15e      	b.n	8008344 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	795b      	ldrb	r3, [r3, #5]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 f878 	bl	8009182 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	791b      	ldrb	r3, [r3, #4]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f872 	bl	8009182 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
      break;
 80080a4:	e14e      	b.n	8008344 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80080a6:	2112      	movs	r1, #18
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f9e0 	bl	800846e <USBH_Get_DevDesc>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d103      	bne.n	80080c0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080be:	e143      	b.n	8008348 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	f040 8140 	bne.w	8008348 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080ce:	3301      	adds	r3, #1
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d903      	bls.n	80080ea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	220d      	movs	r2, #13
 80080e6:	701a      	strb	r2, [r3, #0]
      break;
 80080e8:	e12e      	b.n	8008348 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	795b      	ldrb	r3, [r3, #5]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 f846 	bl	8009182 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	791b      	ldrb	r3, [r3, #4]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f840 	bl	8009182 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
      break;
 800810e:	e11b      	b.n	8008348 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008110:	2101      	movs	r1, #1
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa6a 	bl	80085ec <USBH_SetAddress>
 8008118:	4603      	mov	r3, r0
 800811a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d130      	bne.n	8008184 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008122:	2002      	movs	r0, #2
 8008124:	f001 f9d0 	bl	80094c8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2203      	movs	r2, #3
 8008134:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	7919      	ldrb	r1, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800814a:	9202      	str	r2, [sp, #8]
 800814c:	2200      	movs	r2, #0
 800814e:	9201      	str	r2, [sp, #4]
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	4603      	mov	r3, r0
 8008154:	2280      	movs	r2, #128	@ 0x80
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 ffd3 	bl	8009102 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7959      	ldrb	r1, [r3, #5]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008170:	9202      	str	r2, [sp, #8]
 8008172:	2200      	movs	r2, #0
 8008174:	9201      	str	r2, [sp, #4]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4603      	mov	r3, r0
 800817a:	2200      	movs	r2, #0
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 ffc0 	bl	8009102 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008182:	e0e3      	b.n	800834c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b03      	cmp	r3, #3
 8008188:	f040 80e0 	bne.w	800834c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220d      	movs	r2, #13
 8008190:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	705a      	strb	r2, [r3, #1]
      break;
 8008198:	e0d8      	b.n	800834c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800819a:	2109      	movs	r1, #9
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f992 	bl	80084c6 <USBH_Get_CfgDesc>
 80081a2:	4603      	mov	r3, r0
 80081a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d103      	bne.n	80081b4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2204      	movs	r2, #4
 80081b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081b2:	e0cd      	b.n	8008350 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	f040 80ca 	bne.w	8008350 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081c2:	3301      	adds	r3, #1
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d903      	bls.n	80081de <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	220d      	movs	r2, #13
 80081da:	701a      	strb	r2, [r3, #0]
      break;
 80081dc:	e0b8      	b.n	8008350 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	795b      	ldrb	r3, [r3, #5]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 ffcc 	bl	8009182 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	791b      	ldrb	r3, [r3, #4]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 ffc6 	bl	8009182 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
      break;
 8008202:	e0a5      	b.n	8008350 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f95a 	bl	80084c6 <USBH_Get_CfgDesc>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2205      	movs	r2, #5
 8008220:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008222:	e097      	b.n	8008354 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2b03      	cmp	r3, #3
 8008228:	f040 8094 	bne.w	8008354 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008232:	3301      	adds	r3, #1
 8008234:	b2da      	uxtb	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008242:	2b03      	cmp	r3, #3
 8008244:	d903      	bls.n	800824e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	220d      	movs	r2, #13
 800824a:	701a      	strb	r2, [r3, #0]
      break;
 800824c:	e082      	b.n	8008354 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	795b      	ldrb	r3, [r3, #5]
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 ff94 	bl	8009182 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	791b      	ldrb	r3, [r3, #4]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 ff8e 	bl	8009182 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	701a      	strb	r2, [r3, #0]
      break;
 8008272:	e06f      	b.n	8008354 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800827a:	2b00      	cmp	r3, #0
 800827c:	d019      	beq.n	80082b2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800828a:	23ff      	movs	r3, #255	@ 0xff
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f944 	bl	800851a <USBH_Get_StringDesc>
 8008292:	4603      	mov	r3, r0
 8008294:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2206      	movs	r2, #6
 80082a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082a2:	e059      	b.n	8008358 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d156      	bne.n	8008358 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2206      	movs	r2, #6
 80082ae:	705a      	strb	r2, [r3, #1]
      break;
 80082b0:	e052      	b.n	8008358 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2206      	movs	r2, #6
 80082b6:	705a      	strb	r2, [r3, #1]
      break;
 80082b8:	e04e      	b.n	8008358 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d019      	beq.n	80082f8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80082d0:	23ff      	movs	r3, #255	@ 0xff
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f921 	bl	800851a <USBH_Get_StringDesc>
 80082d8:	4603      	mov	r3, r0
 80082da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2207      	movs	r2, #7
 80082e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082e8:	e038      	b.n	800835c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d135      	bne.n	800835c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2207      	movs	r2, #7
 80082f4:	705a      	strb	r2, [r3, #1]
      break;
 80082f6:	e031      	b.n	800835c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2207      	movs	r2, #7
 80082fc:	705a      	strb	r2, [r3, #1]
      break;
 80082fe:	e02d      	b.n	800835c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008306:	2b00      	cmp	r3, #0
 8008308:	d017      	beq.n	800833a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008316:	23ff      	movs	r3, #255	@ 0xff
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f8fe 	bl	800851a <USBH_Get_StringDesc>
 800831e:	4603      	mov	r3, r0
 8008320:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800832c:	e018      	b.n	8008360 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	2b03      	cmp	r3, #3
 8008332:	d115      	bne.n	8008360 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
      break;
 8008338:	e012      	b.n	8008360 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	73fb      	strb	r3, [r7, #15]
      break;
 800833e:	e00f      	b.n	8008360 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008340:	bf00      	nop
 8008342:	e00e      	b.n	8008362 <USBH_HandleEnum+0x3b6>
      break;
 8008344:	bf00      	nop
 8008346:	e00c      	b.n	8008362 <USBH_HandleEnum+0x3b6>
      break;
 8008348:	bf00      	nop
 800834a:	e00a      	b.n	8008362 <USBH_HandleEnum+0x3b6>
      break;
 800834c:	bf00      	nop
 800834e:	e008      	b.n	8008362 <USBH_HandleEnum+0x3b6>
      break;
 8008350:	bf00      	nop
 8008352:	e006      	b.n	8008362 <USBH_HandleEnum+0x3b6>
      break;
 8008354:	bf00      	nop
 8008356:	e004      	b.n	8008362 <USBH_HandleEnum+0x3b6>
      break;
 8008358:	bf00      	nop
 800835a:	e002      	b.n	8008362 <USBH_HandleEnum+0x3b6>
      break;
 800835c:	bf00      	nop
 800835e:	e000      	b.n	8008362 <USBH_HandleEnum+0x3b6>
      break;
 8008360:	bf00      	nop
  }
  return Status;
 8008362:	7bfb      	ldrb	r3, [r7, #15]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f804 	bl	8008390 <USBH_HandleSof>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b0b      	cmp	r3, #11
 80083a0:	d10a      	bne.n	80083b8 <USBH_HandleSof+0x28>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
  }
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80083d0:	bf00      	nop
}
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80083ec:	bf00      	nop
}
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 ff57 	bl	80092fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	791b      	ldrb	r3, [r3, #4]
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fe95 	bl	8009182 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	795b      	ldrb	r3, [r3, #5]
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fe8f 	bl	8009182 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b086      	sub	sp, #24
 8008472:	af02      	add	r7, sp, #8
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800847a:	887b      	ldrh	r3, [r7, #2]
 800847c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008480:	d901      	bls.n	8008486 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008482:	2303      	movs	r3, #3
 8008484:	e01b      	b.n	80084be <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800848c:	887b      	ldrh	r3, [r7, #2]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	4613      	mov	r3, r2
 8008492:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008496:	2100      	movs	r1, #0
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f872 	bl	8008582 <USBH_GetDescriptor>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084ae:	887a      	ldrh	r2, [r7, #2]
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f906 	bl	80086c4 <USBH_ParseDevDesc>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b086      	sub	sp, #24
 80084ca:	af02      	add	r7, sp, #8
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	331c      	adds	r3, #28
 80084d6:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80084d8:	887b      	ldrh	r3, [r7, #2]
 80084da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084de:	d901      	bls.n	80084e4 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e016      	b.n	8008512 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80084e4:	887b      	ldrh	r3, [r7, #2]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084ee:	2100      	movs	r1, #0
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f846 	bl	8008582 <USBH_GetDescriptor>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d107      	bne.n	8008510 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008500:	887b      	ldrh	r3, [r7, #2]
 8008502:	461a      	mov	r2, r3
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f98c 	bl	8008824 <USBH_ParseCfgDesc>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b088      	sub	sp, #32
 800851e:	af02      	add	r7, sp, #8
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	461a      	mov	r2, r3
 8008526:	460b      	mov	r3, r1
 8008528:	72fb      	strb	r3, [r7, #11]
 800852a:	4613      	mov	r3, r2
 800852c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800852e:	893b      	ldrh	r3, [r7, #8]
 8008530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008534:	d802      	bhi.n	800853c <USBH_Get_StringDesc+0x22>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800853c:	2303      	movs	r3, #3
 800853e:	e01c      	b.n	800857a <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	b29b      	uxth	r3, r3
 8008544:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008548:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008550:	893b      	ldrh	r3, [r7, #8]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	460b      	mov	r3, r1
 8008556:	2100      	movs	r1, #0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f812 	bl	8008582 <USBH_GetDescriptor>
 800855e:	4603      	mov	r3, r0
 8008560:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d107      	bne.n	8008578 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800856e:	893a      	ldrh	r2, [r7, #8]
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fb6a 	bl	8008c4c <USBH_ParseStringDesc>
  }

  return status;
 8008578:	7dfb      	ldrb	r3, [r7, #23]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	72fb      	strb	r3, [r7, #11]
 8008590:	4613      	mov	r3, r2
 8008592:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	789b      	ldrb	r3, [r3, #2]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d11c      	bne.n	80085d6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800859c:	7afb      	ldrb	r3, [r7, #11]
 800859e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2206      	movs	r2, #6
 80085ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	893a      	ldrh	r2, [r7, #8]
 80085b2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80085b4:	893b      	ldrh	r3, [r7, #8]
 80085b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80085ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085be:	d104      	bne.n	80085ca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f240 4209 	movw	r2, #1033	@ 0x409
 80085c6:	829a      	strh	r2, [r3, #20]
 80085c8:	e002      	b.n	80085d0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8b3a      	ldrh	r2, [r7, #24]
 80085d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80085d6:	8b3b      	ldrh	r3, [r7, #24]
 80085d8:	461a      	mov	r2, r3
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fb82 	bl	8008ce6 <USBH_CtlReq>
 80085e2:	4603      	mov	r3, r0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	789b      	ldrb	r3, [r3, #2]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d10f      	bne.n	8008620 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2205      	movs	r2, #5
 800860a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	b29a      	uxth	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008620:	2200      	movs	r2, #0
 8008622:	2100      	movs	r1, #0
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb5e 	bl	8008ce6 <USBH_CtlReq>
 800862a:	4603      	mov	r3, r0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	789b      	ldrb	r3, [r3, #2]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d10e      	bne.n	8008666 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2209      	movs	r2, #9
 8008652:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	887a      	ldrh	r2, [r7, #2]
 8008658:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008666:	2200      	movs	r2, #0
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fb3b 	bl	8008ce6 <USBH_CtlReq>
 8008670:	4603      	mov	r3, r0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	789b      	ldrb	r3, [r3, #2]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d10f      	bne.n	80086ae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2203      	movs	r2, #3
 8008698:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086ae:	2200      	movs	r2, #0
 80086b0:	2100      	movs	r1, #0
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fb17 	bl	8008ce6 <USBH_CtlReq>
 80086b8:	4603      	mov	r3, r0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80086d8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80086e4:	2302      	movs	r3, #2
 80086e6:	e094      	b.n	8008812 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	781a      	ldrb	r2, [r3, #0]
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	785a      	ldrb	r2, [r3, #1]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	3302      	adds	r3, #2
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	3303      	adds	r3, #3
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	b29b      	uxth	r3, r3
 800870a:	4313      	orrs	r3, r2
 800870c:	b29a      	uxth	r2, r3
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	791a      	ldrb	r2, [r3, #4]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	795a      	ldrb	r2, [r3, #5]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	799a      	ldrb	r2, [r3, #6]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	79da      	ldrb	r2, [r3, #7]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008742:	2b01      	cmp	r3, #1
 8008744:	d11b      	bne.n	800877e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	79db      	ldrb	r3, [r3, #7]
 800874a:	2b20      	cmp	r3, #32
 800874c:	dc0f      	bgt.n	800876e <USBH_ParseDevDesc+0xaa>
 800874e:	2b08      	cmp	r3, #8
 8008750:	db0f      	blt.n	8008772 <USBH_ParseDevDesc+0xae>
 8008752:	3b08      	subs	r3, #8
 8008754:	4a32      	ldr	r2, [pc, #200]	@ (8008820 <USBH_ParseDevDesc+0x15c>)
 8008756:	fa22 f303 	lsr.w	r3, r2, r3
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	bf14      	ite	ne
 8008762:	2301      	movne	r3, #1
 8008764:	2300      	moveq	r3, #0
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d106      	bne.n	800877a <USBH_ParseDevDesc+0xb6>
 800876c:	e001      	b.n	8008772 <USBH_ParseDevDesc+0xae>
 800876e:	2b40      	cmp	r3, #64	@ 0x40
 8008770:	d003      	beq.n	800877a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2208      	movs	r2, #8
 8008776:	71da      	strb	r2, [r3, #7]
        break;
 8008778:	e000      	b.n	800877c <USBH_ParseDevDesc+0xb8>
        break;
 800877a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800877c:	e00e      	b.n	800879c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008784:	2b02      	cmp	r3, #2
 8008786:	d107      	bne.n	8008798 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	79db      	ldrb	r3, [r3, #7]
 800878c:	2b08      	cmp	r3, #8
 800878e:	d005      	beq.n	800879c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2208      	movs	r2, #8
 8008794:	71da      	strb	r2, [r3, #7]
 8008796:	e001      	b.n	800879c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008798:	2303      	movs	r3, #3
 800879a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d936      	bls.n	8008810 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3308      	adds	r3, #8
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	3309      	adds	r3, #9
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	021b      	lsls	r3, r3, #8
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	4313      	orrs	r3, r2
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	330a      	adds	r3, #10
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	330b      	adds	r3, #11
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	4313      	orrs	r3, r2
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	330c      	adds	r3, #12
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	330d      	adds	r3, #13
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4313      	orrs	r3, r2
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	7b9a      	ldrb	r2, [r3, #14]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	7bda      	ldrb	r2, [r3, #15]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	7c1a      	ldrb	r2, [r3, #16]
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	7c5a      	ldrb	r2, [r3, #17]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	01000101 	.word	0x01000101

08008824 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08c      	sub	sp, #48	@ 0x30
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	4613      	mov	r3, r2
 8008830:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008838:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008852:	2302      	movs	r3, #2
 8008854:	e0da      	b.n	8008a0c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	781a      	ldrb	r2, [r3, #0]
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	785a      	ldrb	r2, [r3, #1]
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	3302      	adds	r3, #2
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	3303      	adds	r3, #3
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	b29b      	uxth	r3, r3
 800887c:	4313      	orrs	r3, r2
 800887e:	b29b      	uxth	r3, r3
 8008880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008884:	bf28      	it	cs
 8008886:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800888a:	b29a      	uxth	r2, r3
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	791a      	ldrb	r2, [r3, #4]
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	795a      	ldrb	r2, [r3, #5]
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	799a      	ldrb	r2, [r3, #6]
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	79da      	ldrb	r2, [r3, #7]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	7a1a      	ldrb	r2, [r3, #8]
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b09      	cmp	r3, #9
 80088be:	d002      	beq.n	80088c6 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	2209      	movs	r2, #9
 80088c4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	2b09      	cmp	r3, #9
 80088ca:	f240 809d 	bls.w	8008a08 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80088ce:	2309      	movs	r3, #9
 80088d0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088d6:	e081      	b.n	80089dc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088d8:	f107 0316 	add.w	r3, r7, #22
 80088dc:	4619      	mov	r1, r3
 80088de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e0:	f000 f9e7 	bl	8008cb2 <USBH_GetNextDesc>
 80088e4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80088e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d176      	bne.n	80089dc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80088ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b09      	cmp	r3, #9
 80088f4:	d002      	beq.n	80088fc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80088f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f8:	2209      	movs	r2, #9
 80088fa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80088fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008900:	221a      	movs	r2, #26
 8008902:	fb02 f303 	mul.w	r3, r2, r3
 8008906:	3308      	adds	r3, #8
 8008908:	6a3a      	ldr	r2, [r7, #32]
 800890a:	4413      	add	r3, r2
 800890c:	3302      	adds	r3, #2
 800890e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008912:	69f8      	ldr	r0, [r7, #28]
 8008914:	f000 f87e 	bl	8008a14 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008922:	e043      	b.n	80089ac <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008924:	f107 0316 	add.w	r3, r7, #22
 8008928:	4619      	mov	r1, r3
 800892a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800892c:	f000 f9c1 	bl	8008cb2 <USBH_GetNextDesc>
 8008930:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	2b05      	cmp	r3, #5
 8008938:	d138      	bne.n	80089ac <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	795b      	ldrb	r3, [r3, #5]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d113      	bne.n	800896a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008946:	2b02      	cmp	r3, #2
 8008948:	d003      	beq.n	8008952 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	799b      	ldrb	r3, [r3, #6]
 800894e:	2b03      	cmp	r3, #3
 8008950:	d10b      	bne.n	800896a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	79db      	ldrb	r3, [r3, #7]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <USBH_ParseCfgDesc+0x14e>
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b09      	cmp	r3, #9
 8008960:	d007      	beq.n	8008972 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008964:	2209      	movs	r2, #9
 8008966:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008968:	e003      	b.n	8008972 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800896a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896c:	2207      	movs	r2, #7
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	e000      	b.n	8008974 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008972:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008978:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800897c:	3201      	adds	r2, #1
 800897e:	00d2      	lsls	r2, r2, #3
 8008980:	211a      	movs	r1, #26
 8008982:	fb01 f303 	mul.w	r3, r1, r3
 8008986:	4413      	add	r3, r2
 8008988:	3308      	adds	r3, #8
 800898a:	6a3a      	ldr	r2, [r7, #32]
 800898c:	4413      	add	r3, r2
 800898e:	3304      	adds	r3, #4
 8008990:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008994:	69b9      	ldr	r1, [r7, #24]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f870 	bl	8008a7c <USBH_ParseEPDesc>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80089a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089a6:	3301      	adds	r3, #1
 80089a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	791b      	ldrb	r3, [r3, #4]
 80089b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d204      	bcs.n	80089c2 <USBH_ParseCfgDesc+0x19e>
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	885a      	ldrh	r2, [r3, #2]
 80089bc:	8afb      	ldrh	r3, [r7, #22]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d8b0      	bhi.n	8008924 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	791b      	ldrb	r3, [r3, #4]
 80089c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d201      	bcs.n	80089d2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e01c      	b.n	8008a0c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80089d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089d6:	3301      	adds	r3, #1
 80089d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d805      	bhi.n	80089f0 <USBH_ParseCfgDesc+0x1cc>
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	885a      	ldrh	r2, [r3, #2]
 80089e8:	8afb      	ldrh	r3, [r7, #22]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	f63f af74 	bhi.w	80088d8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	791b      	ldrb	r3, [r3, #4]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	bf28      	it	cs
 80089f8:	2302      	movcs	r3, #2
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d201      	bcs.n	8008a08 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e001      	b.n	8008a0c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008a08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3730      	adds	r7, #48	@ 0x30
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781a      	ldrb	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	785a      	ldrb	r2, [r3, #1]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	789a      	ldrb	r2, [r3, #2]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	78da      	ldrb	r2, [r3, #3]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	3304      	adds	r3, #4
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	bf28      	it	cs
 8008a48:	2302      	movcs	r3, #2
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	795a      	ldrb	r2, [r3, #5]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	799a      	ldrb	r2, [r3, #6]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	79da      	ldrb	r2, [r3, #7]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	7a1a      	ldrb	r2, [r3, #8]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	721a      	strb	r2, [r3, #8]
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	781a      	ldrb	r2, [r3, #0]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	785a      	ldrb	r2, [r3, #1]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	789a      	ldrb	r2, [r3, #2]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	78da      	ldrb	r2, [r3, #3]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3305      	adds	r3, #5
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	799a      	ldrb	r2, [r3, #6]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	889b      	ldrh	r3, [r3, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d009      	beq.n	8008aea <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ade:	d804      	bhi.n	8008aea <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae8:	d901      	bls.n	8008aee <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008aea:	2303      	movs	r3, #3
 8008aec:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d136      	bne.n	8008b66 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	78db      	ldrb	r3, [r3, #3]
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d108      	bne.n	8008b16 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	889b      	ldrh	r3, [r3, #4]
 8008b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b0c:	f240 8097 	bls.w	8008c3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b10:	2303      	movs	r3, #3
 8008b12:	75fb      	strb	r3, [r7, #23]
 8008b14:	e093      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	78db      	ldrb	r3, [r3, #3]
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d107      	bne.n	8008b32 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	889b      	ldrh	r3, [r3, #4]
 8008b26:	2b40      	cmp	r3, #64	@ 0x40
 8008b28:	f240 8089 	bls.w	8008c3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	75fb      	strb	r3, [r7, #23]
 8008b30:	e085      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	78db      	ldrb	r3, [r3, #3]
 8008b36:	f003 0303 	and.w	r3, r3, #3
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d005      	beq.n	8008b4a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	78db      	ldrb	r3, [r3, #3]
 8008b42:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d10a      	bne.n	8008b60 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	799b      	ldrb	r3, [r3, #6]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <USBH_ParseEPDesc+0xde>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	799b      	ldrb	r3, [r3, #6]
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	d970      	bls.n	8008c3c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b5e:	e06d      	b.n	8008c3c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008b60:	2303      	movs	r3, #3
 8008b62:	75fb      	strb	r3, [r7, #23]
 8008b64:	e06b      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d13c      	bne.n	8008bea <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	78db      	ldrb	r3, [r3, #3]
 8008b74:	f003 0303 	and.w	r3, r3, #3
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d005      	beq.n	8008b88 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	78db      	ldrb	r3, [r3, #3]
 8008b80:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d106      	bne.n	8008b96 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	889b      	ldrh	r3, [r3, #4]
 8008b8c:	2b40      	cmp	r3, #64	@ 0x40
 8008b8e:	d956      	bls.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b90:	2303      	movs	r3, #3
 8008b92:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b94:	e053      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	78db      	ldrb	r3, [r3, #3]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d10e      	bne.n	8008bc0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	799b      	ldrb	r3, [r3, #6]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008bae:	2b10      	cmp	r3, #16
 8008bb0:	d803      	bhi.n	8008bba <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008bb6:	2b40      	cmp	r3, #64	@ 0x40
 8008bb8:	d941      	bls.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	75fb      	strb	r3, [r7, #23]
 8008bbe:	e03e      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	78db      	ldrb	r3, [r3, #3]
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d10b      	bne.n	8008be4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	799b      	ldrb	r3, [r3, #6]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <USBH_ParseEPDesc+0x162>
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	889b      	ldrh	r3, [r3, #4]
 8008bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bdc:	d32f      	bcc.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bde:	2303      	movs	r3, #3
 8008be0:	75fb      	strb	r3, [r7, #23]
 8008be2:	e02c      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008be4:	2303      	movs	r3, #3
 8008be6:	75fb      	strb	r3, [r7, #23]
 8008be8:	e029      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d120      	bne.n	8008c36 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	78db      	ldrb	r3, [r3, #3]
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d106      	bne.n	8008c0e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	889b      	ldrh	r3, [r3, #4]
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d01a      	beq.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	75fb      	strb	r3, [r7, #23]
 8008c0c:	e017      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	78db      	ldrb	r3, [r3, #3]
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d10a      	bne.n	8008c30 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	799b      	ldrb	r3, [r3, #6]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <USBH_ParseEPDesc+0x1ae>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	889b      	ldrh	r3, [r3, #4]
 8008c26:	2b08      	cmp	r3, #8
 8008c28:	d909      	bls.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	75fb      	strb	r3, [r7, #23]
 8008c2e:	e006      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c30:	2303      	movs	r3, #3
 8008c32:	75fb      	strb	r3, [r7, #23]
 8008c34:	e003      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008c36:	2303      	movs	r3, #3
 8008c38:	75fb      	strb	r3, [r7, #23]
 8008c3a:	e000      	b.n	8008c3e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c3c:	bf00      	nop
  }

  return status;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d120      	bne.n	8008ca6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	1e9a      	subs	r2, r3, #2
 8008c6a:	88fb      	ldrh	r3, [r7, #6]
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	bf28      	it	cs
 8008c70:	4613      	movcs	r3, r2
 8008c72:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3302      	adds	r3, #2
 8008c78:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	82fb      	strh	r3, [r7, #22]
 8008c7e:	e00b      	b.n	8008c98 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c80:	8afb      	ldrh	r3, [r7, #22]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	781a      	ldrb	r2, [r3, #0]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c92:	8afb      	ldrh	r3, [r7, #22]
 8008c94:	3302      	adds	r3, #2
 8008c96:	82fb      	strh	r3, [r7, #22]
 8008c98:	8afa      	ldrh	r2, [r7, #22]
 8008c9a:	8abb      	ldrh	r3, [r7, #20]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d3ef      	bcc.n	8008c80 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]
  }
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	7812      	ldrb	r2, [r2, #0]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b086      	sub	sp, #24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	789b      	ldrb	r3, [r3, #2]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d002      	beq.n	8008d06 <USBH_CtlReq+0x20>
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d00f      	beq.n	8008d24 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008d04:	e027      	b.n	8008d56 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	88fa      	ldrh	r2, [r7, #6]
 8008d10:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]
      break;
 8008d22:	e018      	b.n	8008d56 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f81b 	bl	8008d60 <USBH_HandleControl>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <USBH_CtlReq+0x54>
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d106      	bne.n	8008d48 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	761a      	strb	r2, [r3, #24]
      break;
 8008d46:	e005      	b.n	8008d54 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d102      	bne.n	8008d54 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	709a      	strb	r2, [r3, #2]
      break;
 8008d54:	bf00      	nop
  }
  return status;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af02      	add	r7, sp, #8
 8008d66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	7e1b      	ldrb	r3, [r3, #24]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	2b0a      	cmp	r3, #10
 8008d78:	f200 8156 	bhi.w	8009028 <USBH_HandleControl+0x2c8>
 8008d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d84 <USBH_HandleControl+0x24>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008db1 	.word	0x08008db1
 8008d88:	08008dcb 	.word	0x08008dcb
 8008d8c:	08008e35 	.word	0x08008e35
 8008d90:	08008e5b 	.word	0x08008e5b
 8008d94:	08008e93 	.word	0x08008e93
 8008d98:	08008ebd 	.word	0x08008ebd
 8008d9c:	08008f0f 	.word	0x08008f0f
 8008da0:	08008f31 	.word	0x08008f31
 8008da4:	08008f6d 	.word	0x08008f6d
 8008da8:	08008f93 	.word	0x08008f93
 8008dac:	08008fd1 	.word	0x08008fd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f103 0110 	add.w	r1, r3, #16
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	795b      	ldrb	r3, [r3, #5]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f943 	bl	8009048 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	761a      	strb	r2, [r3, #24]
      break;
 8008dc8:	e139      	b.n	800903e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	795b      	ldrb	r3, [r3, #5]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fb4f 	bl	8009474 <USBH_LL_GetURBState>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d11e      	bne.n	8008e1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7c1b      	ldrb	r3, [r3, #16]
 8008de4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008de8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	8adb      	ldrh	r3, [r3, #22]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008df2:	7b7b      	ldrb	r3, [r7, #13]
 8008df4:	2b80      	cmp	r3, #128	@ 0x80
 8008df6:	d103      	bne.n	8008e00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008dfe:	e115      	b.n	800902c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2205      	movs	r2, #5
 8008e04:	761a      	strb	r2, [r3, #24]
      break;
 8008e06:	e111      	b.n	800902c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008e08:	7b7b      	ldrb	r3, [r7, #13]
 8008e0a:	2b80      	cmp	r3, #128	@ 0x80
 8008e0c:	d103      	bne.n	8008e16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2209      	movs	r2, #9
 8008e12:	761a      	strb	r2, [r3, #24]
      break;
 8008e14:	e10a      	b.n	800902c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2207      	movs	r2, #7
 8008e1a:	761a      	strb	r2, [r3, #24]
      break;
 8008e1c:	e106      	b.n	800902c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d003      	beq.n	8008e2c <USBH_HandleControl+0xcc>
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	f040 8100 	bne.w	800902c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	220b      	movs	r2, #11
 8008e30:	761a      	strb	r2, [r3, #24]
      break;
 8008e32:	e0fb      	b.n	800902c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6899      	ldr	r1, [r3, #8]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	899a      	ldrh	r2, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	791b      	ldrb	r3, [r3, #4]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f93a 	bl	80090c6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2204      	movs	r2, #4
 8008e56:	761a      	strb	r2, [r3, #24]
      break;
 8008e58:	e0f1      	b.n	800903e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	791b      	ldrb	r3, [r3, #4]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fb07 	bl	8009474 <USBH_LL_GetURBState>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d102      	bne.n	8008e76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2209      	movs	r2, #9
 8008e74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b05      	cmp	r3, #5
 8008e7a:	d102      	bne.n	8008e82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e80:	e0d6      	b.n	8009030 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	f040 80d3 	bne.w	8009030 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	220b      	movs	r2, #11
 8008e8e:	761a      	strb	r2, [r3, #24]
      break;
 8008e90:	e0ce      	b.n	8009030 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6899      	ldr	r1, [r3, #8]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	899a      	ldrh	r2, [r3, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	795b      	ldrb	r3, [r3, #5]
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	9000      	str	r0, [sp, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f8ea 	bl	800907c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2206      	movs	r2, #6
 8008eb8:	761a      	strb	r2, [r3, #24]
      break;
 8008eba:	e0c0      	b.n	800903e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	795b      	ldrb	r3, [r3, #5]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fad6 	bl	8009474 <USBH_LL_GetURBState>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d103      	bne.n	8008eda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2207      	movs	r2, #7
 8008ed6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ed8:	e0ac      	b.n	8009034 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	2b05      	cmp	r3, #5
 8008ede:	d105      	bne.n	8008eec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	220c      	movs	r2, #12
 8008ee4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8008eea:	e0a3      	b.n	8009034 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d103      	bne.n	8008efa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2205      	movs	r2, #5
 8008ef6:	761a      	strb	r2, [r3, #24]
      break;
 8008ef8:	e09c      	b.n	8009034 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	f040 8099 	bne.w	8009034 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	220b      	movs	r2, #11
 8008f06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f0c:	e092      	b.n	8009034 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	791b      	ldrb	r3, [r3, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	2100      	movs	r1, #0
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f8d5 	bl	80090c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2208      	movs	r2, #8
 8008f2c:	761a      	strb	r2, [r3, #24]

      break;
 8008f2e:	e086      	b.n	800903e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	791b      	ldrb	r3, [r3, #4]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa9c 	bl	8009474 <USBH_LL_GetURBState>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d105      	bne.n	8008f52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	220d      	movs	r2, #13
 8008f4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f50:	e072      	b.n	8009038 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d103      	bne.n	8008f60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	220b      	movs	r2, #11
 8008f5c:	761a      	strb	r2, [r3, #24]
      break;
 8008f5e:	e06b      	b.n	8009038 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2b05      	cmp	r3, #5
 8008f64:	d168      	bne.n	8009038 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008f66:	2303      	movs	r3, #3
 8008f68:	73fb      	strb	r3, [r7, #15]
      break;
 8008f6a:	e065      	b.n	8009038 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	795b      	ldrb	r3, [r3, #5]
 8008f70:	2201      	movs	r2, #1
 8008f72:	9200      	str	r2, [sp, #0]
 8008f74:	2200      	movs	r2, #0
 8008f76:	2100      	movs	r1, #0
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f87f 	bl	800907c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	220a      	movs	r2, #10
 8008f8e:	761a      	strb	r2, [r3, #24]
      break;
 8008f90:	e055      	b.n	800903e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	795b      	ldrb	r3, [r3, #5]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fa6b 	bl	8009474 <USBH_LL_GetURBState>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d105      	bne.n	8008fb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	220d      	movs	r2, #13
 8008fb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fb2:	e043      	b.n	800903c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d103      	bne.n	8008fc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2209      	movs	r2, #9
 8008fbe:	761a      	strb	r2, [r3, #24]
      break;
 8008fc0:	e03c      	b.n	800903c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d139      	bne.n	800903c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	220b      	movs	r2, #11
 8008fcc:	761a      	strb	r2, [r3, #24]
      break;
 8008fce:	e035      	b.n	800903c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	7e5b      	ldrb	r3, [r3, #25]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	765a      	strb	r2, [r3, #25]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7e5b      	ldrb	r3, [r3, #25]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d806      	bhi.n	8008ff2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ff0:	e025      	b.n	800903e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ff8:	2106      	movs	r1, #6
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	795b      	ldrb	r3, [r3, #5]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f8b9 	bl	8009182 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	791b      	ldrb	r3, [r3, #4]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f8b3 	bl	8009182 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009022:	2302      	movs	r3, #2
 8009024:	73fb      	strb	r3, [r7, #15]
      break;
 8009026:	e00a      	b.n	800903e <USBH_HandleControl+0x2de>

    default:
      break;
 8009028:	bf00      	nop
 800902a:	e008      	b.n	800903e <USBH_HandleControl+0x2de>
      break;
 800902c:	bf00      	nop
 800902e:	e006      	b.n	800903e <USBH_HandleControl+0x2de>
      break;
 8009030:	bf00      	nop
 8009032:	e004      	b.n	800903e <USBH_HandleControl+0x2de>
      break;
 8009034:	bf00      	nop
 8009036:	e002      	b.n	800903e <USBH_HandleControl+0x2de>
      break;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <USBH_HandleControl+0x2de>
      break;
 800903c:	bf00      	nop
  }

  return status;
 800903e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af04      	add	r7, sp, #16
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009056:	79f9      	ldrb	r1, [r7, #7]
 8009058:	2300      	movs	r3, #0
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	2308      	movs	r3, #8
 800905e:	9302      	str	r3, [sp, #8]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	2300      	movs	r3, #0
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	2300      	movs	r3, #0
 800906a:	2200      	movs	r2, #0
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 f9d0 	bl	8009412 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af04      	add	r7, sp, #16
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4611      	mov	r1, r2
 8009088:	461a      	mov	r2, r3
 800908a:	460b      	mov	r3, r1
 800908c:	80fb      	strh	r3, [r7, #6]
 800908e:	4613      	mov	r3, r2
 8009090:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800909c:	2300      	movs	r3, #0
 800909e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090a0:	7979      	ldrb	r1, [r7, #5]
 80090a2:	7e3b      	ldrb	r3, [r7, #24]
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	88fb      	ldrh	r3, [r7, #6]
 80090a8:	9302      	str	r3, [sp, #8]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	2301      	movs	r3, #1
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	2300      	movs	r3, #0
 80090b4:	2200      	movs	r2, #0
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f9ab 	bl	8009412 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b088      	sub	sp, #32
 80090ca:	af04      	add	r7, sp, #16
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	4611      	mov	r1, r2
 80090d2:	461a      	mov	r2, r3
 80090d4:	460b      	mov	r3, r1
 80090d6:	80fb      	strh	r3, [r7, #6]
 80090d8:	4613      	mov	r3, r2
 80090da:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090dc:	7979      	ldrb	r1, [r7, #5]
 80090de:	2300      	movs	r3, #0
 80090e0:	9303      	str	r3, [sp, #12]
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	9302      	str	r3, [sp, #8]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	2301      	movs	r3, #1
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	2300      	movs	r3, #0
 80090f0:	2201      	movs	r2, #1
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 f98d 	bl	8009412 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80090f8:	2300      	movs	r3, #0

}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af04      	add	r7, sp, #16
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	4608      	mov	r0, r1
 800910c:	4611      	mov	r1, r2
 800910e:	461a      	mov	r2, r3
 8009110:	4603      	mov	r3, r0
 8009112:	70fb      	strb	r3, [r7, #3]
 8009114:	460b      	mov	r3, r1
 8009116:	70bb      	strb	r3, [r7, #2]
 8009118:	4613      	mov	r3, r2
 800911a:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800911c:	7878      	ldrb	r0, [r7, #1]
 800911e:	78ba      	ldrb	r2, [r7, #2]
 8009120:	78f9      	ldrb	r1, [r7, #3]
 8009122:	8b3b      	ldrh	r3, [r7, #24]
 8009124:	9302      	str	r3, [sp, #8]
 8009126:	7d3b      	ldrb	r3, [r7, #20]
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	7c3b      	ldrb	r3, [r7, #16]
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	4603      	mov	r3, r0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f93f 	bl	80093b4 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f836 	bl	80091be <USBH_GetFreePipe>
 8009152:	4603      	mov	r3, r0
 8009154:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009156:	89fb      	ldrh	r3, [r7, #14]
 8009158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800915c:	4293      	cmp	r3, r2
 800915e:	d00a      	beq.n	8009176 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	89fb      	ldrh	r3, [r7, #14]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	33e0      	adds	r3, #224	@ 0xe0
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	440b      	add	r3, r1
 8009174:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009176:	89fb      	ldrh	r3, [r7, #14]
 8009178:	b2db      	uxtb	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009182:	b480      	push	{r7}
 8009184:	b083      	sub	sp, #12
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	2b0f      	cmp	r3, #15
 8009192:	d80d      	bhi.n	80091b0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	33e0      	adds	r3, #224	@ 0xe0
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	33e0      	adds	r3, #224	@ 0xe0
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
 80091ce:	e00f      	b.n	80091f0 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	33e0      	adds	r3, #224	@ 0xe0
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	e007      	b.n	80091fa <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	3301      	adds	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	2b0f      	cmp	r3, #15
 80091f4:	d9ec      	bls.n	80091d0 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800920c:	4802      	ldr	r0, [pc, #8]	@ (8009218 <MX_USB_HOST_Process+0x10>)
 800920e:	f7fe fce5 	bl	8007bdc <USBH_Process>
}
 8009212:	bf00      	nop
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000130 	.word	0x20000130

0800921c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800922a:	4618      	mov	r0, r3
 800922c:	f7ff f89e 	bl	800836c <USBH_LL_IncTimer>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009246:	4618      	mov	r0, r3
 8009248:	f7ff f8d6 	bl	80083f8 <USBH_LL_Connect>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff f8df 	bl	8008426 <USBH_LL_Disconnect>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
 800927c:	4613      	mov	r3, r2
 800927e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff f890 	bl	80083c0 <USBH_LL_PortEnabled>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff f890 	bl	80083dc <USBH_LL_PortDisabled>
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fa f922 	bl	8003524 <HAL_HCD_Start>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f8fa 	bl	80094e0 <USBH_Get_USB_Status>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009310:	4618      	mov	r0, r3
 8009312:	f7fa f92a 	bl	800356a <HAL_HCD_Stop>
 8009316:	4603      	mov	r3, r0
 8009318:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	4618      	mov	r0, r3
 800931e:	f000 f8df 	bl	80094e0 <USBH_Get_USB_Status>
 8009322:	4603      	mov	r3, r0
 8009324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009326:	7bbb      	ldrb	r3, [r7, #14]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009342:	4618      	mov	r0, r3
 8009344:	f7fa f951 	bl	80035ea <HAL_HCD_GetCurrentSpeed>
 8009348:	4603      	mov	r3, r0
 800934a:	2b02      	cmp	r3, #2
 800934c:	d00c      	beq.n	8009368 <USBH_LL_GetSpeed+0x38>
 800934e:	2b02      	cmp	r3, #2
 8009350:	d80d      	bhi.n	800936e <USBH_LL_GetSpeed+0x3e>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <USBH_LL_GetSpeed+0x2c>
 8009356:	2b01      	cmp	r3, #1
 8009358:	d003      	beq.n	8009362 <USBH_LL_GetSpeed+0x32>
 800935a:	e008      	b.n	800936e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
    break;
 8009360:	e008      	b.n	8009374 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009362:	2301      	movs	r3, #1
 8009364:	73fb      	strb	r3, [r7, #15]
    break;
 8009366:	e005      	b.n	8009374 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009368:	2302      	movs	r3, #2
 800936a:	73fb      	strb	r3, [r7, #15]
    break;
 800936c:	e002      	b.n	8009374 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800936e:	2301      	movs	r3, #1
 8009370:	73fb      	strb	r3, [r7, #15]
    break;
 8009372:	bf00      	nop
  }
  return  speed;
 8009374:	7bfb      	ldrb	r3, [r7, #15]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009394:	4618      	mov	r0, r3
 8009396:	f7fa f905 	bl	80035a4 <HAL_HCD_ResetPort>
 800939a:	4603      	mov	r3, r0
 800939c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 f89d 	bl	80094e0 <USBH_Get_USB_Status>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093b4:	b590      	push	{r4, r7, lr}
 80093b6:	b089      	sub	sp, #36	@ 0x24
 80093b8:	af04      	add	r7, sp, #16
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	4608      	mov	r0, r1
 80093be:	4611      	mov	r1, r2
 80093c0:	461a      	mov	r2, r3
 80093c2:	4603      	mov	r3, r0
 80093c4:	70fb      	strb	r3, [r7, #3]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70bb      	strb	r3, [r7, #2]
 80093ca:	4613      	mov	r3, r2
 80093cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80093dc:	787c      	ldrb	r4, [r7, #1]
 80093de:	78ba      	ldrb	r2, [r7, #2]
 80093e0:	78f9      	ldrb	r1, [r7, #3]
 80093e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093e4:	9302      	str	r3, [sp, #8]
 80093e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4623      	mov	r3, r4
 80093f4:	f7f9 fd2f 	bl	8002e56 <HAL_HCD_HC_Init>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 f86e 	bl	80094e0 <USBH_Get_USB_Status>
 8009404:	4603      	mov	r3, r0
 8009406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009408:	7bbb      	ldrb	r3, [r7, #14]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	bd90      	pop	{r4, r7, pc}

08009412 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009412:	b590      	push	{r4, r7, lr}
 8009414:	b089      	sub	sp, #36	@ 0x24
 8009416:	af04      	add	r7, sp, #16
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	4608      	mov	r0, r1
 800941c:	4611      	mov	r1, r2
 800941e:	461a      	mov	r2, r3
 8009420:	4603      	mov	r3, r0
 8009422:	70fb      	strb	r3, [r7, #3]
 8009424:	460b      	mov	r3, r1
 8009426:	70bb      	strb	r3, [r7, #2]
 8009428:	4613      	mov	r3, r2
 800942a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800943a:	787c      	ldrb	r4, [r7, #1]
 800943c:	78ba      	ldrb	r2, [r7, #2]
 800943e:	78f9      	ldrb	r1, [r7, #3]
 8009440:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009444:	9303      	str	r3, [sp, #12]
 8009446:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	4623      	mov	r3, r4
 8009456:	f7f9 fdb7 	bl	8002fc8 <HAL_HCD_HC_SubmitRequest>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f83d 	bl	80094e0 <USBH_Get_USB_Status>
 8009466:	4603      	mov	r3, r0
 8009468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800946a:	7bbb      	ldrb	r3, [r7, #14]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	bd90      	pop	{r4, r7, pc}

08009474 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7fa f898 	bl	80035c0 <HAL_HCD_HC_GetURBState>
 8009490:	4603      	mov	r3, r0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d103      	bne.n	80094b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f840 	bl	8009538 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80094b8:	20c8      	movs	r0, #200	@ 0xc8
 80094ba:	f7f9 fa15 	bl	80028e8 <HAL_Delay>
  return USBH_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7f9 fa09 	bl	80028e8 <HAL_Delay>
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d817      	bhi.n	8009524 <USBH_Get_USB_Status+0x44>
 80094f4:	a201      	add	r2, pc, #4	@ (adr r2, 80094fc <USBH_Get_USB_Status+0x1c>)
 80094f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fa:	bf00      	nop
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	08009513 	.word	0x08009513
 8009504:	08009519 	.word	0x08009519
 8009508:	0800951f 	.word	0x0800951f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
    break;
 8009510:	e00b      	b.n	800952a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009512:	2302      	movs	r3, #2
 8009514:	73fb      	strb	r3, [r7, #15]
    break;
 8009516:	e008      	b.n	800952a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009518:	2301      	movs	r3, #1
 800951a:	73fb      	strb	r3, [r7, #15]
    break;
 800951c:	e005      	b.n	800952a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800951e:	2302      	movs	r3, #2
 8009520:	73fb      	strb	r3, [r7, #15]
    break;
 8009522:	e002      	b.n	800952a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009524:	2302      	movs	r3, #2
 8009526:	73fb      	strb	r3, [r7, #15]
    break;
 8009528:	bf00      	nop
  }
  return usb_status;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
 8009550:	e001      	b.n	8009556 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009552:	2301      	movs	r3, #1
 8009554:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	461a      	mov	r2, r3
 800955a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800955e:	4803      	ldr	r0, [pc, #12]	@ (800956c <MX_DriverVbusFS+0x34>)
 8009560:	f7f9 fc60 	bl	8002e24 <HAL_GPIO_WritePin>
}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	40021800 	.word	0x40021800

08009570 <memset>:
 8009570:	4402      	add	r2, r0
 8009572:	4603      	mov	r3, r0
 8009574:	4293      	cmp	r3, r2
 8009576:	d100      	bne.n	800957a <memset+0xa>
 8009578:	4770      	bx	lr
 800957a:	f803 1b01 	strb.w	r1, [r3], #1
 800957e:	e7f9      	b.n	8009574 <memset+0x4>

08009580 <__libc_init_array>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	4d0d      	ldr	r5, [pc, #52]	@ (80095b8 <__libc_init_array+0x38>)
 8009584:	4c0d      	ldr	r4, [pc, #52]	@ (80095bc <__libc_init_array+0x3c>)
 8009586:	1b64      	subs	r4, r4, r5
 8009588:	10a4      	asrs	r4, r4, #2
 800958a:	2600      	movs	r6, #0
 800958c:	42a6      	cmp	r6, r4
 800958e:	d109      	bne.n	80095a4 <__libc_init_array+0x24>
 8009590:	4d0b      	ldr	r5, [pc, #44]	@ (80095c0 <__libc_init_array+0x40>)
 8009592:	4c0c      	ldr	r4, [pc, #48]	@ (80095c4 <__libc_init_array+0x44>)
 8009594:	f000 f818 	bl	80095c8 <_init>
 8009598:	1b64      	subs	r4, r4, r5
 800959a:	10a4      	asrs	r4, r4, #2
 800959c:	2600      	movs	r6, #0
 800959e:	42a6      	cmp	r6, r4
 80095a0:	d105      	bne.n	80095ae <__libc_init_array+0x2e>
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a8:	4798      	blx	r3
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7ee      	b.n	800958c <__libc_init_array+0xc>
 80095ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b2:	4798      	blx	r3
 80095b4:	3601      	adds	r6, #1
 80095b6:	e7f2      	b.n	800959e <__libc_init_array+0x1e>
 80095b8:	0800b52c 	.word	0x0800b52c
 80095bc:	0800b52c 	.word	0x0800b52c
 80095c0:	0800b52c 	.word	0x0800b52c
 80095c4:	0800b530 	.word	0x0800b530

080095c8 <_init>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr

080095d4 <_fini>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr
