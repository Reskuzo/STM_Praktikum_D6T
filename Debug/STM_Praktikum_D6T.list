
STM_Praktikum_D6T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020b8  0800bcb8  0800bcb8  0000ccb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd70  0800dd70  0000f104  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd70  0800dd70  0000ed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd78  0800dd78  0000f104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd78  0800dd78  0000ed78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd7c  0800dd7c  0000ed7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800dd80  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  20000104  0800de84  0000f104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa8  0800de84  0000faa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa7f  00000000  00000000  0000f134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044b6  00000000  00000000  00029bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0002e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2d  00000000  00000000  0002f488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f5d  00000000  00000000  000303b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e058  00000000  00000000  00056312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d01e3  00000000  00000000  0007436a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014454d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c98  00000000  00000000  00144590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0014a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000104 	.word	0x20000104
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bca0 	.word	0x0800bca0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000108 	.word	0x20000108
 800020c:	0800bca0 	.word	0x0800bca0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <d6t_reading_to_lcd>:
	ABS_MODE = 0,
	REF_MODE = 1,
};


static void d6t_reading_to_lcd(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	f5ad 5dc7 	sub.w	sp, sp, #6368	@ 0x18e0
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
	/// set configuration
	BSP_LCD_Init();
 80005aa:	f002 fde9 	bl	8003180 <BSP_LCD_Init>
	BSP_JOY_Init(JOY_MODE_GPIO);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f002 fbe0 	bl	8002d74 <BSP_JOY_Init>
	BSP_LCD_Clear(0xffff);
 80005b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80005b8:	f002 fec4 	bl	8003344 <BSP_LCD_Clear>

	// create buffer for temperature values (raw, processed)
	uint8_t buffer[TEMP_VALUE_COUNT*2 + 3];
	int temp[TEMP_VALUE_COUNT+4];
	int mode = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	f507 52c7 	add.w	r2, r7, #6368	@ 0x18e0
 80005c2:	f102 020c 	add.w	r2, r2, #12
 80005c6:	6013      	str	r3, [r2, #0]
	char* meta_data_line[54];
	while (1){
		 if (BSP_JOY_GetState() == JOY_RIGHT) mode = REF_MODE;
 80005c8:	f002 fc90 	bl	8002eec <BSP_JOY_GetState>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d106      	bne.n	80005e0 <d6t_reading_to_lcd+0x40>
 80005d2:	2301      	movs	r3, #1
 80005d4:	f507 52c7 	add.w	r2, r7, #6368	@ 0x18e0
 80005d8:	f102 020c 	add.w	r2, r2, #12
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	e00a      	b.n	80005f6 <d6t_reading_to_lcd+0x56>
		 else if (BSP_JOY_GetState() == JOY_LEFT)mode = ABS_MODE;
 80005e0:	f002 fc84 	bl	8002eec <BSP_JOY_GetState>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d105      	bne.n	80005f6 <d6t_reading_to_lcd+0x56>
 80005ea:	2300      	movs	r3, #0
 80005ec:	f507 52c7 	add.w	r2, r7, #6368	@ 0x18e0
 80005f0:	f102 020c 	add.w	r2, r2, #12
 80005f4:	6013      	str	r3, [r2, #0]
		 read_sensor_data(buffer);
 80005f6:	f507 5387 	add.w	r3, r7, #4320	@ 0x10e0
 80005fa:	f103 0308 	add.w	r3, r3, #8
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f824 	bl	800164c <read_sensor_data>
	     sensor_data_to_temperatures(buffer, temp);
 8000604:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000608:	3b18      	subs	r3, #24
 800060a:	f507 5287 	add.w	r2, r7, #4320	@ 0x10e0
 800060e:	f102 0208 	add.w	r2, r2, #8
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f001 f86b 	bl	80016f0 <sensor_data_to_temperatures>

	     if( mode == ABS_MODE){
 800061a:	f507 53c7 	add.w	r3, r7, #6368	@ 0x18e0
 800061e:	f103 030c 	add.w	r3, r3, #12
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d119      	bne.n	800065c <d6t_reading_to_lcd+0xbc>
				 sprintf(&meta_data_line,"Mode:ABS HIGH:%dC LOW:%dC REF:%dC",
 8000628:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 800062c:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 8000636:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f107 0010 	add.w	r0, r7, #16
 8000640:	3810      	subs	r0, #16
 8000642:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000646:	9100      	str	r1, [sp, #0]
 8000648:	491a      	ldr	r1, [pc, #104]	@ (80006b4 <d6t_reading_to_lcd+0x114>)
 800064a:	f00a fb2b 	bl	800aca4 <siprintf>
						 temp[0],
						 temp[1],
						 (int)(ROOM_TEMP*10));
				 display_data_on_lcd(temp);
 800064e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000652:	3b18      	subs	r3, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f001 f9c3 	bl	80019e0 <display_data_on_lcd>
 800065a:	e01c      	b.n	8000696 <d6t_reading_to_lcd+0xf6>
	     }else{
				 sprintf(&meta_data_line,"Mode:REF AVG:%iC HIGH:%iC LOW:%iC",
 800065c:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 8000660:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 800066a:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	f507 630f 	add.w	r3, r7, #2288	@ 0x8f0
 8000674:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	f107 0010 	add.w	r0, r7, #16
 800067e:	3810      	subs	r0, #16
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	460b      	mov	r3, r1
 8000684:	490c      	ldr	r1, [pc, #48]	@ (80006b8 <d6t_reading_to_lcd+0x118>)
 8000686:	f00a fb0d 	bl	800aca4 <siprintf>
						 temp[2],
						 temp[0],
						 temp[1]);
				 display_data_on_lcd_rel_mode(temp);
 800068a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800068e:	3b18      	subs	r3, #24
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fa07 	bl	8001aa4 <display_data_on_lcd_rel_mode>
	     }
	     BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000696:	2000      	movs	r0, #0
 8000698:	f002 fe18 	bl	80032cc <BSP_LCD_SetTextColor>
	     BSP_LCD_ClearStringLine(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f002 fe87 	bl	80033b0 <BSP_LCD_ClearStringLine>
	     BSP_LCD_DisplayStringAtLine(0, (uint8_t*)(meta_data_line));
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	3b10      	subs	r3, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	2000      	movs	r0, #0
 80006ac:	f002 ff6e 	bl	800358c <BSP_LCD_DisplayStringAtLine>
		 if (BSP_JOY_GetState() == JOY_RIGHT) mode = REF_MODE;
 80006b0:	e78a      	b.n	80005c8 <d6t_reading_to_lcd+0x28>
 80006b2:	bf00      	nop
 80006b4:	0800bcb8 	.word	0x0800bcb8
 80006b8:	0800bcdc 	.word	0x0800bcdc

080006bc <head_pos.2>:
uint8_t head_col = 3;
uint8_t tail_end_pos = 7*16 + 2;
uint8_t score = 0;
int skip_tail_movement = 0;

uint8_t head_pos(){
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4663      	mov	r3, ip
 80006c4:	f8c7 c004 	str.w	ip, [r7, #4]
	return head_row * 16 + head_col;
 80006c8:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80006d4:	4413      	add	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0c4      	sub	sp, #272	@ 0x110
 80006e8:	af00      	add	r7, sp, #0
int main(void)
 80006ea:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80006ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80006f6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f003 fa23 	bl	8003b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 fb17 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f000 fbd3 	bl	8000eac <MX_GPIO_Init>
  MX_I2C2_Init();
 8000706:	f000 fb89 	bl	8000e1c <MX_I2C2_Init>
  HAL_I2C_Init(&hi2c2);
 800070a:	482d      	ldr	r0, [pc, #180]	@ (80007c0 <main+0xdc>)
 800070c:	f005 fdf4 	bl	80062f8 <HAL_I2C_Init>
  MX_IWDG_Init();
 8000710:	f000 fbb2 	bl	8000e78 <MX_IWDG_Init>

  /* USER CODE BEGIN 2 */
  BSP_JOY_Init(JOY_MODE_GPIO);
 8000714:	2000      	movs	r0, #0
 8000716:	f002 fb2d 	bl	8002d74 <BSP_JOY_Init>
  BSP_LED_Off(LED_BLUE);
 800071a:	2003      	movs	r0, #3
 800071c:	f002 fb12 	bl	8002d44 <BSP_LED_Off>
	BSP_LED_Off(LED_RED);
 8000720:	2002      	movs	r0, #2
 8000722:	f002 fb0f 	bl	8002d44 <BSP_LED_Off>
	BSP_LED_Off(LED_ORANGE);
 8000726:	2001      	movs	r0, #1
 8000728:	f002 fb0c 	bl	8002d44 <BSP_LED_Off>
	BSP_LED_Off(LED_GREEN);
 800072c:	2000      	movs	r0, #0
 800072e:	f002 fb09 	bl	8002d44 <BSP_LED_Off>

	if(BSP_JOY_GetState()==JOY_UP){
 8000732:	f002 fbdb 	bl	8002eec <BSP_JOY_GetState>
 8000736:	4603      	mov	r3, r0
 8000738:	2b04      	cmp	r3, #4
 800073a:	d13b      	bne.n	80007b4 <main+0xd0>
uint8_t board[256] = {0};
 800073c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000740:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	330c      	adds	r3, #12
 800074a:	22fc      	movs	r2, #252	@ 0xfc
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f00a fb0b 	bl	800ad6a <memset>
uint8_t head_rot = 1;
 8000754:	2201      	movs	r2, #1
 8000756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800075a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800075e:	715a      	strb	r2, [r3, #5]
uint8_t head_row = 7;
 8000760:	2207      	movs	r2, #7
 8000762:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000766:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800076a:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
uint8_t head_col = 3;
 800076e:	2203      	movs	r2, #3
 8000770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000774:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000778:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
uint8_t tail_end_pos = 7*16 + 2;
 800077c:	2272      	movs	r2, #114	@ 0x72
 800077e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000782:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000786:	71da      	strb	r2, [r3, #7]
uint8_t score = 0;
 8000788:	2200      	movs	r2, #0
 800078a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800078e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000792:	719a      	strb	r2, [r3, #6]
int skip_tail_movement = 0;
 8000794:	2200      	movs	r2, #0
 8000796:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800079a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800079e:	601a      	str	r2, [r3, #0]
		}
	}
	return 1;
}

uint8_t pause_indicator = 0;
 80007a0:	2200      	movs	r2, #0
 80007a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80007aa:	711a      	strb	r2, [r3, #4]
#include "snake/snake.h"
		snake2();
 80007ac:	463b      	mov	r3, r7
 80007ae:	469c      	mov	ip, r3
 80007b0:	f000 fa34 	bl	8000c1c <snake2.0>
	}

  d6t_reading_to_lcd(&hi2c2);
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <main+0xdc>)
 80007b6:	f7ff fef3 	bl	80005a0 <d6t_reading_to_lcd>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007ba:	f009 ff09 	bl	800a5d0 <MX_USB_HOST_Process>
 80007be:	e7fc      	b.n	80007ba <main+0xd6>
 80007c0:	20000120 	.word	0x20000120

080007c4 <generate_start_board.1>:
int generate_start_board(){
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4664      	mov	r4, ip
 80007cc:	f8c7 c004 	str.w	ip, [r7, #4]
	for (int entry = 0; entry < 256; entry++) board[entry] = 0 ;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e007      	b.n	80007e6 <generate_start_board.1+0x22>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4423      	add	r3, r4
 80007da:	3308      	adds	r3, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	ddf4      	ble.n	80007d6 <generate_start_board.1+0x12>
	board[head_pos()] = 2;
 80007ec:	46a4      	mov	ip, r4
 80007ee:	f7ff ff65 	bl	80006bc <head_pos.2>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4423      	add	r3, r4
 80007f6:	2202      	movs	r2, #2
 80007f8:	721a      	strb	r2, [r3, #8]
	board[tail_end_pos] = 4;
 80007fa:	79e3      	ldrb	r3, [r4, #7]
 80007fc:	4423      	add	r3, r4
 80007fe:	2204      	movs	r2, #4
 8000800:	721a      	strb	r2, [r3, #8]
	board[(rand() % 16)/*random row*/ * 16 + (rand()%8)+8 /*random column on the right side of the board*/] = 1;
 8000802:	f00a f94f 	bl	800aaa4 <rand>
 8000806:	4603      	mov	r3, r0
 8000808:	425a      	negs	r2, r3
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	f002 020f 	and.w	r2, r2, #15
 8000812:	bf58      	it	pl
 8000814:	4253      	negpl	r3, r2
 8000816:	011d      	lsls	r5, r3, #4
 8000818:	f00a f944 	bl	800aaa4 <rand>
 800081c:	4603      	mov	r3, r0
 800081e:	425a      	negs	r2, r3
 8000820:	f003 0307 	and.w	r3, r3, #7
 8000824:	f002 0207 	and.w	r2, r2, #7
 8000828:	bf58      	it	pl
 800082a:	4253      	negpl	r3, r2
 800082c:	442b      	add	r3, r5
 800082e:	3308      	adds	r3, #8
 8000830:	4423      	add	r3, r4
 8000832:	2201      	movs	r2, #1
 8000834:	721a      	strb	r2, [r3, #8]
	return 1;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bdb0      	pop	{r4, r5, r7, pc}

08000840 <render_board.4>:
int render_board(){
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	4664      	mov	r4, ip
 8000848:	f8c7 c004 	str.w	ip, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800084c:	2000      	movs	r0, #0
 800084e:	f002 fd79 	bl	8003344 <BSP_LCD_Clear>
	for (uint8_t row = 0; row < 16; row++){
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	e05f      	b.n	8000918 <render_board.4+0xd8>
		for (uint8_t col = 0; col < 16; col++){
 8000858:	2300      	movs	r3, #0
 800085a:	73bb      	strb	r3, [r7, #14]
 800085c:	e056      	b.n	800090c <render_board.4+0xcc>
			uint8_t cell = board[row*16+col];
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	011a      	lsls	r2, r3, #4
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	4413      	add	r3, r2
 8000866:	4423      	add	r3, r4
 8000868:	7a1b      	ldrb	r3, [r3, #8]
 800086a:	737b      	strb	r3, [r7, #13]
				if ( cell == 0) continue;
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d048      	beq.n	8000904 <render_board.4+0xc4>
				if ( cell == 1) {
 8000872:	7b7b      	ldrb	r3, [r7, #13]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d118      	bne.n	80008aa <render_board.4+0x6a>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000878:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800087c:	f002 fd26 	bl	80032cc <BSP_LCD_SetTextColor>
					BSP_LCD_FillCircle(col*15+7, row*15+7, 7);
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	b29b      	uxth	r3, r3
 8000884:	461a      	mov	r2, r3
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	3307      	adds	r3, #7
 800088e:	b298      	uxth	r0, r3
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	b29b      	uxth	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	b29b      	uxth	r3, r3
 800089c:	3307      	adds	r3, #7
 800089e:	b29b      	uxth	r3, r3
 80008a0:	2207      	movs	r2, #7
 80008a2:	4619      	mov	r1, r3
 80008a4:	f002 ffc6 	bl	8003834 <BSP_LCD_FillCircle>
 80008a8:	e02d      	b.n	8000906 <render_board.4+0xc6>
				else if ( cell == 2){
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d114      	bne.n	80008da <render_board.4+0x9a>
					BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
 80008b0:	f248 70f0 	movw	r0, #34800	@ 0x87f0
 80008b4:	f002 fd0a 	bl	80032cc <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(col*15, row*15, 15, 15);
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b298      	uxth	r0, r3
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	b299      	uxth	r1, r3
 80008d0:	230f      	movs	r3, #15
 80008d2:	220f      	movs	r2, #15
 80008d4:	f002 ff84 	bl	80037e0 <BSP_LCD_FillRect>
 80008d8:	e015      	b.n	8000906 <render_board.4+0xc6>
					BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 80008da:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80008de:	f002 fcf5 	bl	80032cc <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(col*15, row*15, 15, 15);
 80008e2:	7bbb      	ldrb	r3, [r7, #14]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	b298      	uxth	r0, r3
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	b299      	uxth	r1, r3
 80008fa:	230f      	movs	r3, #15
 80008fc:	220f      	movs	r2, #15
 80008fe:	f002 ff6f 	bl	80037e0 <BSP_LCD_FillRect>
 8000902:	e000      	b.n	8000906 <render_board.4+0xc6>
				if ( cell == 0) continue;
 8000904:	bf00      	nop
		for (uint8_t col = 0; col < 16; col++){
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	3301      	adds	r3, #1
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	2b0f      	cmp	r3, #15
 8000910:	d9a5      	bls.n	800085e <render_board.4+0x1e>
	for (uint8_t row = 0; row < 16; row++){
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	3301      	adds	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	2b0f      	cmp	r3, #15
 800091c:	d99c      	bls.n	8000858 <render_board.4+0x18>
	return 1;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}

08000928 <you_dieded_lol.6>:
int you_dieded_lol(){
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	4664      	mov	r4, ip
 8000930:	f8c7 c004 	str.w	ip, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000934:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000938:	f002 fd04 	bl	8003344 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800093c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000940:	f002 fcc4 	bl	80032cc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000944:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000948:	f002 fcd0 	bl	80032ec <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(12, 12, (uint8_t*)"Hello World!", CENTER_MODE);
 800094c:	2301      	movs	r3, #1
 800094e:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <you_dieded_lol.6+0x54>)
 8000950:	210c      	movs	r1, #12
 8000952:	200c      	movs	r0, #12
 8000954:	f002 fd84 	bl	8003460 <BSP_LCD_DisplayStringAt>
	sprintf(out_str, "Score: %d", score);
 8000958:	79a3      	ldrb	r3, [r4, #6]
 800095a:	461a      	mov	r2, r3
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4907      	ldr	r1, [pc, #28]	@ (8000980 <you_dieded_lol.6+0x58>)
 8000962:	4618      	mov	r0, r3
 8000964:	f00a f99e 	bl	800aca4 <siprintf>
	BSP_LCD_DisplayStringAt(12, 26, (uint8_t*)out_str, CENTER_MODE);
 8000968:	f107 020c 	add.w	r2, r7, #12
 800096c:	2301      	movs	r3, #1
 800096e:	211a      	movs	r1, #26
 8000970:	200c      	movs	r0, #12
 8000972:	f002 fd75 	bl	8003460 <BSP_LCD_DisplayStringAt>
	while (1){}
 8000976:	bf00      	nop
 8000978:	e7fd      	b.n	8000976 <you_dieded_lol.6+0x4e>
 800097a:	bf00      	nop
 800097c:	0800bd00 	.word	0x0800bd00
 8000980:	0800bd10 	.word	0x0800bd10

08000984 <move_snake_renderned.5>:
int move_snake_renderned(){
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4664      	mov	r4, ip
 800098c:	f8c7 c004 	str.w	ip, [r7, #4]
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 8000990:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000994:	f002 fc9a 	bl	80032cc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(head_col*15, head_row*15, 15, 15);
 8000998:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 800099c:	461a      	mov	r2, r3
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	b298      	uxth	r0, r3
 80009a4:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 80009a8:	461a      	mov	r2, r3
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	b299      	uxth	r1, r3
 80009b0:	230f      	movs	r3, #15
 80009b2:	220f      	movs	r2, #15
 80009b4:	f002 ff14 	bl	80037e0 <BSP_LCD_FillRect>
	board[head_pos()] = head_rot +3;
 80009b8:	46a4      	mov	ip, r4
 80009ba:	f7ff fe7f 	bl	80006bc <head_pos.2>
 80009be:	4603      	mov	r3, r0
 80009c0:	4619      	mov	r1, r3
 80009c2:	7963      	ldrb	r3, [r4, #5]
 80009c4:	3303      	adds	r3, #3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	1863      	adds	r3, r4, r1
 80009ca:	721a      	strb	r2, [r3, #8]
		if (head_rot == 0 && head_row > 0) head_row -= 1;
 80009cc:	7963      	ldrb	r3, [r4, #5]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10a      	bne.n	80009e8 <move_snake_renderned.5+0x64>
 80009d2:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <move_snake_renderned.5+0x64>
 80009da:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 80009de:	3b01      	subs	r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f884 3109 	strb.w	r3, [r4, #265]	@ 0x109
 80009e6:	e02c      	b.n	8000a42 <move_snake_renderned.5+0xbe>
		else if (head_rot == 1 && head_col < 16) head_col += 1;
 80009e8:	7963      	ldrb	r3, [r4, #5]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10a      	bne.n	8000a04 <move_snake_renderned.5+0x80>
 80009ee:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d806      	bhi.n	8000a04 <move_snake_renderned.5+0x80>
 80009f6:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 80009fa:	3301      	adds	r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	f884 3108 	strb.w	r3, [r4, #264]	@ 0x108
 8000a02:	e01e      	b.n	8000a42 <move_snake_renderned.5+0xbe>
		else if (head_rot == 2 && head_row < 16) head_row += 1;
 8000a04:	7963      	ldrb	r3, [r4, #5]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d10a      	bne.n	8000a20 <move_snake_renderned.5+0x9c>
 8000a0a:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 8000a0e:	2b0f      	cmp	r3, #15
 8000a10:	d806      	bhi.n	8000a20 <move_snake_renderned.5+0x9c>
 8000a12:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f884 3109 	strb.w	r3, [r4, #265]	@ 0x109
 8000a1e:	e010      	b.n	8000a42 <move_snake_renderned.5+0xbe>
		else if (head_rot == 3 && head_col > 0 ) head_col -= 1;
 8000a20:	7963      	ldrb	r3, [r4, #5]
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d10a      	bne.n	8000a3c <move_snake_renderned.5+0xb8>
 8000a26:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d006      	beq.n	8000a3c <move_snake_renderned.5+0xb8>
 8000a2e:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 8000a32:	3b01      	subs	r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f884 3108 	strb.w	r3, [r4, #264]	@ 0x108
 8000a3a:	e002      	b.n	8000a42 <move_snake_renderned.5+0xbe>
		else you_dieded_lol();
 8000a3c:	46a4      	mov	ip, r4
 8000a3e:	f7ff ff73 	bl	8000928 <you_dieded_lol.6>
		int tail_pos_change = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
		switch (board[tail_end_pos]-3) {
 8000a46:	79e3      	ldrb	r3, [r4, #7]
 8000a48:	4423      	add	r3, r4
 8000a4a:	7a1b      	ldrb	r3, [r3, #8]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d00d      	beq.n	8000a6e <move_snake_renderned.5+0xea>
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	dc0e      	bgt.n	8000a74 <move_snake_renderned.5+0xf0>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <move_snake_renderned.5+0xdc>
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d004      	beq.n	8000a68 <move_snake_renderned.5+0xe4>
 8000a5e:	e009      	b.n	8000a74 <move_snake_renderned.5+0xf0>
			tail_pos_change = -16;
 8000a60:	f06f 030f 	mvn.w	r3, #15
 8000a64:	60fb      	str	r3, [r7, #12]
			break;
 8000a66:	e009      	b.n	8000a7c <move_snake_renderned.5+0xf8>
			tail_pos_change = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
			break;
 8000a6c:	e006      	b.n	8000a7c <move_snake_renderned.5+0xf8>
			tail_pos_change = 16;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	60fb      	str	r3, [r7, #12]
			break;
 8000a72:	e003      	b.n	8000a7c <move_snake_renderned.5+0xf8>
			tail_pos_change = -1;
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	60fb      	str	r3, [r7, #12]
			break;
 8000a7a:	bf00      	nop
		if (skip_tail_movement)skip_tail_movement = 0;
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <move_snake_renderned.5+0x104>
 8000a82:	2300      	movs	r3, #0
 8000a84:	6023      	str	r3, [r4, #0]
 8000a86:	e027      	b.n	8000ad8 <move_snake_renderned.5+0x154>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f002 fc1f 	bl	80032cc <BSP_LCD_SetTextColor>
			uint8_t col = tail_end_pos % 16;
 8000a8e:	79e3      	ldrb	r3, [r4, #7]
 8000a90:	f003 030f 	and.w	r3, r3, #15
 8000a94:	72bb      	strb	r3, [r7, #10]
			BSP_LCD_FillRect(col*15,(tail_end_pos-col)/16*15, 15, 15);
 8000a96:	7abb      	ldrb	r3, [r7, #10]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	b298      	uxth	r0, r3
 8000aa2:	79e3      	ldrb	r3, [r4, #7]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	7abb      	ldrb	r3, [r7, #10]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da00      	bge.n	8000ab0 <move_snake_renderned.5+0x12c>
 8000aae:	330f      	adds	r3, #15
 8000ab0:	111b      	asrs	r3, r3, #4
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	b299      	uxth	r1, r3
 8000abc:	230f      	movs	r3, #15
 8000abe:	220f      	movs	r2, #15
 8000ac0:	f002 fe8e 	bl	80037e0 <BSP_LCD_FillRect>
			board[tail_end_pos] = 0;
 8000ac4:	79e3      	ldrb	r3, [r4, #7]
 8000ac6:	4423      	add	r3, r4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	721a      	strb	r2, [r3, #8]
			tail_end_pos += tail_pos_change;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	79e2      	ldrb	r2, [r4, #7]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	71e3      	strb	r3, [r4, #7]
		switch(board[head_pos()]){
 8000ad8:	46a4      	mov	ip, r4
 8000ada:	f7ff fdef 	bl	80006bc <head_pos.2>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4423      	add	r3, r4
 8000ae2:	7a1b      	ldrb	r3, [r3, #8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d04a      	beq.n	8000b7e <move_snake_renderned.5+0x1fa>
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d144      	bne.n	8000b76 <move_snake_renderned.5+0x1f2>
			score++;
 8000aec:	79a3      	ldrb	r3, [r4, #6]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	71a3      	strb	r3, [r4, #6]
			skip_tail_movement = 1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	6023      	str	r3, [r4, #0]
			uint8_t new_fruit_pos = rand()%256;
 8000af8:	f009 ffd4 	bl	800aaa4 <rand>
 8000afc:	4603      	mov	r3, r0
 8000afe:	425a      	negs	r2, r3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	bf58      	it	pl
 8000b06:	4253      	negpl	r3, r2
 8000b08:	72fb      	strb	r3, [r7, #11]
			while(board[new_fruit_pos] != 0) new_fruit_pos = rand()%256;
 8000b0a:	e008      	b.n	8000b1e <move_snake_renderned.5+0x19a>
 8000b0c:	f009 ffca 	bl	800aaa4 <rand>
 8000b10:	4603      	mov	r3, r0
 8000b12:	425a      	negs	r2, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	bf58      	it	pl
 8000b1a:	4253      	negpl	r3, r2
 8000b1c:	72fb      	strb	r3, [r7, #11]
 8000b1e:	7afb      	ldrb	r3, [r7, #11]
 8000b20:	4423      	add	r3, r4
 8000b22:	7a1b      	ldrb	r3, [r3, #8]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f1      	bne.n	8000b0c <move_snake_renderned.5+0x188>
			board[new_fruit_pos] = 1;
 8000b28:	7afb      	ldrb	r3, [r7, #11]
 8000b2a:	4423      	add	r3, r4
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	721a      	strb	r2, [r3, #8]
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000b30:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000b34:	f002 fbca 	bl	80032cc <BSP_LCD_SetTextColor>
			uint8_t col = new_fruit_pos % 16;
 8000b38:	7afb      	ldrb	r3, [r7, #11]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	727b      	strb	r3, [r7, #9]
			BSP_LCD_FillCircle(col*15+7, (new_fruit_pos-col)/16*15+7, 7);
 8000b40:	7a7b      	ldrb	r3, [r7, #9]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	3307      	adds	r3, #7
 8000b4e:	b298      	uxth	r0, r3
 8000b50:	7afa      	ldrb	r2, [r7, #11]
 8000b52:	7a7b      	ldrb	r3, [r7, #9]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	da00      	bge.n	8000b5c <move_snake_renderned.5+0x1d8>
 8000b5a:	330f      	adds	r3, #15
 8000b5c:	111b      	asrs	r3, r3, #4
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	3307      	adds	r3, #7
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f002 fe60 	bl	8003834 <BSP_LCD_FillCircle>
			break;
 8000b74:	e004      	b.n	8000b80 <move_snake_renderned.5+0x1fc>
			you_dieded_lol();
 8000b76:	46a4      	mov	ip, r4
 8000b78:	f7ff fed6 	bl	8000928 <you_dieded_lol.6>
			break;
 8000b7c:	e000      	b.n	8000b80 <move_snake_renderned.5+0x1fc>
			break;
 8000b7e:	bf00      	nop
		board[head_pos()] = 2;
 8000b80:	46a4      	mov	ip, r4
 8000b82:	f7ff fd9b 	bl	80006bc <head_pos.2>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4423      	add	r3, r4
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	721a      	strb	r2, [r3, #8]
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
 8000b8e:	f248 70f0 	movw	r0, #34800	@ 0x87f0
 8000b92:	f002 fb9b 	bl	80032cc <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(head_col*15, head_row*15, 15, 15);
 8000b96:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	b298      	uxth	r0, r3
 8000ba2:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b299      	uxth	r1, r3
 8000bae:	230f      	movs	r3, #15
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	f002 fe15 	bl	80037e0 <BSP_LCD_FillRect>
		return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd90      	pop	{r4, r7, pc}

08000bc0 <get_controller_input.3>:
uint8_t get_controller_input(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	f8c7 c004 	str.w	ip, [r7, #4]
	if (BSP_JOY_GetState() == JOY_UP) return 0;
 8000bca:	f002 f98f 	bl	8002eec <BSP_JOY_GetState>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d101      	bne.n	8000bd8 <get_controller_input.3+0x18>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e01c      	b.n	8000c12 <get_controller_input.3+0x52>
	if (BSP_JOY_GetState() == JOY_RIGHT) return 1;
 8000bd8:	f002 f988 	bl	8002eec <BSP_JOY_GetState>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d101      	bne.n	8000be6 <get_controller_input.3+0x26>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e015      	b.n	8000c12 <get_controller_input.3+0x52>
	if (BSP_JOY_GetState() == JOY_DOWN) return 2;
 8000be6:	f002 f981 	bl	8002eec <BSP_JOY_GetState>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d101      	bne.n	8000bf4 <get_controller_input.3+0x34>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e00e      	b.n	8000c12 <get_controller_input.3+0x52>
	if (BSP_JOY_GetState() == JOY_LEFT) return 3;
 8000bf4:	f002 f97a 	bl	8002eec <BSP_JOY_GetState>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d101      	bne.n	8000c02 <get_controller_input.3+0x42>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e007      	b.n	8000c12 <get_controller_input.3+0x52>
	if (BSP_JOY_GetState() == JOY_SEL) return 4;
 8000c02:	f002 f973 	bl	8002eec <BSP_JOY_GetState>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <get_controller_input.3+0x50>
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	e000      	b.n	8000c12 <get_controller_input.3+0x52>
	return 5; // idle
 8000c10:	2305      	movs	r3, #5
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <snake2.0>:

int snake2(){
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4664      	mov	r4, ip
 8000c24:	f8c7 c004 	str.w	ip, [r7, #4]
	generate_start_board();
 8000c28:	46a4      	mov	ip, r4
 8000c2a:	f7ff fdcb 	bl	80007c4 <generate_start_board.1>
	render_board();
 8000c2e:	46a4      	mov	ip, r4
 8000c30:	f7ff fe06 	bl	8000840 <render_board.4>
		while(1){
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c34:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c38:	f002 fb48 	bl	80032cc <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f002 fb55 	bl	80032ec <BSP_LCD_SetBackColor>
			char out_str[5];
			sprintf(out_str, "%d", score);
 8000c42:	79a3      	ldrb	r3, [r4, #6]
 8000c44:	461a      	mov	r2, r3
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4936      	ldr	r1, [pc, #216]	@ (8000d24 <snake2.0+0x108>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00a f829 	bl	800aca4 <siprintf>
			BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)out_str, CENTER_MODE);
 8000c52:	f107 0208 	add.w	r2, r7, #8
 8000c56:	2301      	movs	r3, #1
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f002 fc00 	bl	8003460 <BSP_LCD_DisplayStringAt>


			uint32_t start = HAL_GetTick();
 8000c60:	f002 ffd6 	bl	8003c10 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]
	 		uint8_t input = get_controller_input();
 8000c66:	46a4      	mov	ip, r4
 8000c68:	f7ff ffaa 	bl	8000bc0 <get_controller_input.3>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	75fb      	strb	r3, [r7, #23]
			while(HAL_GetTick() - start< 700 - rand()%300){
 8000c70:	e00a      	b.n	8000c88 <snake2.0+0x6c>
				if (get_controller_input() != 5)
 8000c72:	46a4      	mov	ip, r4
 8000c74:	f7ff ffa4 	bl	8000bc0 <get_controller_input.3>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b05      	cmp	r3, #5
 8000c7c:	d004      	beq.n	8000c88 <snake2.0+0x6c>
					input = get_controller_input();
 8000c7e:	46a4      	mov	ip, r4
 8000c80:	f7ff ff9e 	bl	8000bc0 <get_controller_input.3>
 8000c84:	4603      	mov	r3, r0
 8000c86:	75fb      	strb	r3, [r7, #23]
			while(HAL_GetTick() - start< 700 - rand()%300){
 8000c88:	f002 ffc2 	bl	8003c10 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad5      	subs	r5, r2, r3
 8000c92:	f009 ff07 	bl	800aaa4 <rand>
 8000c96:	4602      	mov	r2, r0
 8000c98:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <snake2.0+0x10c>)
 8000c9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c9e:	1159      	asrs	r1, r3, #5
 8000ca0:	17d3      	asrs	r3, r2, #31
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	f5c3 732f 	rsb	r3, r3, #700	@ 0x2bc
 8000cb2:	429d      	cmp	r5, r3
 8000cb4:	d3dd      	bcc.n	8000c72 <snake2.0+0x56>
			}
			if (input == 4){
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d122      	bne.n	8000d02 <snake2.0+0xe6>
				if (pause_indicator++ >= 2){
 8000cbc:	7923      	ldrb	r3, [r4, #4]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	7122      	strb	r2, [r4, #4]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d92b      	bls.n	8000d20 <snake2.0+0x104>
					BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f002 fb3b 	bl	8003344 <BSP_LCD_Clear>
					BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f002 fb0c 	bl	80032ec <BSP_LCD_SetBackColor>
					BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000cd4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000cd8:	f002 faf8 	bl	80032cc <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(0, 110, (uint8_t*)"Pause", CENTER_MODE);
 8000cdc:	2301      	movs	r3, #1
 8000cde:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <snake2.0+0x110>)
 8000ce0:	216e      	movs	r1, #110	@ 0x6e
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f002 fbbc 	bl	8003460 <BSP_LCD_DisplayStringAt>
					while (input > 3) input = get_controller_input();
 8000ce8:	e004      	b.n	8000cf4 <snake2.0+0xd8>
 8000cea:	46a4      	mov	ip, r4
 8000cec:	f7ff ff68 	bl	8000bc0 <get_controller_input.3>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	75fb      	strb	r3, [r7, #23]
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d8f7      	bhi.n	8000cea <snake2.0+0xce>
					render_board();
 8000cfa:	46a4      	mov	ip, r4
 8000cfc:	f7ff fda0 	bl	8000840 <render_board.4>
 8000d00:	e001      	b.n	8000d06 <snake2.0+0xea>
				} else
				continue;
			}else {
				pause_indicator = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	7123      	strb	r3, [r4, #4]
			}
			if(input == 5)
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	d103      	bne.n	8000d14 <snake2.0+0xf8>
				move_snake_renderned();
 8000d0c:	46a4      	mov	ip, r4
 8000d0e:	f7ff fe39 	bl	8000984 <move_snake_renderned.5>
 8000d12:	e78f      	b.n	8000c34 <snake2.0+0x18>
			else {
				head_rot = input;
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	7163      	strb	r3, [r4, #5]
				move_snake_renderned();
 8000d18:	46a4      	mov	ip, r4
 8000d1a:	f7ff fe33 	bl	8000984 <move_snake_renderned.5>
 8000d1e:	e789      	b.n	8000c34 <snake2.0+0x18>
				continue;
 8000d20:	bf00      	nop
		while(1){
 8000d22:	e787      	b.n	8000c34 <snake2.0+0x18>
 8000d24:	0800bd1c 	.word	0x0800bd1c
 8000d28:	1b4e81b5 	.word	0x1b4e81b5
 8000d2c:	0800bd20 	.word	0x0800bd20

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	@ 0x50
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	2234      	movs	r2, #52	@ 0x34
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00a f813 	bl	800ad6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <SystemClock_Config+0xe4>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8000e14 <SystemClock_Config+0xe4>)
 8000d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d64:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <SystemClock_Config+0xe4>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <SystemClock_Config+0xe8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a27      	ldr	r2, [pc, #156]	@ (8000e18 <SystemClock_Config+0xe8>)
 8000d7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <SystemClock_Config+0xe8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d90:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d96:	2301      	movs	r3, #1
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dac:	2304      	movs	r3, #4
 8000dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000db0:	2348      	movs	r3, #72	@ 0x48
 8000db2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000db8:	2303      	movs	r3, #3
 8000dba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 fd57 	bl	8007878 <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000dd0:	f000 fa3a 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	2102      	movs	r1, #2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f006 facd 	bl	8007390 <HAL_RCC_ClockConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000dfc:	f000 fa24 	bl	8001248 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2000      	movs	r0, #0
 8000e06:	f006 fba9 	bl	800755c <HAL_RCC_MCOConfig>
}
 8000e0a:	bf00      	nop
 8000e0c:	3750      	adds	r7, #80	@ 0x50
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40007000 	.word	0x40007000

08000e1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e22:	4a13      	ldr	r2, [pc, #76]	@ (8000e70 <MX_I2C2_Init+0x54>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e28:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <MX_I2C2_Init+0x58>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	@ (8000e6c <MX_I2C2_Init+0x50>)
 8000e5a:	f005 fa4d 	bl	80062f8 <HAL_I2C_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e64:	f000 f9f0 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000120 	.word	0x20000120
 8000e70:	40005800 	.word	0x40005800
 8000e74:	000186a0 	.word	0x000186a0

08000e78 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_IWDG_Init+0x2c>)
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <MX_IWDG_Init+0x30>)
 8000e80:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <MX_IWDG_Init+0x2c>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_IWDG_Init+0x2c>)
 8000e8a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000e8e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <MX_IWDG_Init+0x2c>)
 8000e92:	f006 fa2b 	bl	80072ec <HAL_IWDG_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000e9c:	f000 f9d4 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000174 	.word	0x20000174
 8000ea8:	40003000 	.word	0x40003000

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	@ 0x38
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
 8000ec6:	4bb2      	ldr	r3, [pc, #712]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4ab1      	ldr	r2, [pc, #708]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4baf      	ldr	r3, [pc, #700]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	4bab      	ldr	r3, [pc, #684]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4aaa      	ldr	r2, [pc, #680]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4ba8      	ldr	r3, [pc, #672]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	4ba4      	ldr	r3, [pc, #656]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4aa3      	ldr	r2, [pc, #652]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4ba1      	ldr	r3, [pc, #644]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	4b9d      	ldr	r3, [pc, #628]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a9c      	ldr	r2, [pc, #624]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b9a      	ldr	r3, [pc, #616]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b96      	ldr	r3, [pc, #600]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a95      	ldr	r2, [pc, #596]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b93      	ldr	r3, [pc, #588]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b8f      	ldr	r3, [pc, #572]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a8e      	ldr	r2, [pc, #568]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b8c      	ldr	r3, [pc, #560]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b88      	ldr	r3, [pc, #544]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a87      	ldr	r2, [pc, #540]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b85      	ldr	r3, [pc, #532]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b81      	ldr	r3, [pc, #516]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a80      	ldr	r2, [pc, #512]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b7e      	ldr	r3, [pc, #504]	@ (8001190 <MX_GPIO_Init+0x2e4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	487b      	ldr	r0, [pc, #492]	@ (8001194 <MX_GPIO_Init+0x2e8>)
 8000fa8:	f003 f920 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000fb2:	4879      	ldr	r0, [pc, #484]	@ (8001198 <MX_GPIO_Init+0x2ec>)
 8000fb4:	f003 f91a 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fbe:	4877      	ldr	r0, [pc, #476]	@ (800119c <MX_GPIO_Init+0x2f0>)
 8000fc0:	f003 f914 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fca:	4875      	ldr	r0, [pc, #468]	@ (80011a0 <MX_GPIO_Init+0x2f4>)
 8000fcc:	f003 f90e 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fd4:	2311      	movs	r3, #17
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	486b      	ldr	r0, [pc, #428]	@ (8001194 <MX_GPIO_Init+0x2e8>)
 8000fe8:	f002 ff54 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 8000fec:	2310      	movs	r3, #16
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4863      	ldr	r0, [pc, #396]	@ (8001194 <MX_GPIO_Init+0x2e8>)
 8001008:	f002 ff44 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 800100c:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	485c      	ldr	r0, [pc, #368]	@ (8001198 <MX_GPIO_Init+0x2ec>)
 8001026:	f002 ff35 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO3_Pin QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 800102a:	23c0      	movs	r3, #192	@ 0xc0
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800103a:	2309      	movs	r3, #9
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4854      	ldr	r0, [pc, #336]	@ (8001198 <MX_GPIO_Init+0x2ec>)
 8001046:	f002 ff25 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO0_Pin QSPI_BK1_IO1_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800104a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800105c:	230a      	movs	r3, #10
 800105e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	484c      	ldr	r0, [pc, #304]	@ (8001198 <MX_GPIO_Init+0x2ec>)
 8001068:	f002 ff14 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800106c:	2304      	movs	r3, #4
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 800107c:	2308      	movs	r3, #8
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	4847      	ldr	r0, [pc, #284]	@ (80011a4 <MX_GPIO_Init+0x2f8>)
 8001088:	f002 ff04 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 800108c:	2301      	movs	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4841      	ldr	r0, [pc, #260]	@ (80011a8 <MX_GPIO_Init+0x2fc>)
 80010a2:	f002 fef7 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 80010a6:	2302      	movs	r3, #2
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80010b6:	2308      	movs	r3, #8
 80010b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	483a      	ldr	r0, [pc, #232]	@ (80011ac <MX_GPIO_Init+0x300>)
 80010c2:	f002 fee7 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80010c6:	2304      	movs	r3, #4
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80010d6:	2309      	movs	r3, #9
 80010d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4832      	ldr	r0, [pc, #200]	@ (80011ac <MX_GPIO_Init+0x300>)
 80010e2:	f002 fed7 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 80010e6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4827      	ldr	r0, [pc, #156]	@ (8001198 <MX_GPIO_Init+0x2ec>)
 80010fc:	f002 feca 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8001100:	2393      	movs	r3, #147	@ 0x93
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	4619      	mov	r1, r3
 8001112:	4823      	ldr	r0, [pc, #140]	@ (80011a0 <MX_GPIO_Init+0x2f4>)
 8001114:	f002 febe 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 8001118:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800112a:	2305      	movs	r3, #5
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	481d      	ldr	r0, [pc, #116]	@ (80011ac <MX_GPIO_Init+0x300>)
 8001136:	f002 fead 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800113a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4812      	ldr	r0, [pc, #72]	@ (800119c <MX_GPIO_Init+0x2f0>)
 8001154:	f002 fe9e 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 8001158:	2324      	movs	r3, #36	@ 0x24
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	@ (80011a0 <MX_GPIO_Init+0x2f4>)
 800116e:	f002 fe91 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001172:	2340      	movs	r3, #64	@ 0x40
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001182:	230a      	movs	r3, #10
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	e010      	b.n	80011b0 <MX_GPIO_Init+0x304>
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020400 	.word	0x40020400
 80011b0:	4821      	ldr	r0, [pc, #132]	@ (8001238 <MX_GPIO_Init+0x38c>)
 80011b2:	f002 fe6f 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 80011b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011bc:	2311      	movs	r3, #17
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	481a      	ldr	r0, [pc, #104]	@ (8001238 <MX_GPIO_Init+0x38c>)
 80011d0:	f002 fe60 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 80011d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4812      	ldr	r0, [pc, #72]	@ (800123c <MX_GPIO_Init+0x390>)
 80011f2:	f002 fe4f 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 80011f6:	2308      	movs	r3, #8
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	480d      	ldr	r0, [pc, #52]	@ (8001240 <MX_GPIO_Init+0x394>)
 800120a:	f002 fe43 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800120e:	23c0      	movs	r3, #192	@ 0xc0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001212:	2312      	movs	r3, #18
 8001214:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121e:	2304      	movs	r3, #4
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4806      	ldr	r0, [pc, #24]	@ (8001244 <MX_GPIO_Init+0x398>)
 800122a:	f002 fe33 	bl	8003e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122e:	bf00      	nop
 8001230:	3738      	adds	r7, #56	@ 0x38
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021800 	.word	0x40021800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40020400 	.word	0x40020400

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <Error_Handler+0x8>

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001268:	6453      	str	r3, [r2, #68]	@ 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a22      	ldr	r2, [pc, #136]	@ (800134c <HAL_I2C_MspInit+0xa8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d13d      	bne.n	8001342 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <HAL_I2C_MspInit+0xac>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a20      	ldr	r2, [pc, #128]	@ (8001350 <HAL_I2C_MspInit+0xac>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_I2C_MspInit+0xac>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80012e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012f4:	2304      	movs	r3, #4
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4815      	ldr	r0, [pc, #84]	@ (8001354 <HAL_I2C_MspInit+0xb0>)
 8001300:	f002 fdc8 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001304:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130a:	2312      	movs	r3, #18
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130e:	2301      	movs	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001316:	2309      	movs	r3, #9
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <HAL_I2C_MspInit+0xb0>)
 8001322:	f002 fdb7 	bl	8003e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_I2C_MspInit+0xac>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_I2C_MspInit+0xac>)
 8001330:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001334:	6413      	str	r3, [r2, #64]	@ 0x40
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_I2C_MspInit+0xac>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	@ 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40005800 	.word	0x40005800
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400

08001358 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800136c:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <HAL_FSMC_MspInit+0xa8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d140      	bne.n	80013f6 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <HAL_FSMC_MspInit+0xa8>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <HAL_FSMC_MspInit+0xac>)
 8001380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001382:	4a20      	ldr	r2, [pc, #128]	@ (8001404 <HAL_FSMC_MspInit+0xac>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6393      	str	r3, [r2, #56]	@ 0x38
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <HAL_FSMC_MspInit+0xac>)
 800138c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = A0_Pin;
 8001396:	2301      	movs	r3, #1
 8001398:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013a6:	230c      	movs	r3, #12
 80013a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4816      	ldr	r0, [pc, #88]	@ (8001408 <HAL_FSMC_MspInit+0xb0>)
 80013b0:	f002 fd70 	bl	8003e94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80013b4:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80013b8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013c6:	230c      	movs	r3, #12
 80013c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	480f      	ldr	r0, [pc, #60]	@ (800140c <HAL_FSMC_MspInit+0xb4>)
 80013d0:	f002 fd60 	bl	8003e94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80013d4:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80013d8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013e6:	230c      	movs	r3, #12
 80013e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4808      	ldr	r0, [pc, #32]	@ (8001410 <HAL_FSMC_MspInit+0xb8>)
 80013f0:	f002 fd50 	bl	8003e94 <HAL_GPIO_Init>
 80013f4:	e000      	b.n	80013f8 <HAL_FSMC_MspInit+0xa0>
    return;
 80013f6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000180 	.word	0x20000180
 8001404:	40023800 	.word	0x40023800
 8001408:	40021400 	.word	0x40021400
 800140c:	40021000 	.word	0x40021000
 8001410:	40020c00 	.word	0x40020c00

08001414 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800141c:	f7ff ff9c 	bl	8001358 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <NMI_Handler+0x4>

08001430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <MemManage_Handler+0x4>

08001440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <UsageFault_Handler+0x4>

08001450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147e:	f002 fbb3 	bl	8003be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <OTG_FS_IRQHandler+0x10>)
 800148e:	f003 f91d 	bl	80046cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000057c 	.word	0x2000057c

0800149c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_kill>:

int _kill(int pid, int sig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b6:	f009 fcb7 	bl	800ae28 <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
  return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_exit>:

void _exit (int status)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ffe7 	bl	80014ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80014de:	bf00      	nop
 80014e0:	e7fd      	b.n	80014de <_exit+0x12>

080014e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e00a      	b.n	800150a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f4:	f3af 8000 	nop.w
 80014f8:	4601      	mov	r1, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	60ba      	str	r2, [r7, #8]
 8001500:	b2ca      	uxtb	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	dbf0      	blt.n	80014f4 <_read+0x12>
  }

  return len;
 8001512:	687b      	ldr	r3, [r7, #4]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e009      	b.n	8001542 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	dbf1      	blt.n	800152e <_write+0x12>
  }
  return len;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_close>:

int _close(int file)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800157c:	605a      	str	r2, [r3, #4]
  return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_isatty>:

int _isatty(int file)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f009 fc1c 	bl	800ae28 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20040000 	.word	0x20040000
 800161c:	00000400 	.word	0x00000400
 8001620:	20000184 	.word	0x20000184
 8001624:	20000aa8 	.word	0x20000aa8

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <read_sensor_data>:

/**
 * reads the raw temperature readings from the sensor into the readbuffer
 * Returns 0 if no sensor could be detected (else 1)
 */
int read_sensor_data(uint8_t* readbuffer){
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	6078      	str	r0, [r7, #4]
	 /// Each temperature reading consists of 2 8-Bit value (LOW-/HIGH-bit)
	 /// Additionally one PTAT reading and one Checksuum value is transmitted
	 int size = TEMP_VALUE_COUNT * 2 + 3;
 8001654:	f640 0303 	movw	r3, #2051	@ 0x803
 8001658:	613b      	str	r3, [r7, #16]
	 /// Command for telling the sensor we want to read data
	 uint8_t cmd = 0x4c;
 800165a:	234c      	movs	r3, #76	@ 0x4c
 800165c:	73bb      	strb	r3, [r7, #14]

	 /// applying I2C settings to the external I2C port
	  HAL_StatusTypeDef status = HAL_I2C_Init(&hi2c2);
 800165e:	4822      	ldr	r0, [pc, #136]	@ (80016e8 <read_sensor_data+0x9c>)
 8001660:	f004 fe4a 	bl	80062f8 <HAL_I2C_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
	  HAL_IWDG_Refresh(&hiwdg);
 8001668:	4820      	ldr	r0, [pc, #128]	@ (80016ec <read_sensor_data+0xa0>)
 800166a:	f005 fe81 	bl	8007370 <HAL_IWDG_Refresh>


	  int fails = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
	  do {
		  /// send command for preparing transmission
		  status = HAL_I2C_Master_Transmit(&hi2c2, 0x14, &cmd, 1, 100);
 8001672:	f107 020e 	add.w	r2, r7, #14
 8001676:	2364      	movs	r3, #100	@ 0x64
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	2114      	movs	r1, #20
 800167e:	481a      	ldr	r0, [pc, #104]	@ (80016e8 <read_sensor_data+0x9c>)
 8001680:	f004 ff7e 	bl	8006580 <HAL_I2C_Master_Transmit>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(10);
 8001688:	200a      	movs	r0, #10
 800168a:	f002 facd 	bl	8003c28 <HAL_Delay>

		  /// if the connection failed more than 10 times in a row, return connection lost
		  if (status != HAL_OK && fails++ > CONNECTION_TRYS) return NO_CONNECTION;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <read_sensor_data+0x56>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	617a      	str	r2, [r7, #20]
 800169a:	2b0a      	cmp	r3, #10
 800169c:	dd01      	ble.n	80016a2 <read_sensor_data+0x56>
 800169e:	2300      	movs	r3, #0
 80016a0:	e01e      	b.n	80016e0 <read_sensor_data+0x94>

		  /// receive the data from Sensor at port 0x14
		  status = HAL_I2C_Master_Receive(&hi2c2, 0x14, readbuffer, size, HAL_MAX_DELAY);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f04f 32ff 	mov.w	r2, #4294967295
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	2114      	movs	r1, #20
 80016b0:	480d      	ldr	r0, [pc, #52]	@ (80016e8 <read_sensor_data+0x9c>)
 80016b2:	f005 f863 	bl	800677c <HAL_I2C_Master_Receive>
 80016b6:	4603      	mov	r3, r0
 80016b8:	73fb      	strb	r3, [r7, #15]

		  /// if everything was successful, end the function else wait and try again
		  if (status == HAL_OK && !(readbuffer[5] == 0xff && readbuffer[6] == 0xff)) break;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <read_sensor_data+0x88>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3305      	adds	r3, #5
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2bff      	cmp	r3, #255	@ 0xff
 80016c8:	d109      	bne.n	80016de <read_sensor_data+0x92>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3306      	adds	r3, #6
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2bff      	cmp	r3, #255	@ 0xff
 80016d2:	d104      	bne.n	80016de <read_sensor_data+0x92>
		  HAL_Delay(550);
 80016d4:	f240 2026 	movw	r0, #550	@ 0x226
 80016d8:	f002 faa6 	bl	8003c28 <HAL_Delay>
		  status = HAL_I2C_Master_Transmit(&hi2c2, 0x14, &cmd, 1, 100);
 80016dc:	e7c9      	b.n	8001672 <read_sensor_data+0x26>
	  } while(1);
	  return SUCCESS;
 80016de:	2301      	movs	r3, #1
  };
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000120 	.word	0x20000120
 80016ec:	20000174 	.word	0x20000174

080016f0 <sensor_data_to_temperatures>:

/// converts the raw sensor readings into sensor data in 10*degrees celsius
int sensor_data_to_temperatures(uint8_t* sensor_data, int* temperatures){
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	/// each reading consists of a high reading and a low reading,
	/// with high reading * 256 (max value 4 Bit) + low bits = temperature * 10
	   int sum = 0, highest=-10, lowest = 80;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	f06f 0309 	mvn.w	r3, #9
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	2350      	movs	r3, #80	@ 0x50
 8001706:	617b      	str	r3, [r7, #20]
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	e029      	b.n	8001762 <sensor_data_to_temperatures+0x72>
		  int temp = sensor_data[temp_index+1] * 256 + sensor_data[temp_index];
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	3301      	adds	r3, #1
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	440a      	add	r2, r1
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
	 	  temperatures[temp_index/2+3] = temp;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	0fda      	lsrs	r2, r3, #31
 800172a:	4413      	add	r3, r2
 800172c:	105b      	asrs	r3, r3, #1
 800172e:	3303      	adds	r3, #3
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	601a      	str	r2, [r3, #0]
	 	  sum += temp;
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	61fb      	str	r3, [r7, #28]
	 	  if(temp > highest)
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	429a      	cmp	r2, r3
 8001748:	dd02      	ble.n	8001750 <sensor_data_to_temperatures+0x60>
	 		  highest = temp;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	e005      	b.n	800175c <sensor_data_to_temperatures+0x6c>
	 	  else if (temp < lowest)
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	da01      	bge.n	800175c <sensor_data_to_temperatures+0x6c>
	 		  lowest = temp;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	617b      	str	r3, [r7, #20]
	   for (int temp_index = 0; temp_index/2 < TEMP_VALUE_COUNT + 1; temp_index+=2){
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	3302      	adds	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f640 0201 	movw	r2, #2049	@ 0x801
 8001768:	4293      	cmp	r3, r2
 800176a:	ddd0      	ble.n	800170e <sensor_data_to_temperatures+0x1e>
	   }
	   temperatures[2] = (int) (sum / TEMP_VALUE_COUNT);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f103 0208 	add.w	r2, r3, #8
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da01      	bge.n	800177c <sensor_data_to_temperatures+0x8c>
 8001778:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800177c:	129b      	asrs	r3, r3, #10
 800177e:	6013      	str	r3, [r2, #0]
	   temperatures[0] = highest;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	601a      	str	r2, [r3, #0]
	   temperatures[1] = lowest;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3304      	adds	r3, #4
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	601a      	str	r2, [r3, #0]
	   return SUCCESS;
 800178e:	2301      	movs	r3, #1
};
 8001790:	4618      	mov	r0, r3
 8001792:	3724      	adds	r7, #36	@ 0x24
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <pick_gradient_color>:
#include "render.h"


// perform linear uint16_terpolation between two colors
// source stackoverflow (with own adjustments, so no GPL License  needed)
uint16_t pick_gradient_color(uint16_t color1, uint16_t color2, float temperature_gradient) {
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	460a      	mov	r2, r1
 80017a6:	ed87 0a00 	vstr	s0, [r7]
 80017aa:	80fb      	strh	r3, [r7, #6]
 80017ac:	4613      	mov	r3, r2
 80017ae:	80bb      	strh	r3, [r7, #4]

	/// convert rgb uint16_to rgb565:
	/// as in rgb the always 2 digit are one color #rrggbb,
	// but here the second and third bit overlapp from r-g and g-b
	uint16_t r1 = (color1 >> 11) & 0x1F;
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	0adb      	lsrs	r3, r3, #11
 80017b4:	83fb      	strh	r3, [r7, #30]
    uint16_t g1 = (color1 >> 5) & 0x3F;
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	095b      	lsrs	r3, r3, #5
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c0:	83bb      	strh	r3, [r7, #28]
    uint16_t b1 = color1 & 0x1F;
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	837b      	strh	r3, [r7, #26]

    uint16_t r2 = (color2 >> 11) & 0x1F;
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	0adb      	lsrs	r3, r3, #11
 80017ce:	833b      	strh	r3, [r7, #24]
    uint16_t g2 = (color2 >> 5) & 0x3F;
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017da:	82fb      	strh	r3, [r7, #22]
    uint16_t b2 = color2 & 0x1F;
 80017dc:	88bb      	ldrh	r3, [r7, #4]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	82bb      	strh	r3, [r7, #20]

    /// apply ratios between the two colors by using the temperature gradient
    uint16_t r = (uint16_t)(r1 + temperature_gradient * (r2 - r1));
 80017e4:	8bfb      	ldrh	r3, [r7, #30]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ee:	8b3a      	ldrh	r2, [r7, #24]
 80017f0:	8bfb      	ldrh	r3, [r7, #30]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fc:	edd7 7a00 	vldr	s15, [r7]
 8001800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180c:	ee17 3a90 	vmov	r3, s15
 8001810:	827b      	strh	r3, [r7, #18]
    uint16_t g = (uint16_t)(g1 + temperature_gradient * (g2 - g1));
 8001812:	8bbb      	ldrh	r3, [r7, #28]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181c:	8afa      	ldrh	r2, [r7, #22]
 800181e:	8bbb      	ldrh	r3, [r7, #28]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	ee07 3a90 	vmov	s15, r3
 8001826:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800182a:	edd7 7a00 	vldr	s15, [r7]
 800182e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800183a:	ee17 3a90 	vmov	r3, s15
 800183e:	823b      	strh	r3, [r7, #16]
    uint16_t b = (uint16_t)(b1 + temperature_gradient * (b2 - b1));
 8001840:	8b7b      	ldrh	r3, [r7, #26]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184a:	8aba      	ldrh	r2, [r7, #20]
 800184c:	8b7b      	ldrh	r3, [r7, #26]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001858:	edd7 7a00 	vldr	s15, [r7]
 800185c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001868:	ee17 3a90 	vmov	r3, s15
 800186c:	81fb      	strh	r3, [r7, #14]

    return ((r & 0x1F) << 11) | ((g & 0x3F) << 5) | (b & 0x1F);
 800186e:	8a7b      	ldrh	r3, [r7, #18]
 8001870:	02db      	lsls	r3, r3, #11
 8001872:	b21a      	sxth	r2, r3
 8001874:	8a3b      	ldrh	r3, [r7, #16]
 8001876:	015b      	lsls	r3, r3, #5
 8001878:	b21b      	sxth	r3, r3
 800187a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b21a      	sxth	r2, r3
 8001884:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21b      	sxth	r3, r3
 8001892:	b29b      	uxth	r3, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	3724      	adds	r7, #36	@ 0x24
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <convert_temp_to_color_spec>:

/// convert the temperature values of the sensor [-10,70] to a color in the spectrum
///[-10,22]-> [blue, white],
///[ 22,36]-> [white, orange], (high change in color as its the mainly used area)
///[ 36,70]-> [orange, red]
uint16_t convert_temp_to_color_spec(float temp, float HIGH, float LOW, float ROOM, float HIGHLIGHT) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80018aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80018ae:	ed87 1a03 	vstr	s2, [r7, #12]
 80018b2:	edc7 1a02 	vstr	s3, [r7, #8]
 80018b6:	ed87 2a01 	vstr	s4, [r7, #4]
	// the sensor can operate with temperatures in [-10, 70]

    if (temp <= LOW)
 80018ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80018be:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d801      	bhi.n	80018d0 <convert_temp_to_color_spec+0x30>
        return DARK_BLUE;
 80018cc:	231f      	movs	r3, #31
 80018ce:	e069      	b.n	80019a4 <convert_temp_to_color_spec+0x104>

    if (temp >= HIGH)
 80018d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80018d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	db02      	blt.n	80018e8 <convert_temp_to_color_spec+0x48>
    	return DARK_RED;
 80018e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018e6:	e05d      	b.n	80019a4 <convert_temp_to_color_spec+0x104>

    if (temp < ROOM) {
 80018e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80018f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	d518      	bpl.n	800192c <convert_temp_to_color_spec+0x8c>
    	// map temperature from ]-10, 22[ to [0, 1] for the blue to white gradient
    	float temp_gradient = (temp - LOW) / (ROOM-LOW);
 80018fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80018fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001902:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001906:	ed97 7a02 	vldr	s14, [r7, #8]
 800190a:	edd7 7a03 	vldr	s15, [r7, #12]
 800190e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001916:	edc7 7a07 	vstr	s15, [r7, #28]
    	return pick_gradient_color(DARK_BLUE, WHITE, temp_gradient);
 800191a:	ed97 0a07 	vldr	s0, [r7, #28]
 800191e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001922:	201f      	movs	r0, #31
 8001924:	f7ff ff3a 	bl	800179c <pick_gradient_color>
 8001928:	4603      	mov	r3, r0
 800192a:	e03b      	b.n	80019a4 <convert_temp_to_color_spec+0x104>
    }

    if (temp < HIGHLIGHT) {
 800192c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001930:	edd7 7a01 	vldr	s15, [r7, #4]
 8001934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d519      	bpl.n	8001972 <convert_temp_to_color_spec+0xd2>
        	// map temperature from [-22, 36[ to [0, 1] for the blue to white gradient
        	float temp_gradient = (temp - ROOM) / (HIGHLIGHT-ROOM);
 800193e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001942:	edd7 7a02 	vldr	s15, [r7, #8]
 8001946:	ee77 6a67 	vsub.f32	s13, s14, s15
 800194a:	ed97 7a01 	vldr	s14, [r7, #4]
 800194e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001952:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195a:	edc7 7a08 	vstr	s15, [r7, #32]
        	return pick_gradient_color(WHITE, ORANGE, temp_gradient);
 800195e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001962:	f64f 4147 	movw	r1, #64583	@ 0xfc47
 8001966:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800196a:	f7ff ff17 	bl	800179c <pick_gradient_color>
 800196e:	4603      	mov	r3, r0
 8001970:	e018      	b.n	80019a4 <convert_temp_to_color_spec+0x104>
        }


    // map temperature from [36, 70] to [0, 1] for the orange to red gradient
    float temp_gradient = (temp - HIGHLIGHT) / (HIGH-HIGHLIGHT);
 8001972:	ed97 7a05 	vldr	s14, [r7, #20]
 8001976:	edd7 7a01 	vldr	s15, [r7, #4]
 800197a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800197e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001982:	edd7 7a01 	vldr	s15, [r7, #4]
 8001986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800198a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return pick_gradient_color(ORANGE, DARK_RED, temp_gradient);
 8001992:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001996:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800199a:	f64f 4047 	movw	r0, #64583	@ 0xfc47
 800199e:	f7ff fefd 	bl	800179c <pick_gradient_color>
 80019a2:	4603      	mov	r3, r0

}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3728      	adds	r7, #40	@ 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <convert_temp_to_color>:

uint16_t convert_temp_to_color(float temp){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	ed87 0a01 	vstr	s0, [r7, #4]
	return convert_temp_to_color_spec(temp, 70.f, -10.f, ROOM_TEMP, BODY_TEMP);
 80019b6:	ed9f 2a08 	vldr	s4, [pc, #32]	@ 80019d8 <convert_temp_to_color+0x2c>
 80019ba:	eef3 1a0a 	vmov.f32	s3, #58	@ 0x41d00000  26.0
 80019be:	eeba 1a04 	vmov.f32	s2, #164	@ 0xc1200000 -10.0
 80019c2:	eddf 0a06 	vldr	s1, [pc, #24]	@ 80019dc <convert_temp_to_color+0x30>
 80019c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80019ca:	f7ff ff69 	bl	80018a0 <convert_temp_to_color_spec>
 80019ce:	4603      	mov	r3, r0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	42100000 	.word	0x42100000
 80019dc:	428c0000 	.word	0x428c0000

080019e0 <display_data_on_lcd>:

/// display the temperature values as an image on the LCD screen
/// make sure to initiate BSP_lcd before calling
void display_data_on_lcd(int* temperatures){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	  /// get params of the screen
	  int width = BSP_LCD_GetXSize()+10; // +10 for rounding errors
 80019e8:	f001 fc58 	bl	800329c <BSP_LCD_GetXSize>
 80019ec:	4603      	mov	r3, r0
 80019ee:	330a      	adds	r3, #10
 80019f0:	617b      	str	r3, [r7, #20]
	  int height = BSP_LCD_GetYSize() +10;
 80019f2:	f001 fc5f 	bl	80032b4 <BSP_LCD_GetYSize>
 80019f6:	4603      	mov	r3, r0
 80019f8:	330a      	adds	r3, #10
 80019fa:	613b      	str	r3, [r7, #16]

	  /// calculate Height / with of cells

	  int cell_width = width / H_CELL_COUNT;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da00      	bge.n	8001a04 <display_data_on_lcd+0x24>
 8001a02:	331f      	adds	r3, #31
 8001a04:	115b      	asrs	r3, r3, #5
 8001a06:	60fb      	str	r3, [r7, #12]
	  int cell_hight = height/ V_CELL_COUNT;
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da00      	bge.n	8001a10 <display_data_on_lcd+0x30>
 8001a0e:	331f      	adds	r3, #31
 8001a10:	115b      	asrs	r3, r3, #5
 8001a12:	60bb      	str	r3, [r7, #8]

	  /// iterate over rows/columns
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	e03c      	b.n	8001a94 <display_data_on_lcd+0xb4>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e033      	b.n	8001a88 <display_data_on_lcd+0xa8>
			  BSP_LCD_SetTextColor(
					  convert_temp_to_color(
							  /// +4 because of the PTAT temperature value at temperatures[3], and highest, lowest, avg temp at 0, 1, 2
							  (float)temperatures[row * 32 + col+4] / 10.f
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	015a      	lsls	r2, r3, #5
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			  BSP_LCD_SetTextColor(
 8001a3a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001a3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a42:	eeb0 0a47 	vmov.f32	s0, s14
 8001a46:	f7ff ffb1 	bl	80019ac <convert_temp_to_color>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fc3d 	bl	80032cc <BSP_LCD_SetTextColor>
										   )
							  );
			  BSP_LCD_FillRect(col * cell_width+10, row * cell_hight+10, cell_width, cell_hight);
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	fb12 f303 	smulbb	r3, r2, r3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	330a      	adds	r3, #10
 8001a62:	b298      	uxth	r0, r3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	fb12 f303 	smulbb	r3, r2, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	330a      	adds	r3, #10
 8001a74:	b299      	uxth	r1, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f001 feaf 	bl	80037e0 <BSP_LCD_FillRect>
		  for (int col = 0; col < H_CELL_COUNT; col++){
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b1f      	cmp	r3, #31
 8001a8c:	ddc8      	ble.n	8001a20 <display_data_on_lcd+0x40>
	  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	ddbf      	ble.n	8001a1a <display_data_on_lcd+0x3a>
			  // +20 = centering as the screen doesn't start by 0 and its better with a border on every side
		  }
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <display_data_on_lcd_rel_mode>:

void display_data_on_lcd_rel_mode(int* temperatures){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	/// get params of the screen
		  int width = BSP_LCD_GetXSize()+10; // +10 for rounding errors
 8001aac:	f001 fbf6 	bl	800329c <BSP_LCD_GetXSize>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	330a      	adds	r3, #10
 8001ab4:	617b      	str	r3, [r7, #20]
		  int height = BSP_LCD_GetYSize() +10;
 8001ab6:	f001 fbfd 	bl	80032b4 <BSP_LCD_GetYSize>
 8001aba:	4603      	mov	r3, r0
 8001abc:	330a      	adds	r3, #10
 8001abe:	613b      	str	r3, [r7, #16]

		  /// calculate Height / with of cells

		  int cell_width = width / H_CELL_COUNT;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da00      	bge.n	8001ac8 <display_data_on_lcd_rel_mode+0x24>
 8001ac6:	331f      	adds	r3, #31
 8001ac8:	115b      	asrs	r3, r3, #5
 8001aca:	60fb      	str	r3, [r7, #12]
		  int cell_hight = height/ V_CELL_COUNT;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da00      	bge.n	8001ad4 <display_data_on_lcd_rel_mode+0x30>
 8001ad2:	331f      	adds	r3, #31
 8001ad4:	115b      	asrs	r3, r3, #5
 8001ad6:	60bb      	str	r3, [r7, #8]

		  /// iterate over rows/columns
		  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	e07b      	b.n	8001bd6 <display_data_on_lcd_rel_mode+0x132>
			  for (int col = 0; col < H_CELL_COUNT; col++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	e072      	b.n	8001bca <display_data_on_lcd_rel_mode+0x126>
				  BSP_LCD_SetTextColor(
						  convert_temp_to_color_spec(
								  /// +4 because of the PTAT temperature value at temperatures[3], and highest, lowest, avg temp at 0, 1, 2
								  (float)temperatures[row * 32 + col+4] / 10.f,
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	4413      	add	r3, r2
 8001aec:	3304      	adds	r3, #4
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				  BSP_LCD_SetTextColor(
 8001afe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b02:	eec7 6a87 	vdiv.f32	s13, s15, s14
								  (float) temperatures[0] / 10.f+5,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b12:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8001b16:	eec7 7a06 	vdiv.f32	s15, s14, s12
				  BSP_LCD_SetTextColor(
 8001b1a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b1e:	ee37 6a87 	vadd.f32	s12, s15, s14
								  (float) temperatures[1] / 10.f-5,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b30:	eef2 5a04 	vmov.f32	s11, #36	@ 0x41200000  10.0
 8001b34:	eec7 7a25 	vdiv.f32	s15, s14, s11
				  BSP_LCD_SetTextColor(
 8001b38:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b3c:	ee77 5ac7 	vsub.f32	s11, s15, s14
								  (float) temperatures[2] / 10.f,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3308      	adds	r3, #8
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				  BSP_LCD_SetTextColor(
 8001b4e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b52:	ee87 5a87 	vdiv.f32	s10, s15, s14
								  (float) temperatures[2] / 10.f+2.5
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3308      	adds	r3, #8
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b64:	eef2 4a04 	vmov.f32	s9, #36	@ 0x41200000  10.0
 8001b68:	eec7 7a24 	vdiv.f32	s15, s14, s9
				  BSP_LCD_SetTextColor(
 8001b6c:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001b70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b74:	eeb0 2a67 	vmov.f32	s4, s15
 8001b78:	eef0 1a45 	vmov.f32	s3, s10
 8001b7c:	eeb0 1a65 	vmov.f32	s2, s11
 8001b80:	eef0 0a46 	vmov.f32	s1, s12
 8001b84:	eeb0 0a66 	vmov.f32	s0, s13
 8001b88:	f7ff fe8a 	bl	80018a0 <convert_temp_to_color_spec>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fb9c 	bl	80032cc <BSP_LCD_SetTextColor>
											   )
								  );
				  BSP_LCD_FillRect(col * cell_width+10, row * cell_hight+10, cell_width, cell_hight);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	fb12 f303 	smulbb	r3, r2, r3
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	330a      	adds	r3, #10
 8001ba4:	b298      	uxth	r0, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	fb12 f303 	smulbb	r3, r2, r3
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	330a      	adds	r3, #10
 8001bb6:	b299      	uxth	r1, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f001 fe0e 	bl	80037e0 <BSP_LCD_FillRect>
			  for (int col = 0; col < H_CELL_COUNT; col++){
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b1f      	cmp	r3, #31
 8001bce:	dd89      	ble.n	8001ae4 <display_data_on_lcd_rel_mode+0x40>
		  for (int row = 0; row < V_CELL_COUNT; row++ )
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b1f      	cmp	r3, #31
 8001bda:	dd80      	ble.n	8001ade <display_data_on_lcd_rel_mode+0x3a>
				  // +20 = centering as the screen doesn't start by 0 and its better with a border on every side
			  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bec:	f7ff fd1c 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bf2:	490d      	ldr	r1, [pc, #52]	@ (8001c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c08:	4c0a      	ldr	r4, [pc, #40]	@ (8001c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c16:	f009 f90d 	bl	800ae34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7fe fd63 	bl	80006e4 <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c20:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001c2c:	0800dd80 	.word	0x0800dd80
  ldr r2, =_sbss
 8001c30:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001c34:	20000aa8 	.word	0x20000aa8

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>

08001c3a <ls016b8uy_Init>:
  * @brief  Initialize the LS016B8UY LCD Component.
  * @param  None
  * @retval None
  */
void ls016b8uy_Init(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
  uint8_t   parameter[4];

  /* Initialize LS016B8UY low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001c40:	f001 fa6c 	bl	800311c <LCD_IO_Init>
  
  parameter[0] = 0x00;     /* VSYNC output */
 8001c44:	2300      	movs	r3, #0
 8001c46:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_VSYNC_OUTPUT, parameter, 1);
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	2035      	movs	r0, #53	@ 0x35
 8001c50:	f000 f9a6 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x06;     /* 18 bits color mode */
 8001c54:	2306      	movs	r3, #6
 8001c56:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_COLOR_MODE, parameter, 1);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	203a      	movs	r0, #58	@ 0x3a
 8001c60:	f000 f99e 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x01;     /* Panel setting command <No.1 UN-Lock> */
 8001c64:	2301      	movs	r3, #1
 8001c66:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0xFE;
 8001c68:	23fe      	movs	r3, #254	@ 0xfe
 8001c6a:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_1, parameter, 2);
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2202      	movs	r2, #2
 8001c70:	4619      	mov	r1, r3
 8001c72:	20b0      	movs	r0, #176	@ 0xb0
 8001c74:	f000 f994 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0xDE;     /* Panel setting command <No.2 UN-Lock> */
 8001c78:	23de      	movs	r3, #222	@ 0xde
 8001c7a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x21;
 8001c7c:	2321      	movs	r3, #33	@ 0x21
 8001c7e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_2, parameter, 2);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2202      	movs	r2, #2
 8001c84:	4619      	mov	r1, r3
 8001c86:	20b1      	movs	r0, #177	@ 0xb1
 8001c88:	f000 f98a 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* V-Porch setting */
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 8001c90:	2333      	movs	r3, #51	@ 0x33
 8001c92:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_V_PORCH, parameter, 2);
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2202      	movs	r2, #2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	20b7      	movs	r0, #183	@ 0xb7
 8001c9c:	f000 f980 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x05;     /* Idle mode V-Porch setting */
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x33;
 8001ca4:	2333      	movs	r3, #51	@ 0x33
 8001ca6:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_IDLE_V_PORCH, parameter, 2);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2202      	movs	r2, #2
 8001cac:	4619      	mov	r1, r3
 8001cae:	20b8      	movs	r0, #184	@ 0xb8
 8001cb0:	f000 f976 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x04;     /* panel timing setting */
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x03;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_1, parameter, 2);
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	20c8      	movs	r0, #200	@ 0xc8
 8001cc4:	f000 f96c 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x5E;     /* panel timing setting */
 8001cc8:	235e      	movs	r3, #94	@ 0x5e
 8001cca:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x08;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_2, parameter, 2);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	20c9      	movs	r0, #201	@ 0xc9
 8001cd8:	f000 f962 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x0A;     /* panel timing setting */
 8001cdc:	230a      	movs	r3, #10
 8001cde:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x0C;
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x02;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	71bb      	strb	r3, [r7, #6]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_3, parameter, 3);
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2203      	movs	r2, #3
 8001cec:	4619      	mov	r1, r3
 8001cee:	20ca      	movs	r0, #202	@ 0xca
 8001cf0:	f000 f956 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* panel timing setting */
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x04;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_TIMING_4, parameter, 2);
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4619      	mov	r1, r3
 8001d02:	20cc      	movs	r0, #204	@ 0xcc
 8001d04:	f000 f94c 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x0C;     /* panel power setting */
 8001d08:	230c      	movs	r3, #12
 8001d0a:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_PANEL_POWER, parameter, 1);
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	20d0      	movs	r0, #208	@ 0xd0
 8001d14:	f000 f944 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x02;     /* Oscillator Setting = 2MHz */
 8001d18:	2302      	movs	r3, #2
 8001d1a:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_OSCILLATOR, parameter, 1);
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4619      	mov	r1, r3
 8001d22:	20b3      	movs	r0, #179	@ 0xb3
 8001d24:	f000 f93c 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x53;     /* GVDD = 4.76V setting */
 8001d28:	2353      	movs	r3, #83	@ 0x53
 8001d2a:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_GVDD, parameter, 1);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4619      	mov	r1, r3
 8001d32:	20c0      	movs	r0, #192	@ 0xc0
 8001d34:	f000 f934 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Reload MTP After SLPOUT */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x45;     /* VCOMH=3.76V */
 8001d3c:	2345      	movs	r3, #69	@ 0x45
 8001d3e:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_RELOAD_MTP_VCOMH, parameter, 2);
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2202      	movs	r2, #2
 8001d44:	4619      	mov	r1, r3
 8001d46:	20c5      	movs	r0, #197	@ 0xc5
 8001d48:	f000 f92a 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x03;     /* OP-Amp Ability. (Normal) */
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x12;     /* Step-up Cycle for AVDD Booster Freq./4 */
 8001d50:	2312      	movs	r3, #18
 8001d52:	717b      	strb	r3, [r7, #5]
  ls016b8uy_WriteReg(LCD_CMD_OPAMP, parameter, 2);
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2202      	movs	r2, #2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	20c2      	movs	r0, #194	@ 0xc2
 8001d5c:	f000 f920 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* Tearing Effect Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
 8001d60:	2300      	movs	r3, #0
 8001d62:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_TEARING_EFFECT, parameter, 1);
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2201      	movs	r2, #1
 8001d68:	4619      	mov	r1, r3
 8001d6a:	20dd      	movs	r0, #221	@ 0xdd
 8001d6c:	f000 f918 	bl	8001fa0 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_PANEL_SETTING_LOCK, parameter, 0);   /* Panel setting command <Lock> */
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	4619      	mov	r1, r3
 8001d76:	20b4      	movs	r0, #180	@ 0xb4
 8001d78:	f000 f912 	bl	8001fa0 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_OUT, parameter, 0);            /* Sleep Out Command */
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4619      	mov	r1, r3
 8001d82:	2011      	movs	r0, #17
 8001d84:	f000 f90c 	bl	8001fa0 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 8001d88:	2096      	movs	r0, #150	@ 0x96
 8001d8a:	f001 f9ee 	bl	800316a <LCD_IO_Delay>

  parameter[0] = 0x00;     /* CASET */
 8001d8e:	2300      	movs	r3, #0
 8001d90:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x1E;
 8001d92:	231e      	movs	r3, #30
 8001d94:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 8001d96:	2300      	movs	r3, #0
 8001d98:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xD1;
 8001d9a:	23d1      	movs	r3, #209	@ 0xd1
 8001d9c:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2204      	movs	r2, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	202a      	movs	r0, #42	@ 0x2a
 8001da6:	f000 f8fb 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 8001daa:	2300      	movs	r3, #0
 8001dac:	713b      	strb	r3, [r7, #4]
  parameter[1] = 0x00;
 8001dae:	2300      	movs	r3, #0
 8001db0:	717b      	strb	r3, [r7, #5]
  parameter[2] = 0x00;
 8001db2:	2300      	movs	r3, #0
 8001db4:	71bb      	strb	r3, [r7, #6]
  parameter[3] = 0xB3;
 8001db6:	23b3      	movs	r3, #179	@ 0xb3
 8001db8:	71fb      	strb	r3, [r7, #7]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	202b      	movs	r0, #43	@ 0x2b
 8001dc2:	f000 f8ed 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x83;     /* Normal display for Driver Down side */
 8001dc6:	2383      	movs	r3, #131	@ 0x83
 8001dc8:	713b      	strb	r3, [r7, #4]
  ls016b8uy_WriteReg(LCD_CMD_NORMAL_DISPLAY, parameter, 1);
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4619      	mov	r1, r3
 8001dd0:	2036      	movs	r0, #54	@ 0x36
 8001dd2:	f000 f8e5 	bl	8001fa0 <ls016b8uy_WriteReg>

  ls016b8uy_DisplayOn();   /* Display ON command */
 8001dd6:	f000 f804 	bl	8001de2 <ls016b8uy_DisplayOn>

}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <ls016b8uy_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOn(void)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_ON, (uint8_t*)NULL, 0);    /* Display ON command */
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	2029      	movs	r0, #41	@ 0x29
 8001dec:	f000 f8d8 	bl	8001fa0 <ls016b8uy_WriteReg>
  ls016b8uy_WriteReg(LCD_CMD_IDLE_MODE_OFF, (uint8_t*)NULL, 0); /* Idle mode OFF command */
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	2038      	movs	r0, #56	@ 0x38
 8001df6:	f000 f8d3 	bl	8001fa0 <ls016b8uy_WriteReg>
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <ls016b8uy_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ls016b8uy_DisplayOff(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
  ls016b8uy_WriteReg(LCD_CMD_DISPLAY_OFF, (uint8_t*)NULL, 0);   /* Display OFF command */
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2028      	movs	r0, #40	@ 0x28
 8001e08:	f000 f8ca 	bl	8001fa0 <ls016b8uy_WriteReg>
  LCD_IO_Delay(20);   /* Wait for 20ms */
 8001e0c:	2014      	movs	r0, #20
 8001e0e:	f001 f9ac 	bl	800316a <LCD_IO_Delay>
  ls016b8uy_WriteReg(LCD_CMD_SLEEP_IN, (uint8_t*)NULL, 0);      /* Sleep In Command */
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2010      	movs	r0, #16
 8001e18:	f000 f8c2 	bl	8001fa0 <ls016b8uy_WriteReg>
  LCD_IO_Delay(150);   /* Wait for 150ms */
 8001e1c:	2096      	movs	r0, #150	@ 0x96
 8001e1e:	f001 f9a4 	bl	800316a <LCD_IO_Delay>
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <ls016b8uy_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ls016b8uy_GetLcdPixelWidth(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_WIDTH;
 8001e2a:	23b4      	movs	r3, #180	@ 0xb4
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <ls016b8uy_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ls016b8uy_GetLcdPixelHeight(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
 return (uint16_t)LS016B8UY_LCD_PIXEL_HEIGHT;
 8001e3a:	23b4      	movs	r3, #180	@ 0xb4
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <ls016b8uy_ReadID>:
  * @brief  Get the LS016B8UY ID.
  * @param  None
  * @retval The LS016B8UY ID 
  */
uint16_t ls016b8uy_ReadID(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8001e4a:	f001 f967 	bl	800311c <LCD_IO_Init>
  /* TODO : LCD read ID command not known for now, so assumption that the connected LCD is LS016B8UY */
  return (LS016B8UY_ID);
 8001e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <ls016b8uy_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ls016b8uy_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460a      	mov	r2, r1
 8001e60:	80fb      	strh	r3, [r7, #6]
 8001e62:	4613      	mov	r3, r2
 8001e64:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];

  parameter[0] = 0x00;     /* CASET */
 8001e66:	2300      	movs	r3, #0
 8001e68:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x1E + Xpos;
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	331e      	adds	r3, #30
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xD1 + Xpos;
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3b2f      	subs	r3, #47	@ 0x2f
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_CASET, parameter, 4);
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2204      	movs	r2, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	202a      	movs	r0, #42	@ 0x2a
 8001e8c:	f000 f888 	bl	8001fa0 <ls016b8uy_WriteReg>
  parameter[0] = 0x00;     /* RASET */
 8001e90:	2300      	movs	r3, #0
 8001e92:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xB3 + Ypos;
 8001e9e:	88bb      	ldrh	r3, [r7, #4]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3b4d      	subs	r3, #77	@ 0x4d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	73fb      	strb	r3, [r7, #15]
  ls016b8uy_WriteReg(LCD_CMD_RASET, parameter, 4);
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2204      	movs	r2, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	202b      	movs	r0, #43	@ 0x2b
 8001eb2:	f000 f875 	bl	8001fa0 <ls016b8uy_WriteReg>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <ls016b8uy_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ls016b8uy_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	80fb      	strh	r3, [r7, #6]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	80bb      	strh	r3, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	807b      	strh	r3, [r7, #2]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2;

  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	0adb      	lsrs	r3, r3, #11
 8001ed4:	82fb      	strh	r3, [r7, #22]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 8001ed6:	887b      	ldrh	r3, [r7, #2]
 8001ed8:	115b      	asrs	r3, r3, #5
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ee0:	82bb      	strh	r3, [r7, #20]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	827b      	strh	r3, [r7, #18]

  /* Prepare data to write with new pixel components and read old pixel component */
  rgb888_part1 = (r << 11) + (g << 2);
 8001eea:	8afb      	ldrh	r3, [r7, #22]
 8001eec:	02db      	lsls	r3, r3, #11
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	8abb      	ldrh	r3, [r7, #20]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	823b      	strh	r3, [r7, #16]
  rgb888_part2 = (b << 11);
 8001efa:	8a7b      	ldrh	r3, [r7, #18]
 8001efc:	02db      	lsls	r3, r3, #11
 8001efe:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8001f00:	88ba      	ldrh	r2, [r7, #4]
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ffa5 	bl	8001e56 <ls016b8uy_SetCursor>

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	202c      	movs	r0, #44	@ 0x2c
 8001f12:	f000 f845 	bl	8001fa0 <ls016b8uy_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(rgb888_part1);
 8001f16:	8a3b      	ldrh	r3, [r7, #16]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 f905 	bl	8003128 <LCD_IO_WriteData>
  LCD_IO_WriteData(rgb888_part2);
 8001f1e:	89fb      	ldrh	r3, [r7, #14]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 f901 	bl	8003128 <LCD_IO_WriteData>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <ls016b8uy_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ls016b8uy_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	460a      	mov	r2, r1
 8001f38:	80fb      	strh	r3, [r7, #6]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80bb      	strh	r3, [r7, #4]
  LS016B8UY_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8001f3e:	88ba      	ldrh	r2, [r7, #4]
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff86 	bl	8001e56 <ls016b8uy_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ls016b8uy_ReadPixel_rgb888(Xpos, Ypos);
 8001f4a:	88ba      	ldrh	r2, [r7, #4]
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f9e1 	bl	8002318 <ls016b8uy_ReadPixel_rgb888>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	733a      	strb	r2, [r7, #12]
 8001f5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001f60:	737a      	strb	r2, [r7, #13]
 8001f62:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001f66:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8001f68:	7b3b      	ldrb	r3, [r7, #12]
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	02db      	lsls	r3, r3, #11
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	7dbb      	ldrb	r3, [r7, #22]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	015b      	lsls	r3, r3, #5
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	7d7b      	ldrb	r3, [r7, #21]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8001f96:	8a7b      	ldrh	r3, [r7, #18]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ls016b8uy_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ls016b8uy_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 f8c5 	bl	8003142 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e009      	b.n	8001fd2 <ls016b8uy_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 f8ae 	bl	8003128 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	79bb      	ldrb	r3, [r7, #6]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d3f1      	bcc.n	8001fbe <ls016b8uy_WriteReg+0x1e>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <ls016b8uy_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ls016b8uy_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001fe4:	b490      	push	{r4, r7}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4604      	mov	r4, r0
 8001fec:	4608      	mov	r0, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	80fb      	strh	r3, [r7, #6]
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80bb      	strh	r3, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	807b      	strh	r3, [r7, #2]
 8001ffe:	4613      	mov	r3, r2
 8002000:	803b      	strh	r3, [r7, #0]
  if (Xpos < LS016B8UY_LCD_PIXEL_WIDTH)
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	2bb3      	cmp	r3, #179	@ 0xb3
 8002006:	d803      	bhi.n	8002010 <ls016b8uy_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002008:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <ls016b8uy_SetDisplayWindow+0x94>)
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	8013      	strh	r3, [r2, #0]
 800200e:	e002      	b.n	8002016 <ls016b8uy_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <ls016b8uy_SetDisplayWindow+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < LS016B8UY_LCD_PIXEL_HEIGHT)
 8002016:	88bb      	ldrh	r3, [r7, #4]
 8002018:	2bb3      	cmp	r3, #179	@ 0xb3
 800201a:	d803      	bhi.n	8002024 <ls016b8uy_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 800201c:	4a17      	ldr	r2, [pc, #92]	@ (800207c <ls016b8uy_SetDisplayWindow+0x98>)
 800201e:	88bb      	ldrh	r3, [r7, #4]
 8002020:	8013      	strh	r3, [r2, #0]
 8002022:	e002      	b.n	800202a <ls016b8uy_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <ls016b8uy_SetDisplayWindow+0x98>)
 8002026:	2200      	movs	r2, #0
 8002028:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= LS016B8UY_LCD_PIXEL_WIDTH)
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	4413      	add	r3, r2
 8002030:	2bb4      	cmp	r3, #180	@ 0xb4
 8002032:	dc08      	bgt.n	8002046 <ls016b8uy_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002034:	887a      	ldrh	r2, [r7, #2]
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	4413      	add	r3, r2
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <ls016b8uy_SetDisplayWindow+0x9c>)
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	e002      	b.n	800204c <ls016b8uy_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = LS016B8UY_LCD_PIXEL_WIDTH - 1;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <ls016b8uy_SetDisplayWindow+0x9c>)
 8002048:	22b3      	movs	r2, #179	@ 0xb3
 800204a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= LS016B8UY_LCD_PIXEL_HEIGHT)
 800204c:	883a      	ldrh	r2, [r7, #0]
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	2bb4      	cmp	r3, #180	@ 0xb4
 8002054:	dc08      	bgt.n	8002068 <ls016b8uy_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002056:	883a      	ldrh	r2, [r7, #0]
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <ls016b8uy_SetDisplayWindow+0xa0>)
 8002064:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
  }
}
 8002066:	e002      	b.n	800206e <ls016b8uy_SetDisplayWindow+0x8a>
    WindowsYend = LS016B8UY_LCD_PIXEL_HEIGHT-1;
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <ls016b8uy_SetDisplayWindow+0xa0>)
 800206a:	22b3      	movs	r2, #179	@ 0xb3
 800206c:	801a      	strh	r2, [r3, #0]
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bc90      	pop	{r4, r7}
 8002076:	4770      	bx	lr
 8002078:	20000188 	.word	0x20000188
 800207c:	2000018a 	.word	0x2000018a
 8002080:	2000003c 	.word	0x2000003c
 8002084:	2000003e 	.word	0x2000003e

08002088 <ls016b8uy_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4623      	mov	r3, r4
 8002098:	80fb      	strh	r3, [r7, #6]
 800209a:	4603      	mov	r3, r0
 800209c:	80bb      	strh	r3, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	807b      	strh	r3, [r7, #2]
 80020a2:	4613      	mov	r3, r2
 80020a4:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	82fb      	strh	r3, [r7, #22]
  uint16_t r, g, b;
  uint16_t rgb888_part1, rgb888_part2, rgb888_part3;
  
  r = (RGBCode & 0xF800) >> 11;        /* Extract red component from RGB565 pixel data */
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	0adb      	lsrs	r3, r3, #11
 80020ae:	82bb      	strh	r3, [r7, #20]
  g = (RGBCode & 0x07E0) >> 5;         /* Extract green component from RGB565 pixel data  */
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	115b      	asrs	r3, r3, #5
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ba:	827b      	strh	r3, [r7, #18]
  b = (RGBCode & 0x001F) >> 0;         /* Extract blue component from RGB565 pixel data  */
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	823b      	strh	r3, [r7, #16]

  rgb888_part1 = (r << 11) + (g << 2); /* Build pattern first part to write in LCD RAM */
 80020c4:	8abb      	ldrh	r3, [r7, #20]
 80020c6:	02db      	lsls	r3, r3, #11
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	8a7b      	ldrh	r3, [r7, #18]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	81fb      	strh	r3, [r7, #14]
  rgb888_part2 = (b << 11) + (r << 3); /* Build pattern second part to write in LCD RAM */
 80020d4:	8a3b      	ldrh	r3, [r7, #16]
 80020d6:	02db      	lsls	r3, r3, #11
 80020d8:	b29a      	uxth	r2, r3
 80020da:	8abb      	ldrh	r3, [r7, #20]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	81bb      	strh	r3, [r7, #12]
  rgb888_part3 = (g << 10) + (b << 3); /* Build pattern third part to write in LCD RAM */
 80020e4:	8a7b      	ldrh	r3, [r7, #18]
 80020e6:	029b      	lsls	r3, r3, #10
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	8a3b      	ldrh	r3, [r7, #16]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	817b      	strh	r3, [r7, #10]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos); 
 80020f4:	887a      	ldrh	r2, [r7, #2]
 80020f6:	88bb      	ldrh	r3, [r7, #4]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff feab 	bl	8001e56 <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	202c      	movs	r0, #44	@ 0x2c
 8002106:	f7ff ff4b 	bl	8001fa0 <ls016b8uy_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter+=2)
 800210a:	2300      	movs	r3, #0
 800210c:	82fb      	strh	r3, [r7, #22]
 800210e:	e013      	b.n	8002138 <ls016b8uy_DrawHLine+0xb0>
  {
    /* Write 2 pixels at a time by performing 3 access (pixels coded on 24 bits in LCD RAM whereas access are coded on 16 bits) */
    LCD_IO_WriteData(rgb888_part1);
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	4618      	mov	r0, r3
 8002114:	f001 f808 	bl	8003128 <LCD_IO_WriteData>
    LCD_IO_WriteData(rgb888_part2);
 8002118:	89bb      	ldrh	r3, [r7, #12]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f804 	bl	8003128 <LCD_IO_WriteData>
    if (counter != (Length-1))  /* When writing last pixel when Length is odd, the third part is not written */
 8002120:	8afa      	ldrh	r2, [r7, #22]
 8002122:	883b      	ldrh	r3, [r7, #0]
 8002124:	3b01      	subs	r3, #1
 8002126:	429a      	cmp	r2, r3
 8002128:	d003      	beq.n	8002132 <ls016b8uy_DrawHLine+0xaa>
    {
      LCD_IO_WriteData(rgb888_part3);
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fffb 	bl	8003128 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter+=2)
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	3302      	adds	r3, #2
 8002136:	82fb      	strh	r3, [r7, #22]
 8002138:	8afa      	ldrh	r2, [r7, #22]
 800213a:	883b      	ldrh	r3, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d3e7      	bcc.n	8002110 <ls016b8uy_DrawHLine+0x88>
    }
  }  
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}

0800214a <ls016b8uy_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ls016b8uy_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800214a:	b590      	push	{r4, r7, lr}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	4604      	mov	r4, r0
 8002152:	4608      	mov	r0, r1
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	4623      	mov	r3, r4
 800215a:	80fb      	strh	r3, [r7, #6]
 800215c:	4603      	mov	r3, r0
 800215e:	80bb      	strh	r3, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
 8002164:	4613      	mov	r3, r2
 8002166:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 800216c:	887a      	ldrh	r2, [r7, #2]
 800216e:	88bb      	ldrh	r3, [r7, #4]
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fe6f 	bl	8001e56 <ls016b8uy_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	202c      	movs	r0, #44	@ 0x2c
 800217e:	f7ff ff0f 	bl	8001fa0 <ls016b8uy_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002182:	2300      	movs	r3, #0
 8002184:	81fb      	strh	r3, [r7, #14]
 8002186:	e00b      	b.n	80021a0 <ls016b8uy_DrawVLine+0x56>
  {
    ls016b8uy_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	4413      	add	r3, r2
 800218e:	b299      	uxth	r1, r3
 8002190:	88fa      	ldrh	r2, [r7, #6]
 8002192:	88bb      	ldrh	r3, [r7, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fe92 	bl	8001ebe <ls016b8uy_WritePixel>
  for(counter = 0; counter < Length; counter++)
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	3301      	adds	r3, #1
 800219e:	81fb      	strh	r3, [r7, #14]
 80021a0:	89fa      	ldrh	r2, [r7, #14]
 80021a2:	883b      	ldrh	r3, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d3ef      	bcc.n	8002188 <ls016b8uy_DrawVLine+0x3e>
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
	...

080021b4 <ls016b8uy_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ls016b8uy_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	603a      	str	r2, [r7, #0]
 80021be:	80fb      	strh	r3, [r7, #6]
 80021c0:	460b      	mov	r3, r1
 80021c2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80021d0:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <ls016b8uy_DrawBitmap+0xe0>)
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <ls016b8uy_DrawBitmap+0xe4>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80021e0:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <ls016b8uy_DrawBitmap+0xe8>)
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	4b2e      	ldr	r3, [pc, #184]	@ (80022a0 <ls016b8uy_DrawBitmap+0xec>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	3302      	adds	r3, #2
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	3304      	adds	r3, #4
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	461a      	mov	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	330a      	adds	r3, #10
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	330c      	adds	r3, #12
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	461a      	mov	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	4413      	add	r3, r2
 8002238:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800223a:	88ba      	ldrh	r2, [r7, #4]
 800223c:	89bb      	ldrh	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e01d      	b.n	8002280 <ls016b8uy_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY - 1);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fe00 	bl	8001e56 <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b299      	uxth	r1, r3
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	4413      	add	r3, r2
 800226c:	89fa      	ldrh	r2, [r7, #14]
 800226e:	88f8      	ldrh	r0, [r7, #6]
 8002270:	f000 f89c 	bl	80023ac <ls016b8uy_DrawRGBHLine>
    nb_line++;
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	3301      	adds	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b01      	subs	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8dd      	bhi.n	8002244 <ls016b8uy_DrawBitmap+0x90>
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000003c 	.word	0x2000003c
 8002298:	20000188 	.word	0x20000188
 800229c:	2000003e 	.word	0x2000003e
 80022a0:	2000018a 	.word	0x2000018a

080022a4 <ls016b8uy_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ls016b8uy_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4623      	mov	r3, r4
 80022b4:	80fb      	strh	r3, [r7, #6]
 80022b6:	4603      	mov	r3, r0
 80022b8:	80bb      	strh	r3, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
 80022be:	4613      	mov	r3, r2
 80022c0:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	e019      	b.n	8002300 <ls016b8uy_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ls016b8uy_SetCursor(Xpos, posY);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fdbe 	bl	8001e56 <ls016b8uy_SetCursor>

    /* Draw one line of the picture */
    ls016b8uy_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	b299      	uxth	r1, r3
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	4413      	add	r3, r2
 80022ec:	887a      	ldrh	r2, [r7, #2]
 80022ee:	88f8      	ldrh	r0, [r7, #6]
 80022f0:	f000 f85c 	bl	80023ac <ls016b8uy_DrawRGBHLine>
    nb_line++;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	3301      	adds	r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	88ba      	ldrh	r2, [r7, #4]
 8002302:	883b      	ldrh	r3, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4293      	cmp	r3, r2
 800230c:	d3de      	bcc.n	80022cc <ls016b8uy_DrawRGBImage+0x28>
  }
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}

08002318 <ls016b8uy_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static LS016B8UY_Rgb888 ls016b8uy_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	460a      	mov	r2, r1
 8002322:	80fb      	strh	r3, [r7, #6]
 8002324:	4613      	mov	r3, r2
 8002326:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ls016b8uy_SetCursor(Xpos, Ypos);
 8002328:	88ba      	ldrh	r2, [r7, #4]
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fd91 	bl	8001e56 <ls016b8uy_SetCursor>
  /* Prepare to read LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	202e      	movs	r0, #46	@ 0x2e
 800233a:	f7ff fe31 	bl	8001fa0 <ls016b8uy_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 800233e:	f000 ff0d 	bl	800315c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002342:	f000 ff0b 	bl	800315c <LCD_IO_ReadData>
 8002346:	4603      	mov	r3, r0
 8002348:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 800234a:	f000 ff07 	bl	800315c <LCD_IO_ReadData>
 800234e:	4603      	mov	r3, r0
 8002350:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002352:	8afb      	ldrh	r3, [r7, #22]
 8002354:	121b      	asrs	r3, r3, #8
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f023 0303 	bic.w	r3, r3, #3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002360:	8afb      	ldrh	r3, [r7, #22]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f023 0303 	bic.w	r3, r3, #3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 800236c:	8abb      	ldrh	r3, [r7, #20]
 800236e:	121b      	asrs	r3, r3, #8
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	f107 020c 	add.w	r2, r7, #12
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	4611      	mov	r1, r2
 8002386:	8019      	strh	r1, [r3, #0]
 8002388:	3302      	adds	r3, #2
 800238a:	0c12      	lsrs	r2, r2, #16
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	2300      	movs	r3, #0
 8002390:	7c3a      	ldrb	r2, [r7, #16]
 8002392:	f362 0307 	bfi	r3, r2, #0, #8
 8002396:	7c7a      	ldrb	r2, [r7, #17]
 8002398:	f362 230f 	bfi	r3, r2, #8, #8
 800239c:	7cba      	ldrb	r2, [r7, #18]
 800239e:	f362 4317 	bfi	r3, r2, #16, #8
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <ls016b8uy_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ls016b8uy_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	4603      	mov	r3, r0
 80023b6:	81fb      	strh	r3, [r7, #14]
 80023b8:	460b      	mov	r3, r1
 80023ba:	81bb      	strh	r3, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t posX;
  uint16_t r, g, b;
  uint16_t rgb888_part;
  uint16_t *rgb565 = (uint16_t*)pdata;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	61fb      	str	r3, [r7, #28]

  /* Prepare to write to LCD RAM */
  ls016b8uy_WriteReg(LCD_CMD_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	202c      	movs	r0, #44	@ 0x2c
 80023ce:	f7ff fde7 	bl	8001fa0 <ls016b8uy_WriteReg>

  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	623b      	str	r3, [r7, #32]
 80023d6:	e07b      	b.n	80024d0 <ls016b8uy_DrawRGBHLine+0x124>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80023d8:	4b44      	ldr	r3, [pc, #272]	@ (80024ec <ls016b8uy_DrawRGBHLine+0x140>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d372      	bcc.n	80024ca <ls016b8uy_DrawRGBHLine+0x11e>
 80023e4:	4b42      	ldr	r3, [pc, #264]	@ (80024f0 <ls016b8uy_DrawRGBHLine+0x144>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	89ba      	ldrh	r2, [r7, #12]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d36d      	bcc.n	80024ca <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80023ee:	4b41      	ldr	r3, [pc, #260]	@ (80024f4 <ls016b8uy_DrawRGBHLine+0x148>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d867      	bhi.n	80024ca <ls016b8uy_DrawRGBHLine+0x11e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80023fa:	4b3f      	ldr	r3, [pc, #252]	@ (80024f8 <ls016b8uy_DrawRGBHLine+0x14c>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	89ba      	ldrh	r2, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d862      	bhi.n	80024ca <ls016b8uy_DrawRGBHLine+0x11e>
    {
      /* Write pixels in LCD RAM after RGB565 -> RGB888 conversion */
      /* As data in LCD RAM are 24bits packed, three 16 bits writes access are needed to transmit 2 pixels data */

      r = (rgb565[i] & 0xF800) >> 11;      /* Extract red component from first RGB565 pixel data */
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	4413      	add	r3, r2
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	0adb      	lsrs	r3, r3, #11
 8002410:	837b      	strh	r3, [r7, #26]
      g = (rgb565[i] & 0x07E0) >> 5;       /* Extract green component from first RGB565 pixel data  */
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	115b      	asrs	r3, r3, #5
 800241e:	b29b      	uxth	r3, r3
 8002420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002424:	833b      	strh	r3, [r7, #24]
      rgb888_part = (r << 11) + (g << 2);  /* Build data to be written in LCD RAM */
 8002426:	8b7b      	ldrh	r3, [r7, #26]
 8002428:	02db      	lsls	r3, r3, #11
 800242a:	b29a      	uxth	r2, r3
 800242c:	8b3b      	ldrh	r3, [r7, #24]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	b29b      	uxth	r3, r3
 8002432:	4413      	add	r3, r2
 8002434:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 8002436:	8afb      	ldrh	r3, [r7, #22]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fe75 	bl	8003128 <LCD_IO_WriteData>

      b = (rgb565[i] & 0x001F) >> 0;       /* Extract blue component from first RGB565 pixel data  */
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	82bb      	strh	r3, [r7, #20]
      r = (rgb565[i+1] & 0xF800) >> 11;    /* Extract red component from second RGB565 pixel data  */
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	0adb      	lsrs	r3, r3, #11
 800245c:	837b      	strh	r3, [r7, #26]
      rgb888_part = (b << 11) + (r << 3);  /* Build data to be written in LCD RAM */
 800245e:	8abb      	ldrh	r3, [r7, #20]
 8002460:	02db      	lsls	r3, r3, #11
 8002462:	b29a      	uxth	r2, r3
 8002464:	8b7b      	ldrh	r3, [r7, #26]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	b29b      	uxth	r3, r3
 800246a:	4413      	add	r3, r2
 800246c:	82fb      	strh	r3, [r7, #22]
      LCD_IO_WriteData(rgb888_part);
 800246e:	8afb      	ldrh	r3, [r7, #22]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fe59 	bl	8003128 <LCD_IO_WriteData>

      if (posX != (Xsize + Xpos - 1))     /* When writing last pixel when size is odd, the third part is not written */
 8002476:	897a      	ldrh	r2, [r7, #10]
 8002478:	89fb      	ldrh	r3, [r7, #14]
 800247a:	4413      	add	r3, r2
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	429a      	cmp	r2, r3
 8002482:	d01f      	beq.n	80024c4 <ls016b8uy_DrawRGBHLine+0x118>
      {
        g = (rgb565[i+1] & 0x07E0) >> 5;     /* Extract green component from second RGB565 pixel data */
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	3301      	adds	r3, #1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	115b      	asrs	r3, r3, #5
 8002492:	b29b      	uxth	r3, r3
 8002494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002498:	833b      	strh	r3, [r7, #24]
        b = (rgb565[i+1] & 0x001F) >> 0;     /* Extract blue component from second RGB565 pixel data */
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	3301      	adds	r3, #1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	82bb      	strh	r3, [r7, #20]
        rgb888_part = (g << 10) + (b << 3);  /* Build data to be written in LCD RAM */
 80024ac:	8b3b      	ldrh	r3, [r7, #24]
 80024ae:	029b      	lsls	r3, r3, #10
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	8abb      	ldrh	r3, [r7, #20]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	82fb      	strh	r3, [r7, #22]
        LCD_IO_WriteData(rgb888_part);
 80024bc:	8afb      	ldrh	r3, [r7, #22]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fe32 	bl	8003128 <LCD_IO_WriteData>
      }

      i += 2;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	3302      	adds	r3, #2
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (posX = Xpos; posX < (Xsize + Xpos); posX += 2)
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	3302      	adds	r3, #2
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	897a      	ldrh	r2, [r7, #10]
 80024d2:	89fb      	ldrh	r3, [r7, #14]
 80024d4:	4413      	add	r3, r2
 80024d6:	461a      	mov	r2, r3
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	4293      	cmp	r3, r2
 80024dc:	f4ff af7c 	bcc.w	80023d8 <ls016b8uy_DrawRGBHLine+0x2c>
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	@ 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000188 	.word	0x20000188
 80024f0:	2000018a 	.word	0x2000018a
 80024f4:	2000003c 	.word	0x2000003c
 80024f8:	2000003e 	.word	0x2000003e

080024fc <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002502:	f000 fe0b 	bl	800311c <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2010      	movs	r0, #16
 800250c:	f000 f9e3 	bl	80028d6 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002510:	200a      	movs	r0, #10
 8002512:	f000 fe2a 	bl	800316a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2001      	movs	r0, #1
 800251c:	f000 f9db 	bl	80028d6 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8002520:	20c8      	movs	r0, #200	@ 0xc8
 8002522:	f000 fe22 	bl	800316a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2011      	movs	r0, #17
 800252c:	f000 f9d3 	bl	80028d6 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8002530:	2078      	movs	r0, #120	@ 0x78
 8002532:	f000 fe1a 	bl	800316a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8002536:	2300      	movs	r3, #0
 8002538:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800253a:	463b      	mov	r3, r7
 800253c:	2201      	movs	r2, #1
 800253e:	4619      	mov	r1, r3
 8002540:	2036      	movs	r0, #54	@ 0x36
 8002542:	f000 f9c8 	bl	80028d6 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8002546:	2305      	movs	r3, #5
 8002548:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 800254a:	463b      	mov	r3, r7
 800254c:	2201      	movs	r2, #1
 800254e:	4619      	mov	r1, r3
 8002550:	203a      	movs	r0, #58	@ 0x3a
 8002552:	f000 f9c0 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2021      	movs	r0, #33	@ 0x21
 800255c:	f000 f9bb 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8002560:	2300      	movs	r3, #0
 8002562:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002564:	2300      	movs	r3, #0
 8002566:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002568:	2300      	movs	r3, #0
 800256a:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800256c:	23ef      	movs	r3, #239	@ 0xef
 800256e:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002570:	463b      	mov	r3, r7
 8002572:	2204      	movs	r2, #4
 8002574:	4619      	mov	r1, r3
 8002576:	202a      	movs	r0, #42	@ 0x2a
 8002578:	f000 f9ad 	bl	80028d6 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 800257c:	2300      	movs	r3, #0
 800257e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002580:	2300      	movs	r3, #0
 8002582:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002584:	2300      	movs	r3, #0
 8002586:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8002588:	23ef      	movs	r3, #239	@ 0xef
 800258a:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800258c:	463b      	mov	r3, r7
 800258e:	2204      	movs	r2, #4
 8002590:	4619      	mov	r1, r3
 8002592:	202b      	movs	r0, #43	@ 0x2b
 8002594:	f000 f99f 	bl	80028d6 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8002598:	230c      	movs	r3, #12
 800259a:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800259c:	230c      	movs	r3, #12
 800259e:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80025a0:	2300      	movs	r3, #0
 80025a2:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80025a4:	2333      	movs	r3, #51	@ 0x33
 80025a6:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80025a8:	2333      	movs	r3, #51	@ 0x33
 80025aa:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80025ac:	463b      	mov	r3, r7
 80025ae:	2205      	movs	r2, #5
 80025b0:	4619      	mov	r1, r3
 80025b2:	20b2      	movs	r0, #178	@ 0xb2
 80025b4:	f000 f98f 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80025b8:	2335      	movs	r3, #53	@ 0x35
 80025ba:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80025bc:	463b      	mov	r3, r7
 80025be:	2201      	movs	r2, #1
 80025c0:	4619      	mov	r1, r3
 80025c2:	20b7      	movs	r0, #183	@ 0xb7
 80025c4:	f000 f987 	bl	80028d6 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 80025c8:	231f      	movs	r3, #31
 80025ca:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80025cc:	463b      	mov	r3, r7
 80025ce:	2201      	movs	r2, #1
 80025d0:	4619      	mov	r1, r3
 80025d2:	20bb      	movs	r0, #187	@ 0xbb
 80025d4:	f000 f97f 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 80025d8:	232c      	movs	r3, #44	@ 0x2c
 80025da:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80025dc:	463b      	mov	r3, r7
 80025de:	2201      	movs	r2, #1
 80025e0:	4619      	mov	r1, r3
 80025e2:	20c0      	movs	r0, #192	@ 0xc0
 80025e4:	f000 f977 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80025e8:	2301      	movs	r3, #1
 80025ea:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80025ec:	23c3      	movs	r3, #195	@ 0xc3
 80025ee:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80025f0:	463b      	mov	r3, r7
 80025f2:	2202      	movs	r2, #2
 80025f4:	4619      	mov	r1, r3
 80025f6:	20c2      	movs	r0, #194	@ 0xc2
 80025f8:	f000 f96d 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80025fc:	2320      	movs	r3, #32
 80025fe:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002600:	463b      	mov	r3, r7
 8002602:	2201      	movs	r2, #1
 8002604:	4619      	mov	r1, r3
 8002606:	20c4      	movs	r0, #196	@ 0xc4
 8002608:	f000 f965 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 800260c:	230f      	movs	r3, #15
 800260e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002610:	463b      	mov	r3, r7
 8002612:	2201      	movs	r2, #1
 8002614:	4619      	mov	r1, r3
 8002616:	20c6      	movs	r0, #198	@ 0xc6
 8002618:	f000 f95d 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 800261c:	23a4      	movs	r3, #164	@ 0xa4
 800261e:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002620:	23a1      	movs	r3, #161	@ 0xa1
 8002622:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8002624:	463b      	mov	r3, r7
 8002626:	2202      	movs	r2, #2
 8002628:	4619      	mov	r1, r3
 800262a:	20d0      	movs	r0, #208	@ 0xd0
 800262c:	f000 f953 	bl	80028d6 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002630:	23d0      	movs	r3, #208	@ 0xd0
 8002632:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002634:	2308      	movs	r3, #8
 8002636:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8002638:	2311      	movs	r3, #17
 800263a:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800263c:	2308      	movs	r3, #8
 800263e:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002640:	230c      	movs	r3, #12
 8002642:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8002644:	2315      	movs	r3, #21
 8002646:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002648:	2339      	movs	r3, #57	@ 0x39
 800264a:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 800264c:	2333      	movs	r3, #51	@ 0x33
 800264e:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002650:	2350      	movs	r3, #80	@ 0x50
 8002652:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8002654:	2336      	movs	r3, #54	@ 0x36
 8002656:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8002658:	2313      	movs	r3, #19
 800265a:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800265c:	2314      	movs	r3, #20
 800265e:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002660:	2329      	movs	r3, #41	@ 0x29
 8002662:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002664:	232d      	movs	r3, #45	@ 0x2d
 8002666:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8002668:	463b      	mov	r3, r7
 800266a:	220e      	movs	r2, #14
 800266c:	4619      	mov	r1, r3
 800266e:	20e0      	movs	r0, #224	@ 0xe0
 8002670:	f000 f931 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002674:	23d0      	movs	r3, #208	@ 0xd0
 8002676:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002678:	2308      	movs	r3, #8
 800267a:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 800267c:	2310      	movs	r3, #16
 800267e:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002680:	2308      	movs	r3, #8
 8002682:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002684:	2306      	movs	r3, #6
 8002686:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8002688:	2306      	movs	r3, #6
 800268a:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800268c:	2339      	movs	r3, #57	@ 0x39
 800268e:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002690:	2344      	movs	r3, #68	@ 0x44
 8002692:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002694:	2351      	movs	r3, #81	@ 0x51
 8002696:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8002698:	230b      	movs	r3, #11
 800269a:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800269c:	2316      	movs	r3, #22
 800269e:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80026a0:	2314      	movs	r3, #20
 80026a2:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80026a4:	232f      	movs	r3, #47	@ 0x2f
 80026a6:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80026a8:	2331      	movs	r3, #49	@ 0x31
 80026aa:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80026ac:	463b      	mov	r3, r7
 80026ae:	220e      	movs	r2, #14
 80026b0:	4619      	mov	r1, r3
 80026b2:	20e1      	movs	r0, #225	@ 0xe1
 80026b4:	f000 f90f 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80026b8:	f000 f847 	bl	800274a <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80026bc:	2300      	movs	r3, #0
 80026be:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80026c0:	463b      	mov	r3, r7
 80026c2:	2201      	movs	r2, #1
 80026c4:	4619      	mov	r1, r3
 80026c6:	2035      	movs	r0, #53	@ 0x35
 80026c8:	f000 f905 	bl	80028d6 <ST7789H2_WriteReg>

}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80026e2:	2300      	movs	r3, #0
 80026e4:	723b      	strb	r3, [r7, #8]
 80026e6:	e025      	b.n	8002734 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d120      	bne.n	8002730 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80026ee:	2300      	movs	r3, #0
 80026f0:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80026f2:	2300      	movs	r3, #0
 80026f4:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80026f6:	2301      	movs	r3, #1
 80026f8:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80026fa:	23f0      	movs	r3, #240	@ 0xf0
 80026fc:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80026fe:	2300      	movs	r3, #0
 8002700:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002702:	2300      	movs	r3, #0
 8002704:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	2206      	movs	r2, #6
 800270c:	4619      	mov	r1, r3
 800270e:	2033      	movs	r0, #51	@ 0x33
 8002710:	f000 f8e1 	bl	80028d6 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002714:	2300      	movs	r3, #0
 8002716:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8002718:	2350      	movs	r3, #80	@ 0x50
 800271a:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	2202      	movs	r2, #2
 8002722:	4619      	mov	r1, r3
 8002724:	2037      	movs	r0, #55	@ 0x37
 8002726:	f000 f8d6 	bl	80028d6 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 800272a:	23c0      	movs	r3, #192	@ 0xc0
 800272c:	723b      	strb	r3, [r7, #8]
 800272e:	e001      	b.n	8002734 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002730:	2360      	movs	r3, #96	@ 0x60
 8002732:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	2201      	movs	r2, #1
 800273a:	4619      	mov	r1, r3
 800273c:	2036      	movs	r0, #54	@ 0x36
 800273e:	f000 f8ca 	bl	80028d6 <ST7789H2_WriteReg>
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	2029      	movs	r0, #41	@ 0x29
 8002754:	f000 f8bf 	bl	80028d6 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	2011      	movs	r0, #17
 800275e:	f000 f8ba 	bl	80028d6 <ST7789H2_WriteReg>
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}

08002766 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800276c:	23fe      	movs	r3, #254	@ 0xfe
 800276e:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2201      	movs	r2, #1
 8002774:	4619      	mov	r1, r3
 8002776:	20bd      	movs	r0, #189	@ 0xbd
 8002778:	f000 f8ad 	bl	80028d6 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800277c:	2200      	movs	r2, #0
 800277e:	2100      	movs	r1, #0
 8002780:	2010      	movs	r0, #16
 8002782:	f000 f8a8 	bl	80028d6 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002786:	200a      	movs	r0, #10
 8002788:	f000 fcef 	bl	800316a <LCD_IO_Delay>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8002798:	23f0      	movs	r3, #240	@ 0xf0
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80027a8:	23f0      	movs	r3, #240	@ 0xf0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80027b8:	f000 fcb0 	bl	800311c <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80027bc:	2004      	movs	r0, #4
 80027be:	f000 f8ac 	bl	800291a <ST7789H2_ReadReg>
 80027c2:	4603      	mov	r3, r0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	460a      	mov	r2, r1
 80027d2:	80fb      	strh	r3, [r7, #6]
 80027d4:	4613      	mov	r3, r2
 80027d6:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80027d8:	2300      	movs	r3, #0
 80027da:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3b11      	subs	r3, #17
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	2204      	movs	r2, #4
 80027f6:	4619      	mov	r1, r3
 80027f8:	202a      	movs	r0, #42	@ 0x2a
 80027fa:	f000 f86c 	bl	80028d6 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002802:	88bb      	ldrh	r3, [r7, #4]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002808:	2300      	movs	r3, #0
 800280a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 800280c:	88bb      	ldrh	r3, [r7, #4]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3b11      	subs	r3, #17
 8002812:	b2db      	uxtb	r3, r3
 8002814:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	2204      	movs	r2, #4
 800281c:	4619      	mov	r1, r3
 800281e:	202b      	movs	r0, #43	@ 0x2b
 8002820:	f000 f859 	bl	80028d6 <ST7789H2_WriteReg>
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
 8002836:	460b      	mov	r3, r1
 8002838:	80bb      	strh	r3, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800283e:	88ba      	ldrh	r2, [r7, #4]
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ffbf 	bl	80027c8 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	202c      	movs	r0, #44	@ 0x2c
 8002850:	f000 f841 	bl	80028d6 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fc66 	bl	8003128 <LCD_IO_WriteData>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	460a      	mov	r2, r1
 800286e:	80fb      	strh	r3, [r7, #6]
 8002870:	4613      	mov	r3, r2
 8002872:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002874:	88ba      	ldrh	r2, [r7, #4]
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ffa4 	bl	80027c8 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002880:	88ba      	ldrh	r2, [r7, #4]
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f9be 	bl	8002c08 <ST7789H2_ReadPixel_rgb888>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	733a      	strb	r2, [r7, #12]
 8002892:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002896:	737a      	strb	r2, [r7, #13]
 8002898:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800289c:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800289e:	7b3b      	ldrb	r3, [r7, #12]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 80028a4:	7b7b      	ldrb	r3, [r7, #13]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80028aa:	7bbb      	ldrb	r3, [r7, #14]
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	02db      	lsls	r3, r3, #11
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	7dbb      	ldrb	r3, [r7, #22]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	015b      	lsls	r3, r3, #5
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	7d7b      	ldrb	r3, [r7, #21]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80028cc:	8a7b      	ldrh	r3, [r7, #18]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	6039      	str	r1, [r7, #0]
 80028e0:	71fb      	strb	r3, [r7, #7]
 80028e2:	4613      	mov	r3, r2
 80028e4:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fc2a 	bl	8003142 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	e009      	b.n	8002908 <ST7789H2_WriteReg+0x32>
  {
    LCD_IO_WriteData(Parameters[i]);
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fc13 	bl	8003128 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	3301      	adds	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	429a      	cmp	r2, r3
 800290e:	d3f1      	bcc.n	80028f4 <ST7789H2_WriteReg+0x1e>
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fc0b 	bl	8003142 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 800292c:	f000 fc16 	bl	800315c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002930:	f000 fc14 	bl	800315c <LCD_IO_ReadData>
 8002934:	4603      	mov	r3, r0
 8002936:	b2db      	uxtb	r3, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002940:	b490      	push	{r4, r7}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4604      	mov	r4, r0
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4623      	mov	r3, r4
 8002950:	80fb      	strh	r3, [r7, #6]
 8002952:	4603      	mov	r3, r0
 8002954:	80bb      	strh	r3, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	807b      	strh	r3, [r7, #2]
 800295a:	4613      	mov	r3, r2
 800295c:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	2bef      	cmp	r3, #239	@ 0xef
 8002962:	d803      	bhi.n	800296c <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002964:	4a1b      	ldr	r2, [pc, #108]	@ (80029d4 <ST7789H2_SetDisplayWindow+0x94>)
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	8013      	strh	r3, [r2, #0]
 800296a:	e002      	b.n	8002972 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <ST7789H2_SetDisplayWindow+0x94>)
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002972:	88bb      	ldrh	r3, [r7, #4]
 8002974:	2bef      	cmp	r3, #239	@ 0xef
 8002976:	d803      	bhi.n	8002980 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002978:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <ST7789H2_SetDisplayWindow+0x98>)
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	8013      	strh	r3, [r2, #0]
 800297e:	e002      	b.n	8002986 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <ST7789H2_SetDisplayWindow+0x98>)
 8002982:	2200      	movs	r2, #0
 8002984:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	4413      	add	r3, r2
 800298c:	2bf0      	cmp	r3, #240	@ 0xf0
 800298e:	dc08      	bgt.n	80029a2 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002990:	887a      	ldrh	r2, [r7, #2]
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	4413      	add	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <ST7789H2_SetDisplayWindow+0x9c>)
 800299e:	801a      	strh	r2, [r3, #0]
 80029a0:	e002      	b.n	80029a8 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <ST7789H2_SetDisplayWindow+0x9c>)
 80029a4:	22ef      	movs	r2, #239	@ 0xef
 80029a6:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80029a8:	883a      	ldrh	r2, [r7, #0]
 80029aa:	88bb      	ldrh	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	2bf0      	cmp	r3, #240	@ 0xf0
 80029b0:	dc08      	bgt.n	80029c4 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80029b2:	883a      	ldrh	r2, [r7, #0]
 80029b4:	88bb      	ldrh	r3, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <ST7789H2_SetDisplayWindow+0xa0>)
 80029c0:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80029c2:	e002      	b.n	80029ca <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <ST7789H2_SetDisplayWindow+0xa0>)
 80029c6:	22ef      	movs	r2, #239	@ 0xef
 80029c8:	801a      	strh	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc90      	pop	{r4, r7}
 80029d2:	4770      	bx	lr
 80029d4:	2000018c 	.word	0x2000018c
 80029d8:	2000018e 	.word	0x2000018e
 80029dc:	20000078 	.word	0x20000078
 80029e0:	2000007a 	.word	0x2000007a

080029e4 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4604      	mov	r4, r0
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4623      	mov	r3, r4
 80029f4:	80fb      	strh	r3, [r7, #6]
 80029f6:	4603      	mov	r3, r0
 80029f8:	80bb      	strh	r3, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	807b      	strh	r3, [r7, #2]
 80029fe:	4613      	mov	r3, r2
 8002a00:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	88bb      	ldrh	r3, [r7, #4]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fedd 	bl	80027c8 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	202c      	movs	r0, #44	@ 0x2c
 8002a14:	f7ff ff5f 	bl	80028d6 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	81fb      	strh	r3, [r7, #14]
 8002a1c:	e006      	b.n	8002a2c <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fb81 	bl	8003128 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	81fb      	strh	r3, [r7, #14]
 8002a2c:	89fa      	ldrh	r2, [r7, #14]
 8002a2e:	883b      	ldrh	r3, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d3f4      	bcc.n	8002a1e <ST7789H2_DrawHLine+0x3a>
  }  
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}

08002a3e <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a3e:	b590      	push	{r4, r7, lr}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4604      	mov	r4, r0
 8002a46:	4608      	mov	r0, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	80fb      	strh	r3, [r7, #6]
 8002a50:	4603      	mov	r3, r0
 8002a52:	80bb      	strh	r3, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002a5c:	887a      	ldrh	r2, [r7, #2]
 8002a5e:	88bb      	ldrh	r3, [r7, #4]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff feb0 	bl	80027c8 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	202c      	movs	r0, #44	@ 0x2c
 8002a6e:	f7ff ff32 	bl	80028d6 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	81fb      	strh	r3, [r7, #14]
 8002a76:	e00b      	b.n	8002a90 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	89fb      	ldrh	r3, [r7, #14]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b299      	uxth	r1, r3
 8002a80:	88fa      	ldrh	r2, [r7, #6]
 8002a82:	88bb      	ldrh	r3, [r7, #4]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fed1 	bl	800282c <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002a8a:	89fb      	ldrh	r3, [r7, #14]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	81fb      	strh	r3, [r7, #14]
 8002a90:	89fa      	ldrh	r2, [r7, #14]
 8002a92:	883b      	ldrh	r3, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3ef      	bcc.n	8002a78 <ST7789H2_DrawVLine+0x3a>
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
	...

08002aa4 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	603a      	str	r2, [r7, #0]
 8002aae:	80fb      	strh	r3, [r7, #6]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002ac0:	4b30      	ldr	r3, [pc, #192]	@ (8002b84 <ST7789H2_DrawBitmap+0xe0>)
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <ST7789H2_DrawBitmap+0xe4>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b8c <ST7789H2_DrawBitmap+0xe8>)
 8002ad2:	881a      	ldrh	r2, [r3, #0]
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b90 <ST7789H2_DrawBitmap+0xec>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	3304      	adds	r3, #4
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	461a      	mov	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	330a      	adds	r3, #10
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	461a      	mov	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4413      	add	r3, r2
 8002b28:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002b2a:	88ba      	ldrh	r2, [r7, #4]
 8002b2c:	89bb      	ldrh	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e01d      	b.n	8002b70 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fe41 	bl	80027c8 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b299      	uxth	r1, r3
 8002b4e:	89fb      	ldrh	r3, [r7, #14]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	89fa      	ldrh	r2, [r7, #14]
 8002b5e:	88f8      	ldrh	r0, [r7, #6]
 8002b60:	f000 f89c 	bl	8002c9c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	3301      	adds	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d8dd      	bhi.n	8002b34 <ST7789H2_DrawBitmap+0x90>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000078 	.word	0x20000078
 8002b88:	2000018c 	.word	0x2000018c
 8002b8c:	2000007a 	.word	0x2000007a
 8002b90:	2000018e 	.word	0x2000018e

08002b94 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	80fb      	strh	r3, [r7, #6]
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80bb      	strh	r3, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	807b      	strh	r3, [r7, #2]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002bb6:	88bb      	ldrh	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	e019      	b.n	8002bf0 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fdff 	bl	80027c8 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	b299      	uxth	r1, r3
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	4413      	add	r3, r2
 8002bdc:	887a      	ldrh	r2, [r7, #2]
 8002bde:	88f8      	ldrh	r0, [r7, #6]
 8002be0:	f000 f85c 	bl	8002c9c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3301      	adds	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	88ba      	ldrh	r2, [r7, #4]
 8002bf2:	883b      	ldrh	r3, [r7, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d3de      	bcc.n	8002bbc <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}

08002c08 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460a      	mov	r2, r1
 8002c12:	80fb      	strh	r3, [r7, #6]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002c18:	88ba      	ldrh	r2, [r7, #4]
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fdd2 	bl	80027c8 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002c24:	2200      	movs	r2, #0
 8002c26:	2100      	movs	r1, #0
 8002c28:	202e      	movs	r0, #46	@ 0x2e
 8002c2a:	f7ff fe54 	bl	80028d6 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002c2e:	f000 fa95 	bl	800315c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002c32:	f000 fa93 	bl	800315c <LCD_IO_ReadData>
 8002c36:	4603      	mov	r3, r0
 8002c38:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002c3a:	f000 fa8f 	bl	800315c <LCD_IO_ReadData>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002c42:	8afb      	ldrh	r3, [r7, #22]
 8002c44:	121b      	asrs	r3, r3, #8
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f023 0303 	bic.w	r3, r3, #3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002c50:	8afb      	ldrh	r3, [r7, #22]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f023 0303 	bic.w	r3, r3, #3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002c5c:	8abb      	ldrh	r3, [r7, #20]
 8002c5e:	121b      	asrs	r3, r3, #8
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002c6a:	f107 0310 	add.w	r3, r7, #16
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	4611      	mov	r1, r2
 8002c76:	8019      	strh	r1, [r3, #0]
 8002c78:	3302      	adds	r3, #2
 8002c7a:	0c12      	lsrs	r2, r2, #16
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	7c3a      	ldrb	r2, [r7, #16]
 8002c82:	f362 0307 	bfi	r3, r2, #0, #8
 8002c86:	7c7a      	ldrb	r2, [r7, #17]
 8002c88:	f362 230f 	bfi	r3, r2, #8, #8
 8002c8c:	7cba      	ldrb	r2, [r7, #18]
 8002c8e:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	81fb      	strh	r3, [r7, #14]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	81bb      	strh	r3, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	202c      	movs	r0, #44	@ 0x2c
 8002cbe:	f7ff fe0a 	bl	80028d6 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002cc2:	89fb      	ldrh	r3, [r7, #14]
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e029      	b.n	8002d1c <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <ST7789H2_DrawRGBHLine+0x98>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d320      	bcc.n	8002d16 <ST7789H2_DrawRGBHLine+0x7a>
 8002cd4:	4b18      	ldr	r3, [pc, #96]	@ (8002d38 <ST7789H2_DrawRGBHLine+0x9c>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	89ba      	ldrh	r2, [r7, #12]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d31b      	bcc.n	8002d16 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002cde:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <ST7789H2_DrawRGBHLine+0xa0>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d815      	bhi.n	8002d16 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <ST7789H2_DrawRGBHLine+0xa4>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	89ba      	ldrh	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d810      	bhi.n	8002d16 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002cf4:	897a      	ldrh	r2, [r7, #10]
 8002cf6:	89fb      	ldrh	r3, [r7, #14]
 8002cf8:	441a      	add	r2, r3
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d007      	beq.n	8002d10 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4413      	add	r3, r2
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fa0c 	bl	8003128 <LCD_IO_WriteData>
      }      
      i++;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3301      	adds	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	897a      	ldrh	r2, [r7, #10]
 8002d1e:	89fb      	ldrh	r3, [r7, #14]
 8002d20:	4413      	add	r3, r2
 8002d22:	461a      	mov	r2, r3
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d3ce      	bcc.n	8002cc8 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2000018c 	.word	0x2000018c
 8002d38:	2000018e 	.word	0x2000018e
 8002d3c:	20000078 	.word	0x20000078
 8002d40:	2000007a 	.word	0x2000007a

08002d44 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LEDx_GPIO_PORT, GPIO_PIN[Led], GPIO_PIN_SET);
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4a06      	ldr	r2, [pc, #24]	@ (8002d6c <BSP_LED_Off+0x28>)
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4804      	ldr	r0, [pc, #16]	@ (8002d70 <BSP_LED_Off+0x2c>)
 8002d5e:	f001 fa45 	bl	80041ec <HAL_GPIO_WritePin>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	0800bd40 	.word	0x0800bd40
 8002d70:	40021000 	.word	0x40021000

08002d74 <BSP_JOY_Init>:
  *         JOY_MODE_EXTI: Joystick pins will be connected to EXTI line
  *                        with interrupt generation capability
  * @retval HAL_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_JOY_Init(JOYMode_TypeDef Joy_Mode)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08e      	sub	sp, #56	@ 0x38
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  JOYState_TypeDef joykey;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Initialized the Joystick. */
  for(joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002d84:	e0a0      	b.n	8002ec8 <BSP_JOY_Init+0x154>
  {
    /* Enable the JOY clock */
    JOYx_GPIO_CLK_ENABLE(joykey);
 8002d86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10e      	bne.n	8002dac <BSP_JOY_Init+0x38>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	4b52      	ldr	r3, [pc, #328]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4a51      	ldr	r2, [pc, #324]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	e04a      	b.n	8002e42 <BSP_JOY_Init+0xce>
 8002dac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10e      	bne.n	8002dd2 <BSP_JOY_Init+0x5e>
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	4b48      	ldr	r3, [pc, #288]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbc:	4a47      	ldr	r2, [pc, #284]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc4:	4b45      	ldr	r3, [pc, #276]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	e037      	b.n	8002e42 <BSP_JOY_Init+0xce>
 8002dd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d10e      	bne.n	8002df8 <BSP_JOY_Init+0x84>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	4b3f      	ldr	r3, [pc, #252]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	4a3e      	ldr	r2, [pc, #248]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002de4:	f043 0320 	orr.w	r3, r3, #32
 8002de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dea:	4b3c      	ldr	r3, [pc, #240]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	e024      	b.n	8002e42 <BSP_JOY_Init+0xce>
 8002df8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d10e      	bne.n	8002e1e <BSP_JOY_Init+0xaa>
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	4b35      	ldr	r3, [pc, #212]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	4a34      	ldr	r2, [pc, #208]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002e0a:	f043 0320 	orr.w	r3, r3, #32
 8002e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e10:	4b32      	ldr	r3, [pc, #200]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	e011      	b.n	8002e42 <BSP_JOY_Init+0xce>
 8002e1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d10d      	bne.n	8002e42 <BSP_JOY_Init+0xce>
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e36:	4b29      	ldr	r3, [pc, #164]	@ (8002edc <BSP_JOY_Init+0x168>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = JOY_PIN[joykey];
 8002e42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e46:	4a26      	ldr	r2, [pc, #152]	@ (8002ee0 <BSP_JOY_Init+0x16c>)
 8002e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e52:	2303      	movs	r3, #3
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (Joy_Mode == JOY_MODE_GPIO)
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10d      	bne.n	8002e78 <BSP_JOY_Init+0x104>
    {
      /* Configure Joy pin as input */
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8002e60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <BSP_JOY_Init+0x170>)
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	f107 0220 	add.w	r2, r7, #32
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 f80f 	bl	8003e94 <HAL_GPIO_Init>
 8002e76:	e022      	b.n	8002ebe <BSP_JOY_Init+0x14a>
    }
    else if (Joy_Mode == JOY_MODE_EXTI)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d11f      	bne.n	8002ebe <BSP_JOY_Init+0x14a>
    {
      /* Configure Joy pin as input with External interrupt */
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8002e84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e88:	4a16      	ldr	r2, [pc, #88]	@ (8002ee4 <BSP_JOY_Init+0x170>)
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8e:	f107 0220 	add.w	r2, r7, #32
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fffd 	bl	8003e94 <HAL_GPIO_Init>

      /* Enable and set Joy EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((IRQn_Type)(JOY_IRQn[joykey]), 0x0F, 0x00);
 8002e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ee8 <BSP_JOY_Init+0x174>)
 8002ea0:	5cd3      	ldrb	r3, [r2, r3]
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 ffbc 	bl	8003e26 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((IRQn_Type)(JOY_IRQn[joykey]));
 8002eae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <BSP_JOY_Init+0x174>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 ffd0 	bl	8003e5e <HAL_NVIC_EnableIRQ>
  for(joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8002ebe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002ec8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	f67f af5a 	bls.w	8002d86 <BSP_JOY_Init+0x12>
    }
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3738      	adds	r7, #56	@ 0x38
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	0800bd50 	.word	0x0800bd50
 8002ee4:	2000007c 	.word	0x2000007c
 8002ee8:	0800bd5c 	.word	0x0800bd5c

08002eec <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
JOYState_TypeDef BSP_JOY_GetState(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  JOYState_TypeDef joykey;

  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	71fb      	strb	r3, [r7, #7]
 8002ef6:	e013      	b.n	8002f20 <BSP_JOY_GetState+0x34>
  {
    if (HAL_GPIO_ReadPin(JOY_PORT[joykey], JOY_PIN[joykey]) != GPIO_PIN_RESET)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <BSP_JOY_GetState+0x44>)
 8002efc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	490c      	ldr	r1, [pc, #48]	@ (8002f34 <BSP_JOY_GetState+0x48>)
 8002f04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f001 f956 	bl	80041bc <HAL_GPIO_ReadPin>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <BSP_JOY_GetState+0x2e>
    {
      /* Return Code Joystick key pressed */
      return joykey;
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	e006      	b.n	8002f28 <BSP_JOY_GetState+0x3c>
  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d9e8      	bls.n	8002ef8 <BSP_JOY_GetState+0xc>
    }
  }

  /* No Joystick key pressed */
  return JOY_NONE;
 8002f26:	2305      	movs	r3, #5
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	2000007c 	.word	0x2000007c
 8002f34:	0800bd50 	.word	0x0800bd50

08002f38 <FMC_BANK1_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK1 MSP.
  */
static void FMC_BANK1_MspInit(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	4b2e      	ldr	r3, [pc, #184]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f46:	4a2d      	ldr	r2, [pc, #180]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	4a26      	ldr	r2, [pc, #152]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6a:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f80:	f043 0310 	orr.w	r3, r3, #16
 8002f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f86:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	4a18      	ldr	r2, [pc, #96]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002f9c:	f043 0320 	orr.w	r3, r3, #32
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <FMC_BANK1_MspInit+0xc4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002fba:	230c      	movs	r3, #12
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002fbe:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8002fc2:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	480d      	ldr	r0, [pc, #52]	@ (8003000 <FMC_BANK1_MspInit+0xc8>)
 8002fcc:	f000 ff62 	bl	8003e94 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002fd0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002fd4:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4809      	ldr	r0, [pc, #36]	@ (8003004 <FMC_BANK1_MspInit+0xcc>)
 8002fde:	f000 ff59 	bl	8003e94 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 ;  
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	4806      	ldr	r0, [pc, #24]	@ (8003008 <FMC_BANK1_MspInit+0xd0>)
 8002fee:	f000 ff51 	bl	8003e94 <HAL_GPIO_Init>
}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020c00 	.word	0x40020c00
 8003004:	40021000 	.word	0x40021000
 8003008:	40021400 	.word	0x40021400

0800300c <FMC_BANK1_Init>:

/**
  * @brief  Initializes LCD IO.
  */ 
static void FMC_BANK1_Init(void) 
{  
 800300c:	b580      	push	{r7, lr}
 800300e:	b0a2      	sub	sp, #136	@ 0x88
 8003010:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8003012:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 8003016:	63bb      	str	r3, [r7, #56]	@ 0x38
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003018:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <FMC_BANK1_Init+0xac>)
 800301a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* Timing for READING */
  sram_timing.AddressSetupTime      = 9;
 800301c:	2309      	movs	r3, #9
 800301e:	61fb      	str	r3, [r7, #28]
  sram_timing.AddressHoldTime       = 1;
 8003020:	2301      	movs	r3, #1
 8003022:	623b      	str	r3, [r7, #32]
  sram_timing.DataSetupTime         = 36;
 8003024:	2324      	movs	r3, #36	@ 0x24
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
  sram_timing.BusTurnAroundDuration = 1;
 8003028:	2301      	movs	r3, #1
 800302a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sram_timing.CLKDivision           = 2;
 800302c:	2302      	movs	r3, #2
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sram_timing.DataLatency           = 2;
 8003030:	2302      	movs	r3, #2
 8003032:	633b      	str	r3, [r7, #48]	@ 0x30
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8003034:	2300      	movs	r3, #0
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Timing for WRITING*/
  sram_timing_write.AddressSetupTime      = 1;
 8003038:	2301      	movs	r3, #1
 800303a:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 800303c:	2301      	movs	r3, #1
 800303e:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 7;
 8003040:	2307      	movs	r3, #7
 8003042:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  sram_timing_write.CLKDivision           = 2;
 8003048:	2302      	movs	r3, #2
 800304a:	613b      	str	r3, [r7, #16]
  sram_timing_write.DataLatency           = 2;
 800304c:	2302      	movs	r3, #2
 800304e:	617b      	str	r3, [r7, #20]
  sram_timing_write.AccessMode            = FSMC_ACCESS_MODE_A;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK1;
 8003054:	2300      	movs	r3, #0
 8003056:	643b      	str	r3, [r7, #64]	@ 0x40
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	647b      	str	r3, [r7, #68]	@ 0x44
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 800305c:	2300      	movs	r3, #0
 800305e:	64bb      	str	r3, [r7, #72]	@ 0x48
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003060:	2310      	movs	r3, #16
 8003062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	653b      	str	r3, [r7, #80]	@ 0x50
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	657b      	str	r3, [r7, #84]	@ 0x54
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 800306c:	2300      	movs	r3, #0
 800306e:	65bb      	str	r3, [r7, #88]	@ 0x58
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8003070:	2300      	movs	r3, #0
 8003072:	65fb      	str	r3, [r7, #92]	@ 0x5c
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8003074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003078:	663b      	str	r3, [r7, #96]	@ 0x60
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	667b      	str	r3, [r7, #100]	@ 0x64
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 800307e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003082:	66bb      	str	r3, [r7, #104]	@ 0x68
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	66fb      	str	r3, [r7, #108]	@ 0x6c
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	673b      	str	r3, [r7, #112]	@ 0x70
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 800308c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003090:	67bb      	str	r3, [r7, #120]	@ 0x78
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8003092:	2300      	movs	r3, #0
 8003094:	67fb      	str	r3, [r7, #124]	@ 0x7c
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003096:	2300      	movs	r3, #0
 8003098:	677b      	str	r3, [r7, #116]	@ 0x74
  
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800309a:	f7ff ff4d 	bl	8002f38 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800309e:	463a      	mov	r2, r7
 80030a0:	f107 011c 	add.w	r1, r7, #28
 80030a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 fe69 	bl	8007d80 <HAL_SRAM_Init>
}
 80030ae:	bf00      	nop
 80030b0:	3788      	adds	r7, #136	@ 0x88
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	a0000104 	.word	0xa0000104

080030bc <FMC_BANK1_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK1_WriteData(uint16_t Data) 
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1->RAM = Data;
 80030c6:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	8053      	strh	r3, [r2, #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030ce:	f3bf 8f4f 	dsb	sy
}
 80030d2:	bf00      	nop
  __DSB();
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <FMC_BANK1_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK1_WriteReg(uint8_t Reg) 
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1->REG = Reg;
 80030ea:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80030ee:	79fa      	ldrb	r2, [r7, #7]
 80030f0:	b292      	uxth	r2, r2
 80030f2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80030f4:	f3bf 8f4f 	dsb	sy
}
 80030f8:	bf00      	nop
  __DSB();
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <FMC_BANK1_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void) 
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  return FMC_BANK1->RAM;
 800310a:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800310e:	885b      	ldrh	r3, [r3, #2]
 8003110:	b29b      	uxth	r3, r3
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8003120:	f7ff ff74 	bl	800300c <FMC_BANK1_Init>
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}

08003128 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ffc1 	bl	80030bc <FMC_BANK1_WriteData>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ffc6 	bl	80030e0 <FMC_BANK1_WriteReg>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8003160:	f7ff ffd1 	bl	8003106 <FMC_BANK1_ReadData>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	bd80      	pop	{r7, pc}

0800316a <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fd58 	bl	8003c28 <HAL_Delay>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8003184:	2001      	movs	r0, #1
 8003186:	f000 f803 	bl	8003190 <BSP_LCD_InitEx>
 800318a:	4603      	mov	r3, r0
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}

08003190 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800319c:	4b37      	ldr	r3, [pc, #220]	@ (800327c <BSP_LCD_InitEx+0xec>)
 800319e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031a2:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 80031a4:	4b35      	ldr	r3, [pc, #212]	@ (800327c <BSP_LCD_InitEx+0xec>)
 80031a6:	4a36      	ldr	r2, [pc, #216]	@ (8003280 <BSP_LCD_InitEx+0xf0>)
 80031a8:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 80031aa:	4b34      	ldr	r3, [pc, #208]	@ (800327c <BSP_LCD_InitEx+0xec>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 80031b0:	f000 fbd2 	bl	8003958 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80031b4:	2201      	movs	r2, #1
 80031b6:	2120      	movs	r1, #32
 80031b8:	4832      	ldr	r0, [pc, #200]	@ (8003284 <BSP_LCD_InitEx+0xf4>)
 80031ba:	f001 f817 	bl	80041ec <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031c4:	4830      	ldr	r0, [pc, #192]	@ (8003288 <BSP_LCD_InitEx+0xf8>)
 80031c6:	f001 f811 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 80031ca:	2005      	movs	r0, #5
 80031cc:	f000 fd2c 	bl	8003c28 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80031d0:	2201      	movs	r2, #1
 80031d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031d6:	482c      	ldr	r0, [pc, #176]	@ (8003288 <BSP_LCD_InitEx+0xf8>)
 80031d8:	f001 f808 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80031dc:	200a      	movs	r0, #10
 80031de:	f000 fd23 	bl	8003c28 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80031e2:	2200      	movs	r2, #0
 80031e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031e8:	4827      	ldr	r0, [pc, #156]	@ (8003288 <BSP_LCD_InitEx+0xf8>)
 80031ea:	f000 ffff 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 80031ee:	2014      	movs	r0, #20
 80031f0:	f000 fd1a 	bl	8003c28 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80031f4:	2201      	movs	r2, #1
 80031f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031fa:	4823      	ldr	r0, [pc, #140]	@ (8003288 <BSP_LCD_InitEx+0xf8>)
 80031fc:	f000 fff6 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8003200:	200a      	movs	r0, #10
 8003202:	f000 fd11 	bl	8003c28 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8003206:	4b21      	ldr	r3, [pc, #132]	@ (800328c <BSP_LCD_InitEx+0xfc>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4798      	blx	r3
 800320c:	4603      	mov	r3, r0
 800320e:	2b85      	cmp	r3, #133	@ 0x85
 8003210:	d119      	bne.n	8003246 <BSP_LCD_InitEx+0xb6>
  {    
    LcdDrv = &ST7789H2_drv;
 8003212:	4b1f      	ldr	r3, [pc, #124]	@ (8003290 <BSP_LCD_InitEx+0x100>)
 8003214:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <BSP_LCD_InitEx+0xfc>)
 8003216:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8003218:	4b1d      	ldr	r3, [pc, #116]	@ (8003290 <BSP_LCD_InitEx+0x100>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8003226:	2000      	movs	r0, #0
 8003228:	f7ff fa54 	bl	80026d4 <ST7789H2_SetOrientation>
 800322c:	e005      	b.n	800323a <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d102      	bne.n	800323a <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8003234:	2002      	movs	r0, #2
 8003236:	f7ff fa4d 	bl	80026d4 <ST7789H2_SetOrientation>
    {
      /* Default landscape orientation is selected */
    }

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800323a:	4816      	ldr	r0, [pc, #88]	@ (8003294 <BSP_LCD_InitEx+0x104>)
 800323c:	f000 f866 	bl	800330c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8003240:	2300      	movs	r3, #0
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	e014      	b.n	8003270 <BSP_LCD_InitEx+0xe0>
  }
  else if(ls016b8uy_drv.ReadID() == LS016B8UY_ID)
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <BSP_LCD_InitEx+0x108>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4798      	blx	r3
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003254:	429a      	cmp	r2, r3
 8003256:	d10b      	bne.n	8003270 <BSP_LCD_InitEx+0xe0>
  {
    LcdDrv = &ls016b8uy_drv;
 8003258:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <BSP_LCD_InitEx+0x100>)
 800325a:	4a0f      	ldr	r2, [pc, #60]	@ (8003298 <BSP_LCD_InitEx+0x108>)
 800325c:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 800325e:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <BSP_LCD_InitEx+0x100>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003266:	480b      	ldr	r0, [pc, #44]	@ (8003294 <BSP_LCD_InitEx+0x104>)
 8003268:	f000 f850 	bl	800330c <BSP_LCD_SetFont>
    
    ret = LCD_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000190 	.word	0x20000190
 8003280:	20000090 	.word	0x20000090
 8003284:	40021400 	.word	0x40021400
 8003288:	40020c00 	.word	0x40020c00
 800328c:	20000040 	.word	0x20000040
 8003290:	2000019c 	.word	0x2000019c
 8003294:	20000098 	.word	0x20000098
 8003298:	20000004 	.word	0x20000004

0800329c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.   
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 80032a0:	4b03      	ldr	r3, [pc, #12]	@ (80032b0 <BSP_LCD_GetXSize+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	4798      	blx	r3
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	2000019c 	.word	0x2000019c

080032b4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 80032b8:	4b03      	ldr	r3, [pc, #12]	@ (80032c8 <BSP_LCD_GetYSize+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032be:	4798      	blx	r3
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	2000019c 	.word	0x2000019c

080032cc <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	4a03      	ldr	r2, [pc, #12]	@ (80032e8 <BSP_LCD_SetTextColor+0x1c>)
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000190 	.word	0x20000190

080032ec <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4a03      	ldr	r2, [pc, #12]	@ (8003308 <BSP_LCD_SetBackColor+0x1c>)
 80032fa:	6053      	str	r3, [r2, #4]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	20000190 	.word	0x20000190

0800330c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8003314:	4a04      	ldr	r2, [pc, #16]	@ (8003328 <BSP_LCD_SetFont+0x1c>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6093      	str	r3, [r2, #8]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000190 	.word	0x20000190

0800332c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8003330:	4b03      	ldr	r3, [pc, #12]	@ (8003340 <BSP_LCD_GetFont+0x14>)
 8003332:	689b      	ldr	r3, [r3, #8]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000190 	.word	0x20000190

08003344 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <BSP_LCD_Clear+0x68>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	4a13      	ldr	r2, [pc, #76]	@ (80033ac <BSP_LCD_Clear+0x68>)
 8003360:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8003362:	f7ff ffa7 	bl	80032b4 <BSP_LCD_GetYSize>
 8003366:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e00d      	b.n	800338a <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	b29c      	uxth	r4, r3
 8003372:	f7ff ff93 	bl	800329c <BSP_LCD_GetXSize>
 8003376:	4603      	mov	r3, r0
 8003378:	b29b      	uxth	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	4621      	mov	r1, r4
 800337e:	2000      	movs	r0, #0
 8003380:	f000 f938 	bl	80035f4 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3301      	adds	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	429a      	cmp	r2, r3
 8003390:	d3ed      	bcc.n	800336e <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8003392:	4a06      	ldr	r2, [pc, #24]	@ (80033ac <BSP_LCD_Clear+0x68>)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003398:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <BSP_LCD_Clear+0x68>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff94 	bl	80032cc <BSP_LCD_SetTextColor>
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	20000190 	.word	0x20000190

080033b0 <BSP_LCD_ClearStringLine>:
  *            @arg  0..9: if the Current fonts is Font16x24
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  */
void BSP_LCD_ClearStringLine(uint16_t Line)
{ 
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
  uint32_t color_backup = DrawProp.TextColor; 
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <BSP_LCD_ClearStringLine+0x58>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = DrawProp.BackColor;;
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <BSP_LCD_ClearStringLine+0x58>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a10      	ldr	r2, [pc, #64]	@ (8003408 <BSP_LCD_ClearStringLine+0x58>)
 80033c6:	6013      	str	r3, [r2, #0]
    
  /* Draw a rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp.pFont->Height), BSP_LCD_GetXSize(), DrawProp.pFont->Height);
 80033c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <BSP_LCD_ClearStringLine+0x58>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	88db      	ldrh	r3, [r3, #6]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	fb12 f303 	smulbb	r3, r2, r3
 80033d4:	b29c      	uxth	r4, r3
 80033d6:	f7ff ff61 	bl	800329c <BSP_LCD_GetXSize>
 80033da:	4603      	mov	r3, r0
 80033dc:	b29a      	uxth	r2, r3
 80033de:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <BSP_LCD_ClearStringLine+0x58>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	88db      	ldrh	r3, [r3, #6]
 80033e4:	4621      	mov	r1, r4
 80033e6:	2000      	movs	r0, #0
 80033e8:	f000 f9fa 	bl	80037e0 <BSP_LCD_FillRect>
  
  DrawProp.TextColor = color_backup;
 80033ec:	4a06      	ldr	r2, [pc, #24]	@ (8003408 <BSP_LCD_ClearStringLine+0x58>)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80033f2:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <BSP_LCD_ClearStringLine+0x58>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff67 	bl	80032cc <BSP_LCD_SetTextColor>
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}
 8003406:	bf00      	nop
 8003408:	20000190 	.word	0x20000190

0800340c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *         This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
 8003416:	460b      	mov	r3, r1
 8003418:	80bb      	strh	r3, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800341e:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <BSP_LCD_DisplayChar+0x50>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003428:	490c      	ldr	r1, [pc, #48]	@ (800345c <BSP_LCD_DisplayChar+0x50>)
 800342a:	6889      	ldr	r1, [r1, #8]
 800342c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800342e:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <BSP_LCD_DisplayChar+0x50>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	889b      	ldrh	r3, [r3, #4]
 8003438:	3307      	adds	r3, #7
 800343a:	2b00      	cmp	r3, #0
 800343c:	da00      	bge.n	8003440 <BSP_LCD_DisplayChar+0x34>
 800343e:	3307      	adds	r3, #7
 8003440:	10db      	asrs	r3, r3, #3
 8003442:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003446:	441a      	add	r2, r3
 8003448:	88b9      	ldrh	r1, [r7, #4]
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fadf 	bl	8003a10 <DrawChar>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000190 	.word	0x20000190

08003460 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b089      	sub	sp, #36	@ 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60ba      	str	r2, [r7, #8]
 8003468:	461a      	mov	r2, r3
 800346a:	4603      	mov	r3, r0
 800346c:	81fb      	strh	r3, [r7, #14]
 800346e:	460b      	mov	r3, r1
 8003470:	81bb      	strh	r3, [r7, #12]
 8003472:	4613      	mov	r3, r2
 8003474:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003476:	2301      	movs	r3, #1
 8003478:	83fb      	strh	r3, [r7, #30]
 800347a:	2300      	movs	r3, #0
 800347c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800348a:	e002      	b.n	8003492 <BSP_LCD_DisplayStringAt+0x32>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	3301      	adds	r3, #1
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	617a      	str	r2, [r7, #20]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f6      	bne.n	800348c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800349e:	f7ff fefd 	bl	800329c <BSP_LCD_GetXSize>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b38      	ldr	r3, [pc, #224]	@ (8003588 <BSP_LCD_DisplayStringAt+0x128>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	889b      	ldrh	r3, [r3, #4]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d014      	beq.n	80034e0 <BSP_LCD_DisplayStringAt+0x80>
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	dc23      	bgt.n	8003502 <BSP_LCD_DisplayStringAt+0xa2>
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d002      	beq.n	80034c4 <BSP_LCD_DisplayStringAt+0x64>
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d011      	beq.n	80034e6 <BSP_LCD_DisplayStringAt+0x86>
 80034c2:	e01e      	b.n	8003502 <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003588 <BSP_LCD_DisplayStringAt+0x128>)
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	8892      	ldrh	r2, [r2, #4]
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	89fb      	ldrh	r3, [r7, #14]
 80034da:	4413      	add	r3, r2
 80034dc:	83fb      	strh	r3, [r7, #30]
      break;
 80034de:	e013      	b.n	8003508 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	83fb      	strh	r3, [r7, #30]
      break;
 80034e4:	e010      	b.n	8003508 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	4b26      	ldr	r3, [pc, #152]	@ (8003588 <BSP_LCD_DisplayStringAt+0x128>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	889b      	ldrh	r3, [r3, #4]
 80034f4:	fb12 f303 	smulbb	r3, r2, r3
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	89fb      	ldrh	r3, [r7, #14]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	83fb      	strh	r3, [r7, #30]
      break;
 8003500:	e002      	b.n	8003508 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8003502:	89fb      	ldrh	r3, [r7, #14]
 8003504:	83fb      	strh	r3, [r7, #30]
      break;
 8003506:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8003508:	8bfb      	ldrh	r3, [r7, #30]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <BSP_LCD_DisplayStringAt+0xb6>
 800350e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da15      	bge.n	8003542 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800351a:	e012      	b.n	8003542 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	89b9      	ldrh	r1, [r7, #12]
 8003522:	8bfb      	ldrh	r3, [r7, #30]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff71 	bl	800340c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800352a:	4b17      	ldr	r3, [pc, #92]	@ (8003588 <BSP_LCD_DisplayStringAt+0x128>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	889a      	ldrh	r2, [r3, #4]
 8003530:	8bfb      	ldrh	r3, [r7, #30]
 8003532:	4413      	add	r3, r2
 8003534:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3301      	adds	r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
    i++;
 800353c:	8bbb      	ldrh	r3, [r7, #28]
 800353e:	3301      	adds	r3, #1
 8003540:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2dc      	uxtb	r4, r3
 8003550:	f7ff fea4 	bl	800329c <BSP_LCD_GetXSize>
 8003554:	4601      	mov	r1, r0
 8003556:	8bbb      	ldrh	r3, [r7, #28]
 8003558:	4a0b      	ldr	r2, [pc, #44]	@ (8003588 <BSP_LCD_DisplayStringAt+0x128>)
 800355a:	6892      	ldr	r2, [r2, #8]
 800355c:	8892      	ldrh	r2, [r2, #4]
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	b29b      	uxth	r3, r3
 8003566:	4a08      	ldr	r2, [pc, #32]	@ (8003588 <BSP_LCD_DisplayStringAt+0x128>)
 8003568:	6892      	ldr	r2, [r2, #8]
 800356a:	8892      	ldrh	r2, [r2, #4]
 800356c:	4293      	cmp	r3, r2
 800356e:	bf2c      	ite	cs
 8003570:	2301      	movcs	r3, #1
 8003572:	2300      	movcc	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	4023      	ands	r3, r4
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ce      	bne.n	800351c <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	3724      	adds	r7, #36	@ 0x24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	20000190 	.word	0x20000190

0800358c <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003598:	f7ff fec8 	bl	800332c <BSP_LCD_GetFont>
 800359c:	4603      	mov	r3, r0
 800359e:	88db      	ldrh	r3, [r3, #6]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	fb12 f303 	smulbb	r3, r2, r3
 80035a6:	b299      	uxth	r1, r3
 80035a8:	2303      	movs	r3, #3
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	2000      	movs	r0, #0
 80035ae:	f7ff ff57 	bl	8003460 <BSP_LCD_DisplayStringAt>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
 80035c6:	460b      	mov	r3, r1
 80035c8:	80bb      	strh	r3, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <BSP_LCD_DrawPixel+0x34>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 80035d8:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <BSP_LCD_DrawPixel+0x34>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	88b9      	ldrh	r1, [r7, #4]
 80035e2:	88f8      	ldrh	r0, [r7, #6]
 80035e4:	4798      	blx	r3
  }
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	2000019c 	.word	0x2000019c

080035f4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	80fb      	strh	r3, [r7, #6]
 80035fe:	460b      	mov	r3, r1
 8003600:	80bb      	strh	r3, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 800360a:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <BSP_LCD_DrawHLine+0x6c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <BSP_LCD_DrawHLine+0x6c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6a1c      	ldr	r4, [r3, #32]
 800361a:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <BSP_LCD_DrawHLine+0x70>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b298      	uxth	r0, r3
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	88ba      	ldrh	r2, [r7, #4]
 8003624:	88f9      	ldrh	r1, [r7, #6]
 8003626:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003628:	e015      	b.n	8003656 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e00e      	b.n	800364e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	b29a      	uxth	r2, r3
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	4413      	add	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	4a0a      	ldr	r2, [pc, #40]	@ (8003664 <BSP_LCD_DrawHLine+0x70>)
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	b292      	uxth	r2, r2
 8003640:	88b9      	ldrh	r1, [r7, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ffba 	bl	80035bc <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3301      	adds	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	429a      	cmp	r2, r3
 8003654:	d3ec      	bcc.n	8003630 <BSP_LCD_DrawHLine+0x3c>
}
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	bf00      	nop
 8003660:	2000019c 	.word	0x2000019c
 8003664:	20000190 	.word	0x20000190

08003668 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
 8003672:	460b      	mov	r3, r1
 8003674:	80bb      	strh	r3, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	f1c3 0303 	rsb	r3, r3, #3
 8003682:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003688:	887b      	ldrh	r3, [r7, #2]
 800368a:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 800368c:	e09a      	b.n	80037c4 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	b29a      	uxth	r2, r3
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	4413      	add	r3, r2
 8003696:	b298      	uxth	r0, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	b29b      	uxth	r3, r3
 800369c:	88ba      	ldrh	r2, [r7, #4]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4a4d      	ldr	r2, [pc, #308]	@ (80037d8 <BSP_LCD_DrawCircle+0x170>)
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	b292      	uxth	r2, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7ff ff87 	bl	80035bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	b298      	uxth	r0, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	88ba      	ldrh	r2, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4a45      	ldr	r2, [pc, #276]	@ (80037d8 <BSP_LCD_DrawCircle+0x170>)
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	b292      	uxth	r2, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	f7ff ff77 	bl	80035bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	4413      	add	r3, r2
 80036d6:	b298      	uxth	r0, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	88ba      	ldrh	r2, [r7, #4]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4a3d      	ldr	r2, [pc, #244]	@ (80037d8 <BSP_LCD_DrawCircle+0x170>)
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	b292      	uxth	r2, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7ff ff67 	bl	80035bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	b298      	uxth	r0, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	88ba      	ldrh	r2, [r7, #4]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	b29b      	uxth	r3, r3
 8003702:	4a35      	ldr	r2, [pc, #212]	@ (80037d8 <BSP_LCD_DrawCircle+0x170>)
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	b292      	uxth	r2, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7ff ff57 	bl	80035bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	b29a      	uxth	r2, r3
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	4413      	add	r3, r2
 8003716:	b298      	uxth	r0, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	b29a      	uxth	r2, r3
 800371c:	88bb      	ldrh	r3, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	4a2d      	ldr	r2, [pc, #180]	@ (80037d8 <BSP_LCD_DrawCircle+0x170>)
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	b292      	uxth	r2, r2
 8003728:	4619      	mov	r1, r3
 800372a:	f7ff ff47 	bl	80035bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	b29b      	uxth	r3, r3
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	b298      	uxth	r0, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	b29a      	uxth	r2, r3
 800373c:	88bb      	ldrh	r3, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	b29b      	uxth	r3, r3
 8003742:	4a25      	ldr	r2, [pc, #148]	@ (80037d8 <BSP_LCD_DrawCircle+0x170>)
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	b292      	uxth	r2, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f7ff ff37 	bl	80035bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	b29a      	uxth	r2, r3
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	4413      	add	r3, r2
 8003756:	b298      	uxth	r0, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	b29a      	uxth	r2, r3
 800375c:	88bb      	ldrh	r3, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	b29b      	uxth	r3, r3
 8003762:	4a1d      	ldr	r2, [pc, #116]	@ (80037d8 <BSP_LCD_DrawCircle+0x170>)
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	b292      	uxth	r2, r2
 8003768:	4619      	mov	r1, r3
 800376a:	f7ff ff27 	bl	80035bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);   
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	b29b      	uxth	r3, r3
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	b298      	uxth	r0, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	b29a      	uxth	r2, r3
 800377c:	88bb      	ldrh	r3, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	b29b      	uxth	r3, r3
 8003782:	4a15      	ldr	r2, [pc, #84]	@ (80037d8 <BSP_LCD_DrawCircle+0x170>)
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	b292      	uxth	r2, r2
 8003788:	4619      	mov	r1, r3
 800378a:	f7ff ff17 	bl	80035bc <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800378e:	4813      	ldr	r0, [pc, #76]	@ (80037dc <BSP_LCD_DrawCircle+0x174>)
 8003790:	f7ff fdbc 	bl	800330c <BSP_LCD_SetFont>

    if (decision < 0)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	da06      	bge.n	80037a8 <BSP_LCD_DrawCircle+0x140>
    { 
      decision += (current_x << 2) + 6;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	009a      	lsls	r2, r3, #2
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	4413      	add	r3, r2
 80037a2:	3306      	adds	r3, #6
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e00a      	b.n	80037be <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	009a      	lsls	r2, r3, #2
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4413      	add	r3, r2
 80037b4:	330a      	adds	r3, #10
 80037b6:	617b      	str	r3, [r7, #20]
      current_y--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3301      	adds	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	f67f af60 	bls.w	800368e <BSP_LCD_DrawCircle+0x26>
  } 
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000190 	.word	0x20000190
 80037dc:	20000098 	.word	0x20000098

080037e0 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4604      	mov	r4, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	4611      	mov	r1, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	80fb      	strh	r3, [r7, #6]
 80037f2:	4603      	mov	r3, r0
 80037f4:	80bb      	strh	r3, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	807b      	strh	r3, [r7, #2]
 80037fa:	4613      	mov	r3, r2
 80037fc:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80037fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <BSP_LCD_FillRect+0x50>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fd61 	bl	80032cc <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 800380a:	88bb      	ldrh	r3, [r7, #4]
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	80ba      	strh	r2, [r7, #4]
 8003810:	887a      	ldrh	r2, [r7, #2]
 8003812:	88f8      	ldrh	r0, [r7, #6]
 8003814:	4619      	mov	r1, r3
 8003816:	f7ff feed 	bl	80035f4 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 800381a:	883b      	ldrh	r3, [r7, #0]
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	803a      	strh	r2, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f2      	bne.n	800380a <BSP_LCD_FillRect+0x2a>
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	bf00      	nop
 8003830:	20000190 	.word	0x20000190

08003834 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	80fb      	strh	r3, [r7, #6]
 800383e:	460b      	mov	r3, r1
 8003840:	80bb      	strh	r3, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */ 
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	f1c3 0303 	rsb	r3, r3, #3
 800384e:	617b      	str	r3, [r7, #20]

  current_x = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003858:	4b3e      	ldr	r3, [pc, #248]	@ (8003954 <BSP_LCD_FillCircle+0x120>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fd34 	bl	80032cc <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 8003864:	e061      	b.n	800392a <BSP_LCD_FillCircle+0xf6>
  {
    if(current_y > 0) 
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d021      	beq.n	80038b0 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	b29b      	uxth	r3, r3
 8003870:	88fa      	ldrh	r2, [r7, #6]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	b298      	uxth	r0, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	b29a      	uxth	r2, r3
 800387a:	88bb      	ldrh	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	b299      	uxth	r1, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	b29b      	uxth	r3, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	f7ff feb3 	bl	80035f4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	b29b      	uxth	r3, r3
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	b298      	uxth	r0, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	b29b      	uxth	r3, r3
 800389c:	88ba      	ldrh	r2, [r7, #4]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	b299      	uxth	r1, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7ff fea2 	bl	80035f4 <BSP_LCD_DrawHLine>
    }

    if(current_x > 0) 
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d021      	beq.n	80038fa <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	b298      	uxth	r0, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	88ba      	ldrh	r2, [r7, #4]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	b299      	uxth	r1, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	f7ff fe8e 	bl	80035f4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	b298      	uxth	r0, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	88bb      	ldrh	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	b299      	uxth	r1, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	f7ff fe7d 	bl	80035f4 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	da06      	bge.n	800390e <BSP_LCD_FillCircle+0xda>
    { 
      decision += (current_x << 2) + 6;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	009a      	lsls	r2, r3, #2
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4413      	add	r3, r2
 8003908:	3306      	adds	r3, #6
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e00a      	b.n	8003924 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	009a      	lsls	r2, r3, #2
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	4413      	add	r3, r2
 800391a:	330a      	adds	r3, #10
 800391c:	617b      	str	r3, [r7, #20]
      current_y--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3b01      	subs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	3301      	adds	r3, #1
 8003928:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	429a      	cmp	r2, r3
 8003930:	d999      	bls.n	8003866 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003932:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <BSP_LCD_FillCircle+0x120>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fcc7 	bl	80032cc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	88b9      	ldrh	r1, [r7, #4]
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fe8f 	bl	8003668 <BSP_LCD_DrawCircle>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000190 	.word	0x20000190

08003958 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	4b27      	ldr	r3, [pc, #156]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	4a26      	ldr	r2, [pc, #152]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	6313      	str	r3, [r2, #48]	@ 0x30
 800396e:	4b24      	ldr	r3, [pc, #144]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	4b20      	ldr	r3, [pc, #128]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 8003984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003988:	6313      	str	r3, [r2, #48]	@ 0x30
 800398a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	4b19      	ldr	r3, [pc, #100]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	4a18      	ldr	r2, [pc, #96]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 80039a0:	f043 0320 	orr.w	r3, r3, #32
 80039a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a6:	4b16      	ldr	r3, [pc, #88]	@ (8003a00 <BSP_LCD_MspInit+0xa8>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 80039b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80039c0:	2301      	movs	r3, #1
 80039c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	4619      	mov	r1, r3
 80039ca:	480e      	ldr	r0, [pc, #56]	@ (8003a04 <BSP_LCD_MspInit+0xac>)
 80039cc:	f000 fa62 	bl	8003e94 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80039d0:	2310      	movs	r3, #16
 80039d2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	4619      	mov	r1, r3
 80039de:	480a      	ldr	r0, [pc, #40]	@ (8003a08 <BSP_LCD_MspInit+0xb0>)
 80039e0:	f000 fa58 	bl	8003e94 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80039e4:	2320      	movs	r3, #32
 80039e6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80039e8:	2301      	movs	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	4619      	mov	r1, r3
 80039f2:	4806      	ldr	r0, [pc, #24]	@ (8003a0c <BSP_LCD_MspInit+0xb4>)
 80039f4:	f000 fa4e 	bl	8003e94 <HAL_GPIO_Init>
}
 80039f8:	bf00      	nop
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020c00 	.word	0x40020c00
 8003a08:	40021800 	.word	0x40021800
 8003a0c:	40021400 	.word	0x40021400

08003a10 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	603a      	str	r2, [r7, #0]
 8003a1a:	80fb      	strh	r3, [r7, #6]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8003a28:	4b45      	ldr	r3, [pc, #276]	@ (8003b40 <DrawChar+0x130>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	88db      	ldrh	r3, [r3, #6]
 8003a2e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8003a30:	4b43      	ldr	r3, [pc, #268]	@ (8003b40 <DrawChar+0x130>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	889b      	ldrh	r3, [r3, #4]
 8003a36:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003a38:	8a3b      	ldrh	r3, [r7, #16]
 8003a3a:	3307      	adds	r3, #7
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da00      	bge.n	8003a42 <DrawChar+0x32>
 8003a40:	3307      	adds	r3, #7
 8003a42:	10db      	asrs	r3, r3, #3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	8a3b      	ldrh	r3, [r7, #16]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e069      	b.n	8003b2c <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003a58:	8a3b      	ldrh	r3, [r7, #16]
 8003a5a:	3307      	adds	r3, #7
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	da00      	bge.n	8003a62 <DrawChar+0x52>
 8003a60:	3307      	adds	r3, #7
 8003a62:	10db      	asrs	r3, r3, #3
 8003a64:	461a      	mov	r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003a72:	8a3b      	ldrh	r3, [r7, #16]
 8003a74:	3307      	adds	r3, #7
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	da00      	bge.n	8003a7c <DrawChar+0x6c>
 8003a7a:	3307      	adds	r3, #7
 8003a7c:	10db      	asrs	r3, r3, #3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d002      	beq.n	8003a88 <DrawChar+0x78>
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d004      	beq.n	8003a90 <DrawChar+0x80>
 8003a86:	e00c      	b.n	8003aa2 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	617b      	str	r3, [r7, #20]
      break;    
 8003a8e:	e016      	b.n	8003abe <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	3201      	adds	r2, #1
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
      break;
 8003aa0:	e00d      	b.n	8003abe <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	041a      	lsls	r2, r3, #16
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	3202      	adds	r2, #2
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
      break;
 8003abc:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e029      	b.n	8003b18 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003ac4:	8a3a      	ldrh	r2, [r7, #16]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad2      	subs	r2, r2, r3
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	4413      	add	r3, r2
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	4a15      	ldr	r2, [pc, #84]	@ (8003b40 <DrawChar+0x130>)
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	b292      	uxth	r2, r2
 8003af0:	88b9      	ldrh	r1, [r7, #4]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fd62 	bl	80035bc <BSP_LCD_DrawPixel>
 8003af8:	e00b      	b.n	8003b12 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	4413      	add	r3, r2
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	4a0e      	ldr	r2, [pc, #56]	@ (8003b40 <DrawChar+0x130>)
 8003b06:	6852      	ldr	r2, [r2, #4]
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	88b9      	ldrh	r1, [r7, #4]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fd55 	bl	80035bc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	8a3b      	ldrh	r3, [r7, #16]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d3d1      	bcc.n	8003ac4 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8003b20:	88bb      	ldrh	r3, [r7, #4]
 8003b22:	3301      	adds	r3, #1
 8003b24:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	8a7b      	ldrh	r3, [r7, #18]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d391      	bcc.n	8003a58 <DrawChar+0x48>
  }
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000190 	.word	0x20000190

08003b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <HAL_Init+0x40>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b84 <HAL_Init+0x40>)
 8003b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <HAL_Init+0x40>)
 8003b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b60:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a07      	ldr	r2, [pc, #28]	@ (8003b84 <HAL_Init+0x40>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	f000 f94f 	bl	8003e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f000 f808 	bl	8003b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b78:	f7fd fb6c 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00

08003b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b90:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_InitTick+0x54>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <HAL_InitTick+0x58>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f967 	bl	8003e7a <HAL_SYSTICK_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00e      	b.n	8003bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d80a      	bhi.n	8003bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f000 f92f 	bl	8003e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc8:	4a06      	ldr	r2, [pc, #24]	@ (8003be4 <HAL_InitTick+0x5c>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	200000a4 	.word	0x200000a4
 8003be4:	200000a0 	.word	0x200000a0

08003be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bec:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <HAL_IncTick+0x20>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <HAL_IncTick+0x24>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a04      	ldr	r2, [pc, #16]	@ (8003c0c <HAL_IncTick+0x24>)
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	200000a4 	.word	0x200000a4
 8003c0c:	200001a0 	.word	0x200001a0

08003c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return uwTick;
 8003c14:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_GetTick+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	200001a0 	.word	0x200001a0

08003c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7ff ffee 	bl	8003c10 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d005      	beq.n	8003c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_Delay+0x44>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c4e:	bf00      	nop
 8003c50:	f7ff ffde 	bl	8003c10 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d8f7      	bhi.n	8003c50 <HAL_Delay+0x28>
  {
  }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200000a4 	.word	0x200000a4

08003c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	@ (8003cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	60d3      	str	r3, [r2, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cbc:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	0a1b      	lsrs	r3, r3, #8
 8003cc2:	f003 0307 	and.w	r3, r3, #7
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	db0b      	blt.n	8003cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	4907      	ldr	r1, [pc, #28]	@ (8003d0c <__NVIC_EnableIRQ+0x38>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000e100 	.word	0xe000e100

08003d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	6039      	str	r1, [r7, #0]
 8003d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	db0a      	blt.n	8003d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	490c      	ldr	r1, [pc, #48]	@ (8003d5c <__NVIC_SetPriority+0x4c>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	0112      	lsls	r2, r2, #4
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	440b      	add	r3, r1
 8003d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d38:	e00a      	b.n	8003d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4908      	ldr	r1, [pc, #32]	@ (8003d60 <__NVIC_SetPriority+0x50>)
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	3b04      	subs	r3, #4
 8003d48:	0112      	lsls	r2, r2, #4
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	761a      	strb	r2, [r3, #24]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000e100 	.word	0xe000e100
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	@ 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f1c3 0307 	rsb	r3, r3, #7
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf28      	it	cs
 8003d82:	2304      	movcs	r3, #4
 8003d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d902      	bls.n	8003d94 <NVIC_EncodePriority+0x30>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3b03      	subs	r3, #3
 8003d92:	e000      	b.n	8003d96 <NVIC_EncodePriority+0x32>
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	401a      	ands	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dac:	f04f 31ff 	mov.w	r1, #4294967295
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	43d9      	mvns	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	4313      	orrs	r3, r2
         );
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3724      	adds	r7, #36	@ 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ddc:	d301      	bcc.n	8003de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dde:	2301      	movs	r3, #1
 8003de0:	e00f      	b.n	8003e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003de2:	4a0a      	ldr	r2, [pc, #40]	@ (8003e0c <SysTick_Config+0x40>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dea:	210f      	movs	r1, #15
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	f7ff ff8e 	bl	8003d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <SysTick_Config+0x40>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dfa:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <SysTick_Config+0x40>)
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	e000e010 	.word	0xe000e010

08003e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff29 	bl	8003c70 <__NVIC_SetPriorityGrouping>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e38:	f7ff ff3e 	bl	8003cb8 <__NVIC_GetPriorityGrouping>
 8003e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	6978      	ldr	r0, [r7, #20]
 8003e44:	f7ff ff8e 	bl	8003d64 <NVIC_EncodePriority>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff5d 	bl	8003d10 <__NVIC_SetPriority>
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff31 	bl	8003cd4 <__NVIC_EnableIRQ>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ffa2 	bl	8003dcc <SysTick_Config>
 8003e88:	4603      	mov	r3, r0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e165      	b.n	800417c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f040 8154 	bne.w	8004176 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d005      	beq.n	8003ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d130      	bne.n	8003f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0201 	and.w	r2, r3, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d017      	beq.n	8003f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d123      	bne.n	8003fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	08da      	lsrs	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3208      	adds	r2, #8
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0203 	and.w	r2, r3, #3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80ae 	beq.w	8004176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b5d      	ldr	r3, [pc, #372]	@ (8004194 <HAL_GPIO_Init+0x300>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	4a5c      	ldr	r2, [pc, #368]	@ (8004194 <HAL_GPIO_Init+0x300>)
 8004024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004028:	6453      	str	r3, [r2, #68]	@ 0x44
 800402a:	4b5a      	ldr	r3, [pc, #360]	@ (8004194 <HAL_GPIO_Init+0x300>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004036:	4a58      	ldr	r2, [pc, #352]	@ (8004198 <HAL_GPIO_Init+0x304>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4f      	ldr	r2, [pc, #316]	@ (800419c <HAL_GPIO_Init+0x308>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d025      	beq.n	80040ae <HAL_GPIO_Init+0x21a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4e      	ldr	r2, [pc, #312]	@ (80041a0 <HAL_GPIO_Init+0x30c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <HAL_GPIO_Init+0x216>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4d      	ldr	r2, [pc, #308]	@ (80041a4 <HAL_GPIO_Init+0x310>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d019      	beq.n	80040a6 <HAL_GPIO_Init+0x212>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4c      	ldr	r2, [pc, #304]	@ (80041a8 <HAL_GPIO_Init+0x314>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_GPIO_Init+0x20e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4b      	ldr	r2, [pc, #300]	@ (80041ac <HAL_GPIO_Init+0x318>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00d      	beq.n	800409e <HAL_GPIO_Init+0x20a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4a      	ldr	r2, [pc, #296]	@ (80041b0 <HAL_GPIO_Init+0x31c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <HAL_GPIO_Init+0x206>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a49      	ldr	r2, [pc, #292]	@ (80041b4 <HAL_GPIO_Init+0x320>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_GPIO_Init+0x202>
 8004092:	2306      	movs	r3, #6
 8004094:	e00c      	b.n	80040b0 <HAL_GPIO_Init+0x21c>
 8004096:	2307      	movs	r3, #7
 8004098:	e00a      	b.n	80040b0 <HAL_GPIO_Init+0x21c>
 800409a:	2305      	movs	r3, #5
 800409c:	e008      	b.n	80040b0 <HAL_GPIO_Init+0x21c>
 800409e:	2304      	movs	r3, #4
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x21c>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e004      	b.n	80040b0 <HAL_GPIO_Init+0x21c>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e002      	b.n	80040b0 <HAL_GPIO_Init+0x21c>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_GPIO_Init+0x21c>
 80040ae:	2300      	movs	r3, #0
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	f002 0203 	and.w	r2, r2, #3
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	4093      	lsls	r3, r2
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c0:	4935      	ldr	r1, [pc, #212]	@ (8004198 <HAL_GPIO_Init+0x304>)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	3302      	adds	r3, #2
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ce:	4b3a      	ldr	r3, [pc, #232]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040f2:	4a31      	ldr	r2, [pc, #196]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f8:	4b2f      	ldr	r3, [pc, #188]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800411c:	4a26      	ldr	r2, [pc, #152]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004122:	4b25      	ldr	r3, [pc, #148]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004146:	4a1c      	ldr	r2, [pc, #112]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800414c:	4b1a      	ldr	r3, [pc, #104]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004170:	4a11      	ldr	r2, [pc, #68]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3301      	adds	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b0f      	cmp	r3, #15
 8004180:	f67f ae96 	bls.w	8003eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3724      	adds	r7, #36	@ 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
 8004198:	40013800 	.word	0x40013800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40020400 	.word	0x40020400
 80041a4:	40020800 	.word	0x40020800
 80041a8:	40020c00 	.word	0x40020c00
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40021400 	.word	0x40021400
 80041b4:	40021800 	.word	0x40021800
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e001      	b.n	80041de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004208:	e003      	b.n	8004212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	619a      	str	r2, [r3, #24]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800421e:	b590      	push	{r4, r7, lr}
 8004220:	b08b      	sub	sp, #44	@ 0x2c
 8004222:	af04      	add	r7, sp, #16
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	4608      	mov	r0, r1
 8004228:	4611      	mov	r1, r2
 800422a:	461a      	mov	r2, r3
 800422c:	4603      	mov	r3, r0
 800422e:	70fb      	strb	r3, [r7, #3]
 8004230:	460b      	mov	r3, r1
 8004232:	70bb      	strb	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004238:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800423a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_HCD_HC_Init+0x2c>
 8004246:	2302      	movs	r3, #2
 8004248:	e09d      	b.n	8004386 <HAL_HCD_HC_Init+0x168>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	3319      	adds	r3, #25
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004266:	78fa      	ldrb	r2, [r7, #3]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	3314      	adds	r3, #20
 8004276:	787a      	ldrb	r2, [r7, #1]
 8004278:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	3315      	adds	r3, #21
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	3326      	adds	r3, #38	@ 0x26
 800429e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80042a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	78bb      	ldrb	r3, [r7, #2]
 80042a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ac:	b2d8      	uxtb	r0, r3
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	3316      	adds	r3, #22
 80042bc:	4602      	mov	r2, r0
 80042be:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	4619      	mov	r1, r3
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb82 	bl	80049ce <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80042ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da0a      	bge.n	80042e8 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	3317      	adds	r3, #23
 80042e2:	2201      	movs	r2, #1
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e009      	b.n	80042fc <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	3317      	adds	r3, #23
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f004 f897 	bl	8008434 <USB_GetHostSpeed>
 8004306:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004308:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10b      	bne.n	8004328 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004310:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_HCD_HC_Init+0x10a>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d104      	bne.n	8004328 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2bbc      	cmp	r3, #188	@ 0xbc
 8004322:	d901      	bls.n	8004328 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004324:	23bc      	movs	r3, #188	@ 0xbc
 8004326:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	3318      	adds	r3, #24
 8004338:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800433c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	b298      	uxth	r0, r3
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	3328      	adds	r3, #40	@ 0x28
 8004352:	4602      	mov	r2, r0
 8004354:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	b29b      	uxth	r3, r3
 800435e:	787c      	ldrb	r4, [r7, #1]
 8004360:	78ba      	ldrb	r2, [r7, #2]
 8004362:	78f9      	ldrb	r1, [r7, #3]
 8004364:	9302      	str	r3, [sp, #8]
 8004366:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	4623      	mov	r3, r4
 8004374:	f004 f876 	bl	8008464 <USB_HC_Init>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd90      	pop	{r4, r7, pc}
	...

08004390 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	70fb      	strb	r3, [r7, #3]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70bb      	strb	r3, [r7, #2]
 80043a6:	4613      	mov	r3, r2
 80043a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	3317      	adds	r3, #23
 80043ba:	78ba      	ldrb	r2, [r7, #2]
 80043bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	3326      	adds	r3, #38	@ 0x26
 80043ce:	787a      	ldrb	r2, [r7, #1]
 80043d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80043d2:	7c3b      	ldrb	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d114      	bne.n	8004402 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	332a      	adds	r3, #42	@ 0x2a
 80043e8:	2203      	movs	r2, #3
 80043ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	3319      	adds	r3, #25
 80043fc:	7f3a      	ldrb	r2, [r7, #28]
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e009      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	332a      	adds	r3, #42	@ 0x2a
 8004412:	2202      	movs	r2, #2
 8004414:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004416:	787b      	ldrb	r3, [r7, #1]
 8004418:	2b03      	cmp	r3, #3
 800441a:	f200 8102 	bhi.w	8004622 <HAL_HCD_HC_SubmitRequest+0x292>
 800441e:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004435 	.word	0x08004435
 8004428:	0800460d 	.word	0x0800460d
 800442c:	080044f9 	.word	0x080044f9
 8004430:	08004583 	.word	0x08004583
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004434:	7c3b      	ldrb	r3, [r7, #16]
 8004436:	2b01      	cmp	r3, #1
 8004438:	f040 80f5 	bne.w	8004626 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800443c:	78bb      	ldrb	r3, [r7, #2]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d12d      	bne.n	800449e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004442:	8b3b      	ldrh	r3, [r7, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	333d      	adds	r3, #61	@ 0x3d
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	333d      	adds	r3, #61	@ 0x3d
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	332a      	adds	r3, #42	@ 0x2a
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004486:	e0ce      	b.n	8004626 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	332a      	adds	r3, #42	@ 0x2a
 8004498:	2202      	movs	r2, #2
 800449a:	701a      	strb	r2, [r3, #0]
      break;
 800449c:	e0c3      	b.n	8004626 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	331a      	adds	r3, #26
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f040 80b8 	bne.w	8004626 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	333c      	adds	r3, #60	@ 0x3c
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	332a      	adds	r3, #42	@ 0x2a
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
      break;
 80044e0:	e0a1      	b.n	8004626 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	332a      	adds	r3, #42	@ 0x2a
 80044f2:	2202      	movs	r2, #2
 80044f4:	701a      	strb	r2, [r3, #0]
      break;
 80044f6:	e096      	b.n	8004626 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80044f8:	78bb      	ldrb	r3, [r7, #2]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d120      	bne.n	8004540 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	333d      	adds	r3, #61	@ 0x3d
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	332a      	adds	r3, #42	@ 0x2a
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004528:	e07e      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	332a      	adds	r3, #42	@ 0x2a
 800453a:	2202      	movs	r2, #2
 800453c:	701a      	strb	r2, [r3, #0]
      break;
 800453e:	e073      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	333c      	adds	r3, #60	@ 0x3c
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	332a      	adds	r3, #42	@ 0x2a
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
      break;
 800456a:	e05d      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	332a      	adds	r3, #42	@ 0x2a
 800457c:	2202      	movs	r2, #2
 800457e:	701a      	strb	r2, [r3, #0]
      break;
 8004580:	e052      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004582:	78bb      	ldrb	r3, [r7, #2]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d120      	bne.n	80045ca <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	333d      	adds	r3, #61	@ 0x3d
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	332a      	adds	r3, #42	@ 0x2a
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80045b2:	e039      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	332a      	adds	r3, #42	@ 0x2a
 80045c4:	2202      	movs	r2, #2
 80045c6:	701a      	strb	r2, [r3, #0]
      break;
 80045c8:	e02e      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	333c      	adds	r3, #60	@ 0x3c
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	332a      	adds	r3, #42	@ 0x2a
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
      break;
 80045f4:	e018      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	332a      	adds	r3, #42	@ 0x2a
 8004606:	2202      	movs	r2, #2
 8004608:	701a      	strb	r2, [r3, #0]
      break;
 800460a:	e00d      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	332a      	adds	r3, #42	@ 0x2a
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
      break;
 8004620:	e002      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004626:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	332c      	adds	r3, #44	@ 0x2c
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	8b39      	ldrh	r1, [r7, #24]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4403      	add	r3, r0
 800464c:	3334      	adds	r3, #52	@ 0x34
 800464e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334c      	adds	r3, #76	@ 0x4c
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	3338      	adds	r3, #56	@ 0x38
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3315      	adds	r3, #21
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	334d      	adds	r3, #77	@ 0x4d
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	3310      	adds	r3, #16
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	1d19      	adds	r1, r3, #4
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	799b      	ldrb	r3, [r3, #6]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f003 ffe8 	bl	8008690 <USB_HC_StartXfer>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop

080046cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f003 fdf8 	bl	80082d8 <USB_GetMode>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	f040 80fb 	bne.w	80048e6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f003 fdbb 	bl	8008270 <USB_ReadInterrupts>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80f1 	beq.w	80048e4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f003 fdb2 	bl	8008270 <USB_ReadInterrupts>
 800470c:	4603      	mov	r3, r0
 800470e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004716:	d104      	bne.n	8004722 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004720:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f003 fda2 	bl	8008270 <USB_ReadInterrupts>
 800472c:	4603      	mov	r3, r0
 800472e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004736:	d104      	bne.n	8004742 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004740:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f003 fd92 	bl	8008270 <USB_ReadInterrupts>
 800474c:	4603      	mov	r3, r0
 800474e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004756:	d104      	bne.n	8004762 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004760:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f003 fd82 	bl	8008270 <USB_ReadInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d103      	bne.n	800477e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2202      	movs	r2, #2
 800477c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fd74 	bl	8008270 <USB_ReadInterrupts>
 8004788:	4603      	mov	r3, r0
 800478a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800478e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004792:	d120      	bne.n	80047d6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800479c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d113      	bne.n	80047d6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80047ae:	2110      	movs	r1, #16
 80047b0:	6938      	ldr	r0, [r7, #16]
 80047b2:	f003 fc67 	bl	8008084 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80047b6:	6938      	ldr	r0, [r7, #16]
 80047b8:	f003 fc96 	bl	80080e8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7a5b      	ldrb	r3, [r3, #9]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d105      	bne.n	80047d0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2101      	movs	r1, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 fd92 	bl	80082f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f005 ff23 	bl	800a61c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f003 fd48 	bl	8008270 <USB_ReadInterrupts>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047ea:	d102      	bne.n	80047f2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 fd10 	bl	8006212 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f003 fd3a 	bl	8008270 <USB_ReadInterrupts>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b08      	cmp	r3, #8
 8004804:	d106      	bne.n	8004814 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f005 feec 	bl	800a5e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2208      	movs	r2, #8
 8004812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f003 fd29 	bl	8008270 <USB_ReadInterrupts>
 800481e:	4603      	mov	r3, r0
 8004820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004824:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004828:	d139      	bne.n	800489e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f004 f972 	bl	8008b18 <USB_HC_ReadInterrupt>
 8004834:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e025      	b.n	8004888 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d018      	beq.n	8004882 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004862:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004866:	d106      	bne.n	8004876 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8e2 	bl	8004a38 <HCD_HC_IN_IRQHandler>
 8004874:	e005      	b.n	8004882 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 ff44 	bl	800570a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3301      	adds	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	795b      	ldrb	r3, [r3, #5]
 800488c:	461a      	mov	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4293      	cmp	r3, r2
 8004892:	d3d3      	bcc.n	800483c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800489c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f003 fce4 	bl	8008270 <USB_ReadInterrupts>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d101      	bne.n	80048b6 <HAL_HCD_IRQHandler+0x1ea>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_HCD_IRQHandler+0x1ec>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d014      	beq.n	80048e6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0210 	bic.w	r2, r2, #16
 80048ca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 fbc1 	bl	8006054 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0210 	orr.w	r2, r2, #16
 80048e0:	619a      	str	r2, [r3, #24]
 80048e2:	e000      	b.n	80048e6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80048e4:	bf00      	nop
    }
  }
}
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_HCD_Start+0x16>
 80048fe:	2302      	movs	r3, #2
 8004900:	e013      	b.n	800492a <HAL_HCD_Start+0x3e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2101      	movs	r1, #1
 8004910:	4618      	mov	r0, r3
 8004912:	f003 fd56 	bl	80083c2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f003 fb90 	bl	8008040 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_HCD_Stop+0x16>
 8004944:	2302      	movs	r3, #2
 8004946:	e00d      	b.n	8004964 <HAL_HCD_Stop+0x32>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f004 fa10 	bl	8008d7a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f003 fcf8 	bl	800836e <USB_ResetPort>
 800497e:	4603      	mov	r3, r0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	334c      	adds	r3, #76	@ 0x4c
 80049a4:	781b      	ldrb	r3, [r3, #0]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f003 fd38 	bl	8008434 <USB_GetHostSpeed>
 80049c4:	4603      	mov	r3, r0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	460b      	mov	r3, r1
 80049d8:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	331a      	adds	r3, #26
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	331b      	adds	r3, #27
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3325      	adds	r3, #37	@ 0x25
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3324      	adds	r3, #36	@ 0x24
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f003 fc1d 	bl	8008296 <USB_ReadChInterrupts>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d11a      	bne.n	8004a9c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a72:	461a      	mov	r2, r3
 8004a74:	2304      	movs	r3, #4
 8004a76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	334d      	adds	r3, #77	@ 0x4d
 8004a88:	2207      	movs	r2, #7
 8004a8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f004 f850 	bl	8008b3a <USB_HC_Halt>
 8004a9a:	e09e      	b.n	8004bda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f003 fbf6 	bl	8008296 <USB_ReadChInterrupts>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab4:	d11b      	bne.n	8004aee <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ac8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	334d      	adds	r3, #77	@ 0x4d
 8004ada:	2208      	movs	r2, #8
 8004adc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f004 f827 	bl	8008b3a <USB_HC_Halt>
 8004aec:	e075      	b.n	8004bda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f003 fbcd 	bl	8008296 <USB_ReadChInterrupts>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d11a      	bne.n	8004b3c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b12:	461a      	mov	r2, r3
 8004b14:	2308      	movs	r3, #8
 8004b16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	334d      	adds	r3, #77	@ 0x4d
 8004b28:	2206      	movs	r2, #6
 8004b2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f004 f800 	bl	8008b3a <USB_HC_Halt>
 8004b3a:	e04e      	b.n	8004bda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f003 fba6 	bl	8008296 <USB_ReadChInterrupts>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b54:	d11b      	bne.n	8004b8e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b62:	461a      	mov	r2, r3
 8004b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	334d      	adds	r3, #77	@ 0x4d
 8004b7a:	2209      	movs	r2, #9
 8004b7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f003 ffd7 	bl	8008b3a <USB_HC_Halt>
 8004b8c:	e025      	b.n	8004bda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f003 fb7d 	bl	8008296 <USB_ReadChInterrupts>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba2:	2b80      	cmp	r3, #128	@ 0x80
 8004ba4:	d119      	bne.n	8004bda <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2380      	movs	r3, #128	@ 0x80
 8004bb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	334d      	adds	r3, #77	@ 0x4d
 8004bc8:	2207      	movs	r2, #7
 8004bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f003 ffb0 	bl	8008b3a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f003 fb57 	bl	8008296 <USB_ReadChInterrupts>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf2:	d112      	bne.n	8004c1a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f003 ff9c 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c14:	6093      	str	r3, [r2, #8]
 8004c16:	f000 bd75 	b.w	8005704 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f003 fb37 	bl	8008296 <USB_ReadChInterrupts>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	f040 8128 	bne.w	8004e84 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c40:	461a      	mov	r2, r3
 8004c42:	2320      	movs	r3, #32
 8004c44:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	331b      	adds	r3, #27
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d119      	bne.n	8004c90 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004c5c:	78fa      	ldrb	r2, [r7, #3]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	331b      	adds	r3, #27
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	799b      	ldrb	r3, [r3, #6]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3330      	adds	r3, #48	@ 0x30
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	1ac9      	subs	r1, r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4403      	add	r3, r0
 8004ccc:	3338      	adds	r3, #56	@ 0x38
 8004cce:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	334d      	adds	r3, #77	@ 0x4d
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	3344      	adds	r3, #68	@ 0x44
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d04:	461a      	mov	r2, r3
 8004d06:	2301      	movs	r3, #1
 8004d08:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3326      	adds	r3, #38	@ 0x26
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3326      	adds	r3, #38	@ 0x26
 8004d30:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d110      	bne.n	8004d58 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f003 fefb 	bl	8008b3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d50:	461a      	mov	r2, r3
 8004d52:	2310      	movs	r3, #16
 8004d54:	6093      	str	r3, [r2, #8]
 8004d56:	e03d      	b.n	8004dd4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3326      	adds	r3, #38	@ 0x26
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d00a      	beq.n	8004d84 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3326      	adds	r3, #38	@ 0x26
 8004d7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d127      	bne.n	8004dd4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004da2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	334c      	adds	r3, #76	@ 0x4c
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	334c      	adds	r3, #76	@ 0x4c
 8004dc8:	781a      	ldrb	r2, [r3, #0]
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f005 fc32 	bl	800a638 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	799b      	ldrb	r3, [r3, #6]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d13b      	bne.n	8004e54 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	3338      	adds	r3, #56	@ 0x38
 8004dec:	6819      	ldr	r1, [r3, #0]
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4403      	add	r3, r0
 8004dfc:	3328      	adds	r3, #40	@ 0x28
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	440b      	add	r3, r1
 8004e02:	1e59      	subs	r1, r3, #1
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4403      	add	r3, r0
 8004e12:	3328      	adds	r3, #40	@ 0x28
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8470 	beq.w	8005704 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	333c      	adds	r3, #60	@ 0x3c
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	f083 0301 	eor.w	r3, r3, #1
 8004e3c:	b2d8      	uxtb	r0, r3
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	333c      	adds	r3, #60	@ 0x3c
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	f000 bc58 	b.w	8005704 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	333c      	adds	r3, #60	@ 0x3c
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	f083 0301 	eor.w	r3, r3, #1
 8004e6c:	b2d8      	uxtb	r0, r3
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	333c      	adds	r3, #60	@ 0x3c
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	f000 bc40 	b.w	8005704 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f003 fa02 	bl	8008296 <USB_ReadChInterrupts>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d131      	bne.n	8004f00 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2320      	movs	r3, #32
 8004eac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004eae:	78fa      	ldrb	r2, [r7, #3]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	331a      	adds	r3, #26
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f040 841f 	bne.w	8005704 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	331b      	adds	r3, #27
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004eda:	78fa      	ldrb	r2, [r7, #3]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	334d      	adds	r3, #77	@ 0x4d
 8004eea:	2203      	movs	r2, #3
 8004eec:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f003 fe1f 	bl	8008b3a <USB_HC_Halt>
 8004efc:	f000 bc02 	b.w	8005704 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f003 f9c4 	bl	8008296 <USB_ReadChInterrupts>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	f040 8305 	bne.w	8005524 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f26:	461a      	mov	r2, r3
 8004f28:	2302      	movs	r3, #2
 8004f2a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	334d      	adds	r3, #77	@ 0x4d
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d114      	bne.n	8004f6c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f42:	78fa      	ldrb	r2, [r7, #3]
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	334d      	adds	r3, #77	@ 0x4d
 8004f52:	2202      	movs	r2, #2
 8004f54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	334c      	adds	r3, #76	@ 0x4c
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e2cc      	b.n	8005506 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	334d      	adds	r3, #77	@ 0x4d
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d114      	bne.n	8004fac <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	334d      	adds	r3, #77	@ 0x4d
 8004f92:	2202      	movs	r2, #2
 8004f94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	334c      	adds	r3, #76	@ 0x4c
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e2ac      	b.n	8005506 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	334d      	adds	r3, #77	@ 0x4d
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b07      	cmp	r3, #7
 8004fc0:	d00b      	beq.n	8004fda <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	334d      	adds	r3, #77	@ 0x4d
 8004fd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004fd4:	2b09      	cmp	r3, #9
 8004fd6:	f040 80a6 	bne.w	8005126 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	334d      	adds	r3, #77	@ 0x4d
 8004fea:	2202      	movs	r2, #2
 8004fec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3344      	adds	r3, #68	@ 0x44
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1c59      	adds	r1, r3, #1
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4403      	add	r3, r0
 800500e:	3344      	adds	r3, #68	@ 0x44
 8005010:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005012:	78fa      	ldrb	r2, [r7, #3]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	3344      	adds	r3, #68	@ 0x44
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d943      	bls.n	80050b0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3344      	adds	r3, #68	@ 0x44
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	331a      	adds	r3, #26
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d123      	bne.n	800509a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	331b      	adds	r3, #27
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	331c      	adds	r3, #28
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4413      	add	r3, r2
 8005082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	440a      	add	r2, r1
 8005090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005098:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	334c      	adds	r3, #76	@ 0x4c
 80050aa:	2204      	movs	r2, #4
 80050ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80050ae:	e229      	b.n	8005504 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	334c      	adds	r3, #76	@ 0x4c
 80050c0:	2202      	movs	r2, #2
 80050c2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050c4:	78fa      	ldrb	r2, [r7, #3]
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	3326      	adds	r3, #38	@ 0x26
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3326      	adds	r3, #38	@ 0x26
 80050ea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	f040 8209 	bne.w	8005504 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005108:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005110:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800511e:	461a      	mov	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005124:	e1ee      	b.n	8005504 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	334d      	adds	r3, #77	@ 0x4d
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b05      	cmp	r3, #5
 800513a:	f040 80c8 	bne.w	80052ce <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	334d      	adds	r3, #77	@ 0x4d
 800514e:	2202      	movs	r2, #2
 8005150:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	331b      	adds	r3, #27
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	f040 81ce 	bne.w	8005506 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3326      	adds	r3, #38	@ 0x26
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d16b      	bne.n	8005258 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3348      	adds	r3, #72	@ 0x48
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4403      	add	r3, r0
 80051a0:	3348      	adds	r3, #72	@ 0x48
 80051a2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3348      	adds	r3, #72	@ 0x48
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d943      	bls.n	8005242 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3348      	adds	r3, #72	@ 0x48
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	331b      	adds	r3, #27
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3344      	adds	r3, #68	@ 0x44
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d809      	bhi.n	800520c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	331c      	adds	r3, #28
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	440a      	add	r2, r1
 8005222:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800522a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	334c      	adds	r3, #76	@ 0x4c
 800523c:	2204      	movs	r2, #4
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e014      	b.n	800526c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	334c      	adds	r3, #76	@ 0x4c
 8005252:	2202      	movs	r2, #2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e009      	b.n	800526c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	334c      	adds	r3, #76	@ 0x4c
 8005268:	2202      	movs	r2, #2
 800526a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	3326      	adds	r3, #38	@ 0x26
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00b      	beq.n	800529a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005282:	78fa      	ldrb	r2, [r7, #3]
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	3326      	adds	r3, #38	@ 0x26
 8005292:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005294:	2b02      	cmp	r3, #2
 8005296:	f040 8136 	bne.w	8005506 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c6:	461a      	mov	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	e11b      	b.n	8005506 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	334d      	adds	r3, #77	@ 0x4d
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	f040 8081 	bne.w	80053e8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	334d      	adds	r3, #77	@ 0x4d
 80052f6:	2202      	movs	r2, #2
 80052f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	331b      	adds	r3, #27
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	f040 80fa 	bne.w	8005506 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	334c      	adds	r3, #76	@ 0x4c
 8005322:	2202      	movs	r2, #2
 8005324:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	440a      	add	r2, r1
 800533c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005344:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	440a      	add	r2, r1
 800535c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005364:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	78fa      	ldrb	r2, [r7, #3]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	440a      	add	r2, r1
 800537c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005380:	f023 0320 	bic.w	r3, r3, #32
 8005384:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	3326      	adds	r3, #38	@ 0x26
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	3326      	adds	r3, #38	@ 0x26
 80053ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	f040 80a9 	bne.w	8005506 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e0:	461a      	mov	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e08e      	b.n	8005506 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	334d      	adds	r3, #77	@ 0x4d
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d143      	bne.n	8005486 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	334d      	adds	r3, #77	@ 0x4d
 800540e:	2202      	movs	r2, #2
 8005410:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	334c      	adds	r3, #76	@ 0x4c
 8005422:	2202      	movs	r2, #2
 8005424:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	3326      	adds	r3, #38	@ 0x26
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	3326      	adds	r3, #38	@ 0x26
 800544c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800544e:	2b02      	cmp	r3, #2
 8005450:	d159      	bne.n	8005506 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005468:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005470:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4413      	add	r3, r2
 800547a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e03f      	b.n	8005506 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	334d      	adds	r3, #77	@ 0x4d
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d126      	bne.n	80054ea <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	334d      	adds	r3, #77	@ 0x4d
 80054ac:	2202      	movs	r2, #2
 80054ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	4613      	mov	r3, r2
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	1a9b      	subs	r3, r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	3344      	adds	r3, #68	@ 0x44
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	1c59      	adds	r1, r3, #1
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4403      	add	r3, r0
 80054d0:	3344      	adds	r3, #68	@ 0x44
 80054d2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	334c      	adds	r3, #76	@ 0x4c
 80054e4:	2204      	movs	r2, #4
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e00d      	b.n	8005506 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	334d      	adds	r3, #77	@ 0x4d
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	f000 8100 	beq.w	8005702 <HCD_HC_IN_IRQHandler+0xcca>
 8005502:	e000      	b.n	8005506 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005504:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	334c      	adds	r3, #76	@ 0x4c
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f005 f88b 	bl	800a638 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005522:	e0ef      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f002 feb2 	bl	8008296 <USB_ReadChInterrupts>
 8005532:	4603      	mov	r3, r0
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	d12f      	bne.n	800559c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4413      	add	r3, r2
 8005544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005548:	461a      	mov	r2, r3
 800554a:	2340      	movs	r3, #64	@ 0x40
 800554c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	334d      	adds	r3, #77	@ 0x4d
 800555e:	2205      	movs	r2, #5
 8005560:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	331a      	adds	r3, #26
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	3344      	adds	r3, #68	@ 0x44
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	78fa      	ldrb	r2, [r7, #3]
 8005592:	4611      	mov	r1, r2
 8005594:	4618      	mov	r0, r3
 8005596:	f003 fad0 	bl	8008b3a <USB_HC_Halt>
 800559a:	e0b3      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	4611      	mov	r1, r2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f002 fe76 	bl	8008296 <USB_ReadChInterrupts>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	f040 80a7 	bne.w	8005704 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3326      	adds	r3, #38	@ 0x26
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d11b      	bne.n	8005604 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	3344      	adds	r3, #68	@ 0x44
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	334d      	adds	r3, #77	@ 0x4d
 80055f0:	2204      	movs	r2, #4
 80055f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	78fa      	ldrb	r2, [r7, #3]
 80055fa:	4611      	mov	r1, r2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f003 fa9c 	bl	8008b3a <USB_HC_Halt>
 8005602:	e03f      	b.n	8005684 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	3326      	adds	r3, #38	@ 0x26
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	3326      	adds	r3, #38	@ 0x26
 800562a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800562c:	2b02      	cmp	r3, #2
 800562e:	d129      	bne.n	8005684 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	3344      	adds	r3, #68	@ 0x44
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	799b      	ldrb	r3, [r3, #6]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HCD_HC_IN_IRQHandler+0xc2a>
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	331b      	adds	r3, #27
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d110      	bne.n	8005684 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	334d      	adds	r3, #77	@ 0x4d
 8005672:	2204      	movs	r2, #4
 8005674:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f003 fa5b 	bl	8008b3a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005684:	78fa      	ldrb	r2, [r7, #3]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	331b      	adds	r3, #27
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d129      	bne.n	80056ee <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	331b      	adds	r3, #27
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056cc:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	78fa      	ldrb	r2, [r7, #3]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056e8:	f043 0320 	orr.w	r3, r3, #32
 80056ec:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056fa:	461a      	mov	r2, r3
 80056fc:	2310      	movs	r3, #16
 80056fe:	6093      	str	r3, [r2, #8]
 8005700:	e000      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005702:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	78fa      	ldrb	r2, [r7, #3]
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f002 fdb4 	bl	8008296 <USB_ReadChInterrupts>
 800572e:	4603      	mov	r3, r0
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d11b      	bne.n	8005770 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005744:	461a      	mov	r2, r3
 8005746:	2304      	movs	r3, #4
 8005748:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800574a:	78fa      	ldrb	r2, [r7, #3]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	334d      	adds	r3, #77	@ 0x4d
 800575a:	2207      	movs	r2, #7
 800575c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	78fa      	ldrb	r2, [r7, #3]
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f003 f9e7 	bl	8008b3a <USB_HC_Halt>
 800576c:	f000 bc6f 	b.w	800604e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	4611      	mov	r1, r2
 8005778:	4618      	mov	r0, r3
 800577a:	f002 fd8c 	bl	8008296 <USB_ReadChInterrupts>
 800577e:	4603      	mov	r3, r0
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b20      	cmp	r3, #32
 8005786:	f040 8082 	bne.w	800588e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005796:	461a      	mov	r2, r3
 8005798:	2320      	movs	r3, #32
 800579a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800579c:	78fa      	ldrb	r2, [r7, #3]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3319      	adds	r3, #25
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d124      	bne.n	80057fc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3319      	adds	r3, #25
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	334c      	adds	r3, #76	@ 0x4c
 80057d6:	2202      	movs	r2, #2
 80057d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	334d      	adds	r3, #77	@ 0x4d
 80057ea:	2203      	movs	r2, #3
 80057ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	78fa      	ldrb	r2, [r7, #3]
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f003 f99f 	bl	8008b3a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	331a      	adds	r3, #26
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b01      	cmp	r3, #1
 8005810:	f040 841d 	bne.w	800604e <HCD_HC_OUT_IRQHandler+0x944>
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	331b      	adds	r3, #27
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 8411 	bne.w	800604e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	3326      	adds	r3, #38	@ 0x26
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d009      	beq.n	8005856 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	331b      	adds	r3, #27
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	334d      	adds	r3, #77	@ 0x4d
 8005866:	2203      	movs	r2, #3
 8005868:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	78fa      	ldrb	r2, [r7, #3]
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f003 f961 	bl	8008b3a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	3344      	adds	r3, #68	@ 0x44
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e3df      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f002 fcfd 	bl	8008296 <USB_ReadChInterrupts>
 800589c:	4603      	mov	r3, r0
 800589e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a6:	d111      	bne.n	80058cc <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058ba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	78fa      	ldrb	r2, [r7, #3]
 80058c2:	4611      	mov	r1, r2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f003 f938 	bl	8008b3a <USB_HC_Halt>
 80058ca:	e3c0      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	4611      	mov	r1, r2
 80058d4:	4618      	mov	r0, r3
 80058d6:	f002 fcde 	bl	8008296 <USB_ReadChInterrupts>
 80058da:	4603      	mov	r3, r0
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d168      	bne.n	80059b6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	3344      	adds	r3, #68	@ 0x44
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	78fa      	ldrb	r2, [r7, #3]
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f002 fcc8 	bl	8008296 <USB_ReadChInterrupts>
 8005906:	4603      	mov	r3, r0
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b40      	cmp	r3, #64	@ 0x40
 800590e:	d112      	bne.n	8005936 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	3319      	adds	r3, #25
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005930:	461a      	mov	r2, r3
 8005932:	2340      	movs	r3, #64	@ 0x40
 8005934:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	331b      	adds	r3, #27
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d019      	beq.n	8005980 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	331b      	adds	r3, #27
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	78fa      	ldrb	r2, [r7, #3]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	440a      	add	r2, r1
 8005976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800597a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800598c:	461a      	mov	r2, r3
 800598e:	2301      	movs	r3, #1
 8005990:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005992:	78fa      	ldrb	r2, [r7, #3]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	334d      	adds	r3, #77	@ 0x4d
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	78fa      	ldrb	r2, [r7, #3]
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f003 f8c3 	bl	8008b3a <USB_HC_Halt>
 80059b4:	e34b      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	4611      	mov	r1, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f002 fc69 	bl	8008296 <USB_ReadChInterrupts>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	d139      	bne.n	8005a42 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	334d      	adds	r3, #77	@ 0x4d
 80059de:	2205      	movs	r2, #5
 80059e0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	331a      	adds	r3, #26
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80059f8:	78fa      	ldrb	r2, [r7, #3]
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	4613      	mov	r3, r2
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	3319      	adds	r3, #25
 8005a08:	2201      	movs	r2, #1
 8005a0a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	3344      	adds	r3, #68	@ 0x44
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	78fa      	ldrb	r2, [r7, #3]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f003 f886 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2340      	movs	r3, #64	@ 0x40
 8005a3e:	6093      	str	r3, [r2, #8]
 8005a40:	e305      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	78fa      	ldrb	r2, [r7, #3]
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f002 fc23 	bl	8008296 <USB_ReadChInterrupts>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d11a      	bne.n	8005a90 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a66:	461a      	mov	r2, r3
 8005a68:	2308      	movs	r3, #8
 8005a6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	334d      	adds	r3, #77	@ 0x4d
 8005a7c:	2206      	movs	r2, #6
 8005a7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f003 f856 	bl	8008b3a <USB_HC_Halt>
 8005a8e:	e2de      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f002 fbfc 	bl	8008296 <USB_ReadChInterrupts>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d144      	bne.n	8005b32 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	4613      	mov	r3, r2
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	1a9b      	subs	r3, r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3344      	adds	r3, #68	@ 0x44
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	334d      	adds	r3, #77	@ 0x4d
 8005acc:	2204      	movs	r2, #4
 8005ace:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	3319      	adds	r3, #25
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d114      	bne.n	8005b10 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	3318      	adds	r3, #24
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005afc:	78fa      	ldrb	r2, [r7, #3]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	3319      	adds	r3, #25
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f003 f80e 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	6093      	str	r3, [r2, #8]
 8005b30:	e28d      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f002 fbab 	bl	8008296 <USB_ReadChInterrupts>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b80      	cmp	r3, #128	@ 0x80
 8005b48:	d169      	bne.n	8005c1e <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	799b      	ldrb	r3, [r3, #6]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d111      	bne.n	8005b76 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	334d      	adds	r3, #77	@ 0x4d
 8005b62:	2207      	movs	r2, #7
 8005b64:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	78fa      	ldrb	r2, [r7, #3]
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 ffe3 	bl	8008b3a <USB_HC_Halt>
 8005b74:	e049      	b.n	8005c0a <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3344      	adds	r3, #68	@ 0x44
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	1c59      	adds	r1, r3, #1
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4403      	add	r3, r0
 8005b96:	3344      	adds	r3, #68	@ 0x44
 8005b98:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b9a:	78fa      	ldrb	r2, [r7, #3]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3344      	adds	r3, #68	@ 0x44
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d922      	bls.n	8005bf6 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	1a9b      	subs	r3, r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	3344      	adds	r3, #68	@ 0x44
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	334c      	adds	r3, #76	@ 0x4c
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	334c      	adds	r3, #76	@ 0x4c
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f004 fd22 	bl	800a638 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005bf4:	e009      	b.n	8005c0a <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	334c      	adds	r3, #76	@ 0x4c
 8005c06:	2202      	movs	r2, #2
 8005c08:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c16:	461a      	mov	r2, r3
 8005c18:	2380      	movs	r3, #128	@ 0x80
 8005c1a:	6093      	str	r3, [r2, #8]
 8005c1c:	e217      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 fb35 	bl	8008296 <USB_ReadChInterrupts>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c36:	d11b      	bne.n	8005c70 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005c38:	78fa      	ldrb	r2, [r7, #3]
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	1a9b      	subs	r3, r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	334d      	adds	r3, #77	@ 0x4d
 8005c48:	2209      	movs	r2, #9
 8005c4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	78fa      	ldrb	r2, [r7, #3]
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f002 ff70 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c66:	461a      	mov	r2, r3
 8005c68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c6c:	6093      	str	r3, [r2, #8]
 8005c6e:	e1ee      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	4611      	mov	r1, r2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f002 fb0c 	bl	8008296 <USB_ReadChInterrupts>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	f040 81df 	bne.w	8006048 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c96:	461a      	mov	r2, r3
 8005c98:	2302      	movs	r3, #2
 8005c9a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	334d      	adds	r3, #77	@ 0x4d
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	f040 8093 	bne.w	8005dda <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	334d      	adds	r3, #77	@ 0x4d
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005cc8:	78fa      	ldrb	r2, [r7, #3]
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	334c      	adds	r3, #76	@ 0x4c
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005cdc:	78fa      	ldrb	r2, [r7, #3]
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	440b      	add	r3, r1
 8005cea:	3326      	adds	r3, #38	@ 0x26
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d00b      	beq.n	8005d0a <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	3326      	adds	r3, #38	@ 0x26
 8005d02:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	f040 8190 	bne.w	800602a <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	799b      	ldrb	r3, [r3, #6]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d115      	bne.n	8005d3e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	333d      	adds	r3, #61	@ 0x3d
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	78fa      	ldrb	r2, [r7, #3]
 8005d26:	f083 0301 	eor.w	r3, r3, #1
 8005d2a:	b2d8      	uxtb	r0, r3
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	333d      	adds	r3, #61	@ 0x3d
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	799b      	ldrb	r3, [r3, #6]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	f040 8171 	bne.w	800602a <HCD_HC_OUT_IRQHandler+0x920>
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3334      	adds	r3, #52	@ 0x34
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8165 	beq.w	800602a <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	3334      	adds	r3, #52	@ 0x34
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4403      	add	r3, r0
 8005d80:	3328      	adds	r3, #40	@ 0x28
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	440b      	add	r3, r1
 8005d86:	1e59      	subs	r1, r3, #1
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4403      	add	r3, r0
 8005d96:	3328      	adds	r3, #40	@ 0x28
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d9e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 813f 	beq.w	800602a <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	333d      	adds	r3, #61	@ 0x3d
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	f083 0301 	eor.w	r3, r3, #1
 8005dc4:	b2d8      	uxtb	r0, r3
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	333d      	adds	r3, #61	@ 0x3d
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	e127      	b.n	800602a <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005dda:	78fa      	ldrb	r2, [r7, #3]
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	334d      	adds	r3, #77	@ 0x4d
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d120      	bne.n	8005e32 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	334d      	adds	r3, #77	@ 0x4d
 8005e00:	2202      	movs	r2, #2
 8005e02:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	331b      	adds	r3, #27
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	f040 8107 	bne.w	800602a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	334c      	adds	r3, #76	@ 0x4c
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	e0fb      	b.n	800602a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	334d      	adds	r3, #77	@ 0x4d
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d13a      	bne.n	8005ebe <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e48:	78fa      	ldrb	r2, [r7, #3]
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	334d      	adds	r3, #77	@ 0x4d
 8005e58:	2202      	movs	r2, #2
 8005e5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e5c:	78fa      	ldrb	r2, [r7, #3]
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4613      	mov	r3, r2
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	334c      	adds	r3, #76	@ 0x4c
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4613      	mov	r3, r2
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	331b      	adds	r3, #27
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	f040 80d1 	bne.w	800602a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	331b      	adds	r3, #27
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eba:	6053      	str	r3, [r2, #4]
 8005ebc:	e0b5      	b.n	800602a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	334d      	adds	r3, #77	@ 0x4d
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	d114      	bne.n	8005efe <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	1a9b      	subs	r3, r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	334d      	adds	r3, #77	@ 0x4d
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	334c      	adds	r3, #76	@ 0x4c
 8005ef8:	2202      	movs	r2, #2
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e095      	b.n	800602a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	334d      	adds	r3, #77	@ 0x4d
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b06      	cmp	r3, #6
 8005f12:	d114      	bne.n	8005f3e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	334d      	adds	r3, #77	@ 0x4d
 8005f24:	2202      	movs	r2, #2
 8005f26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005f28:	78fa      	ldrb	r2, [r7, #3]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	334c      	adds	r3, #76	@ 0x4c
 8005f38:	2205      	movs	r2, #5
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	e075      	b.n	800602a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005f3e:	78fa      	ldrb	r2, [r7, #3]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	334d      	adds	r3, #77	@ 0x4d
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b07      	cmp	r3, #7
 8005f52:	d00a      	beq.n	8005f6a <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	334d      	adds	r3, #77	@ 0x4d
 8005f64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d170      	bne.n	800604c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	334d      	adds	r3, #77	@ 0x4d
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3344      	adds	r3, #68	@ 0x44
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	1c59      	adds	r1, r3, #1
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4403      	add	r3, r0
 8005f9e:	3344      	adds	r3, #68	@ 0x44
 8005fa0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3344      	adds	r3, #68	@ 0x44
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d914      	bls.n	8005fe2 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005fb8:	78fa      	ldrb	r2, [r7, #3]
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	3344      	adds	r3, #68	@ 0x44
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005fcc:	78fa      	ldrb	r2, [r7, #3]
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	334c      	adds	r3, #76	@ 0x4c
 8005fdc:	2204      	movs	r2, #4
 8005fde:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fe0:	e022      	b.n	8006028 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	334c      	adds	r3, #76	@ 0x4c
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800600c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006014:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006022:	461a      	mov	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006028:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800602a:	78fa      	ldrb	r2, [r7, #3]
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	334c      	adds	r3, #76	@ 0x4c
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f004 faf9 	bl	800a638 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006046:	e002      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800604c:	bf00      	nop
  }
}
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	@ 0x28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	0c5b      	lsrs	r3, r3, #17
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006088:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d004      	beq.n	800609a <HCD_RXQLVL_IRQHandler+0x46>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b05      	cmp	r3, #5
 8006094:	f000 80b6 	beq.w	8006204 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006098:	e0b7      	b.n	800620a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80b3 	beq.w	8006208 <HCD_RXQLVL_IRQHandler+0x1b4>
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4613      	mov	r3, r2
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	332c      	adds	r3, #44	@ 0x2c
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80a7 	beq.w	8006208 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4613      	mov	r3, r2
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	3338      	adds	r3, #56	@ 0x38
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	18d1      	adds	r1, r2, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4613      	mov	r3, r2
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4403      	add	r3, r0
 80060de:	3334      	adds	r3, #52	@ 0x34
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4299      	cmp	r1, r3
 80060e4:	f200 8083 	bhi.w	80061ee <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4613      	mov	r3, r2
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	332c      	adds	r3, #44	@ 0x2c
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	b292      	uxth	r2, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f002 f85c 	bl	80081c0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4613      	mov	r3, r2
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	332c      	adds	r3, #44	@ 0x2c
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	18d1      	adds	r1, r2, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4613      	mov	r3, r2
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4403      	add	r3, r0
 800612c:	332c      	adds	r3, #44	@ 0x2c
 800612e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4613      	mov	r3, r2
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	1a9b      	subs	r3, r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	3338      	adds	r3, #56	@ 0x38
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	18d1      	adds	r1, r2, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4613      	mov	r3, r2
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4403      	add	r3, r0
 8006154:	3338      	adds	r3, #56	@ 0x38
 8006156:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	0cdb      	lsrs	r3, r3, #19
 8006168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800616c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4613      	mov	r3, r2
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	3328      	adds	r3, #40	@ 0x28
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4293      	cmp	r3, r2
 8006186:	d13f      	bne.n	8006208 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d03c      	beq.n	8006208 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061a4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061ac:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ba:	461a      	mov	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4613      	mov	r3, r2
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	333c      	adds	r3, #60	@ 0x3c
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	f083 0301 	eor.w	r3, r3, #1
 80061d6:	b2d8      	uxtb	r0, r3
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	4613      	mov	r3, r2
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	1a9b      	subs	r3, r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	333c      	adds	r3, #60	@ 0x3c
 80061e8:	4602      	mov	r2, r0
 80061ea:	701a      	strb	r2, [r3, #0]
      break;
 80061ec:	e00c      	b.n	8006208 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4613      	mov	r3, r2
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	1a9b      	subs	r3, r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	334c      	adds	r3, #76	@ 0x4c
 80061fe:	2204      	movs	r2, #4
 8006200:	701a      	strb	r2, [r3, #0]
      break;
 8006202:	e001      	b.n	8006208 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006208:	bf00      	nop
  }
}
 800620a:	bf00      	nop
 800620c:	3728      	adds	r7, #40	@ 0x28
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800623e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b02      	cmp	r3, #2
 8006248:	d10b      	bne.n	8006262 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	d102      	bne.n	800625a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f004 f9d3 	bl	800a600 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b08      	cmp	r3, #8
 800626a:	d132      	bne.n	80062d2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f043 0308 	orr.w	r3, r3, #8
 8006272:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b04      	cmp	r3, #4
 800627c:	d126      	bne.n	80062cc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	7a5b      	ldrb	r3, [r3, #9]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d113      	bne.n	80062ae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800628c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006290:	d106      	bne.n	80062a0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2102      	movs	r1, #2
 8006298:	4618      	mov	r0, r3
 800629a:	f002 f82b 	bl	80082f4 <USB_InitFSLSPClkSel>
 800629e:	e011      	b.n	80062c4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f002 f824 	bl	80082f4 <USB_InitFSLSPClkSel>
 80062ac:	e00a      	b.n	80062c4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	79db      	ldrb	r3, [r3, #7]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d106      	bne.n	80062c4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062bc:	461a      	mov	r2, r3
 80062be:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80062c2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f004 f9c5 	bl	800a654 <HAL_HCD_PortEnabled_Callback>
 80062ca:	e002      	b.n	80062d2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f004 f9cf 	bl	800a670 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d103      	bne.n	80062e4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f043 0320 	orr.w	r3, r3, #32
 80062e2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80062ea:	461a      	mov	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6013      	str	r3, [r2, #0]
}
 80062f0:	bf00      	nop
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e12b      	b.n	8006562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fa ffc0 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2224      	movs	r2, #36	@ 0x24
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0201 	bic.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800634a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800635a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800635c:	f001 fa78 	bl	8007850 <HAL_RCC_GetPCLK1Freq>
 8006360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	4a81      	ldr	r2, [pc, #516]	@ (800656c <HAL_I2C_Init+0x274>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d807      	bhi.n	800637c <HAL_I2C_Init+0x84>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a80      	ldr	r2, [pc, #512]	@ (8006570 <HAL_I2C_Init+0x278>)
 8006370:	4293      	cmp	r3, r2
 8006372:	bf94      	ite	ls
 8006374:	2301      	movls	r3, #1
 8006376:	2300      	movhi	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e006      	b.n	800638a <HAL_I2C_Init+0x92>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a7d      	ldr	r2, [pc, #500]	@ (8006574 <HAL_I2C_Init+0x27c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	bf94      	ite	ls
 8006384:	2301      	movls	r3, #1
 8006386:	2300      	movhi	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0e7      	b.n	8006562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a78      	ldr	r2, [pc, #480]	@ (8006578 <HAL_I2C_Init+0x280>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	0c9b      	lsrs	r3, r3, #18
 800639c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4a6a      	ldr	r2, [pc, #424]	@ (800656c <HAL_I2C_Init+0x274>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d802      	bhi.n	80063cc <HAL_I2C_Init+0xd4>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	3301      	adds	r3, #1
 80063ca:	e009      	b.n	80063e0 <HAL_I2C_Init+0xe8>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	4a69      	ldr	r2, [pc, #420]	@ (800657c <HAL_I2C_Init+0x284>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	099b      	lsrs	r3, r3, #6
 80063de:	3301      	adds	r3, #1
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	430b      	orrs	r3, r1
 80063e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80063f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	495c      	ldr	r1, [pc, #368]	@ (800656c <HAL_I2C_Init+0x274>)
 80063fc:	428b      	cmp	r3, r1
 80063fe:	d819      	bhi.n	8006434 <HAL_I2C_Init+0x13c>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	1e59      	subs	r1, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	fbb1 f3f3 	udiv	r3, r1, r3
 800640e:	1c59      	adds	r1, r3, #1
 8006410:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006414:	400b      	ands	r3, r1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_I2C_Init+0x138>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1e59      	subs	r1, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	fbb1 f3f3 	udiv	r3, r1, r3
 8006428:	3301      	adds	r3, #1
 800642a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800642e:	e051      	b.n	80064d4 <HAL_I2C_Init+0x1dc>
 8006430:	2304      	movs	r3, #4
 8006432:	e04f      	b.n	80064d4 <HAL_I2C_Init+0x1dc>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d111      	bne.n	8006460 <HAL_I2C_Init+0x168>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1e58      	subs	r0, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6859      	ldr	r1, [r3, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	440b      	add	r3, r1
 800644a:	fbb0 f3f3 	udiv	r3, r0, r3
 800644e:	3301      	adds	r3, #1
 8006450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	e012      	b.n	8006486 <HAL_I2C_Init+0x18e>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	1e58      	subs	r0, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6859      	ldr	r1, [r3, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	0099      	lsls	r1, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	fbb0 f3f3 	udiv	r3, r0, r3
 8006476:	3301      	adds	r3, #1
 8006478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_I2C_Init+0x196>
 800648a:	2301      	movs	r3, #1
 800648c:	e022      	b.n	80064d4 <HAL_I2C_Init+0x1dc>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10e      	bne.n	80064b4 <HAL_I2C_Init+0x1bc>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1e58      	subs	r0, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6859      	ldr	r1, [r3, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	440b      	add	r3, r1
 80064a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80064a8:	3301      	adds	r3, #1
 80064aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b2:	e00f      	b.n	80064d4 <HAL_I2C_Init+0x1dc>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	1e58      	subs	r0, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6859      	ldr	r1, [r3, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	0099      	lsls	r1, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ca:	3301      	adds	r3, #1
 80064cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	6809      	ldr	r1, [r1, #0]
 80064d8:	4313      	orrs	r3, r2
 80064da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006502:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6911      	ldr	r1, [r2, #16]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68d2      	ldr	r2, [r2, #12]
 800650e:	4311      	orrs	r1, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	430b      	orrs	r3, r1
 8006516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695a      	ldr	r2, [r3, #20]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	000186a0 	.word	0x000186a0
 8006570:	001e847f 	.word	0x001e847f
 8006574:	003d08ff 	.word	0x003d08ff
 8006578:	431bde83 	.word	0x431bde83
 800657c:	10624dd3 	.word	0x10624dd3

08006580 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	461a      	mov	r2, r3
 800658c:	460b      	mov	r3, r1
 800658e:	817b      	strh	r3, [r7, #10]
 8006590:	4613      	mov	r3, r2
 8006592:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006594:	f7fd fb3c 	bl	8003c10 <HAL_GetTick>
 8006598:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	f040 80e0 	bne.w	8006768 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	2319      	movs	r3, #25
 80065ae:	2201      	movs	r2, #1
 80065b0:	4970      	ldr	r1, [pc, #448]	@ (8006774 <HAL_I2C_Master_Transmit+0x1f4>)
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fc64 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065be:	2302      	movs	r3, #2
 80065c0:	e0d3      	b.n	800676a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_I2C_Master_Transmit+0x50>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e0cc      	b.n	800676a <HAL_I2C_Master_Transmit+0x1ea>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d007      	beq.n	80065f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006604:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2221      	movs	r2, #33	@ 0x21
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2210      	movs	r2, #16
 8006612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	893a      	ldrh	r2, [r7, #8]
 8006626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a50      	ldr	r2, [pc, #320]	@ (8006778 <HAL_I2C_Master_Transmit+0x1f8>)
 8006636:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006638:	8979      	ldrh	r1, [r7, #10]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 face 	bl	8006be0 <I2C_MasterRequestWrite>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e08d      	b.n	800676a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006664:	e066      	b.n	8006734 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	6a39      	ldr	r1, [r7, #32]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fd22 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00d      	beq.n	8006692 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	2b04      	cmp	r3, #4
 800667c:	d107      	bne.n	800668e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800668c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e06b      	b.n	800676a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d11b      	bne.n	8006708 <HAL_I2C_Master_Transmit+0x188>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d017      	beq.n	8006708 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	6a39      	ldr	r1, [r7, #32]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fd19 	bl	8007144 <I2C_WaitOnBTFFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	2b04      	cmp	r3, #4
 800671e:	d107      	bne.n	8006730 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800672e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e01a      	b.n	800676a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d194      	bne.n	8006666 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800674a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	e000      	b.n	800676a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006768:	2302      	movs	r3, #2
  }
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	00100002 	.word	0x00100002
 8006778:	ffff0000 	.word	0xffff0000

0800677c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08c      	sub	sp, #48	@ 0x30
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	461a      	mov	r2, r3
 8006788:	460b      	mov	r3, r1
 800678a:	817b      	strh	r3, [r7, #10]
 800678c:	4613      	mov	r3, r2
 800678e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006790:	f7fd fa3e 	bl	8003c10 <HAL_GetTick>
 8006794:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b20      	cmp	r3, #32
 80067a0:	f040 8217 	bne.w	8006bd2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	2319      	movs	r3, #25
 80067aa:	2201      	movs	r2, #1
 80067ac:	497c      	ldr	r1, [pc, #496]	@ (80069a0 <HAL_I2C_Master_Receive+0x224>)
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fb66 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
 80067bc:	e20a      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_I2C_Master_Receive+0x50>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e203      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d007      	beq.n	80067f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0201 	orr.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006800:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2222      	movs	r2, #34	@ 0x22
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2210      	movs	r2, #16
 800680e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	893a      	ldrh	r2, [r7, #8]
 8006822:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4a5c      	ldr	r2, [pc, #368]	@ (80069a4 <HAL_I2C_Master_Receive+0x228>)
 8006832:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006834:	8979      	ldrh	r1, [r7, #10]
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fa52 	bl	8006ce4 <I2C_MasterRequestRead>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e1c4      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800684e:	2b00      	cmp	r3, #0
 8006850:	d113      	bne.n	800687a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006852:	2300      	movs	r3, #0
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e198      	b.n	8006bac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800687e:	2b01      	cmp	r3, #1
 8006880:	d11b      	bne.n	80068ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	61fb      	str	r3, [r7, #28]
 80068a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e178      	b.n	8006bac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d11b      	bne.n	80068fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e2:	2300      	movs	r3, #0
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	e158      	b.n	8006bac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006920:	e144      	b.n	8006bac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006926:	2b03      	cmp	r3, #3
 8006928:	f200 80f1 	bhi.w	8006b0e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006930:	2b01      	cmp	r3, #1
 8006932:	d123      	bne.n	800697c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006936:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fc4b 	bl	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e145      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800697a:	e117      	b.n	8006bac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006980:	2b02      	cmp	r3, #2
 8006982:	d14e      	bne.n	8006a22 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	2200      	movs	r2, #0
 800698c:	4906      	ldr	r1, [pc, #24]	@ (80069a8 <HAL_I2C_Master_Receive+0x22c>)
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fa76 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e11a      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
 800699e:	bf00      	nop
 80069a0:	00100002 	.word	0x00100002
 80069a4:	ffff0000 	.word	0xffff0000
 80069a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a20:	e0c4      	b.n	8006bac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	2200      	movs	r2, #0
 8006a2a:	496c      	ldr	r1, [pc, #432]	@ (8006bdc <HAL_I2C_Master_Receive+0x460>)
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 fa27 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0cb      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	2200      	movs	r2, #0
 8006a86:	4955      	ldr	r1, [pc, #340]	@ (8006bdc <HAL_I2C_Master_Receive+0x460>)
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f9f9 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e09d      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b0c:	e04e      	b.n	8006bac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fb5e 	bl	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e058      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d124      	bne.n	8006bac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d107      	bne.n	8006b7a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b78:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f47f aeb6 	bne.w	8006922 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e000      	b.n	8006bd4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006bd2:	2302      	movs	r3, #2
  }
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3728      	adds	r7, #40	@ 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	00010004 	.word	0x00010004

08006be0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	460b      	mov	r3, r1
 8006bee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d006      	beq.n	8006c0a <I2C_MasterRequestWrite+0x2a>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d003      	beq.n	8006c0a <I2C_MasterRequestWrite+0x2a>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c08:	d108      	bne.n	8006c1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e00b      	b.n	8006c34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c20:	2b12      	cmp	r3, #18
 8006c22:	d107      	bne.n	8006c34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f91d 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5a:	d103      	bne.n	8006c64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e035      	b.n	8006cd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c70:	d108      	bne.n	8006c84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c72:	897b      	ldrh	r3, [r7, #10]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c80:	611a      	str	r2, [r3, #16]
 8006c82:	e01b      	b.n	8006cbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c84:	897b      	ldrh	r3, [r7, #10]
 8006c86:	11db      	asrs	r3, r3, #7
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f003 0306 	and.w	r3, r3, #6
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f063 030f 	orn	r3, r3, #15
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	490e      	ldr	r1, [pc, #56]	@ (8006cdc <I2C_MasterRequestWrite+0xfc>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f966 	bl	8006f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e010      	b.n	8006cd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006cb2:	897b      	ldrh	r3, [r7, #10]
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4907      	ldr	r1, [pc, #28]	@ (8006ce0 <I2C_MasterRequestWrite+0x100>)
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f956 	bl	8006f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	00010008 	.word	0x00010008
 8006ce0:	00010002 	.word	0x00010002

08006ce4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d006      	beq.n	8006d1e <I2C_MasterRequestRead+0x3a>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d003      	beq.n	8006d1e <I2C_MasterRequestRead+0x3a>
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d1c:	d108      	bne.n	8006d30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e00b      	b.n	8006d48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d34:	2b11      	cmp	r3, #17
 8006d36:	d107      	bne.n	8006d48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 f893 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00d      	beq.n	8006d7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d6e:	d103      	bne.n	8006d78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e079      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d84:	d108      	bne.n	8006d98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d86:	897b      	ldrh	r3, [r7, #10]
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	611a      	str	r2, [r3, #16]
 8006d96:	e05f      	b.n	8006e58 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d98:	897b      	ldrh	r3, [r7, #10]
 8006d9a:	11db      	asrs	r3, r3, #7
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	f003 0306 	and.w	r3, r3, #6
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f063 030f 	orn	r3, r3, #15
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4930      	ldr	r1, [pc, #192]	@ (8006e78 <I2C_MasterRequestRead+0x194>)
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f8dc 	bl	8006f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e054      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dc6:	897b      	ldrh	r3, [r7, #10]
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	4929      	ldr	r1, [pc, #164]	@ (8006e7c <I2C_MasterRequestRead+0x198>)
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f8cc 	bl	8006f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e044      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e0a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f831 	bl	8006e80 <I2C_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00d      	beq.n	8006e40 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e32:	d103      	bne.n	8006e3c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e3a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e017      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006e40:	897b      	ldrh	r3, [r7, #10]
 8006e42:	11db      	asrs	r3, r3, #7
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	f003 0306 	and.w	r3, r3, #6
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f063 030e 	orn	r3, r3, #14
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4907      	ldr	r1, [pc, #28]	@ (8006e7c <I2C_MasterRequestRead+0x198>)
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f888 	bl	8006f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	00010008 	.word	0x00010008
 8006e7c:	00010002 	.word	0x00010002

08006e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e90:	e048      	b.n	8006f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e98:	d044      	beq.n	8006f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9a:	f7fc feb9 	bl	8003c10 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d139      	bne.n	8006f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d10d      	bne.n	8006ed6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	43da      	mvns	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	e00c      	b.n	8006ef0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	43da      	mvns	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2301      	moveq	r3, #1
 8006eea:	2300      	movne	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d116      	bne.n	8006f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f10:	f043 0220 	orr.w	r2, r3, #32
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e023      	b.n	8006f6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	0c1b      	lsrs	r3, r3, #16
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d10d      	bne.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	43da      	mvns	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bf0c      	ite	eq
 8006f40:	2301      	moveq	r3, #1
 8006f42:	2300      	movne	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	e00c      	b.n	8006f64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	43da      	mvns	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4013      	ands	r3, r2
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf0c      	ite	eq
 8006f5c:	2301      	moveq	r3, #1
 8006f5e:	2300      	movne	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d093      	beq.n	8006e92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f82:	e071      	b.n	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f92:	d123      	bne.n	8006fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fa2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006fac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc8:	f043 0204 	orr.w	r2, r3, #4
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e067      	b.n	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	d041      	beq.n	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe4:	f7fc fe14 	bl	8003c10 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d302      	bcc.n	8006ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d136      	bne.n	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d10c      	bne.n	800701e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	43da      	mvns	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4013      	ands	r3, r2
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf14      	ite	ne
 8007016:	2301      	movne	r3, #1
 8007018:	2300      	moveq	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	e00b      	b.n	8007036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	43da      	mvns	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4013      	ands	r3, r2
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	bf14      	ite	ne
 8007030:	2301      	movne	r3, #1
 8007032:	2300      	moveq	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d016      	beq.n	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007054:	f043 0220 	orr.w	r2, r3, #32
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e021      	b.n	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b01      	cmp	r3, #1
 8007070:	d10c      	bne.n	800708c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	43da      	mvns	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4013      	ands	r3, r2
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf14      	ite	ne
 8007084:	2301      	movne	r3, #1
 8007086:	2300      	moveq	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	e00b      	b.n	80070a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	43da      	mvns	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4013      	ands	r3, r2
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	bf14      	ite	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	2300      	moveq	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f47f af6d 	bne.w	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070c0:	e034      	b.n	800712c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f8e3 	bl	800728e <I2C_IsAcknowledgeFailed>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e034      	b.n	800713c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d028      	beq.n	800712c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070da:	f7fc fd99 	bl	8003c10 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d302      	bcc.n	80070f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d11d      	bne.n	800712c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070fa:	2b80      	cmp	r3, #128	@ 0x80
 80070fc:	d016      	beq.n	800712c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e007      	b.n	800713c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007136:	2b80      	cmp	r3, #128	@ 0x80
 8007138:	d1c3      	bne.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007150:	e034      	b.n	80071bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 f89b 	bl	800728e <I2C_IsAcknowledgeFailed>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e034      	b.n	80071cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007168:	d028      	beq.n	80071bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800716a:	f7fc fd51 	bl	8003c10 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	429a      	cmp	r2, r3
 8007178:	d302      	bcc.n	8007180 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d11d      	bne.n	80071bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b04      	cmp	r3, #4
 800718c:	d016      	beq.n	80071bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e007      	b.n	80071cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d1c3      	bne.n	8007152 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071e0:	e049      	b.n	8007276 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d119      	bne.n	8007224 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0210 	mvn.w	r2, #16
 80071f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e030      	b.n	8007286 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007224:	f7fc fcf4 	bl	8003c10 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	429a      	cmp	r2, r3
 8007232:	d302      	bcc.n	800723a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d11d      	bne.n	8007276 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007244:	2b40      	cmp	r3, #64	@ 0x40
 8007246:	d016      	beq.n	8007276 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e007      	b.n	8007286 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007280:	2b40      	cmp	r3, #64	@ 0x40
 8007282:	d1ae      	bne.n	80071e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072a4:	d11b      	bne.n	80072de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80072ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	f043 0204 	orr.w	r2, r3, #4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e034      	b.n	8007368 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8007306:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007310:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6852      	ldr	r2, [r2, #4]
 800731a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6892      	ldr	r2, [r2, #8]
 8007324:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007326:	f7fc fc73 	bl	8003c10 <HAL_GetTick>
 800732a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800732c:	e00f      	b.n	800734e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800732e:	f7fc fc6f 	bl	8003c10 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b31      	cmp	r3, #49	@ 0x31
 800733a:	d908      	bls.n	800734e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e00c      	b.n	8007368 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e8      	bne.n	800732e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007364:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007380:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e0cc      	b.n	800753e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073a4:	4b68      	ldr	r3, [pc, #416]	@ (8007548 <HAL_RCC_ClockConfig+0x1b8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d90c      	bls.n	80073cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b2:	4b65      	ldr	r3, [pc, #404]	@ (8007548 <HAL_RCC_ClockConfig+0x1b8>)
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ba:	4b63      	ldr	r3, [pc, #396]	@ (8007548 <HAL_RCC_ClockConfig+0x1b8>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d001      	beq.n	80073cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e0b8      	b.n	800753e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d020      	beq.n	800741a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073e4:	4b59      	ldr	r3, [pc, #356]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	4a58      	ldr	r2, [pc, #352]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 80073ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80073ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073fc:	4b53      	ldr	r3, [pc, #332]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	4a52      	ldr	r2, [pc, #328]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 8007402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007408:	4b50      	ldr	r3, [pc, #320]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	494d      	ldr	r1, [pc, #308]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 8007416:	4313      	orrs	r3, r2
 8007418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d044      	beq.n	80074b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d107      	bne.n	800743e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742e:	4b47      	ldr	r3, [pc, #284]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d119      	bne.n	800746e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e07f      	b.n	800753e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d003      	beq.n	800744e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800744a:	2b03      	cmp	r3, #3
 800744c:	d107      	bne.n	800745e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800744e:	4b3f      	ldr	r3, [pc, #252]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d109      	bne.n	800746e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e06f      	b.n	800753e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745e:	4b3b      	ldr	r3, [pc, #236]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e067      	b.n	800753e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800746e:	4b37      	ldr	r3, [pc, #220]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f023 0203 	bic.w	r2, r3, #3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	4934      	ldr	r1, [pc, #208]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 800747c:	4313      	orrs	r3, r2
 800747e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007480:	f7fc fbc6 	bl	8003c10 <HAL_GetTick>
 8007484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007486:	e00a      	b.n	800749e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007488:	f7fc fbc2 	bl	8003c10 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007496:	4293      	cmp	r3, r2
 8007498:	d901      	bls.n	800749e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e04f      	b.n	800753e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800749e:	4b2b      	ldr	r3, [pc, #172]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 020c 	and.w	r2, r3, #12
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d1eb      	bne.n	8007488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074b0:	4b25      	ldr	r3, [pc, #148]	@ (8007548 <HAL_RCC_ClockConfig+0x1b8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d20c      	bcs.n	80074d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074be:	4b22      	ldr	r3, [pc, #136]	@ (8007548 <HAL_RCC_ClockConfig+0x1b8>)
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c6:	4b20      	ldr	r3, [pc, #128]	@ (8007548 <HAL_RCC_ClockConfig+0x1b8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d001      	beq.n	80074d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e032      	b.n	800753e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074e4:	4b19      	ldr	r3, [pc, #100]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	4916      	ldr	r1, [pc, #88]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007502:	4b12      	ldr	r3, [pc, #72]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	490e      	ldr	r1, [pc, #56]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 8007512:	4313      	orrs	r3, r2
 8007514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007516:	f000 f889 	bl	800762c <HAL_RCC_GetSysClockFreq>
 800751a:	4602      	mov	r2, r0
 800751c:	4b0b      	ldr	r3, [pc, #44]	@ (800754c <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	091b      	lsrs	r3, r3, #4
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	490a      	ldr	r1, [pc, #40]	@ (8007550 <HAL_RCC_ClockConfig+0x1c0>)
 8007528:	5ccb      	ldrb	r3, [r1, r3]
 800752a:	fa22 f303 	lsr.w	r3, r2, r3
 800752e:	4a09      	ldr	r2, [pc, #36]	@ (8007554 <HAL_RCC_ClockConfig+0x1c4>)
 8007530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007532:	4b09      	ldr	r3, [pc, #36]	@ (8007558 <HAL_RCC_ClockConfig+0x1c8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f7fc fb26 	bl	8003b88 <HAL_InitTick>

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40023c00 	.word	0x40023c00
 800754c:	40023800 	.word	0x40023800
 8007550:	0800bd28 	.word	0x0800bd28
 8007554:	20000000 	.word	0x20000000
 8007558:	200000a0 	.word	0x200000a0

0800755c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08c      	sub	sp, #48	@ 0x30
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d129      	bne.n	80075c2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800756e:	2300      	movs	r3, #0
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	4b2b      	ldr	r3, [pc, #172]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007576:	4a2a      	ldr	r2, [pc, #168]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	6313      	str	r3, [r2, #48]	@ 0x30
 800757e:	4b28      	ldr	r3, [pc, #160]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	61bb      	str	r3, [r7, #24]
 8007588:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800758a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800758e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007590:	2302      	movs	r3, #2
 8007592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007594:	2303      	movs	r3, #3
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007598:	2300      	movs	r3, #0
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800759c:	2300      	movs	r3, #0
 800759e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80075a0:	f107 031c 	add.w	r3, r7, #28
 80075a4:	4619      	mov	r1, r3
 80075a6:	481f      	ldr	r0, [pc, #124]	@ (8007624 <HAL_RCC_MCOConfig+0xc8>)
 80075a8:	f7fc fc74 	bl	8003e94 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80075ac:	4b1c      	ldr	r3, [pc, #112]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	430b      	orrs	r3, r1
 80075ba:	4919      	ldr	r1, [pc, #100]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80075c0:	e029      	b.n	8007616 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	4b16      	ldr	r3, [pc, #88]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ca:	4a15      	ldr	r2, [pc, #84]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 80075cc:	f043 0304 	orr.w	r3, r3, #4
 80075d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80075d2:	4b13      	ldr	r3, [pc, #76]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 80075d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d6:	f003 0304 	and.w	r3, r3, #4
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80075de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e4:	2302      	movs	r3, #2
 80075e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e8:	2303      	movs	r3, #3
 80075ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80075f0:	2300      	movs	r3, #0
 80075f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80075f4:	f107 031c 	add.w	r3, r7, #28
 80075f8:	4619      	mov	r1, r3
 80075fa:	480b      	ldr	r0, [pc, #44]	@ (8007628 <HAL_RCC_MCOConfig+0xcc>)
 80075fc:	f7fc fc4a 	bl	8003e94 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007600:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	00d9      	lsls	r1, r3, #3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	430b      	orrs	r3, r1
 8007610:	4903      	ldr	r1, [pc, #12]	@ (8007620 <HAL_RCC_MCOConfig+0xc4>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
}
 8007616:	bf00      	nop
 8007618:	3730      	adds	r7, #48	@ 0x30
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	40023800 	.word	0x40023800
 8007624:	40020000 	.word	0x40020000
 8007628:	40020800 	.word	0x40020800

0800762c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800762c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007630:	b094      	sub	sp, #80	@ 0x50
 8007632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	647b      	str	r3, [r7, #68]	@ 0x44
 8007638:	2300      	movs	r3, #0
 800763a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800763c:	2300      	movs	r3, #0
 800763e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007644:	4b79      	ldr	r3, [pc, #484]	@ (800782c <HAL_RCC_GetSysClockFreq+0x200>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 030c 	and.w	r3, r3, #12
 800764c:	2b08      	cmp	r3, #8
 800764e:	d00d      	beq.n	800766c <HAL_RCC_GetSysClockFreq+0x40>
 8007650:	2b08      	cmp	r3, #8
 8007652:	f200 80e1 	bhi.w	8007818 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_RCC_GetSysClockFreq+0x34>
 800765a:	2b04      	cmp	r3, #4
 800765c:	d003      	beq.n	8007666 <HAL_RCC_GetSysClockFreq+0x3a>
 800765e:	e0db      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007660:	4b73      	ldr	r3, [pc, #460]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x204>)
 8007662:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007664:	e0db      	b.n	800781e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007666:	4b73      	ldr	r3, [pc, #460]	@ (8007834 <HAL_RCC_GetSysClockFreq+0x208>)
 8007668:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800766a:	e0d8      	b.n	800781e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800766c:	4b6f      	ldr	r3, [pc, #444]	@ (800782c <HAL_RCC_GetSysClockFreq+0x200>)
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007674:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007676:	4b6d      	ldr	r3, [pc, #436]	@ (800782c <HAL_RCC_GetSysClockFreq+0x200>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d063      	beq.n	800774a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007682:	4b6a      	ldr	r3, [pc, #424]	@ (800782c <HAL_RCC_GetSysClockFreq+0x200>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	099b      	lsrs	r3, r3, #6
 8007688:	2200      	movs	r2, #0
 800768a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800768c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007694:	633b      	str	r3, [r7, #48]	@ 0x30
 8007696:	2300      	movs	r3, #0
 8007698:	637b      	str	r3, [r7, #52]	@ 0x34
 800769a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800769e:	4622      	mov	r2, r4
 80076a0:	462b      	mov	r3, r5
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f04f 0100 	mov.w	r1, #0
 80076aa:	0159      	lsls	r1, r3, #5
 80076ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076b0:	0150      	lsls	r0, r2, #5
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4621      	mov	r1, r4
 80076b8:	1a51      	subs	r1, r2, r1
 80076ba:	6139      	str	r1, [r7, #16]
 80076bc:	4629      	mov	r1, r5
 80076be:	eb63 0301 	sbc.w	r3, r3, r1
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	f04f 0200 	mov.w	r2, #0
 80076c8:	f04f 0300 	mov.w	r3, #0
 80076cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076d0:	4659      	mov	r1, fp
 80076d2:	018b      	lsls	r3, r1, #6
 80076d4:	4651      	mov	r1, sl
 80076d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076da:	4651      	mov	r1, sl
 80076dc:	018a      	lsls	r2, r1, #6
 80076de:	4651      	mov	r1, sl
 80076e0:	ebb2 0801 	subs.w	r8, r2, r1
 80076e4:	4659      	mov	r1, fp
 80076e6:	eb63 0901 	sbc.w	r9, r3, r1
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	f04f 0300 	mov.w	r3, #0
 80076f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076fe:	4690      	mov	r8, r2
 8007700:	4699      	mov	r9, r3
 8007702:	4623      	mov	r3, r4
 8007704:	eb18 0303 	adds.w	r3, r8, r3
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	462b      	mov	r3, r5
 800770c:	eb49 0303 	adc.w	r3, r9, r3
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800771e:	4629      	mov	r1, r5
 8007720:	024b      	lsls	r3, r1, #9
 8007722:	4621      	mov	r1, r4
 8007724:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007728:	4621      	mov	r1, r4
 800772a:	024a      	lsls	r2, r1, #9
 800772c:	4610      	mov	r0, r2
 800772e:	4619      	mov	r1, r3
 8007730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007732:	2200      	movs	r2, #0
 8007734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800773c:	f7f8 fdb8 	bl	80002b0 <__aeabi_uldivmod>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4613      	mov	r3, r2
 8007746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007748:	e058      	b.n	80077fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800774a:	4b38      	ldr	r3, [pc, #224]	@ (800782c <HAL_RCC_GetSysClockFreq+0x200>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	099b      	lsrs	r3, r3, #6
 8007750:	2200      	movs	r2, #0
 8007752:	4618      	mov	r0, r3
 8007754:	4611      	mov	r1, r2
 8007756:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800775a:	623b      	str	r3, [r7, #32]
 800775c:	2300      	movs	r3, #0
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007760:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007764:	4642      	mov	r2, r8
 8007766:	464b      	mov	r3, r9
 8007768:	f04f 0000 	mov.w	r0, #0
 800776c:	f04f 0100 	mov.w	r1, #0
 8007770:	0159      	lsls	r1, r3, #5
 8007772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007776:	0150      	lsls	r0, r2, #5
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4641      	mov	r1, r8
 800777e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007782:	4649      	mov	r1, r9
 8007784:	eb63 0b01 	sbc.w	fp, r3, r1
 8007788:	f04f 0200 	mov.w	r2, #0
 800778c:	f04f 0300 	mov.w	r3, #0
 8007790:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007794:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007798:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800779c:	ebb2 040a 	subs.w	r4, r2, sl
 80077a0:	eb63 050b 	sbc.w	r5, r3, fp
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	00eb      	lsls	r3, r5, #3
 80077ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077b2:	00e2      	lsls	r2, r4, #3
 80077b4:	4614      	mov	r4, r2
 80077b6:	461d      	mov	r5, r3
 80077b8:	4643      	mov	r3, r8
 80077ba:	18e3      	adds	r3, r4, r3
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	464b      	mov	r3, r9
 80077c0:	eb45 0303 	adc.w	r3, r5, r3
 80077c4:	607b      	str	r3, [r7, #4]
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077d2:	4629      	mov	r1, r5
 80077d4:	028b      	lsls	r3, r1, #10
 80077d6:	4621      	mov	r1, r4
 80077d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077dc:	4621      	mov	r1, r4
 80077de:	028a      	lsls	r2, r1, #10
 80077e0:	4610      	mov	r0, r2
 80077e2:	4619      	mov	r1, r3
 80077e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077e6:	2200      	movs	r2, #0
 80077e8:	61bb      	str	r3, [r7, #24]
 80077ea:	61fa      	str	r2, [r7, #28]
 80077ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077f0:	f7f8 fd5e 	bl	80002b0 <__aeabi_uldivmod>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4613      	mov	r3, r2
 80077fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077fc:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <HAL_RCC_GetSysClockFreq+0x200>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	0c1b      	lsrs	r3, r3, #16
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	3301      	adds	r3, #1
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800780c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800780e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007810:	fbb2 f3f3 	udiv	r3, r2, r3
 8007814:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007816:	e002      	b.n	800781e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007818:	4b05      	ldr	r3, [pc, #20]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x204>)
 800781a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800781c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800781e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007820:	4618      	mov	r0, r3
 8007822:	3750      	adds	r7, #80	@ 0x50
 8007824:	46bd      	mov	sp, r7
 8007826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800782a:	bf00      	nop
 800782c:	40023800 	.word	0x40023800
 8007830:	00f42400 	.word	0x00f42400
 8007834:	007a1200 	.word	0x007a1200

08007838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800783c:	4b03      	ldr	r3, [pc, #12]	@ (800784c <HAL_RCC_GetHCLKFreq+0x14>)
 800783e:	681b      	ldr	r3, [r3, #0]
}
 8007840:	4618      	mov	r0, r3
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	20000000 	.word	0x20000000

08007850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007854:	f7ff fff0 	bl	8007838 <HAL_RCC_GetHCLKFreq>
 8007858:	4602      	mov	r2, r0
 800785a:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	0a9b      	lsrs	r3, r3, #10
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	4903      	ldr	r1, [pc, #12]	@ (8007874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007866:	5ccb      	ldrb	r3, [r1, r3]
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800786c:	4618      	mov	r0, r3
 800786e:	bd80      	pop	{r7, pc}
 8007870:	40023800 	.word	0x40023800
 8007874:	0800bd38 	.word	0x0800bd38

08007878 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e273      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d075      	beq.n	8007982 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007896:	4b88      	ldr	r3, [pc, #544]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 030c 	and.w	r3, r3, #12
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d00c      	beq.n	80078bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078a2:	4b85      	ldr	r3, [pc, #532]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d112      	bne.n	80078d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078ae:	4b82      	ldr	r3, [pc, #520]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078ba:	d10b      	bne.n	80078d4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078bc:	4b7e      	ldr	r3, [pc, #504]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d05b      	beq.n	8007980 <HAL_RCC_OscConfig+0x108>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d157      	bne.n	8007980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e24e      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078dc:	d106      	bne.n	80078ec <HAL_RCC_OscConfig+0x74>
 80078de:	4b76      	ldr	r3, [pc, #472]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a75      	ldr	r2, [pc, #468]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80078e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e01d      	b.n	8007928 <HAL_RCC_OscConfig+0xb0>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078f4:	d10c      	bne.n	8007910 <HAL_RCC_OscConfig+0x98>
 80078f6:	4b70      	ldr	r3, [pc, #448]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a6f      	ldr	r2, [pc, #444]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80078fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	4b6d      	ldr	r3, [pc, #436]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a6c      	ldr	r2, [pc, #432]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	e00b      	b.n	8007928 <HAL_RCC_OscConfig+0xb0>
 8007910:	4b69      	ldr	r3, [pc, #420]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a68      	ldr	r2, [pc, #416]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	4b66      	ldr	r3, [pc, #408]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a65      	ldr	r2, [pc, #404]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d013      	beq.n	8007958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007930:	f7fc f96e 	bl	8003c10 <HAL_GetTick>
 8007934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007938:	f7fc f96a 	bl	8003c10 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b64      	cmp	r3, #100	@ 0x64
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e213      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800794a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f0      	beq.n	8007938 <HAL_RCC_OscConfig+0xc0>
 8007956:	e014      	b.n	8007982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007958:	f7fc f95a 	bl	8003c10 <HAL_GetTick>
 800795c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007960:	f7fc f956 	bl	8003c10 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b64      	cmp	r3, #100	@ 0x64
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e1ff      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007972:	4b51      	ldr	r3, [pc, #324]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f0      	bne.n	8007960 <HAL_RCC_OscConfig+0xe8>
 800797e:	e000      	b.n	8007982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d063      	beq.n	8007a56 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800798e:	4b4a      	ldr	r3, [pc, #296]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 030c 	and.w	r3, r3, #12
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800799a:	4b47      	ldr	r3, [pc, #284]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	d11c      	bne.n	80079e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079a6:	4b44      	ldr	r3, [pc, #272]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d116      	bne.n	80079e0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079b2:	4b41      	ldr	r3, [pc, #260]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <HAL_RCC_OscConfig+0x152>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d001      	beq.n	80079ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e1d3      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ca:	4b3b      	ldr	r3, [pc, #236]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	4937      	ldr	r1, [pc, #220]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079de:	e03a      	b.n	8007a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d020      	beq.n	8007a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079e8:	4b34      	ldr	r3, [pc, #208]	@ (8007abc <HAL_RCC_OscConfig+0x244>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ee:	f7fc f90f 	bl	8003c10 <HAL_GetTick>
 80079f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079f4:	e008      	b.n	8007a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079f6:	f7fc f90b 	bl	8003c10 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d901      	bls.n	8007a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e1b4      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a08:	4b2b      	ldr	r3, [pc, #172]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0f0      	beq.n	80079f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a14:	4b28      	ldr	r3, [pc, #160]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	4925      	ldr	r1, [pc, #148]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	600b      	str	r3, [r1, #0]
 8007a28:	e015      	b.n	8007a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a2a:	4b24      	ldr	r3, [pc, #144]	@ (8007abc <HAL_RCC_OscConfig+0x244>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fc f8ee 	bl	8003c10 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a38:	f7fc f8ea 	bl	8003c10 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e193      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1f0      	bne.n	8007a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0308 	and.w	r3, r3, #8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d036      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d016      	beq.n	8007a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a6a:	4b15      	ldr	r3, [pc, #84]	@ (8007ac0 <HAL_RCC_OscConfig+0x248>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a70:	f7fc f8ce 	bl	8003c10 <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a78:	f7fc f8ca 	bl	8003c10 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e173      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab8 <HAL_RCC_OscConfig+0x240>)
 8007a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0f0      	beq.n	8007a78 <HAL_RCC_OscConfig+0x200>
 8007a96:	e01b      	b.n	8007ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a98:	4b09      	ldr	r3, [pc, #36]	@ (8007ac0 <HAL_RCC_OscConfig+0x248>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9e:	f7fc f8b7 	bl	8003c10 <HAL_GetTick>
 8007aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aa4:	e00e      	b.n	8007ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aa6:	f7fc f8b3 	bl	8003c10 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d907      	bls.n	8007ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e15c      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
 8007ab8:	40023800 	.word	0x40023800
 8007abc:	42470000 	.word	0x42470000
 8007ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ac4:	4b8a      	ldr	r3, [pc, #552]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1ea      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8097 	beq.w	8007c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ae2:	4b83      	ldr	r3, [pc, #524]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10f      	bne.n	8007b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	4b7f      	ldr	r3, [pc, #508]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af6:	4a7e      	ldr	r2, [pc, #504]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007afe:	4b7c      	ldr	r3, [pc, #496]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b06:	60bb      	str	r3, [r7, #8]
 8007b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b0e:	4b79      	ldr	r3, [pc, #484]	@ (8007cf4 <HAL_RCC_OscConfig+0x47c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d118      	bne.n	8007b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b1a:	4b76      	ldr	r3, [pc, #472]	@ (8007cf4 <HAL_RCC_OscConfig+0x47c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a75      	ldr	r2, [pc, #468]	@ (8007cf4 <HAL_RCC_OscConfig+0x47c>)
 8007b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b26:	f7fc f873 	bl	8003c10 <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b2e:	f7fc f86f 	bl	8003c10 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e118      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b40:	4b6c      	ldr	r3, [pc, #432]	@ (8007cf4 <HAL_RCC_OscConfig+0x47c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0f0      	beq.n	8007b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d106      	bne.n	8007b62 <HAL_RCC_OscConfig+0x2ea>
 8007b54:	4b66      	ldr	r3, [pc, #408]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b58:	4a65      	ldr	r2, [pc, #404]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b5a:	f043 0301 	orr.w	r3, r3, #1
 8007b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b60:	e01c      	b.n	8007b9c <HAL_RCC_OscConfig+0x324>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	2b05      	cmp	r3, #5
 8007b68:	d10c      	bne.n	8007b84 <HAL_RCC_OscConfig+0x30c>
 8007b6a:	4b61      	ldr	r3, [pc, #388]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6e:	4a60      	ldr	r2, [pc, #384]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b70:	f043 0304 	orr.w	r3, r3, #4
 8007b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b76:	4b5e      	ldr	r3, [pc, #376]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7a:	4a5d      	ldr	r2, [pc, #372]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b82:	e00b      	b.n	8007b9c <HAL_RCC_OscConfig+0x324>
 8007b84:	4b5a      	ldr	r3, [pc, #360]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b88:	4a59      	ldr	r2, [pc, #356]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b8a:	f023 0301 	bic.w	r3, r3, #1
 8007b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b90:	4b57      	ldr	r3, [pc, #348]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b94:	4a56      	ldr	r2, [pc, #344]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007b96:	f023 0304 	bic.w	r3, r3, #4
 8007b9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d015      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba4:	f7fc f834 	bl	8003c10 <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007baa:	e00a      	b.n	8007bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bac:	f7fc f830 	bl	8003c10 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e0d7      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0ee      	beq.n	8007bac <HAL_RCC_OscConfig+0x334>
 8007bce:	e014      	b.n	8007bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd0:	f7fc f81e 	bl	8003c10 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bd6:	e00a      	b.n	8007bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bd8:	f7fc f81a 	bl	8003c10 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e0c1      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bee:	4b40      	ldr	r3, [pc, #256]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1ee      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d105      	bne.n	8007c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c00:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	4a3a      	ldr	r2, [pc, #232]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80ad 	beq.w	8007d70 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c16:	4b36      	ldr	r3, [pc, #216]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 030c 	and.w	r3, r3, #12
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	d060      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d145      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c2a:	4b33      	ldr	r3, [pc, #204]	@ (8007cf8 <HAL_RCC_OscConfig+0x480>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c30:	f7fb ffee 	bl	8003c10 <HAL_GetTick>
 8007c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c38:	f7fb ffea 	bl	8003c10 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e093      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c4a:	4b29      	ldr	r3, [pc, #164]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f0      	bne.n	8007c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c64:	019b      	lsls	r3, r3, #6
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	041b      	lsls	r3, r3, #16
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c78:	061b      	lsls	r3, r3, #24
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c80:	071b      	lsls	r3, r3, #28
 8007c82:	491b      	ldr	r1, [pc, #108]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c88:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf8 <HAL_RCC_OscConfig+0x480>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8e:	f7fb ffbf 	bl	8003c10 <HAL_GetTick>
 8007c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c94:	e008      	b.n	8007ca8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c96:	f7fb ffbb 	bl	8003c10 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e064      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca8:	4b11      	ldr	r3, [pc, #68]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0f0      	beq.n	8007c96 <HAL_RCC_OscConfig+0x41e>
 8007cb4:	e05c      	b.n	8007d70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cb6:	4b10      	ldr	r3, [pc, #64]	@ (8007cf8 <HAL_RCC_OscConfig+0x480>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cbc:	f7fb ffa8 	bl	8003c10 <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cc4:	f7fb ffa4 	bl	8003c10 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e04d      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd6:	4b06      	ldr	r3, [pc, #24]	@ (8007cf0 <HAL_RCC_OscConfig+0x478>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f0      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x44c>
 8007ce2:	e045      	b.n	8007d70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d107      	bne.n	8007cfc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e040      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
 8007cf0:	40023800 	.word	0x40023800
 8007cf4:	40007000 	.word	0x40007000
 8007cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8007d7c <HAL_RCC_OscConfig+0x504>)
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d030      	beq.n	8007d6c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d129      	bne.n	8007d6c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d122      	bne.n	8007d6c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d119      	bne.n	8007d6c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	3b01      	subs	r3, #1
 8007d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d10f      	bne.n	8007d6c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d001      	beq.n	8007d70 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e000      	b.n	8007d72 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40023800 	.word	0x40023800

08007d80 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e038      	b.n	8007e08 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7f9 fb32 	bl	8001414 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3308      	adds	r3, #8
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f000 f828 	bl	8007e10 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	f000 f8b0 	bl	8007f30 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6858      	ldr	r0, [r3, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	f000 f8f7 	bl	8007fd0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	6892      	ldr	r2, [r2, #8]
 8007dea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	6892      	ldr	r2, [r2, #8]
 8007df6:	f041 0101 	orr.w	r1, r1, #1
 8007dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	f023 0101 	bic.w	r1, r3, #1
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d102      	bne.n	8007e40 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007e3a:	2340      	movs	r3, #64	@ 0x40
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	e001      	b.n	8007e44 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007e50:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007e56:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007e5c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007e62:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007e68:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007e6e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8007e74:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8007e7a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8007e80:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007ea8:	4b20      	ldr	r3, [pc, #128]	@ (8007f2c <FSMC_NORSRAM_Init+0x11c>)
 8007eaa:	60fb      	str	r3, [r7, #12]

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  mask |= FSMC_BCR1_CCLKEN;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eb2:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007eba:	60fb      	str	r3, [r7, #12]
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8007ec2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	ea02 0103 	and.w	r1, r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4319      	orrs	r1, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eec:	d10c      	bne.n	8007f08 <FSMC_NORSRAM_Init+0xf8>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d008      	beq.n	8007f08 <FSMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]
  }
#endif
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <FSMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	0008fb7f 	.word	0x0008fb7f

08007f30 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	431a      	orrs	r2, r3
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	041b      	lsls	r3, r3, #16
 8007f64:	431a      	orrs	r2, r3
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	051b      	lsls	r3, r3, #20
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	3b02      	subs	r3, #2
 8007f76:	061b      	lsls	r3, r3, #24
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	3201      	adds	r2, #1
 8007f84:	4319      	orrs	r1, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f98:	d113      	bne.n	8007fc2 <FSMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007fa2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	051b      	lsls	r3, r3, #20
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fe4:	d11d      	bne.n	8008022 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fee:	4b13      	ldr	r3, [pc, #76]	@ (800803c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	6811      	ldr	r1, [r2, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	6852      	ldr	r2, [r2, #4]
 8007ffa:	0112      	lsls	r2, r2, #4
 8007ffc:	4311      	orrs	r1, r2
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	6892      	ldr	r2, [r2, #8]
 8008002:	0212      	lsls	r2, r2, #8
 8008004:	4311      	orrs	r1, r2
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	6992      	ldr	r2, [r2, #24]
 800800a:	4311      	orrs	r1, r2
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	68d2      	ldr	r2, [r2, #12]
 8008010:	0412      	lsls	r2, r2, #16
 8008012:	430a      	orrs	r2, r1
 8008014:	ea43 0102 	orr.w	r1, r3, r2
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008020:	e005      	b.n	800802e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800802a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	cff00000 	.word	0xcff00000

08008040 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f043 0201 	orr.w	r2, r3, #1
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f023 0201 	bic.w	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3301      	adds	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800809e:	d901      	bls.n	80080a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e01b      	b.n	80080dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	daf2      	bge.n	8008092 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	019b      	lsls	r3, r3, #6
 80080b4:	f043 0220 	orr.w	r2, r3, #32
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3301      	adds	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080c8:	d901      	bls.n	80080ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e006      	b.n	80080dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d0f0      	beq.n	80080bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008100:	d901      	bls.n	8008106 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e018      	b.n	8008138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	daf2      	bge.n	80080f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2210      	movs	r2, #16
 8008116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008124:	d901      	bls.n	800812a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e006      	b.n	8008138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f003 0310 	and.w	r3, r3, #16
 8008132:	2b10      	cmp	r3, #16
 8008134:	d0f0      	beq.n	8008118 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008144:	b480      	push	{r7}
 8008146:	b089      	sub	sp, #36	@ 0x24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4611      	mov	r1, r2
 8008150:	461a      	mov	r2, r3
 8008152:	460b      	mov	r3, r1
 8008154:	71fb      	strb	r3, [r7, #7]
 8008156:	4613      	mov	r3, r2
 8008158:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008162:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d123      	bne.n	80081b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800816a:	88bb      	ldrh	r3, [r7, #4]
 800816c:	3303      	adds	r3, #3
 800816e:	089b      	lsrs	r3, r3, #2
 8008170:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008172:	2300      	movs	r3, #0
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	e018      	b.n	80081aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	031a      	lsls	r2, r3, #12
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	4413      	add	r3, r2
 8008180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008184:	461a      	mov	r2, r3
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	3301      	adds	r3, #1
 8008190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	3301      	adds	r3, #1
 8008196:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	3301      	adds	r3, #1
 800819c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	3301      	adds	r3, #1
 80081a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d3e2      	bcc.n	8008178 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3724      	adds	r7, #36	@ 0x24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b08b      	sub	sp, #44	@ 0x2c
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	089b      	lsrs	r3, r3, #2
 80081da:	b29b      	uxth	r3, r3
 80081dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081de:	88fb      	ldrh	r3, [r7, #6]
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081e6:	2300      	movs	r3, #0
 80081e8:	623b      	str	r3, [r7, #32]
 80081ea:	e014      	b.n	8008216 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	3301      	adds	r3, #1
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008200:	3301      	adds	r3, #1
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008206:	3301      	adds	r3, #1
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	3301      	adds	r3, #1
 800820e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	3301      	adds	r3, #1
 8008214:	623b      	str	r3, [r7, #32]
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	429a      	cmp	r2, r3
 800821c:	d3e6      	bcc.n	80081ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800821e:	8bfb      	ldrh	r3, [r7, #30]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01e      	beq.n	8008262 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800822e:	461a      	mov	r2, r3
 8008230:	f107 0310 	add.w	r3, r7, #16
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	b2da      	uxtb	r2, r3
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	701a      	strb	r2, [r3, #0]
      i++;
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	3301      	adds	r3, #1
 800824e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	3301      	adds	r3, #1
 8008254:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008256:	8bfb      	ldrh	r3, [r7, #30]
 8008258:	3b01      	subs	r3, #1
 800825a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800825c:	8bfb      	ldrh	r3, [r7, #30]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1ea      	bne.n	8008238 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008264:	4618      	mov	r0, r3
 8008266:	372c      	adds	r7, #44	@ 0x2c
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	4013      	ands	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008288:	68fb      	ldr	r3, [r7, #12]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80082a6:	78fb      	ldrb	r3, [r7, #3]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	4013      	ands	r3, r2
 80082c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082ca:	68bb      	ldr	r3, [r7, #8]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	f003 0301 	and.w	r3, r3, #1
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	68f9      	ldr	r1, [r7, #12]
 8008328:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800832c:	4313      	orrs	r3, r2
 800832e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d107      	bne.n	8008346 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800833c:	461a      	mov	r2, r3
 800833e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008342:	6053      	str	r3, [r2, #4]
 8008344:	e00c      	b.n	8008360 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d107      	bne.n	800835c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008352:	461a      	mov	r2, r3
 8008354:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008358:	6053      	str	r3, [r2, #4]
 800835a:	e001      	b.n	8008360 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800838e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800839c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800839e:	2064      	movs	r0, #100	@ 0x64
 80083a0:	f7fb fc42 	bl	8003c28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80083ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80083b2:	200a      	movs	r0, #10
 80083b4:	f7fb fc38 	bl	8003c28 <HAL_Delay>

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80083e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d109      	bne.n	8008406 <USB_DriveVbus+0x44>
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d106      	bne.n	8008406 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008400:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008404:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800840c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008410:	d109      	bne.n	8008426 <USB_DriveVbus+0x64>
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d106      	bne.n	8008426 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008420:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008424:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	0c5b      	lsrs	r3, r3, #17
 8008452:	f003 0303 	and.w	r3, r3, #3
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	461a      	mov	r2, r3
 8008472:	4603      	mov	r3, r0
 8008474:	70fb      	strb	r3, [r7, #3]
 8008476:	460b      	mov	r3, r1
 8008478:	70bb      	strb	r3, [r7, #2]
 800847a:	4613      	mov	r3, r2
 800847c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	4413      	add	r3, r2
 800848e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008492:	461a      	mov	r2, r3
 8008494:	f04f 33ff 	mov.w	r3, #4294967295
 8008498:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800849a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d867      	bhi.n	8008572 <USB_HC_Init+0x10e>
 80084a2:	a201      	add	r2, pc, #4	@ (adr r2, 80084a8 <USB_HC_Init+0x44>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	08008535 	.word	0x08008535
 80084b0:	080084b9 	.word	0x080084b9
 80084b4:	080084f7 	.word	0x080084f7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084c4:	461a      	mov	r2, r3
 80084c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80084ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80084cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da51      	bge.n	8008578 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80084f4:	e040      	b.n	8008578 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008502:	461a      	mov	r2, r3
 8008504:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008508:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800850a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800850e:	2b00      	cmp	r3, #0
 8008510:	da34      	bge.n	800857c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	4413      	add	r3, r2
 800851a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	78fa      	ldrb	r2, [r7, #3]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	440a      	add	r2, r1
 8008528:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800852c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008530:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008532:	e023      	b.n	800857c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008540:	461a      	mov	r2, r3
 8008542:	f240 2325 	movw	r3, #549	@ 0x225
 8008546:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008548:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800854c:	2b00      	cmp	r3, #0
 800854e:	da17      	bge.n	8008580 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	440a      	add	r2, r1
 8008566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800856a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800856e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008570:	e006      	b.n	8008580 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	77fb      	strb	r3, [r7, #31]
      break;
 8008576:	e004      	b.n	8008582 <USB_HC_Init+0x11e>
      break;
 8008578:	bf00      	nop
 800857a:	e002      	b.n	8008582 <USB_HC_Init+0x11e>
      break;
 800857c:	bf00      	nop
 800857e:	e000      	b.n	8008582 <USB_HC_Init+0x11e>
      break;
 8008580:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800858e:	461a      	mov	r2, r3
 8008590:	2300      	movs	r3, #0
 8008592:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ae:	f043 0302 	orr.w	r3, r3, #2
 80085b2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	2101      	movs	r1, #1
 80085c4:	fa01 f303 	lsl.w	r3, r1, r3
 80085c8:	6939      	ldr	r1, [r7, #16]
 80085ca:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80085ce:	4313      	orrs	r3, r2
 80085d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80085de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da03      	bge.n	80085ee <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80085e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	e001      	b.n	80085f2 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff ff1e 	bl	8008434 <USB_GetHostSpeed>
 80085f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80085fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d106      	bne.n	8008610 <USB_HC_Init+0x1ac>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d003      	beq.n	8008610 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008608:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	e001      	b.n	8008614 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008614:	787b      	ldrb	r3, [r7, #1]
 8008616:	059b      	lsls	r3, r3, #22
 8008618:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800861c:	78bb      	ldrb	r3, [r7, #2]
 800861e:	02db      	lsls	r3, r3, #11
 8008620:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008624:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008626:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800862a:	049b      	lsls	r3, r3, #18
 800862c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008630:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008632:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008634:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008638:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	431a      	orrs	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	440a      	add	r2, r1
 800864a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800864e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008652:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008654:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008658:	2b03      	cmp	r3, #3
 800865a:	d003      	beq.n	8008664 <USB_HC_Init+0x200>
 800865c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008660:	2b01      	cmp	r3, #1
 8008662:	d10f      	bne.n	8008684 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	4413      	add	r3, r2
 800866c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	78fa      	ldrb	r2, [r7, #3]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	440a      	add	r2, r1
 800867a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800867e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008682:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008684:	7ffb      	ldrb	r3, [r7, #31]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3720      	adds	r7, #32
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop

08008690 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08c      	sub	sp, #48	@ 0x30
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	4613      	mov	r3, r2
 800869c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80086a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086ac:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	799b      	ldrb	r3, [r3, #6]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d158      	bne.n	8008768 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80086b6:	2301      	movs	r3, #1
 80086b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	78db      	ldrb	r3, [r3, #3]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d007      	beq.n	80086d2 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	8a92      	ldrh	r2, [r2, #20]
 80086c8:	fb03 f202 	mul.w	r2, r3, r2
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	61da      	str	r2, [r3, #28]
 80086d0:	e079      	b.n	80087c6 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	7c9b      	ldrb	r3, [r3, #18]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d130      	bne.n	800873c <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	2bbc      	cmp	r3, #188	@ 0xbc
 80086e0:	d918      	bls.n	8008714 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	8a9b      	ldrh	r3, [r3, #20]
 80086e6:	461a      	mov	r2, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	69da      	ldr	r2, [r3, #28]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d003      	beq.n	8008704 <USB_HC_StartXfer+0x74>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d103      	bne.n	800870c <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2202      	movs	r2, #2
 8008708:	60da      	str	r2, [r3, #12]
 800870a:	e05c      	b.n	80087c6 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2201      	movs	r2, #1
 8008710:	60da      	str	r2, [r3, #12]
 8008712:	e058      	b.n	80087c6 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6a1a      	ldr	r2, [r3, #32]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d007      	beq.n	8008734 <USB_HC_StartXfer+0xa4>
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d003      	beq.n	8008734 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2204      	movs	r2, #4
 8008730:	60da      	str	r2, [r3, #12]
 8008732:	e048      	b.n	80087c6 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2203      	movs	r2, #3
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e044      	b.n	80087c6 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10d      	bne.n	800875e <USB_HC_StartXfer+0xce>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	8a92      	ldrh	r2, [r2, #20]
 800874a:	4293      	cmp	r3, r2
 800874c:	d907      	bls.n	800875e <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800874e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	8a92      	ldrh	r2, [r2, #20]
 8008754:	fb03 f202 	mul.w	r2, r3, r2
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	61da      	str	r2, [r3, #28]
 800875c:	e033      	b.n	80087c6 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	6a1a      	ldr	r2, [r3, #32]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	61da      	str	r2, [r3, #28]
 8008766:	e02e      	b.n	80087c6 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d018      	beq.n	80087a2 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	8a92      	ldrh	r2, [r2, #20]
 8008778:	4413      	add	r3, r2
 800877a:	3b01      	subs	r3, #1
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	8a92      	ldrh	r2, [r2, #20]
 8008780:	fbb3 f3f2 	udiv	r3, r3, r2
 8008784:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008786:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008788:	8b7b      	ldrh	r3, [r7, #26]
 800878a:	429a      	cmp	r2, r3
 800878c:	d90b      	bls.n	80087a6 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800878e:	8b7b      	ldrh	r3, [r7, #26]
 8008790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008792:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	8a92      	ldrh	r2, [r2, #20]
 8008798:	fb03 f202 	mul.w	r2, r3, r2
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	61da      	str	r2, [r3, #28]
 80087a0:	e001      	b.n	80087a6 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80087a2:	2301      	movs	r3, #1
 80087a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	78db      	ldrb	r3, [r3, #3]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d007      	beq.n	80087be <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	8a92      	ldrh	r2, [r2, #20]
 80087b4:	fb03 f202 	mul.w	r2, r3, r2
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	61da      	str	r2, [r3, #28]
 80087bc:	e003      	b.n	80087c6 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6a1a      	ldr	r2, [r3, #32]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087d0:	04d9      	lsls	r1, r3, #19
 80087d2:	4ba4      	ldr	r3, [pc, #656]	@ (8008a64 <USB_HC_StartXfer+0x3d4>)
 80087d4:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087d6:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	7d9b      	ldrb	r3, [r3, #22]
 80087dc:	075b      	lsls	r3, r3, #29
 80087de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087e2:	69f9      	ldr	r1, [r7, #28]
 80087e4:	0148      	lsls	r0, r1, #5
 80087e6:	6a39      	ldr	r1, [r7, #32]
 80087e8:	4401      	add	r1, r0
 80087ea:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087ee:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087f0:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d009      	beq.n	800880c <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	6999      	ldr	r1, [r3, #24]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	4413      	add	r3, r2
 8008804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008808:	460a      	mov	r2, r1
 800880a:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf0c      	ite	eq
 800881c:	2301      	moveq	r3, #1
 800881e:	2300      	movne	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	4413      	add	r3, r2
 800882c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	6a3a      	ldr	r2, [r7, #32]
 8008838:	440a      	add	r2, r1
 800883a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800883e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008842:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	4413      	add	r3, r2
 800884c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	7e7b      	ldrb	r3, [r7, #25]
 8008854:	075b      	lsls	r3, r3, #29
 8008856:	69f9      	ldr	r1, [r7, #28]
 8008858:	0148      	lsls	r0, r1, #5
 800885a:	6a39      	ldr	r1, [r7, #32]
 800885c:	4401      	add	r1, r0
 800885e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008862:	4313      	orrs	r3, r2
 8008864:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	799b      	ldrb	r3, [r3, #6]
 800886a:	2b01      	cmp	r3, #1
 800886c:	f040 80c4 	bne.w	80089f8 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	7c5b      	ldrb	r3, [r3, #17]
 8008874:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800887a:	4313      	orrs	r3, r2
 800887c:	69fa      	ldr	r2, [r7, #28]
 800887e:	0151      	lsls	r1, r2, #5
 8008880:	6a3a      	ldr	r2, [r7, #32]
 8008882:	440a      	add	r2, r1
 8008884:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008888:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800888c:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	4413      	add	r3, r2
 8008896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	0151      	lsls	r1, r2, #5
 80088a0:	6a3a      	ldr	r2, [r7, #32]
 80088a2:	440a      	add	r2, r1
 80088a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80088ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	79db      	ldrb	r3, [r3, #7]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d123      	bne.n	80088fe <USB_HC_StartXfer+0x26e>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	78db      	ldrb	r3, [r3, #3]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d11f      	bne.n	80088fe <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	6a3a      	ldr	r2, [r7, #32]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088dc:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	69fa      	ldr	r2, [r7, #28]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	6a3a      	ldr	r2, [r7, #32]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088fc:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	7c9b      	ldrb	r3, [r3, #18]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d003      	beq.n	800890e <USB_HC_StartXfer+0x27e>
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	7c9b      	ldrb	r3, [r3, #18]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d117      	bne.n	800893e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008912:	2b01      	cmp	r3, #1
 8008914:	d113      	bne.n	800893e <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	78db      	ldrb	r3, [r3, #3]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d10f      	bne.n	800893e <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	440a      	add	r2, r1
 8008934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800893c:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	7c9b      	ldrb	r3, [r3, #18]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d163      	bne.n	8008a0e <USB_HC_StartXfer+0x37e>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	78db      	ldrb	r3, [r3, #3]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d15f      	bne.n	8008a0e <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	3b01      	subs	r3, #1
 8008954:	2b03      	cmp	r3, #3
 8008956:	d859      	bhi.n	8008a0c <USB_HC_StartXfer+0x37c>
 8008958:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <USB_HC_StartXfer+0x2d0>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008971 	.word	0x08008971
 8008964:	08008993 	.word	0x08008993
 8008968:	080089b5 	.word	0x080089b5
 800896c:	080089d7 	.word	0x080089d7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	4413      	add	r3, r2
 8008978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	0151      	lsls	r1, r2, #5
 8008982:	6a3a      	ldr	r2, [r7, #32]
 8008984:	440a      	add	r2, r1
 8008986:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800898a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800898e:	6053      	str	r3, [r2, #4]
          break;
 8008990:	e03d      	b.n	8008a0e <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	6a3a      	ldr	r2, [r7, #32]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ac:	f043 030e 	orr.w	r3, r3, #14
 80089b0:	6053      	str	r3, [r2, #4]
          break;
 80089b2:	e02c      	b.n	8008a0e <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	6a3a      	ldr	r2, [r7, #32]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089d2:	6053      	str	r3, [r2, #4]
          break;
 80089d4:	e01b      	b.n	8008a0e <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	0151      	lsls	r1, r2, #5
 80089e8:	6a3a      	ldr	r2, [r7, #32]
 80089ea:	440a      	add	r2, r1
 80089ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089f4:	6053      	str	r3, [r2, #4]
          break;
 80089f6:	e00a      	b.n	8008a0e <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a04:	461a      	mov	r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	6053      	str	r3, [r2, #4]
 8008a0a:	e000      	b.n	8008a0e <USB_HC_StartXfer+0x37e>
          break;
 8008a0c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a24:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	78db      	ldrb	r3, [r3, #3]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	e003      	b.n	8008a40 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a3e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a46:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a54:	461a      	mov	r2, r3
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	e055      	b.n	8008b10 <USB_HC_StartXfer+0x480>
 8008a64:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	78db      	ldrb	r3, [r3, #3]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d14e      	bne.n	8008b0e <USB_HC_StartXfer+0x47e>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d04a      	beq.n	8008b0e <USB_HC_StartXfer+0x47e>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	79db      	ldrb	r3, [r3, #7]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d146      	bne.n	8008b0e <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	7c9b      	ldrb	r3, [r3, #18]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d831      	bhi.n	8008aec <USB_HC_StartXfer+0x45c>
 8008a88:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <USB_HC_StartXfer+0x400>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008aa1 	.word	0x08008aa1
 8008a94:	08008ac5 	.word	0x08008ac5
 8008a98:	08008aa1 	.word	0x08008aa1
 8008a9c:	08008ac5 	.word	0x08008ac5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	3303      	adds	r3, #3
 8008aa6:	089b      	lsrs	r3, r3, #2
 8008aa8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008aaa:	8afa      	ldrh	r2, [r7, #22]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d91c      	bls.n	8008af0 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	f043 0220 	orr.w	r2, r3, #32
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ac2:	e015      	b.n	8008af0 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	3303      	adds	r3, #3
 8008aca:	089b      	lsrs	r3, r3, #2
 8008acc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008ace:	8afa      	ldrh	r2, [r7, #22]
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d90a      	bls.n	8008af4 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008aea:	e003      	b.n	8008af4 <USB_HC_StartXfer+0x464>

      default:
        break;
 8008aec:	bf00      	nop
 8008aee:	e002      	b.n	8008af6 <USB_HC_StartXfer+0x466>
        break;
 8008af0:	bf00      	nop
 8008af2:	e000      	b.n	8008af6 <USB_HC_StartXfer+0x466>
        break;
 8008af4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	6999      	ldr	r1, [r3, #24]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	785a      	ldrb	r2, [r3, #1]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2000      	movs	r0, #0
 8008b06:	9000      	str	r0, [sp, #0]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff fb1b 	bl	8008144 <USB_WritePacket>
  }

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3728      	adds	r7, #40	@ 0x28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	b29b      	uxth	r3, r3
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b089      	sub	sp, #36	@ 0x24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	0c9b      	lsrs	r3, r3, #18
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	0fdb      	lsrs	r3, r3, #31
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	0fdb      	lsrs	r3, r3, #31
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	d10d      	bne.n	8008bbc <USB_HC_Halt+0x82>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <USB_HC_Halt+0x82>
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d002      	beq.n	8008bb8 <USB_HC_Halt+0x7e>
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d101      	bne.n	8008bbc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e0d8      	b.n	8008d6e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <USB_HC_Halt+0x8e>
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d173      	bne.n	8008cb0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008be2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d14a      	bne.n	8008c8a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d133      	bne.n	8008c68 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c1e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	0151      	lsls	r1, r2, #5
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	440a      	add	r2, r1
 8008c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c3e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c4c:	d82e      	bhi.n	8008cac <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c64:	d0ec      	beq.n	8008c40 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c66:	e081      	b.n	8008d6c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c86:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c88:	e070      	b.n	8008d6c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	0151      	lsls	r1, r2, #5
 8008c9c:	69fa      	ldr	r2, [r7, #28]
 8008c9e:	440a      	add	r2, r1
 8008ca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ca4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ca8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008caa:	e05f      	b.n	8008d6c <USB_HC_Halt+0x232>
            break;
 8008cac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cae:	e05d      	b.n	8008d6c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d133      	bne.n	8008d48 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	69fa      	ldr	r2, [r7, #28]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	69fa      	ldr	r2, [r7, #28]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d1e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	3301      	adds	r3, #1
 8008d24:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d2c:	d81d      	bhi.n	8008d6a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d44:	d0ec      	beq.n	8008d20 <USB_HC_Halt+0x1e6>
 8008d46:	e011      	b.n	8008d6c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	0151      	lsls	r1, r2, #5
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	440a      	add	r2, r1
 8008d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	e000      	b.n	8008d6c <USB_HC_Halt+0x232>
          break;
 8008d6a:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3724      	adds	r7, #36	@ 0x24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b088      	sub	sp, #32
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff f967 	bl	8008062 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d94:	2110      	movs	r1, #16
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff f974 	bl	8008084 <USB_FlushTxFifo>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff f99e 	bl	80080e8 <USB_FlushRxFifo>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008db6:	2300      	movs	r3, #0
 8008db8:	61bb      	str	r3, [r7, #24]
 8008dba:	e01f      	b.n	8008dfc <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dd2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dda:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008de2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df0:	461a      	mov	r2, r3
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	61bb      	str	r3, [r7, #24]
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	2b0f      	cmp	r3, #15
 8008e00:	d9dc      	bls.n	8008dbc <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e02:	2300      	movs	r3, #0
 8008e04:	61bb      	str	r3, [r7, #24]
 8008e06:	e034      	b.n	8008e72 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e1e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e26:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e2e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3301      	adds	r3, #1
 8008e46:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e4e:	d80c      	bhi.n	8008e6a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e66:	d0ec      	beq.n	8008e42 <USB_StopHost+0xc8>
 8008e68:	e000      	b.n	8008e6c <USB_StopHost+0xf2>
        break;
 8008e6a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b0f      	cmp	r3, #15
 8008e76:	d9c7      	bls.n	8008e08 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f04f 33ff 	mov.w	r3, #4294967295
 8008e84:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff f8d6 	bl	8008040 <USB_EnableGlobalInt>

  return ret;
 8008e94:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3720      	adds	r7, #32
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	e009      	b.n	8008ec4 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	33e0      	adds	r3, #224	@ 0xe0
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	60fb      	str	r3, [r7, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d9f2      	bls.n	8008eb0 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e009      	b.n	8008ee4 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008eda:	2200      	movs	r2, #0
 8008edc:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eea:	d3f1      	bcc.n	8008ed0 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2240      	movs	r2, #64	@ 0x40
 8008f10:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	331c      	adds	r3, #28
 8008f3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f40:	2100      	movs	r1, #0
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 ff11 	bl	800ad6a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f52:	2100      	movs	r1, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f001 ff08 	bl	800ad6a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008f60:	2212      	movs	r2, #18
 8008f62:	2100      	movs	r1, #0
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 ff00 	bl	800ad6a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f70:	223e      	movs	r2, #62	@ 0x3e
 8008f72:	2100      	movs	r1, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 fef8 	bl	800ad6a <memset>

  return USBH_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 fb7d 	bl	800a68c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008f92:	2101      	movs	r1, #1
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 fc64 	bl	800a862 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af04      	add	r7, sp, #16
 8008faa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008fac:	2302      	movs	r3, #2
 8008fae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d102      	bne.n	8008fc6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b0b      	cmp	r3, #11
 8008fce:	f200 81bb 	bhi.w	8009348 <USBH_Process+0x3a4>
 8008fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd8 <USBH_Process+0x34>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08009009 	.word	0x08009009
 8008fdc:	0800903b 	.word	0x0800903b
 8008fe0:	080090a3 	.word	0x080090a3
 8008fe4:	080092e3 	.word	0x080092e3
 8008fe8:	08009349 	.word	0x08009349
 8008fec:	08009143 	.word	0x08009143
 8008ff0:	08009289 	.word	0x08009289
 8008ff4:	08009179 	.word	0x08009179
 8008ff8:	08009199 	.word	0x08009199
 8008ffc:	080091b7 	.word	0x080091b7
 8009000:	080091fb 	.word	0x080091fb
 8009004:	080092cb 	.word	0x080092cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 819b 	beq.w	800934c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800901c:	20c8      	movs	r0, #200	@ 0xc8
 800901e:	f001 fc37 	bl	800a890 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 fb8f 	bl	800a746 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009038:	e188      	b.n	800934c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009040:	2b01      	cmp	r3, #1
 8009042:	d107      	bne.n	8009054 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009052:	e18a      	b.n	800936a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800905a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800905e:	d914      	bls.n	800908a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009066:	3301      	adds	r3, #1
 8009068:	b2da      	uxtb	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009076:	2b03      	cmp	r3, #3
 8009078:	d903      	bls.n	8009082 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	220d      	movs	r2, #13
 800907e:	701a      	strb	r2, [r3, #0]
      break;
 8009080:	e173      	b.n	800936a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	701a      	strb	r2, [r3, #0]
      break;
 8009088:	e16f      	b.n	800936a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009090:	f103 020a 	add.w	r2, r3, #10
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800909a:	200a      	movs	r0, #10
 800909c:	f001 fbf8 	bl	800a890 <USBH_Delay>
      break;
 80090a0:	e163      	b.n	800936a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d005      	beq.n	80090b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090b2:	2104      	movs	r1, #4
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80090b8:	2064      	movs	r0, #100	@ 0x64
 80090ba:	f001 fbe9 	bl	800a890 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 fb1a 	bl	800a6f8 <USBH_LL_GetSpeed>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2205      	movs	r2, #5
 80090d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80090d4:	2100      	movs	r1, #0
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fa16 	bl	800a508 <USBH_AllocPipe>
 80090dc:	4603      	mov	r3, r0
 80090de:	461a      	mov	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80090e4:	2180      	movs	r1, #128	@ 0x80
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 fa0e 	bl	800a508 <USBH_AllocPipe>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7919      	ldrb	r1, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009108:	9202      	str	r2, [sp, #8]
 800910a:	2200      	movs	r2, #0
 800910c:	9201      	str	r2, [sp, #4]
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	4603      	mov	r3, r0
 8009112:	2280      	movs	r2, #128	@ 0x80
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 f9d8 	bl	800a4ca <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7959      	ldrb	r1, [r3, #5]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800912e:	9202      	str	r2, [sp, #8]
 8009130:	2200      	movs	r2, #0
 8009132:	9201      	str	r2, [sp, #4]
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	4603      	mov	r3, r0
 8009138:	2200      	movs	r2, #0
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 f9c5 	bl	800a4ca <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009140:	e113      	b.n	800936a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f916 	bl	8009374 <USBH_HandleEnum>
 8009148:	4603      	mov	r3, r0
 800914a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	f040 80fd 	bne.w	8009350 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009164:	2b01      	cmp	r3, #1
 8009166:	d103      	bne.n	8009170 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2208      	movs	r2, #8
 800916c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800916e:	e0ef      	b.n	8009350 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2207      	movs	r2, #7
 8009174:	701a      	strb	r2, [r3, #0]
      break;
 8009176:	e0eb      	b.n	8009350 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 80e8 	beq.w	8009354 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800918a:	2101      	movs	r1, #1
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2208      	movs	r2, #8
 8009194:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009196:	e0dd      	b.n	8009354 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fc2b 	bl	80099fc <USBH_SetCfg>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f040 80d5 	bne.w	8009358 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2209      	movs	r2, #9
 80091b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091b4:	e0d0      	b.n	8009358 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d016      	beq.n	80091f2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80091c4:	2101      	movs	r1, #1
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fc3b 	bl	8009a42 <USBH_SetFeature>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	220a      	movs	r2, #10
 80091dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091de:	e0bd      	b.n	800935c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	f040 80b9 	bne.w	800935c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	220a      	movs	r2, #10
 80091ee:	701a      	strb	r2, [r3, #0]
      break;
 80091f0:	e0b4      	b.n	800935c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	220a      	movs	r2, #10
 80091f6:	701a      	strb	r2, [r3, #0]
      break;
 80091f8:	e0b0      	b.n	800935c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 80ad 	beq.w	8009360 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]
 8009212:	e016      	b.n	8009242 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009214:	7bfa      	ldrb	r2, [r7, #15]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32de      	adds	r2, #222	@ 0xde
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	791a      	ldrb	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009226:	429a      	cmp	r2, r3
 8009228:	d108      	bne.n	800923c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32de      	adds	r2, #222	@ 0xde
 8009230:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800923a:	e005      	b.n	8009248 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	3301      	adds	r3, #1
 8009240:	73fb      	strb	r3, [r7, #15]
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0e5      	beq.n	8009214 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d016      	beq.n	8009280 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d109      	bne.n	8009278 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2206      	movs	r2, #6
 8009268:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009270:	2103      	movs	r1, #3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009276:	e073      	b.n	8009360 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	220d      	movs	r2, #13
 800927c:	701a      	strb	r2, [r3, #0]
      break;
 800927e:	e06f      	b.n	8009360 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	220d      	movs	r2, #13
 8009284:	701a      	strb	r2, [r3, #0]
      break;
 8009286:	e06b      	b.n	8009360 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d017      	beq.n	80092c2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	4798      	blx	r3
 800929e:	4603      	mov	r3, r0
 80092a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	220b      	movs	r2, #11
 80092ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092b0:	e058      	b.n	8009364 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d154      	bne.n	8009364 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	220d      	movs	r2, #13
 80092be:	701a      	strb	r2, [r3, #0]
      break;
 80092c0:	e050      	b.n	8009364 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	220d      	movs	r2, #13
 80092c6:	701a      	strb	r2, [r3, #0]
      break;
 80092c8:	e04c      	b.n	8009364 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d049      	beq.n	8009368 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4798      	blx	r3
      }
      break;
 80092e0:	e042      	b.n	8009368 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff fdd7 	bl	8008e9e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d009      	beq.n	800930e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800931e:	2105      	movs	r1, #5
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b01      	cmp	r3, #1
 800932e:	d107      	bne.n	8009340 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff fe23 	bl	8008f84 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800933e:	e014      	b.n	800936a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 f9a3 	bl	800a68c <USBH_LL_Start>
      break;
 8009346:	e010      	b.n	800936a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009348:	bf00      	nop
 800934a:	e00e      	b.n	800936a <USBH_Process+0x3c6>
      break;
 800934c:	bf00      	nop
 800934e:	e00c      	b.n	800936a <USBH_Process+0x3c6>
      break;
 8009350:	bf00      	nop
 8009352:	e00a      	b.n	800936a <USBH_Process+0x3c6>
    break;
 8009354:	bf00      	nop
 8009356:	e008      	b.n	800936a <USBH_Process+0x3c6>
      break;
 8009358:	bf00      	nop
 800935a:	e006      	b.n	800936a <USBH_Process+0x3c6>
      break;
 800935c:	bf00      	nop
 800935e:	e004      	b.n	800936a <USBH_Process+0x3c6>
      break;
 8009360:	bf00      	nop
 8009362:	e002      	b.n	800936a <USBH_Process+0x3c6>
      break;
 8009364:	bf00      	nop
 8009366:	e000      	b.n	800936a <USBH_Process+0x3c6>
      break;
 8009368:	bf00      	nop
  }
  return USBH_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af04      	add	r7, sp, #16
 800937a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009380:	2301      	movs	r3, #1
 8009382:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b07      	cmp	r3, #7
 800938a:	f200 81bd 	bhi.w	8009708 <USBH_HandleEnum+0x394>
 800938e:	a201      	add	r2, pc, #4	@ (adr r2, 8009394 <USBH_HandleEnum+0x20>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093b5 	.word	0x080093b5
 8009398:	0800946f 	.word	0x0800946f
 800939c:	080094d9 	.word	0x080094d9
 80093a0:	08009563 	.word	0x08009563
 80093a4:	080095cd 	.word	0x080095cd
 80093a8:	0800963d 	.word	0x0800963d
 80093ac:	08009683 	.word	0x08009683
 80093b0:	080096c9 	.word	0x080096c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80093b4:	2108      	movs	r1, #8
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa3d 	bl	8009836 <USBH_Get_DevDesc>
 80093bc:	4603      	mov	r3, r0
 80093be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d12e      	bne.n	8009424 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7919      	ldrb	r1, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093ea:	9202      	str	r2, [sp, #8]
 80093ec:	2200      	movs	r2, #0
 80093ee:	9201      	str	r2, [sp, #4]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4603      	mov	r3, r0
 80093f4:	2280      	movs	r2, #128	@ 0x80
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 f867 	bl	800a4ca <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7959      	ldrb	r1, [r3, #5]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009410:	9202      	str	r2, [sp, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	9201      	str	r2, [sp, #4]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4603      	mov	r3, r0
 800941a:	2200      	movs	r2, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 f854 	bl	800a4ca <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009422:	e173      	b.n	800970c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	2b03      	cmp	r3, #3
 8009428:	f040 8170 	bne.w	800970c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009432:	3301      	adds	r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009442:	2b03      	cmp	r3, #3
 8009444:	d903      	bls.n	800944e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	220d      	movs	r2, #13
 800944a:	701a      	strb	r2, [r3, #0]
      break;
 800944c:	e15e      	b.n	800970c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	795b      	ldrb	r3, [r3, #5]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 f878 	bl	800a54a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	791b      	ldrb	r3, [r3, #4]
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 f872 	bl	800a54a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	701a      	strb	r2, [r3, #0]
      break;
 800946c:	e14e      	b.n	800970c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800946e:	2112      	movs	r1, #18
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f9e0 	bl	8009836 <USBH_Get_DevDesc>
 8009476:	4603      	mov	r3, r0
 8009478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d103      	bne.n	8009488 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009486:	e143      	b.n	8009710 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b03      	cmp	r3, #3
 800948c:	f040 8140 	bne.w	8009710 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009496:	3301      	adds	r3, #1
 8009498:	b2da      	uxtb	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d903      	bls.n	80094b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	220d      	movs	r2, #13
 80094ae:	701a      	strb	r2, [r3, #0]
      break;
 80094b0:	e12e      	b.n	8009710 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	795b      	ldrb	r3, [r3, #5]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 f846 	bl	800a54a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	791b      	ldrb	r3, [r3, #4]
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 f840 	bl	800a54a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]
      break;
 80094d6:	e11b      	b.n	8009710 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80094d8:	2101      	movs	r1, #1
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa6a 	bl	80099b4 <USBH_SetAddress>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d130      	bne.n	800954c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80094ea:	2002      	movs	r0, #2
 80094ec:	f001 f9d0 	bl	800a890 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2203      	movs	r2, #3
 80094fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7919      	ldrb	r1, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009512:	9202      	str	r2, [sp, #8]
 8009514:	2200      	movs	r2, #0
 8009516:	9201      	str	r2, [sp, #4]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4603      	mov	r3, r0
 800951c:	2280      	movs	r2, #128	@ 0x80
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 ffd3 	bl	800a4ca <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7959      	ldrb	r1, [r3, #5]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009538:	9202      	str	r2, [sp, #8]
 800953a:	2200      	movs	r2, #0
 800953c:	9201      	str	r2, [sp, #4]
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	4603      	mov	r3, r0
 8009542:	2200      	movs	r2, #0
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 ffc0 	bl	800a4ca <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800954a:	e0e3      	b.n	8009714 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b03      	cmp	r3, #3
 8009550:	f040 80e0 	bne.w	8009714 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	220d      	movs	r2, #13
 8009558:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	705a      	strb	r2, [r3, #1]
      break;
 8009560:	e0d8      	b.n	8009714 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009562:	2109      	movs	r1, #9
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f992 	bl	800988e <USBH_Get_CfgDesc>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d103      	bne.n	800957c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2204      	movs	r2, #4
 8009578:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800957a:	e0cd      	b.n	8009718 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	2b03      	cmp	r3, #3
 8009580:	f040 80ca 	bne.w	8009718 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800958a:	3301      	adds	r3, #1
 800958c:	b2da      	uxtb	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800959a:	2b03      	cmp	r3, #3
 800959c:	d903      	bls.n	80095a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	220d      	movs	r2, #13
 80095a2:	701a      	strb	r2, [r3, #0]
      break;
 80095a4:	e0b8      	b.n	8009718 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	795b      	ldrb	r3, [r3, #5]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 ffcc 	bl	800a54a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	791b      	ldrb	r3, [r3, #4]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 ffc6 	bl	800a54a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	701a      	strb	r2, [r3, #0]
      break;
 80095ca:	e0a5      	b.n	8009718 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f95a 	bl	800988e <USBH_Get_CfgDesc>
 80095da:	4603      	mov	r3, r0
 80095dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d103      	bne.n	80095ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2205      	movs	r2, #5
 80095e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095ea:	e097      	b.n	800971c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	f040 8094 	bne.w	800971c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095fa:	3301      	adds	r3, #1
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800960a:	2b03      	cmp	r3, #3
 800960c:	d903      	bls.n	8009616 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	220d      	movs	r2, #13
 8009612:	701a      	strb	r2, [r3, #0]
      break;
 8009614:	e082      	b.n	800971c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	795b      	ldrb	r3, [r3, #5]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 ff94 	bl	800a54a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	791b      	ldrb	r3, [r3, #4]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 ff8e 	bl	800a54a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
      break;
 800963a:	e06f      	b.n	800971c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009642:	2b00      	cmp	r3, #0
 8009644:	d019      	beq.n	800967a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009652:	23ff      	movs	r3, #255	@ 0xff
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f944 	bl	80098e2 <USBH_Get_StringDesc>
 800965a:	4603      	mov	r3, r0
 800965c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d103      	bne.n	800966c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2206      	movs	r2, #6
 8009668:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800966a:	e059      	b.n	8009720 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b03      	cmp	r3, #3
 8009670:	d156      	bne.n	8009720 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2206      	movs	r2, #6
 8009676:	705a      	strb	r2, [r3, #1]
      break;
 8009678:	e052      	b.n	8009720 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2206      	movs	r2, #6
 800967e:	705a      	strb	r2, [r3, #1]
      break;
 8009680:	e04e      	b.n	8009720 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009688:	2b00      	cmp	r3, #0
 800968a:	d019      	beq.n	80096c0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009698:	23ff      	movs	r3, #255	@ 0xff
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f921 	bl	80098e2 <USBH_Get_StringDesc>
 80096a0:	4603      	mov	r3, r0
 80096a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d103      	bne.n	80096b2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2207      	movs	r2, #7
 80096ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096b0:	e038      	b.n	8009724 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d135      	bne.n	8009724 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2207      	movs	r2, #7
 80096bc:	705a      	strb	r2, [r3, #1]
      break;
 80096be:	e031      	b.n	8009724 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2207      	movs	r2, #7
 80096c4:	705a      	strb	r2, [r3, #1]
      break;
 80096c6:	e02d      	b.n	8009724 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d017      	beq.n	8009702 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80096de:	23ff      	movs	r3, #255	@ 0xff
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f8fe 	bl	80098e2 <USBH_Get_StringDesc>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80096f4:	e018      	b.n	8009728 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d115      	bne.n	8009728 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009700:	e012      	b.n	8009728 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
      break;
 8009706:	e00f      	b.n	8009728 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009708:	bf00      	nop
 800970a:	e00e      	b.n	800972a <USBH_HandleEnum+0x3b6>
      break;
 800970c:	bf00      	nop
 800970e:	e00c      	b.n	800972a <USBH_HandleEnum+0x3b6>
      break;
 8009710:	bf00      	nop
 8009712:	e00a      	b.n	800972a <USBH_HandleEnum+0x3b6>
      break;
 8009714:	bf00      	nop
 8009716:	e008      	b.n	800972a <USBH_HandleEnum+0x3b6>
      break;
 8009718:	bf00      	nop
 800971a:	e006      	b.n	800972a <USBH_HandleEnum+0x3b6>
      break;
 800971c:	bf00      	nop
 800971e:	e004      	b.n	800972a <USBH_HandleEnum+0x3b6>
      break;
 8009720:	bf00      	nop
 8009722:	e002      	b.n	800972a <USBH_HandleEnum+0x3b6>
      break;
 8009724:	bf00      	nop
 8009726:	e000      	b.n	800972a <USBH_HandleEnum+0x3b6>
      break;
 8009728:	bf00      	nop
  }
  return Status;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f804 	bl	8009758 <USBH_HandleSof>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b0b      	cmp	r3, #11
 8009768:	d10a      	bne.n	8009780 <USBH_HandleSof+0x28>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
  }
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009798:	bf00      	nop
}
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80097b4:	bf00      	nop
}
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 ff57 	bl	800a6c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	791b      	ldrb	r3, [r3, #4]
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fe95 	bl	800a54a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	795b      	ldrb	r3, [r3, #5]
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fe8f 	bl	800a54a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b086      	sub	sp, #24
 800983a:	af02      	add	r7, sp, #8
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009842:	887b      	ldrh	r3, [r7, #2]
 8009844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009848:	d901      	bls.n	800984e <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800984a:	2303      	movs	r3, #3
 800984c:	e01b      	b.n	8009886 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	4613      	mov	r3, r2
 800985a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800985e:	2100      	movs	r1, #0
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f872 	bl	800994a <USBH_GetDescriptor>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d109      	bne.n	8009884 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009876:	887a      	ldrh	r2, [r7, #2]
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f906 	bl	8009a8c <USBH_ParseDevDesc>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b086      	sub	sp, #24
 8009892:	af02      	add	r7, sp, #8
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	331c      	adds	r3, #28
 800989e:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80098a0:	887b      	ldrh	r3, [r7, #2]
 80098a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098a6:	d901      	bls.n	80098ac <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e016      	b.n	80098da <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80098ac:	887b      	ldrh	r3, [r7, #2]
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098b6:	2100      	movs	r1, #0
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f846 	bl	800994a <USBH_GetDescriptor>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d107      	bne.n	80098d8 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80098c8:	887b      	ldrh	r3, [r7, #2]
 80098ca:	461a      	mov	r2, r3
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f98c 	bl	8009bec <USBH_ParseCfgDesc>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b088      	sub	sp, #32
 80098e6:	af02      	add	r7, sp, #8
 80098e8:	60f8      	str	r0, [r7, #12]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	461a      	mov	r2, r3
 80098ee:	460b      	mov	r3, r1
 80098f0:	72fb      	strb	r3, [r7, #11]
 80098f2:	4613      	mov	r3, r2
 80098f4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80098f6:	893b      	ldrh	r3, [r7, #8]
 80098f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098fc:	d802      	bhi.n	8009904 <USBH_Get_StringDesc+0x22>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009904:	2303      	movs	r3, #3
 8009906:	e01c      	b.n	8009942 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009908:	7afb      	ldrb	r3, [r7, #11]
 800990a:	b29b      	uxth	r3, r3
 800990c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009910:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009918:	893b      	ldrh	r3, [r7, #8]
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	460b      	mov	r3, r1
 800991e:	2100      	movs	r1, #0
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f812 	bl	800994a <USBH_GetDescriptor>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d107      	bne.n	8009940 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009936:	893a      	ldrh	r2, [r7, #8]
 8009938:	6879      	ldr	r1, [r7, #4]
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fb6a 	bl	800a014 <USBH_ParseStringDesc>
  }

  return status;
 8009940:	7dfb      	ldrb	r3, [r7, #23]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	607b      	str	r3, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	72fb      	strb	r3, [r7, #11]
 8009958:	4613      	mov	r3, r2
 800995a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	789b      	ldrb	r3, [r3, #2]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d11c      	bne.n	800999e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009964:	7afb      	ldrb	r3, [r7, #11]
 8009966:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800996a:	b2da      	uxtb	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2206      	movs	r2, #6
 8009974:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	893a      	ldrh	r2, [r7, #8]
 800997a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800997c:	893b      	ldrh	r3, [r7, #8]
 800997e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009986:	d104      	bne.n	8009992 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f240 4209 	movw	r2, #1033	@ 0x409
 800998e:	829a      	strh	r2, [r3, #20]
 8009990:	e002      	b.n	8009998 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8b3a      	ldrh	r2, [r7, #24]
 800999c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800999e:	8b3b      	ldrh	r3, [r7, #24]
 80099a0:	461a      	mov	r2, r3
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 fb82 	bl	800a0ae <USBH_CtlReq>
 80099aa:	4603      	mov	r3, r0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	789b      	ldrb	r3, [r3, #2]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d10f      	bne.n	80099e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2205      	movs	r2, #5
 80099d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80099d4:	78fb      	ldrb	r3, [r7, #3]
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099e8:	2200      	movs	r2, #0
 80099ea:	2100      	movs	r1, #0
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fb5e 	bl	800a0ae <USBH_CtlReq>
 80099f2:	4603      	mov	r3, r0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	789b      	ldrb	r3, [r3, #2]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d10e      	bne.n	8009a2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2209      	movs	r2, #9
 8009a1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	887a      	ldrh	r2, [r7, #2]
 8009a20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2100      	movs	r1, #0
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fb3b 	bl	800a0ae <USBH_CtlReq>
 8009a38:	4603      	mov	r3, r0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	789b      	ldrb	r3, [r3, #2]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d10f      	bne.n	8009a76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2203      	movs	r2, #3
 8009a60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a62:	78fb      	ldrb	r3, [r7, #3]
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a76:	2200      	movs	r2, #0
 8009a78:	2100      	movs	r1, #0
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fb17 	bl	800a0ae <USBH_CtlReq>
 8009a80:	4603      	mov	r3, r0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009aa0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d101      	bne.n	8009ab0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009aac:	2302      	movs	r3, #2
 8009aae:	e094      	b.n	8009bda <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	785a      	ldrb	r2, [r3, #1]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	3302      	adds	r3, #2
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	3303      	adds	r3, #3
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	791a      	ldrb	r2, [r3, #4]
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	795a      	ldrb	r2, [r3, #5]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	799a      	ldrb	r2, [r3, #6]
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	79da      	ldrb	r2, [r3, #7]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d11b      	bne.n	8009b46 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	79db      	ldrb	r3, [r3, #7]
 8009b12:	2b20      	cmp	r3, #32
 8009b14:	dc0f      	bgt.n	8009b36 <USBH_ParseDevDesc+0xaa>
 8009b16:	2b08      	cmp	r3, #8
 8009b18:	db0f      	blt.n	8009b3a <USBH_ParseDevDesc+0xae>
 8009b1a:	3b08      	subs	r3, #8
 8009b1c:	4a32      	ldr	r2, [pc, #200]	@ (8009be8 <USBH_ParseDevDesc+0x15c>)
 8009b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bf14      	ite	ne
 8009b2a:	2301      	movne	r3, #1
 8009b2c:	2300      	moveq	r3, #0
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d106      	bne.n	8009b42 <USBH_ParseDevDesc+0xb6>
 8009b34:	e001      	b.n	8009b3a <USBH_ParseDevDesc+0xae>
 8009b36:	2b40      	cmp	r3, #64	@ 0x40
 8009b38:	d003      	beq.n	8009b42 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	2208      	movs	r2, #8
 8009b3e:	71da      	strb	r2, [r3, #7]
        break;
 8009b40:	e000      	b.n	8009b44 <USBH_ParseDevDesc+0xb8>
        break;
 8009b42:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009b44:	e00e      	b.n	8009b64 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d107      	bne.n	8009b60 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	79db      	ldrb	r3, [r3, #7]
 8009b54:	2b08      	cmp	r3, #8
 8009b56:	d005      	beq.n	8009b64 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2208      	movs	r2, #8
 8009b5c:	71da      	strb	r2, [r3, #7]
 8009b5e:	e001      	b.n	8009b64 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009b60:	2303      	movs	r3, #3
 8009b62:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009b64:	88fb      	ldrh	r3, [r7, #6]
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d936      	bls.n	8009bd8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	3309      	adds	r3, #9
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	021b      	lsls	r3, r3, #8
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	330a      	adds	r3, #10
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	330b      	adds	r3, #11
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4313      	orrs	r3, r2
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	330d      	adds	r3, #13
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	7b9a      	ldrb	r2, [r3, #14]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	7bda      	ldrb	r2, [r3, #15]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	7c1a      	ldrb	r2, [r3, #16]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	7c5a      	ldrb	r2, [r3, #17]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	01000101 	.word	0x01000101

08009bec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08c      	sub	sp, #48	@ 0x30
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009c00:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	e0da      	b.n	8009dd4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	781a      	ldrb	r2, [r3, #0]
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	785a      	ldrb	r2, [r3, #1]
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	3302      	adds	r3, #2
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	3303      	adds	r3, #3
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	4313      	orrs	r3, r2
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c4c:	bf28      	it	cs
 8009c4e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	791a      	ldrb	r2, [r3, #4]
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	795a      	ldrb	r2, [r3, #5]
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	799a      	ldrb	r2, [r3, #6]
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	79da      	ldrb	r2, [r3, #7]
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	7a1a      	ldrb	r2, [r3, #8]
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b09      	cmp	r3, #9
 8009c86:	d002      	beq.n	8009c8e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	2209      	movs	r2, #9
 8009c8c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009c8e:	88fb      	ldrh	r3, [r7, #6]
 8009c90:	2b09      	cmp	r3, #9
 8009c92:	f240 809d 	bls.w	8009dd0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009c96:	2309      	movs	r3, #9
 8009c98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c9e:	e081      	b.n	8009da4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ca0:	f107 0316 	add.w	r3, r7, #22
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ca8:	f000 f9e7 	bl	800a07a <USBH_GetNextDesc>
 8009cac:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d176      	bne.n	8009da4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d002      	beq.n	8009cc4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	2209      	movs	r2, #9
 8009cc2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cc8:	221a      	movs	r2, #26
 8009cca:	fb02 f303 	mul.w	r3, r2, r3
 8009cce:	3308      	adds	r3, #8
 8009cd0:	6a3a      	ldr	r2, [r7, #32]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	3302      	adds	r3, #2
 8009cd6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cda:	69f8      	ldr	r0, [r7, #28]
 8009cdc:	f000 f87e 	bl	8009ddc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009cea:	e043      	b.n	8009d74 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cec:	f107 0316 	add.w	r3, r7, #22
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cf4:	f000 f9c1 	bl	800a07a <USBH_GetNextDesc>
 8009cf8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	2b05      	cmp	r3, #5
 8009d00:	d138      	bne.n	8009d74 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	795b      	ldrb	r3, [r3, #5]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d113      	bne.n	8009d32 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d003      	beq.n	8009d1a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	799b      	ldrb	r3, [r3, #6]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d10b      	bne.n	8009d32 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	79db      	ldrb	r3, [r3, #7]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10b      	bne.n	8009d3a <USBH_ParseCfgDesc+0x14e>
 8009d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b09      	cmp	r3, #9
 8009d28:	d007      	beq.n	8009d3a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2c:	2209      	movs	r2, #9
 8009d2e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d30:	e003      	b.n	8009d3a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d34:	2207      	movs	r2, #7
 8009d36:	701a      	strb	r2, [r3, #0]
 8009d38:	e000      	b.n	8009d3c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d3a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d40:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d44:	3201      	adds	r2, #1
 8009d46:	00d2      	lsls	r2, r2, #3
 8009d48:	211a      	movs	r1, #26
 8009d4a:	fb01 f303 	mul.w	r3, r1, r3
 8009d4e:	4413      	add	r3, r2
 8009d50:	3308      	adds	r3, #8
 8009d52:	6a3a      	ldr	r2, [r7, #32]
 8009d54:	4413      	add	r3, r2
 8009d56:	3304      	adds	r3, #4
 8009d58:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d5c:	69b9      	ldr	r1, [r7, #24]
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 f870 	bl	8009e44 <USBH_ParseEPDesc>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d6e:	3301      	adds	r3, #1
 8009d70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	791b      	ldrb	r3, [r3, #4]
 8009d78:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d204      	bcs.n	8009d8a <USBH_ParseCfgDesc+0x19e>
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	885a      	ldrh	r2, [r3, #2]
 8009d84:	8afb      	ldrh	r3, [r7, #22]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d8b0      	bhi.n	8009cec <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	791b      	ldrb	r3, [r3, #4]
 8009d8e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d201      	bcs.n	8009d9a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e01c      	b.n	8009dd4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d9e:	3301      	adds	r3, #1
 8009da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d805      	bhi.n	8009db8 <USBH_ParseCfgDesc+0x1cc>
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	885a      	ldrh	r2, [r3, #2]
 8009db0:	8afb      	ldrh	r3, [r7, #22]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	f63f af74 	bhi.w	8009ca0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	791b      	ldrb	r3, [r3, #4]
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	bf28      	it	cs
 8009dc0:	2302      	movcs	r3, #2
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d201      	bcs.n	8009dd0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e001      	b.n	8009dd4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3730      	adds	r7, #48	@ 0x30
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	785a      	ldrb	r2, [r3, #1]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	789a      	ldrb	r2, [r3, #2]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	78da      	ldrb	r2, [r3, #3]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	3304      	adds	r3, #4
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	bf28      	it	cs
 8009e10:	2302      	movcs	r3, #2
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	795a      	ldrb	r2, [r3, #5]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	799a      	ldrb	r2, [r3, #6]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	79da      	ldrb	r2, [r3, #7]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	7a1a      	ldrb	r2, [r3, #8]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	721a      	strb	r2, [r3, #8]
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	781a      	ldrb	r2, [r3, #0]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	785a      	ldrb	r2, [r3, #1]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	789a      	ldrb	r2, [r3, #2]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	78da      	ldrb	r2, [r3, #3]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3304      	adds	r3, #4
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3305      	adds	r3, #5
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	4313      	orrs	r3, r2
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	799a      	ldrb	r2, [r3, #6]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	889b      	ldrh	r3, [r3, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ea6:	d804      	bhi.n	8009eb2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009eb0:	d901      	bls.n	8009eb6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d136      	bne.n	8009f2e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	78db      	ldrb	r3, [r3, #3]
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d108      	bne.n	8009ede <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	889b      	ldrh	r3, [r3, #4]
 8009ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ed4:	f240 8097 	bls.w	800a006 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	75fb      	strb	r3, [r7, #23]
 8009edc:	e093      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	78db      	ldrb	r3, [r3, #3]
 8009ee2:	f003 0303 	and.w	r3, r3, #3
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d107      	bne.n	8009efa <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	889b      	ldrh	r3, [r3, #4]
 8009eee:	2b40      	cmp	r3, #64	@ 0x40
 8009ef0:	f240 8089 	bls.w	800a006 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	75fb      	strb	r3, [r7, #23]
 8009ef8:	e085      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	78db      	ldrb	r3, [r3, #3]
 8009efe:	f003 0303 	and.w	r3, r3, #3
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d005      	beq.n	8009f12 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	78db      	ldrb	r3, [r3, #3]
 8009f0a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d10a      	bne.n	8009f28 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	799b      	ldrb	r3, [r3, #6]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <USBH_ParseEPDesc+0xde>
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	799b      	ldrb	r3, [r3, #6]
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	d970      	bls.n	800a004 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009f22:	2303      	movs	r3, #3
 8009f24:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f26:	e06d      	b.n	800a004 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	75fb      	strb	r3, [r7, #23]
 8009f2c:	e06b      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d13c      	bne.n	8009fb2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	78db      	ldrb	r3, [r3, #3]
 8009f3c:	f003 0303 	and.w	r3, r3, #3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d005      	beq.n	8009f50 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	78db      	ldrb	r3, [r3, #3]
 8009f48:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d106      	bne.n	8009f5e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	889b      	ldrh	r3, [r3, #4]
 8009f54:	2b40      	cmp	r3, #64	@ 0x40
 8009f56:	d956      	bls.n	800a006 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f5c:	e053      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	78db      	ldrb	r3, [r3, #3]
 8009f62:	f003 0303 	and.w	r3, r3, #3
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d10e      	bne.n	8009f88 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	799b      	ldrb	r3, [r3, #6]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d007      	beq.n	8009f82 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009f76:	2b10      	cmp	r3, #16
 8009f78:	d803      	bhi.n	8009f82 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009f7e:	2b40      	cmp	r3, #64	@ 0x40
 8009f80:	d941      	bls.n	800a006 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f82:	2303      	movs	r3, #3
 8009f84:	75fb      	strb	r3, [r7, #23]
 8009f86:	e03e      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	78db      	ldrb	r3, [r3, #3]
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d10b      	bne.n	8009fac <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	799b      	ldrb	r3, [r3, #6]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d004      	beq.n	8009fa6 <USBH_ParseEPDesc+0x162>
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	889b      	ldrh	r3, [r3, #4]
 8009fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fa4:	d32f      	bcc.n	800a006 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	75fb      	strb	r3, [r7, #23]
 8009faa:	e02c      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009fac:	2303      	movs	r3, #3
 8009fae:	75fb      	strb	r3, [r7, #23]
 8009fb0:	e029      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d120      	bne.n	8009ffe <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	78db      	ldrb	r3, [r3, #3]
 8009fc0:	f003 0303 	and.w	r3, r3, #3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d106      	bne.n	8009fd6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	889b      	ldrh	r3, [r3, #4]
 8009fcc:	2b08      	cmp	r3, #8
 8009fce:	d01a      	beq.n	800a006 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	75fb      	strb	r3, [r7, #23]
 8009fd4:	e017      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	78db      	ldrb	r3, [r3, #3]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d10a      	bne.n	8009ff8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	799b      	ldrb	r3, [r3, #6]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <USBH_ParseEPDesc+0x1ae>
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	889b      	ldrh	r3, [r3, #4]
 8009fee:	2b08      	cmp	r3, #8
 8009ff0:	d909      	bls.n	800a006 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	75fb      	strb	r3, [r7, #23]
 8009ff6:	e006      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	75fb      	strb	r3, [r7, #23]
 8009ffc:	e003      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009ffe:	2303      	movs	r3, #3
 800a000:	75fb      	strb	r3, [r7, #23]
 800a002:	e000      	b.n	800a006 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a004:	bf00      	nop
  }

  return status;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	371c      	adds	r7, #28
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3301      	adds	r3, #1
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d120      	bne.n	800a06e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	1e9a      	subs	r2, r3, #2
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	4293      	cmp	r3, r2
 800a036:	bf28      	it	cs
 800a038:	4613      	movcs	r3, r2
 800a03a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3302      	adds	r3, #2
 800a040:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a042:	2300      	movs	r3, #0
 800a044:	82fb      	strh	r3, [r7, #22]
 800a046:	e00b      	b.n	800a060 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a048:	8afb      	ldrh	r3, [r7, #22]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	781a      	ldrb	r2, [r3, #0]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	3301      	adds	r3, #1
 800a058:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a05a:	8afb      	ldrh	r3, [r7, #22]
 800a05c:	3302      	adds	r3, #2
 800a05e:	82fb      	strh	r3, [r7, #22]
 800a060:	8afa      	ldrh	r2, [r7, #22]
 800a062:	8abb      	ldrh	r3, [r7, #20]
 800a064:	429a      	cmp	r2, r3
 800a066:	d3ef      	bcc.n	800a048 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2200      	movs	r2, #0
 800a06c:	701a      	strb	r2, [r3, #0]
  }
}
 800a06e:	bf00      	nop
 800a070:	371c      	adds	r7, #28
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b085      	sub	sp, #20
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	7812      	ldrb	r2, [r2, #0]
 800a08c:	4413      	add	r3, r2
 800a08e:	b29a      	uxth	r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b086      	sub	sp, #24
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	789b      	ldrb	r3, [r3, #2]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d002      	beq.n	800a0ce <USBH_CtlReq+0x20>
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d00f      	beq.n	800a0ec <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a0cc:	e027      	b.n	800a11e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	88fa      	ldrh	r2, [r7, #6]
 800a0d8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ea:	e018      	b.n	800a11e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 f81b 	bl	800a128 <USBH_HandleControl>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <USBH_CtlReq+0x54>
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d106      	bne.n	800a110 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2201      	movs	r2, #1
 800a106:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	761a      	strb	r2, [r3, #24]
      break;
 800a10e:	e005      	b.n	800a11c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d102      	bne.n	800a11c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2201      	movs	r2, #1
 800a11a:	709a      	strb	r2, [r3, #2]
      break;
 800a11c:	bf00      	nop
  }
  return status;
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a130:	2301      	movs	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a134:	2300      	movs	r3, #0
 800a136:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	7e1b      	ldrb	r3, [r3, #24]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	2b0a      	cmp	r3, #10
 800a140:	f200 8156 	bhi.w	800a3f0 <USBH_HandleControl+0x2c8>
 800a144:	a201      	add	r2, pc, #4	@ (adr r2, 800a14c <USBH_HandleControl+0x24>)
 800a146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14a:	bf00      	nop
 800a14c:	0800a179 	.word	0x0800a179
 800a150:	0800a193 	.word	0x0800a193
 800a154:	0800a1fd 	.word	0x0800a1fd
 800a158:	0800a223 	.word	0x0800a223
 800a15c:	0800a25b 	.word	0x0800a25b
 800a160:	0800a285 	.word	0x0800a285
 800a164:	0800a2d7 	.word	0x0800a2d7
 800a168:	0800a2f9 	.word	0x0800a2f9
 800a16c:	0800a335 	.word	0x0800a335
 800a170:	0800a35b 	.word	0x0800a35b
 800a174:	0800a399 	.word	0x0800a399
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f103 0110 	add.w	r1, r3, #16
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	795b      	ldrb	r3, [r3, #5]
 800a182:	461a      	mov	r2, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f943 	bl	800a410 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2202      	movs	r2, #2
 800a18e:	761a      	strb	r2, [r3, #24]
      break;
 800a190:	e139      	b.n	800a406 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	795b      	ldrb	r3, [r3, #5]
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fb4f 	bl	800a83c <USBH_LL_GetURBState>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d11e      	bne.n	800a1e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	7c1b      	ldrb	r3, [r3, #16]
 800a1ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a1b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	8adb      	ldrh	r3, [r3, #22]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00a      	beq.n	800a1d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a1ba:	7b7b      	ldrb	r3, [r7, #13]
 800a1bc:	2b80      	cmp	r3, #128	@ 0x80
 800a1be:	d103      	bne.n	800a1c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1c6:	e115      	b.n	800a3f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2205      	movs	r2, #5
 800a1cc:	761a      	strb	r2, [r3, #24]
      break;
 800a1ce:	e111      	b.n	800a3f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a1d0:	7b7b      	ldrb	r3, [r7, #13]
 800a1d2:	2b80      	cmp	r3, #128	@ 0x80
 800a1d4:	d103      	bne.n	800a1de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2209      	movs	r2, #9
 800a1da:	761a      	strb	r2, [r3, #24]
      break;
 800a1dc:	e10a      	b.n	800a3f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2207      	movs	r2, #7
 800a1e2:	761a      	strb	r2, [r3, #24]
      break;
 800a1e4:	e106      	b.n	800a3f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d003      	beq.n	800a1f4 <USBH_HandleControl+0xcc>
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	f040 8100 	bne.w	800a3f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	220b      	movs	r2, #11
 800a1f8:	761a      	strb	r2, [r3, #24]
      break;
 800a1fa:	e0fb      	b.n	800a3f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a202:	b29a      	uxth	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6899      	ldr	r1, [r3, #8]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	899a      	ldrh	r2, [r3, #12]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	791b      	ldrb	r3, [r3, #4]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f93a 	bl	800a48e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2204      	movs	r2, #4
 800a21e:	761a      	strb	r2, [r3, #24]
      break;
 800a220:	e0f1      	b.n	800a406 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	791b      	ldrb	r3, [r3, #4]
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fb07 	bl	800a83c <USBH_LL_GetURBState>
 800a22e:	4603      	mov	r3, r0
 800a230:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d102      	bne.n	800a23e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2209      	movs	r2, #9
 800a23c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
 800a240:	2b05      	cmp	r3, #5
 800a242:	d102      	bne.n	800a24a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a244:	2303      	movs	r3, #3
 800a246:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a248:	e0d6      	b.n	800a3f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	f040 80d3 	bne.w	800a3f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	220b      	movs	r2, #11
 800a256:	761a      	strb	r2, [r3, #24]
      break;
 800a258:	e0ce      	b.n	800a3f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6899      	ldr	r1, [r3, #8]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	899a      	ldrh	r2, [r3, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	795b      	ldrb	r3, [r3, #5]
 800a266:	2001      	movs	r0, #1
 800a268:	9000      	str	r0, [sp, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f8ea 	bl	800a444 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a276:	b29a      	uxth	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2206      	movs	r2, #6
 800a280:	761a      	strb	r2, [r3, #24]
      break;
 800a282:	e0c0      	b.n	800a406 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	795b      	ldrb	r3, [r3, #5]
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fad6 	bl	800a83c <USBH_LL_GetURBState>
 800a290:	4603      	mov	r3, r0
 800a292:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d103      	bne.n	800a2a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2207      	movs	r2, #7
 800a29e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2a0:	e0ac      	b.n	800a3fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	2b05      	cmp	r3, #5
 800a2a6:	d105      	bne.n	800a2b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	220c      	movs	r2, #12
 800a2ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2b2:	e0a3      	b.n	800a3fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d103      	bne.n	800a2c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2205      	movs	r2, #5
 800a2be:	761a      	strb	r2, [r3, #24]
      break;
 800a2c0:	e09c      	b.n	800a3fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a2c2:	7bbb      	ldrb	r3, [r7, #14]
 800a2c4:	2b04      	cmp	r3, #4
 800a2c6:	f040 8099 	bne.w	800a3fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	220b      	movs	r2, #11
 800a2ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d4:	e092      	b.n	800a3fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	791b      	ldrb	r3, [r3, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f8d5 	bl	800a48e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2208      	movs	r2, #8
 800a2f4:	761a      	strb	r2, [r3, #24]

      break;
 800a2f6:	e086      	b.n	800a406 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	791b      	ldrb	r3, [r3, #4]
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa9c 	bl	800a83c <USBH_LL_GetURBState>
 800a304:	4603      	mov	r3, r0
 800a306:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a308:	7bbb      	ldrb	r3, [r7, #14]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d105      	bne.n	800a31a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	220d      	movs	r2, #13
 800a312:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a318:	e072      	b.n	800a400 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d103      	bne.n	800a328 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	220b      	movs	r2, #11
 800a324:	761a      	strb	r2, [r3, #24]
      break;
 800a326:	e06b      	b.n	800a400 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	2b05      	cmp	r3, #5
 800a32c:	d168      	bne.n	800a400 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a32e:	2303      	movs	r3, #3
 800a330:	73fb      	strb	r3, [r7, #15]
      break;
 800a332:	e065      	b.n	800a400 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	795b      	ldrb	r3, [r3, #5]
 800a338:	2201      	movs	r2, #1
 800a33a:	9200      	str	r2, [sp, #0]
 800a33c:	2200      	movs	r2, #0
 800a33e:	2100      	movs	r1, #0
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f87f 	bl	800a444 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	220a      	movs	r2, #10
 800a356:	761a      	strb	r2, [r3, #24]
      break;
 800a358:	e055      	b.n	800a406 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	795b      	ldrb	r3, [r3, #5]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fa6b 	bl	800a83c <USBH_LL_GetURBState>
 800a366:	4603      	mov	r3, r0
 800a368:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d105      	bne.n	800a37c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	220d      	movs	r2, #13
 800a378:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a37a:	e043      	b.n	800a404 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d103      	bne.n	800a38a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2209      	movs	r2, #9
 800a386:	761a      	strb	r2, [r3, #24]
      break;
 800a388:	e03c      	b.n	800a404 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a38a:	7bbb      	ldrb	r3, [r7, #14]
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d139      	bne.n	800a404 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	220b      	movs	r2, #11
 800a394:	761a      	strb	r2, [r3, #24]
      break;
 800a396:	e035      	b.n	800a404 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	7e5b      	ldrb	r3, [r3, #25]
 800a39c:	3301      	adds	r3, #1
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	765a      	strb	r2, [r3, #25]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	7e5b      	ldrb	r3, [r3, #25]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d806      	bhi.n	800a3ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a3b8:	e025      	b.n	800a406 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a3c0:	2106      	movs	r1, #6
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	795b      	ldrb	r3, [r3, #5]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f8b9 	bl	800a54a <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	791b      	ldrb	r3, [r3, #4]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f8b3 	bl	800a54a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ee:	e00a      	b.n	800a406 <USBH_HandleControl+0x2de>

    default:
      break;
 800a3f0:	bf00      	nop
 800a3f2:	e008      	b.n	800a406 <USBH_HandleControl+0x2de>
      break;
 800a3f4:	bf00      	nop
 800a3f6:	e006      	b.n	800a406 <USBH_HandleControl+0x2de>
      break;
 800a3f8:	bf00      	nop
 800a3fa:	e004      	b.n	800a406 <USBH_HandleControl+0x2de>
      break;
 800a3fc:	bf00      	nop
 800a3fe:	e002      	b.n	800a406 <USBH_HandleControl+0x2de>
      break;
 800a400:	bf00      	nop
 800a402:	e000      	b.n	800a406 <USBH_HandleControl+0x2de>
      break;
 800a404:	bf00      	nop
  }

  return status;
 800a406:	7bfb      	ldrb	r3, [r7, #15]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af04      	add	r7, sp, #16
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a41e:	79f9      	ldrb	r1, [r7, #7]
 800a420:	2300      	movs	r3, #0
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	2308      	movs	r3, #8
 800a426:	9302      	str	r3, [sp, #8]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	9301      	str	r3, [sp, #4]
 800a42c:	2300      	movs	r3, #0
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	2300      	movs	r3, #0
 800a432:	2200      	movs	r2, #0
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f000 f9d0 	bl	800a7da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af04      	add	r7, sp, #16
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	4611      	mov	r1, r2
 800a450:	461a      	mov	r2, r3
 800a452:	460b      	mov	r3, r1
 800a454:	80fb      	strh	r3, [r7, #6]
 800a456:	4613      	mov	r3, r2
 800a458:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a468:	7979      	ldrb	r1, [r7, #5]
 800a46a:	7e3b      	ldrb	r3, [r7, #24]
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	2301      	movs	r3, #1
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	2200      	movs	r2, #0
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f9ab 	bl	800a7da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b088      	sub	sp, #32
 800a492:	af04      	add	r7, sp, #16
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	4611      	mov	r1, r2
 800a49a:	461a      	mov	r2, r3
 800a49c:	460b      	mov	r3, r1
 800a49e:	80fb      	strh	r3, [r7, #6]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4a4:	7979      	ldrb	r1, [r7, #5]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	88fb      	ldrh	r3, [r7, #6]
 800a4ac:	9302      	str	r3, [sp, #8]
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f98d 	bl	800a7da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a4c0:	2300      	movs	r3, #0

}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b086      	sub	sp, #24
 800a4ce:	af04      	add	r7, sp, #16
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	4608      	mov	r0, r1
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	4603      	mov	r3, r0
 800a4da:	70fb      	strb	r3, [r7, #3]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70bb      	strb	r3, [r7, #2]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a4e4:	7878      	ldrb	r0, [r7, #1]
 800a4e6:	78ba      	ldrb	r2, [r7, #2]
 800a4e8:	78f9      	ldrb	r1, [r7, #3]
 800a4ea:	8b3b      	ldrh	r3, [r7, #24]
 800a4ec:	9302      	str	r3, [sp, #8]
 800a4ee:	7d3b      	ldrb	r3, [r7, #20]
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	7c3b      	ldrb	r3, [r7, #16]
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f93f 	bl	800a77c <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f836 	bl	800a586 <USBH_GetFreePipe>
 800a51a:	4603      	mov	r3, r0
 800a51c:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a51e:	89fb      	ldrh	r3, [r7, #14]
 800a520:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a524:	4293      	cmp	r3, r2
 800a526:	d00a      	beq.n	800a53e <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	89fb      	ldrh	r3, [r7, #14]
 800a52c:	f003 030f 	and.w	r3, r3, #15
 800a530:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	33e0      	adds	r3, #224	@ 0xe0
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	440b      	add	r3, r1
 800a53c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a53e:	89fb      	ldrh	r3, [r7, #14]
 800a540:	b2db      	uxtb	r3, r3
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	2b0f      	cmp	r3, #15
 800a55a:	d80d      	bhi.n	800a578 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	33e0      	adds	r3, #224	@ 0xe0
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	78fb      	ldrb	r3, [r7, #3]
 800a56a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a56e:	6879      	ldr	r1, [r7, #4]
 800a570:	33e0      	adds	r3, #224	@ 0xe0
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	440b      	add	r3, r1
 800a576:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a586:	b480      	push	{r7}
 800a588:	b085      	sub	sp, #20
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]
 800a596:	e00f      	b.n	800a5b8 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	33e0      	adds	r3, #224	@ 0xe0
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	e007      	b.n	800a5c2 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	73fb      	strb	r3, [r7, #15]
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	2b0f      	cmp	r3, #15
 800a5bc:	d9ec      	bls.n	800a598 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a5be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a5d4:	4802      	ldr	r0, [pc, #8]	@ (800a5e0 <MX_USB_HOST_Process+0x10>)
 800a5d6:	f7fe fce5 	bl	8008fa4 <USBH_Process>
}
 800a5da:	bf00      	nop
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200001a4 	.word	0x200001a4

0800a5e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff f89e 	bl	8009734 <USBH_LL_IncTimer>
}
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff f8d6 	bl	80097c0 <USBH_LL_Connect>
}
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff f8df 	bl	80097ee <USBH_LL_Disconnect>
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	460b      	mov	r3, r1
 800a642:	70fb      	strb	r3, [r7, #3]
 800a644:	4613      	mov	r3, r2
 800a646:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff f890 	bl	8009788 <USBH_LL_PortEnabled>
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a67e:	4618      	mov	r0, r3
 800a680:	f7ff f890 	bl	80097a4 <USBH_LL_PortDisabled>
}
 800a684:	bf00      	nop
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fa f922 	bl	80048ec <HAL_HCD_Start>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 f8fa 	bl	800a8a8 <USBH_Get_USB_Status>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fa f92a 	bl	8004932 <HAL_HCD_Stop>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 f8df 	bl	800a8a8 <USBH_Get_USB_Status>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a700:	2301      	movs	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fa f951 	bl	80049b2 <HAL_HCD_GetCurrentSpeed>
 800a710:	4603      	mov	r3, r0
 800a712:	2b02      	cmp	r3, #2
 800a714:	d00c      	beq.n	800a730 <USBH_LL_GetSpeed+0x38>
 800a716:	2b02      	cmp	r3, #2
 800a718:	d80d      	bhi.n	800a736 <USBH_LL_GetSpeed+0x3e>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <USBH_LL_GetSpeed+0x2c>
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d003      	beq.n	800a72a <USBH_LL_GetSpeed+0x32>
 800a722:	e008      	b.n	800a736 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a724:	2300      	movs	r3, #0
 800a726:	73fb      	strb	r3, [r7, #15]
    break;
 800a728:	e008      	b.n	800a73c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a72a:	2301      	movs	r3, #1
 800a72c:	73fb      	strb	r3, [r7, #15]
    break;
 800a72e:	e005      	b.n	800a73c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a730:	2302      	movs	r3, #2
 800a732:	73fb      	strb	r3, [r7, #15]
    break;
 800a734:	e002      	b.n	800a73c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a736:	2301      	movs	r3, #1
 800a738:	73fb      	strb	r3, [r7, #15]
    break;
 800a73a:	bf00      	nop
  }
  return  speed;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b084      	sub	sp, #16
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fa f905 	bl	800496c <HAL_HCD_ResetPort>
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f89d 	bl	800a8a8 <USBH_Get_USB_Status>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a772:	7bbb      	ldrb	r3, [r7, #14]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a77c:	b590      	push	{r4, r7, lr}
 800a77e:	b089      	sub	sp, #36	@ 0x24
 800a780:	af04      	add	r7, sp, #16
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	4608      	mov	r0, r1
 800a786:	4611      	mov	r1, r2
 800a788:	461a      	mov	r2, r3
 800a78a:	4603      	mov	r3, r0
 800a78c:	70fb      	strb	r3, [r7, #3]
 800a78e:	460b      	mov	r3, r1
 800a790:	70bb      	strb	r3, [r7, #2]
 800a792:	4613      	mov	r3, r2
 800a794:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a7a4:	787c      	ldrb	r4, [r7, #1]
 800a7a6:	78ba      	ldrb	r2, [r7, #2]
 800a7a8:	78f9      	ldrb	r1, [r7, #3]
 800a7aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7ac:	9302      	str	r3, [sp, #8]
 800a7ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	4623      	mov	r3, r4
 800a7bc:	f7f9 fd2f 	bl	800421e <HAL_HCD_HC_Init>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 f86e 	bl	800a8a8 <USBH_Get_USB_Status>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd90      	pop	{r4, r7, pc}

0800a7da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a7da:	b590      	push	{r4, r7, lr}
 800a7dc:	b089      	sub	sp, #36	@ 0x24
 800a7de:	af04      	add	r7, sp, #16
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	70fb      	strb	r3, [r7, #3]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70bb      	strb	r3, [r7, #2]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a802:	787c      	ldrb	r4, [r7, #1]
 800a804:	78ba      	ldrb	r2, [r7, #2]
 800a806:	78f9      	ldrb	r1, [r7, #3]
 800a808:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a80c:	9303      	str	r3, [sp, #12]
 800a80e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a810:	9302      	str	r3, [sp, #8]
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	4623      	mov	r3, r4
 800a81e:	f7f9 fdb7 	bl	8004390 <HAL_HCD_HC_SubmitRequest>
 800a822:	4603      	mov	r3, r0
 800a824:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 f83d 	bl	800a8a8 <USBH_Get_USB_Status>
 800a82e:	4603      	mov	r3, r0
 800a830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a832:	7bbb      	ldrb	r3, [r7, #14]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd90      	pop	{r4, r7, pc}

0800a83c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a84e:	78fa      	ldrb	r2, [r7, #3]
 800a850:	4611      	mov	r1, r2
 800a852:	4618      	mov	r0, r3
 800a854:	f7fa f898 	bl	8004988 <HAL_HCD_HC_GetURBState>
 800a858:	4603      	mov	r3, r0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a874:	2b01      	cmp	r3, #1
 800a876:	d103      	bne.n	800a880 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a878:	78fb      	ldrb	r3, [r7, #3]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f840 	bl	800a900 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a880:	20c8      	movs	r0, #200	@ 0xc8
 800a882:	f7f9 f9d1 	bl	8003c28 <HAL_Delay>
  return USBH_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7f9 f9c5 	bl	8003c28 <HAL_Delay>
}
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d817      	bhi.n	800a8ec <USBH_Get_USB_Status+0x44>
 800a8bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c4 <USBH_Get_USB_Status+0x1c>)
 800a8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c2:	bf00      	nop
 800a8c4:	0800a8d5 	.word	0x0800a8d5
 800a8c8:	0800a8db 	.word	0x0800a8db
 800a8cc:	0800a8e1 	.word	0x0800a8e1
 800a8d0:	0800a8e7 	.word	0x0800a8e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d8:	e00b      	b.n	800a8f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a8da:	2302      	movs	r3, #2
 800a8dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8de:	e008      	b.n	800a8f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e4:	e005      	b.n	800a8f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ea:	e002      	b.n	800a8f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f0:	bf00      	nop
  }
  return usb_status;
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a90a:	79fb      	ldrb	r3, [r7, #7]
 800a90c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
 800a918:	e001      	b.n	800a91e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a91a:	2301      	movs	r3, #1
 800a91c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
 800a920:	461a      	mov	r2, r3
 800a922:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a926:	4803      	ldr	r0, [pc, #12]	@ (800a934 <MX_DriverVbusFS+0x34>)
 800a928:	f7f9 fc60 	bl	80041ec <HAL_GPIO_WritePin>
}
 800a92c:	bf00      	nop
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	40021800 	.word	0x40021800

0800a938 <malloc>:
 800a938:	4b02      	ldr	r3, [pc, #8]	@ (800a944 <malloc+0xc>)
 800a93a:	4601      	mov	r1, r0
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	f000 b825 	b.w	800a98c <_malloc_r>
 800a942:	bf00      	nop
 800a944:	200000b4 	.word	0x200000b4

0800a948 <sbrk_aligned>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	4e0f      	ldr	r6, [pc, #60]	@ (800a988 <sbrk_aligned+0x40>)
 800a94c:	460c      	mov	r4, r1
 800a94e:	6831      	ldr	r1, [r6, #0]
 800a950:	4605      	mov	r5, r0
 800a952:	b911      	cbnz	r1, 800a95a <sbrk_aligned+0x12>
 800a954:	f000 fa46 	bl	800ade4 <_sbrk_r>
 800a958:	6030      	str	r0, [r6, #0]
 800a95a:	4621      	mov	r1, r4
 800a95c:	4628      	mov	r0, r5
 800a95e:	f000 fa41 	bl	800ade4 <_sbrk_r>
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	d103      	bne.n	800a96e <sbrk_aligned+0x26>
 800a966:	f04f 34ff 	mov.w	r4, #4294967295
 800a96a:	4620      	mov	r0, r4
 800a96c:	bd70      	pop	{r4, r5, r6, pc}
 800a96e:	1cc4      	adds	r4, r0, #3
 800a970:	f024 0403 	bic.w	r4, r4, #3
 800a974:	42a0      	cmp	r0, r4
 800a976:	d0f8      	beq.n	800a96a <sbrk_aligned+0x22>
 800a978:	1a21      	subs	r1, r4, r0
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 fa32 	bl	800ade4 <_sbrk_r>
 800a980:	3001      	adds	r0, #1
 800a982:	d1f2      	bne.n	800a96a <sbrk_aligned+0x22>
 800a984:	e7ef      	b.n	800a966 <sbrk_aligned+0x1e>
 800a986:	bf00      	nop
 800a988:	2000095c 	.word	0x2000095c

0800a98c <_malloc_r>:
 800a98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a990:	1ccd      	adds	r5, r1, #3
 800a992:	f025 0503 	bic.w	r5, r5, #3
 800a996:	3508      	adds	r5, #8
 800a998:	2d0c      	cmp	r5, #12
 800a99a:	bf38      	it	cc
 800a99c:	250c      	movcc	r5, #12
 800a99e:	2d00      	cmp	r5, #0
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	db01      	blt.n	800a9a8 <_malloc_r+0x1c>
 800a9a4:	42a9      	cmp	r1, r5
 800a9a6:	d904      	bls.n	800a9b2 <_malloc_r+0x26>
 800a9a8:	230c      	movs	r3, #12
 800a9aa:	6033      	str	r3, [r6, #0]
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa88 <_malloc_r+0xfc>
 800a9b6:	f000 f869 	bl	800aa8c <__malloc_lock>
 800a9ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a9be:	461c      	mov	r4, r3
 800a9c0:	bb44      	cbnz	r4, 800aa14 <_malloc_r+0x88>
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7ff ffbf 	bl	800a948 <sbrk_aligned>
 800a9ca:	1c43      	adds	r3, r0, #1
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	d158      	bne.n	800aa82 <_malloc_r+0xf6>
 800a9d0:	f8d8 4000 	ldr.w	r4, [r8]
 800a9d4:	4627      	mov	r7, r4
 800a9d6:	2f00      	cmp	r7, #0
 800a9d8:	d143      	bne.n	800aa62 <_malloc_r+0xd6>
 800a9da:	2c00      	cmp	r4, #0
 800a9dc:	d04b      	beq.n	800aa76 <_malloc_r+0xea>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	eb04 0903 	add.w	r9, r4, r3
 800a9e8:	f000 f9fc 	bl	800ade4 <_sbrk_r>
 800a9ec:	4581      	cmp	r9, r0
 800a9ee:	d142      	bne.n	800aa76 <_malloc_r+0xea>
 800a9f0:	6821      	ldr	r1, [r4, #0]
 800a9f2:	1a6d      	subs	r5, r5, r1
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f7ff ffa6 	bl	800a948 <sbrk_aligned>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d03a      	beq.n	800aa76 <_malloc_r+0xea>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	442b      	add	r3, r5
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	f8d8 3000 	ldr.w	r3, [r8]
 800aa0a:	685a      	ldr	r2, [r3, #4]
 800aa0c:	bb62      	cbnz	r2, 800aa68 <_malloc_r+0xdc>
 800aa0e:	f8c8 7000 	str.w	r7, [r8]
 800aa12:	e00f      	b.n	800aa34 <_malloc_r+0xa8>
 800aa14:	6822      	ldr	r2, [r4, #0]
 800aa16:	1b52      	subs	r2, r2, r5
 800aa18:	d420      	bmi.n	800aa5c <_malloc_r+0xd0>
 800aa1a:	2a0b      	cmp	r2, #11
 800aa1c:	d917      	bls.n	800aa4e <_malloc_r+0xc2>
 800aa1e:	1961      	adds	r1, r4, r5
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	6025      	str	r5, [r4, #0]
 800aa24:	bf18      	it	ne
 800aa26:	6059      	strne	r1, [r3, #4]
 800aa28:	6863      	ldr	r3, [r4, #4]
 800aa2a:	bf08      	it	eq
 800aa2c:	f8c8 1000 	streq.w	r1, [r8]
 800aa30:	5162      	str	r2, [r4, r5]
 800aa32:	604b      	str	r3, [r1, #4]
 800aa34:	4630      	mov	r0, r6
 800aa36:	f000 f82f 	bl	800aa98 <__malloc_unlock>
 800aa3a:	f104 000b 	add.w	r0, r4, #11
 800aa3e:	1d23      	adds	r3, r4, #4
 800aa40:	f020 0007 	bic.w	r0, r0, #7
 800aa44:	1ac2      	subs	r2, r0, r3
 800aa46:	bf1c      	itt	ne
 800aa48:	1a1b      	subne	r3, r3, r0
 800aa4a:	50a3      	strne	r3, [r4, r2]
 800aa4c:	e7af      	b.n	800a9ae <_malloc_r+0x22>
 800aa4e:	6862      	ldr	r2, [r4, #4]
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	bf0c      	ite	eq
 800aa54:	f8c8 2000 	streq.w	r2, [r8]
 800aa58:	605a      	strne	r2, [r3, #4]
 800aa5a:	e7eb      	b.n	800aa34 <_malloc_r+0xa8>
 800aa5c:	4623      	mov	r3, r4
 800aa5e:	6864      	ldr	r4, [r4, #4]
 800aa60:	e7ae      	b.n	800a9c0 <_malloc_r+0x34>
 800aa62:	463c      	mov	r4, r7
 800aa64:	687f      	ldr	r7, [r7, #4]
 800aa66:	e7b6      	b.n	800a9d6 <_malloc_r+0x4a>
 800aa68:	461a      	mov	r2, r3
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	42a3      	cmp	r3, r4
 800aa6e:	d1fb      	bne.n	800aa68 <_malloc_r+0xdc>
 800aa70:	2300      	movs	r3, #0
 800aa72:	6053      	str	r3, [r2, #4]
 800aa74:	e7de      	b.n	800aa34 <_malloc_r+0xa8>
 800aa76:	230c      	movs	r3, #12
 800aa78:	6033      	str	r3, [r6, #0]
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f000 f80c 	bl	800aa98 <__malloc_unlock>
 800aa80:	e794      	b.n	800a9ac <_malloc_r+0x20>
 800aa82:	6005      	str	r5, [r0, #0]
 800aa84:	e7d6      	b.n	800aa34 <_malloc_r+0xa8>
 800aa86:	bf00      	nop
 800aa88:	20000960 	.word	0x20000960

0800aa8c <__malloc_lock>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	@ (800aa94 <__malloc_lock+0x8>)
 800aa8e:	f000 b9f6 	b.w	800ae7e <__retarget_lock_acquire_recursive>
 800aa92:	bf00      	nop
 800aa94:	20000aa4 	.word	0x20000aa4

0800aa98 <__malloc_unlock>:
 800aa98:	4801      	ldr	r0, [pc, #4]	@ (800aaa0 <__malloc_unlock+0x8>)
 800aa9a:	f000 b9f1 	b.w	800ae80 <__retarget_lock_release_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	20000aa4 	.word	0x20000aa4

0800aaa4 <rand>:
 800aaa4:	4b16      	ldr	r3, [pc, #88]	@ (800ab00 <rand+0x5c>)
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	681c      	ldr	r4, [r3, #0]
 800aaaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aaac:	b9b3      	cbnz	r3, 800aadc <rand+0x38>
 800aaae:	2018      	movs	r0, #24
 800aab0:	f7ff ff42 	bl	800a938 <malloc>
 800aab4:	4602      	mov	r2, r0
 800aab6:	6320      	str	r0, [r4, #48]	@ 0x30
 800aab8:	b920      	cbnz	r0, 800aac4 <rand+0x20>
 800aaba:	4b12      	ldr	r3, [pc, #72]	@ (800ab04 <rand+0x60>)
 800aabc:	4812      	ldr	r0, [pc, #72]	@ (800ab08 <rand+0x64>)
 800aabe:	2152      	movs	r1, #82	@ 0x52
 800aac0:	f000 f9e0 	bl	800ae84 <__assert_func>
 800aac4:	4911      	ldr	r1, [pc, #68]	@ (800ab0c <rand+0x68>)
 800aac6:	4b12      	ldr	r3, [pc, #72]	@ (800ab10 <rand+0x6c>)
 800aac8:	e9c0 1300 	strd	r1, r3, [r0]
 800aacc:	4b11      	ldr	r3, [pc, #68]	@ (800ab14 <rand+0x70>)
 800aace:	6083      	str	r3, [r0, #8]
 800aad0:	230b      	movs	r3, #11
 800aad2:	8183      	strh	r3, [r0, #12]
 800aad4:	2100      	movs	r1, #0
 800aad6:	2001      	movs	r0, #1
 800aad8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aadc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aade:	480e      	ldr	r0, [pc, #56]	@ (800ab18 <rand+0x74>)
 800aae0:	690b      	ldr	r3, [r1, #16]
 800aae2:	694c      	ldr	r4, [r1, #20]
 800aae4:	4a0d      	ldr	r2, [pc, #52]	@ (800ab1c <rand+0x78>)
 800aae6:	4358      	muls	r0, r3
 800aae8:	fb02 0004 	mla	r0, r2, r4, r0
 800aaec:	fba3 3202 	umull	r3, r2, r3, r2
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	eb40 0002 	adc.w	r0, r0, r2
 800aaf6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800aafa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800aafe:	bd10      	pop	{r4, pc}
 800ab00:	200000b4 	.word	0x200000b4
 800ab04:	0800dc90 	.word	0x0800dc90
 800ab08:	0800dca7 	.word	0x0800dca7
 800ab0c:	abcd330e 	.word	0xabcd330e
 800ab10:	e66d1234 	.word	0xe66d1234
 800ab14:	0005deec 	.word	0x0005deec
 800ab18:	5851f42d 	.word	0x5851f42d
 800ab1c:	4c957f2d 	.word	0x4c957f2d

0800ab20 <std>:
 800ab20:	2300      	movs	r3, #0
 800ab22:	b510      	push	{r4, lr}
 800ab24:	4604      	mov	r4, r0
 800ab26:	e9c0 3300 	strd	r3, r3, [r0]
 800ab2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab2e:	6083      	str	r3, [r0, #8]
 800ab30:	8181      	strh	r1, [r0, #12]
 800ab32:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab34:	81c2      	strh	r2, [r0, #14]
 800ab36:	6183      	str	r3, [r0, #24]
 800ab38:	4619      	mov	r1, r3
 800ab3a:	2208      	movs	r2, #8
 800ab3c:	305c      	adds	r0, #92	@ 0x5c
 800ab3e:	f000 f914 	bl	800ad6a <memset>
 800ab42:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <std+0x58>)
 800ab44:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab46:	4b0d      	ldr	r3, [pc, #52]	@ (800ab7c <std+0x5c>)
 800ab48:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab80 <std+0x60>)
 800ab4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab84 <std+0x64>)
 800ab50:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab52:	4b0d      	ldr	r3, [pc, #52]	@ (800ab88 <std+0x68>)
 800ab54:	6224      	str	r4, [r4, #32]
 800ab56:	429c      	cmp	r4, r3
 800ab58:	d006      	beq.n	800ab68 <std+0x48>
 800ab5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab5e:	4294      	cmp	r4, r2
 800ab60:	d002      	beq.n	800ab68 <std+0x48>
 800ab62:	33d0      	adds	r3, #208	@ 0xd0
 800ab64:	429c      	cmp	r4, r3
 800ab66:	d105      	bne.n	800ab74 <std+0x54>
 800ab68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab70:	f000 b984 	b.w	800ae7c <__retarget_lock_init_recursive>
 800ab74:	bd10      	pop	{r4, pc}
 800ab76:	bf00      	nop
 800ab78:	0800ace5 	.word	0x0800ace5
 800ab7c:	0800ad07 	.word	0x0800ad07
 800ab80:	0800ad3f 	.word	0x0800ad3f
 800ab84:	0800ad63 	.word	0x0800ad63
 800ab88:	20000964 	.word	0x20000964

0800ab8c <stdio_exit_handler>:
 800ab8c:	4a02      	ldr	r2, [pc, #8]	@ (800ab98 <stdio_exit_handler+0xc>)
 800ab8e:	4903      	ldr	r1, [pc, #12]	@ (800ab9c <stdio_exit_handler+0x10>)
 800ab90:	4803      	ldr	r0, [pc, #12]	@ (800aba0 <stdio_exit_handler+0x14>)
 800ab92:	f000 b869 	b.w	800ac68 <_fwalk_sglue>
 800ab96:	bf00      	nop
 800ab98:	200000a8 	.word	0x200000a8
 800ab9c:	0800b629 	.word	0x0800b629
 800aba0:	200000b8 	.word	0x200000b8

0800aba4 <cleanup_stdio>:
 800aba4:	6841      	ldr	r1, [r0, #4]
 800aba6:	4b0c      	ldr	r3, [pc, #48]	@ (800abd8 <cleanup_stdio+0x34>)
 800aba8:	4299      	cmp	r1, r3
 800abaa:	b510      	push	{r4, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	d001      	beq.n	800abb4 <cleanup_stdio+0x10>
 800abb0:	f000 fd3a 	bl	800b628 <_fflush_r>
 800abb4:	68a1      	ldr	r1, [r4, #8]
 800abb6:	4b09      	ldr	r3, [pc, #36]	@ (800abdc <cleanup_stdio+0x38>)
 800abb8:	4299      	cmp	r1, r3
 800abba:	d002      	beq.n	800abc2 <cleanup_stdio+0x1e>
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fd33 	bl	800b628 <_fflush_r>
 800abc2:	68e1      	ldr	r1, [r4, #12]
 800abc4:	4b06      	ldr	r3, [pc, #24]	@ (800abe0 <cleanup_stdio+0x3c>)
 800abc6:	4299      	cmp	r1, r3
 800abc8:	d004      	beq.n	800abd4 <cleanup_stdio+0x30>
 800abca:	4620      	mov	r0, r4
 800abcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abd0:	f000 bd2a 	b.w	800b628 <_fflush_r>
 800abd4:	bd10      	pop	{r4, pc}
 800abd6:	bf00      	nop
 800abd8:	20000964 	.word	0x20000964
 800abdc:	200009cc 	.word	0x200009cc
 800abe0:	20000a34 	.word	0x20000a34

0800abe4 <global_stdio_init.part.0>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac14 <global_stdio_init.part.0+0x30>)
 800abe8:	4c0b      	ldr	r4, [pc, #44]	@ (800ac18 <global_stdio_init.part.0+0x34>)
 800abea:	4a0c      	ldr	r2, [pc, #48]	@ (800ac1c <global_stdio_init.part.0+0x38>)
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	4620      	mov	r0, r4
 800abf0:	2200      	movs	r2, #0
 800abf2:	2104      	movs	r1, #4
 800abf4:	f7ff ff94 	bl	800ab20 <std>
 800abf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abfc:	2201      	movs	r2, #1
 800abfe:	2109      	movs	r1, #9
 800ac00:	f7ff ff8e 	bl	800ab20 <std>
 800ac04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac08:	2202      	movs	r2, #2
 800ac0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac0e:	2112      	movs	r1, #18
 800ac10:	f7ff bf86 	b.w	800ab20 <std>
 800ac14:	20000a9c 	.word	0x20000a9c
 800ac18:	20000964 	.word	0x20000964
 800ac1c:	0800ab8d 	.word	0x0800ab8d

0800ac20 <__sfp_lock_acquire>:
 800ac20:	4801      	ldr	r0, [pc, #4]	@ (800ac28 <__sfp_lock_acquire+0x8>)
 800ac22:	f000 b92c 	b.w	800ae7e <__retarget_lock_acquire_recursive>
 800ac26:	bf00      	nop
 800ac28:	20000aa5 	.word	0x20000aa5

0800ac2c <__sfp_lock_release>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	@ (800ac34 <__sfp_lock_release+0x8>)
 800ac2e:	f000 b927 	b.w	800ae80 <__retarget_lock_release_recursive>
 800ac32:	bf00      	nop
 800ac34:	20000aa5 	.word	0x20000aa5

0800ac38 <__sinit>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	f7ff fff0 	bl	800ac20 <__sfp_lock_acquire>
 800ac40:	6a23      	ldr	r3, [r4, #32]
 800ac42:	b11b      	cbz	r3, 800ac4c <__sinit+0x14>
 800ac44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac48:	f7ff bff0 	b.w	800ac2c <__sfp_lock_release>
 800ac4c:	4b04      	ldr	r3, [pc, #16]	@ (800ac60 <__sinit+0x28>)
 800ac4e:	6223      	str	r3, [r4, #32]
 800ac50:	4b04      	ldr	r3, [pc, #16]	@ (800ac64 <__sinit+0x2c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1f5      	bne.n	800ac44 <__sinit+0xc>
 800ac58:	f7ff ffc4 	bl	800abe4 <global_stdio_init.part.0>
 800ac5c:	e7f2      	b.n	800ac44 <__sinit+0xc>
 800ac5e:	bf00      	nop
 800ac60:	0800aba5 	.word	0x0800aba5
 800ac64:	20000a9c 	.word	0x20000a9c

0800ac68 <_fwalk_sglue>:
 800ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	4607      	mov	r7, r0
 800ac6e:	4688      	mov	r8, r1
 800ac70:	4614      	mov	r4, r2
 800ac72:	2600      	movs	r6, #0
 800ac74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac78:	f1b9 0901 	subs.w	r9, r9, #1
 800ac7c:	d505      	bpl.n	800ac8a <_fwalk_sglue+0x22>
 800ac7e:	6824      	ldr	r4, [r4, #0]
 800ac80:	2c00      	cmp	r4, #0
 800ac82:	d1f7      	bne.n	800ac74 <_fwalk_sglue+0xc>
 800ac84:	4630      	mov	r0, r6
 800ac86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8a:	89ab      	ldrh	r3, [r5, #12]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d907      	bls.n	800aca0 <_fwalk_sglue+0x38>
 800ac90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac94:	3301      	adds	r3, #1
 800ac96:	d003      	beq.n	800aca0 <_fwalk_sglue+0x38>
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	47c0      	blx	r8
 800ac9e:	4306      	orrs	r6, r0
 800aca0:	3568      	adds	r5, #104	@ 0x68
 800aca2:	e7e9      	b.n	800ac78 <_fwalk_sglue+0x10>

0800aca4 <siprintf>:
 800aca4:	b40e      	push	{r1, r2, r3}
 800aca6:	b500      	push	{lr}
 800aca8:	b09c      	sub	sp, #112	@ 0x70
 800acaa:	ab1d      	add	r3, sp, #116	@ 0x74
 800acac:	9002      	str	r0, [sp, #8]
 800acae:	9006      	str	r0, [sp, #24]
 800acb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acb4:	4809      	ldr	r0, [pc, #36]	@ (800acdc <siprintf+0x38>)
 800acb6:	9107      	str	r1, [sp, #28]
 800acb8:	9104      	str	r1, [sp, #16]
 800acba:	4909      	ldr	r1, [pc, #36]	@ (800ace0 <siprintf+0x3c>)
 800acbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc0:	9105      	str	r1, [sp, #20]
 800acc2:	6800      	ldr	r0, [r0, #0]
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	a902      	add	r1, sp, #8
 800acc8:	f000 f9a0 	bl	800b00c <_svfiprintf_r>
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	2200      	movs	r2, #0
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	b01c      	add	sp, #112	@ 0x70
 800acd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd8:	b003      	add	sp, #12
 800acda:	4770      	bx	lr
 800acdc:	200000b4 	.word	0x200000b4
 800ace0:	ffff0208 	.word	0xffff0208

0800ace4 <__sread>:
 800ace4:	b510      	push	{r4, lr}
 800ace6:	460c      	mov	r4, r1
 800ace8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acec:	f000 f868 	bl	800adc0 <_read_r>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	bfab      	itete	ge
 800acf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800acf6:	89a3      	ldrhlt	r3, [r4, #12]
 800acf8:	181b      	addge	r3, r3, r0
 800acfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800acfe:	bfac      	ite	ge
 800ad00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad02:	81a3      	strhlt	r3, [r4, #12]
 800ad04:	bd10      	pop	{r4, pc}

0800ad06 <__swrite>:
 800ad06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0a:	461f      	mov	r7, r3
 800ad0c:	898b      	ldrh	r3, [r1, #12]
 800ad0e:	05db      	lsls	r3, r3, #23
 800ad10:	4605      	mov	r5, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	4616      	mov	r6, r2
 800ad16:	d505      	bpl.n	800ad24 <__swrite+0x1e>
 800ad18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f000 f83c 	bl	800ad9c <_lseek_r>
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad2e:	81a3      	strh	r3, [r4, #12]
 800ad30:	4632      	mov	r2, r6
 800ad32:	463b      	mov	r3, r7
 800ad34:	4628      	mov	r0, r5
 800ad36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3a:	f000 b863 	b.w	800ae04 <_write_r>

0800ad3e <__sseek>:
 800ad3e:	b510      	push	{r4, lr}
 800ad40:	460c      	mov	r4, r1
 800ad42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad46:	f000 f829 	bl	800ad9c <_lseek_r>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	bf15      	itete	ne
 800ad50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad5a:	81a3      	strheq	r3, [r4, #12]
 800ad5c:	bf18      	it	ne
 800ad5e:	81a3      	strhne	r3, [r4, #12]
 800ad60:	bd10      	pop	{r4, pc}

0800ad62 <__sclose>:
 800ad62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad66:	f000 b809 	b.w	800ad7c <_close_r>

0800ad6a <memset>:
 800ad6a:	4402      	add	r2, r0
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d100      	bne.n	800ad74 <memset+0xa>
 800ad72:	4770      	bx	lr
 800ad74:	f803 1b01 	strb.w	r1, [r3], #1
 800ad78:	e7f9      	b.n	800ad6e <memset+0x4>
	...

0800ad7c <_close_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d06      	ldr	r5, [pc, #24]	@ (800ad98 <_close_r+0x1c>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	f7f6 fbe4 	bl	8001554 <_close>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_close_r+0x1a>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_close_r+0x1a>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	20000aa0 	.word	0x20000aa0

0800ad9c <_lseek_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4d07      	ldr	r5, [pc, #28]	@ (800adbc <_lseek_r+0x20>)
 800ada0:	4604      	mov	r4, r0
 800ada2:	4608      	mov	r0, r1
 800ada4:	4611      	mov	r1, r2
 800ada6:	2200      	movs	r2, #0
 800ada8:	602a      	str	r2, [r5, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	f7f6 fbf9 	bl	80015a2 <_lseek>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_lseek_r+0x1e>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_lseek_r+0x1e>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20000aa0 	.word	0x20000aa0

0800adc0 <_read_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	@ (800ade0 <_read_r+0x20>)
 800adc4:	4604      	mov	r4, r0
 800adc6:	4608      	mov	r0, r1
 800adc8:	4611      	mov	r1, r2
 800adca:	2200      	movs	r2, #0
 800adcc:	602a      	str	r2, [r5, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	f7f6 fb87 	bl	80014e2 <_read>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d102      	bne.n	800adde <_read_r+0x1e>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	b103      	cbz	r3, 800adde <_read_r+0x1e>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	20000aa0 	.word	0x20000aa0

0800ade4 <_sbrk_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d06      	ldr	r5, [pc, #24]	@ (800ae00 <_sbrk_r+0x1c>)
 800ade8:	2300      	movs	r3, #0
 800adea:	4604      	mov	r4, r0
 800adec:	4608      	mov	r0, r1
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	f7f6 fbe4 	bl	80015bc <_sbrk>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_sbrk_r+0x1a>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_sbrk_r+0x1a>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	20000aa0 	.word	0x20000aa0

0800ae04 <_write_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	@ (800ae24 <_write_r+0x20>)
 800ae08:	4604      	mov	r4, r0
 800ae0a:	4608      	mov	r0, r1
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	602a      	str	r2, [r5, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f7f6 fb82 	bl	800151c <_write>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_write_r+0x1e>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_write_r+0x1e>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	20000aa0 	.word	0x20000aa0

0800ae28 <__errno>:
 800ae28:	4b01      	ldr	r3, [pc, #4]	@ (800ae30 <__errno+0x8>)
 800ae2a:	6818      	ldr	r0, [r3, #0]
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	200000b4 	.word	0x200000b4

0800ae34 <__libc_init_array>:
 800ae34:	b570      	push	{r4, r5, r6, lr}
 800ae36:	4d0d      	ldr	r5, [pc, #52]	@ (800ae6c <__libc_init_array+0x38>)
 800ae38:	4c0d      	ldr	r4, [pc, #52]	@ (800ae70 <__libc_init_array+0x3c>)
 800ae3a:	1b64      	subs	r4, r4, r5
 800ae3c:	10a4      	asrs	r4, r4, #2
 800ae3e:	2600      	movs	r6, #0
 800ae40:	42a6      	cmp	r6, r4
 800ae42:	d109      	bne.n	800ae58 <__libc_init_array+0x24>
 800ae44:	4d0b      	ldr	r5, [pc, #44]	@ (800ae74 <__libc_init_array+0x40>)
 800ae46:	4c0c      	ldr	r4, [pc, #48]	@ (800ae78 <__libc_init_array+0x44>)
 800ae48:	f000 ff2a 	bl	800bca0 <_init>
 800ae4c:	1b64      	subs	r4, r4, r5
 800ae4e:	10a4      	asrs	r4, r4, #2
 800ae50:	2600      	movs	r6, #0
 800ae52:	42a6      	cmp	r6, r4
 800ae54:	d105      	bne.n	800ae62 <__libc_init_array+0x2e>
 800ae56:	bd70      	pop	{r4, r5, r6, pc}
 800ae58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae5c:	4798      	blx	r3
 800ae5e:	3601      	adds	r6, #1
 800ae60:	e7ee      	b.n	800ae40 <__libc_init_array+0xc>
 800ae62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae66:	4798      	blx	r3
 800ae68:	3601      	adds	r6, #1
 800ae6a:	e7f2      	b.n	800ae52 <__libc_init_array+0x1e>
 800ae6c:	0800dd78 	.word	0x0800dd78
 800ae70:	0800dd78 	.word	0x0800dd78
 800ae74:	0800dd78 	.word	0x0800dd78
 800ae78:	0800dd7c 	.word	0x0800dd7c

0800ae7c <__retarget_lock_init_recursive>:
 800ae7c:	4770      	bx	lr

0800ae7e <__retarget_lock_acquire_recursive>:
 800ae7e:	4770      	bx	lr

0800ae80 <__retarget_lock_release_recursive>:
 800ae80:	4770      	bx	lr
	...

0800ae84 <__assert_func>:
 800ae84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae86:	4614      	mov	r4, r2
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <__assert_func+0x2c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4605      	mov	r5, r0
 800ae90:	68d8      	ldr	r0, [r3, #12]
 800ae92:	b954      	cbnz	r4, 800aeaa <__assert_func+0x26>
 800ae94:	4b07      	ldr	r3, [pc, #28]	@ (800aeb4 <__assert_func+0x30>)
 800ae96:	461c      	mov	r4, r3
 800ae98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae9c:	9100      	str	r1, [sp, #0]
 800ae9e:	462b      	mov	r3, r5
 800aea0:	4905      	ldr	r1, [pc, #20]	@ (800aeb8 <__assert_func+0x34>)
 800aea2:	f000 fbe9 	bl	800b678 <fiprintf>
 800aea6:	f000 fc21 	bl	800b6ec <abort>
 800aeaa:	4b04      	ldr	r3, [pc, #16]	@ (800aebc <__assert_func+0x38>)
 800aeac:	e7f4      	b.n	800ae98 <__assert_func+0x14>
 800aeae:	bf00      	nop
 800aeb0:	200000b4 	.word	0x200000b4
 800aeb4:	0800dd3a 	.word	0x0800dd3a
 800aeb8:	0800dd0c 	.word	0x0800dd0c
 800aebc:	0800dcff 	.word	0x0800dcff

0800aec0 <_free_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4605      	mov	r5, r0
 800aec4:	2900      	cmp	r1, #0
 800aec6:	d041      	beq.n	800af4c <_free_r+0x8c>
 800aec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aecc:	1f0c      	subs	r4, r1, #4
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bfb8      	it	lt
 800aed2:	18e4      	addlt	r4, r4, r3
 800aed4:	f7ff fdda 	bl	800aa8c <__malloc_lock>
 800aed8:	4a1d      	ldr	r2, [pc, #116]	@ (800af50 <_free_r+0x90>)
 800aeda:	6813      	ldr	r3, [r2, #0]
 800aedc:	b933      	cbnz	r3, 800aeec <_free_r+0x2c>
 800aede:	6063      	str	r3, [r4, #4]
 800aee0:	6014      	str	r4, [r2, #0]
 800aee2:	4628      	mov	r0, r5
 800aee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aee8:	f7ff bdd6 	b.w	800aa98 <__malloc_unlock>
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	d908      	bls.n	800af02 <_free_r+0x42>
 800aef0:	6820      	ldr	r0, [r4, #0]
 800aef2:	1821      	adds	r1, r4, r0
 800aef4:	428b      	cmp	r3, r1
 800aef6:	bf01      	itttt	eq
 800aef8:	6819      	ldreq	r1, [r3, #0]
 800aefa:	685b      	ldreq	r3, [r3, #4]
 800aefc:	1809      	addeq	r1, r1, r0
 800aefe:	6021      	streq	r1, [r4, #0]
 800af00:	e7ed      	b.n	800aede <_free_r+0x1e>
 800af02:	461a      	mov	r2, r3
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	b10b      	cbz	r3, 800af0c <_free_r+0x4c>
 800af08:	42a3      	cmp	r3, r4
 800af0a:	d9fa      	bls.n	800af02 <_free_r+0x42>
 800af0c:	6811      	ldr	r1, [r2, #0]
 800af0e:	1850      	adds	r0, r2, r1
 800af10:	42a0      	cmp	r0, r4
 800af12:	d10b      	bne.n	800af2c <_free_r+0x6c>
 800af14:	6820      	ldr	r0, [r4, #0]
 800af16:	4401      	add	r1, r0
 800af18:	1850      	adds	r0, r2, r1
 800af1a:	4283      	cmp	r3, r0
 800af1c:	6011      	str	r1, [r2, #0]
 800af1e:	d1e0      	bne.n	800aee2 <_free_r+0x22>
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	6053      	str	r3, [r2, #4]
 800af26:	4408      	add	r0, r1
 800af28:	6010      	str	r0, [r2, #0]
 800af2a:	e7da      	b.n	800aee2 <_free_r+0x22>
 800af2c:	d902      	bls.n	800af34 <_free_r+0x74>
 800af2e:	230c      	movs	r3, #12
 800af30:	602b      	str	r3, [r5, #0]
 800af32:	e7d6      	b.n	800aee2 <_free_r+0x22>
 800af34:	6820      	ldr	r0, [r4, #0]
 800af36:	1821      	adds	r1, r4, r0
 800af38:	428b      	cmp	r3, r1
 800af3a:	bf04      	itt	eq
 800af3c:	6819      	ldreq	r1, [r3, #0]
 800af3e:	685b      	ldreq	r3, [r3, #4]
 800af40:	6063      	str	r3, [r4, #4]
 800af42:	bf04      	itt	eq
 800af44:	1809      	addeq	r1, r1, r0
 800af46:	6021      	streq	r1, [r4, #0]
 800af48:	6054      	str	r4, [r2, #4]
 800af4a:	e7ca      	b.n	800aee2 <_free_r+0x22>
 800af4c:	bd38      	pop	{r3, r4, r5, pc}
 800af4e:	bf00      	nop
 800af50:	20000960 	.word	0x20000960

0800af54 <__ssputs_r>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	688e      	ldr	r6, [r1, #8]
 800af5a:	461f      	mov	r7, r3
 800af5c:	42be      	cmp	r6, r7
 800af5e:	680b      	ldr	r3, [r1, #0]
 800af60:	4682      	mov	sl, r0
 800af62:	460c      	mov	r4, r1
 800af64:	4690      	mov	r8, r2
 800af66:	d82d      	bhi.n	800afc4 <__ssputs_r+0x70>
 800af68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af70:	d026      	beq.n	800afc0 <__ssputs_r+0x6c>
 800af72:	6965      	ldr	r5, [r4, #20]
 800af74:	6909      	ldr	r1, [r1, #16]
 800af76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af7a:	eba3 0901 	sub.w	r9, r3, r1
 800af7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af82:	1c7b      	adds	r3, r7, #1
 800af84:	444b      	add	r3, r9
 800af86:	106d      	asrs	r5, r5, #1
 800af88:	429d      	cmp	r5, r3
 800af8a:	bf38      	it	cc
 800af8c:	461d      	movcc	r5, r3
 800af8e:	0553      	lsls	r3, r2, #21
 800af90:	d527      	bpl.n	800afe2 <__ssputs_r+0x8e>
 800af92:	4629      	mov	r1, r5
 800af94:	f7ff fcfa 	bl	800a98c <_malloc_r>
 800af98:	4606      	mov	r6, r0
 800af9a:	b360      	cbz	r0, 800aff6 <__ssputs_r+0xa2>
 800af9c:	6921      	ldr	r1, [r4, #16]
 800af9e:	464a      	mov	r2, r9
 800afa0:	f000 fb96 	bl	800b6d0 <memcpy>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afae:	81a3      	strh	r3, [r4, #12]
 800afb0:	6126      	str	r6, [r4, #16]
 800afb2:	6165      	str	r5, [r4, #20]
 800afb4:	444e      	add	r6, r9
 800afb6:	eba5 0509 	sub.w	r5, r5, r9
 800afba:	6026      	str	r6, [r4, #0]
 800afbc:	60a5      	str	r5, [r4, #8]
 800afbe:	463e      	mov	r6, r7
 800afc0:	42be      	cmp	r6, r7
 800afc2:	d900      	bls.n	800afc6 <__ssputs_r+0x72>
 800afc4:	463e      	mov	r6, r7
 800afc6:	6820      	ldr	r0, [r4, #0]
 800afc8:	4632      	mov	r2, r6
 800afca:	4641      	mov	r1, r8
 800afcc:	f000 fb66 	bl	800b69c <memmove>
 800afd0:	68a3      	ldr	r3, [r4, #8]
 800afd2:	1b9b      	subs	r3, r3, r6
 800afd4:	60a3      	str	r3, [r4, #8]
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	4433      	add	r3, r6
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	2000      	movs	r0, #0
 800afde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe2:	462a      	mov	r2, r5
 800afe4:	f000 fb89 	bl	800b6fa <_realloc_r>
 800afe8:	4606      	mov	r6, r0
 800afea:	2800      	cmp	r0, #0
 800afec:	d1e0      	bne.n	800afb0 <__ssputs_r+0x5c>
 800afee:	6921      	ldr	r1, [r4, #16]
 800aff0:	4650      	mov	r0, sl
 800aff2:	f7ff ff65 	bl	800aec0 <_free_r>
 800aff6:	230c      	movs	r3, #12
 800aff8:	f8ca 3000 	str.w	r3, [sl]
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e7e9      	b.n	800afde <__ssputs_r+0x8a>
	...

0800b00c <_svfiprintf_r>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	4698      	mov	r8, r3
 800b012:	898b      	ldrh	r3, [r1, #12]
 800b014:	061b      	lsls	r3, r3, #24
 800b016:	b09d      	sub	sp, #116	@ 0x74
 800b018:	4607      	mov	r7, r0
 800b01a:	460d      	mov	r5, r1
 800b01c:	4614      	mov	r4, r2
 800b01e:	d510      	bpl.n	800b042 <_svfiprintf_r+0x36>
 800b020:	690b      	ldr	r3, [r1, #16]
 800b022:	b973      	cbnz	r3, 800b042 <_svfiprintf_r+0x36>
 800b024:	2140      	movs	r1, #64	@ 0x40
 800b026:	f7ff fcb1 	bl	800a98c <_malloc_r>
 800b02a:	6028      	str	r0, [r5, #0]
 800b02c:	6128      	str	r0, [r5, #16]
 800b02e:	b930      	cbnz	r0, 800b03e <_svfiprintf_r+0x32>
 800b030:	230c      	movs	r3, #12
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	f04f 30ff 	mov.w	r0, #4294967295
 800b038:	b01d      	add	sp, #116	@ 0x74
 800b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03e:	2340      	movs	r3, #64	@ 0x40
 800b040:	616b      	str	r3, [r5, #20]
 800b042:	2300      	movs	r3, #0
 800b044:	9309      	str	r3, [sp, #36]	@ 0x24
 800b046:	2320      	movs	r3, #32
 800b048:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b050:	2330      	movs	r3, #48	@ 0x30
 800b052:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b1f0 <_svfiprintf_r+0x1e4>
 800b056:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b05a:	f04f 0901 	mov.w	r9, #1
 800b05e:	4623      	mov	r3, r4
 800b060:	469a      	mov	sl, r3
 800b062:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b066:	b10a      	cbz	r2, 800b06c <_svfiprintf_r+0x60>
 800b068:	2a25      	cmp	r2, #37	@ 0x25
 800b06a:	d1f9      	bne.n	800b060 <_svfiprintf_r+0x54>
 800b06c:	ebba 0b04 	subs.w	fp, sl, r4
 800b070:	d00b      	beq.n	800b08a <_svfiprintf_r+0x7e>
 800b072:	465b      	mov	r3, fp
 800b074:	4622      	mov	r2, r4
 800b076:	4629      	mov	r1, r5
 800b078:	4638      	mov	r0, r7
 800b07a:	f7ff ff6b 	bl	800af54 <__ssputs_r>
 800b07e:	3001      	adds	r0, #1
 800b080:	f000 80a7 	beq.w	800b1d2 <_svfiprintf_r+0x1c6>
 800b084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b086:	445a      	add	r2, fp
 800b088:	9209      	str	r2, [sp, #36]	@ 0x24
 800b08a:	f89a 3000 	ldrb.w	r3, [sl]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 809f 	beq.w	800b1d2 <_svfiprintf_r+0x1c6>
 800b094:	2300      	movs	r3, #0
 800b096:	f04f 32ff 	mov.w	r2, #4294967295
 800b09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b09e:	f10a 0a01 	add.w	sl, sl, #1
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	9307      	str	r3, [sp, #28]
 800b0a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0ac:	4654      	mov	r4, sl
 800b0ae:	2205      	movs	r2, #5
 800b0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b4:	484e      	ldr	r0, [pc, #312]	@ (800b1f0 <_svfiprintf_r+0x1e4>)
 800b0b6:	f7f5 f8ab 	bl	8000210 <memchr>
 800b0ba:	9a04      	ldr	r2, [sp, #16]
 800b0bc:	b9d8      	cbnz	r0, 800b0f6 <_svfiprintf_r+0xea>
 800b0be:	06d0      	lsls	r0, r2, #27
 800b0c0:	bf44      	itt	mi
 800b0c2:	2320      	movmi	r3, #32
 800b0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0c8:	0711      	lsls	r1, r2, #28
 800b0ca:	bf44      	itt	mi
 800b0cc:	232b      	movmi	r3, #43	@ 0x2b
 800b0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0d8:	d015      	beq.n	800b106 <_svfiprintf_r+0xfa>
 800b0da:	9a07      	ldr	r2, [sp, #28]
 800b0dc:	4654      	mov	r4, sl
 800b0de:	2000      	movs	r0, #0
 800b0e0:	f04f 0c0a 	mov.w	ip, #10
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0ea:	3b30      	subs	r3, #48	@ 0x30
 800b0ec:	2b09      	cmp	r3, #9
 800b0ee:	d94b      	bls.n	800b188 <_svfiprintf_r+0x17c>
 800b0f0:	b1b0      	cbz	r0, 800b120 <_svfiprintf_r+0x114>
 800b0f2:	9207      	str	r2, [sp, #28]
 800b0f4:	e014      	b.n	800b120 <_svfiprintf_r+0x114>
 800b0f6:	eba0 0308 	sub.w	r3, r0, r8
 800b0fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b0fe:	4313      	orrs	r3, r2
 800b100:	9304      	str	r3, [sp, #16]
 800b102:	46a2      	mov	sl, r4
 800b104:	e7d2      	b.n	800b0ac <_svfiprintf_r+0xa0>
 800b106:	9b03      	ldr	r3, [sp, #12]
 800b108:	1d19      	adds	r1, r3, #4
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	9103      	str	r1, [sp, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	bfbb      	ittet	lt
 800b112:	425b      	neglt	r3, r3
 800b114:	f042 0202 	orrlt.w	r2, r2, #2
 800b118:	9307      	strge	r3, [sp, #28]
 800b11a:	9307      	strlt	r3, [sp, #28]
 800b11c:	bfb8      	it	lt
 800b11e:	9204      	strlt	r2, [sp, #16]
 800b120:	7823      	ldrb	r3, [r4, #0]
 800b122:	2b2e      	cmp	r3, #46	@ 0x2e
 800b124:	d10a      	bne.n	800b13c <_svfiprintf_r+0x130>
 800b126:	7863      	ldrb	r3, [r4, #1]
 800b128:	2b2a      	cmp	r3, #42	@ 0x2a
 800b12a:	d132      	bne.n	800b192 <_svfiprintf_r+0x186>
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	1d1a      	adds	r2, r3, #4
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	9203      	str	r2, [sp, #12]
 800b134:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b138:	3402      	adds	r4, #2
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b200 <_svfiprintf_r+0x1f4>
 800b140:	7821      	ldrb	r1, [r4, #0]
 800b142:	2203      	movs	r2, #3
 800b144:	4650      	mov	r0, sl
 800b146:	f7f5 f863 	bl	8000210 <memchr>
 800b14a:	b138      	cbz	r0, 800b15c <_svfiprintf_r+0x150>
 800b14c:	9b04      	ldr	r3, [sp, #16]
 800b14e:	eba0 000a 	sub.w	r0, r0, sl
 800b152:	2240      	movs	r2, #64	@ 0x40
 800b154:	4082      	lsls	r2, r0
 800b156:	4313      	orrs	r3, r2
 800b158:	3401      	adds	r4, #1
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b160:	4824      	ldr	r0, [pc, #144]	@ (800b1f4 <_svfiprintf_r+0x1e8>)
 800b162:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b166:	2206      	movs	r2, #6
 800b168:	f7f5 f852 	bl	8000210 <memchr>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d036      	beq.n	800b1de <_svfiprintf_r+0x1d2>
 800b170:	4b21      	ldr	r3, [pc, #132]	@ (800b1f8 <_svfiprintf_r+0x1ec>)
 800b172:	bb1b      	cbnz	r3, 800b1bc <_svfiprintf_r+0x1b0>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	3307      	adds	r3, #7
 800b178:	f023 0307 	bic.w	r3, r3, #7
 800b17c:	3308      	adds	r3, #8
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b182:	4433      	add	r3, r6
 800b184:	9309      	str	r3, [sp, #36]	@ 0x24
 800b186:	e76a      	b.n	800b05e <_svfiprintf_r+0x52>
 800b188:	fb0c 3202 	mla	r2, ip, r2, r3
 800b18c:	460c      	mov	r4, r1
 800b18e:	2001      	movs	r0, #1
 800b190:	e7a8      	b.n	800b0e4 <_svfiprintf_r+0xd8>
 800b192:	2300      	movs	r3, #0
 800b194:	3401      	adds	r4, #1
 800b196:	9305      	str	r3, [sp, #20]
 800b198:	4619      	mov	r1, r3
 800b19a:	f04f 0c0a 	mov.w	ip, #10
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a4:	3a30      	subs	r2, #48	@ 0x30
 800b1a6:	2a09      	cmp	r2, #9
 800b1a8:	d903      	bls.n	800b1b2 <_svfiprintf_r+0x1a6>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0c6      	beq.n	800b13c <_svfiprintf_r+0x130>
 800b1ae:	9105      	str	r1, [sp, #20]
 800b1b0:	e7c4      	b.n	800b13c <_svfiprintf_r+0x130>
 800b1b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e7f0      	b.n	800b19e <_svfiprintf_r+0x192>
 800b1bc:	ab03      	add	r3, sp, #12
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	462a      	mov	r2, r5
 800b1c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b1fc <_svfiprintf_r+0x1f0>)
 800b1c4:	a904      	add	r1, sp, #16
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f3af 8000 	nop.w
 800b1cc:	1c42      	adds	r2, r0, #1
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	d1d6      	bne.n	800b180 <_svfiprintf_r+0x174>
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	065b      	lsls	r3, r3, #25
 800b1d6:	f53f af2d 	bmi.w	800b034 <_svfiprintf_r+0x28>
 800b1da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1dc:	e72c      	b.n	800b038 <_svfiprintf_r+0x2c>
 800b1de:	ab03      	add	r3, sp, #12
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	4b05      	ldr	r3, [pc, #20]	@ (800b1fc <_svfiprintf_r+0x1f0>)
 800b1e6:	a904      	add	r1, sp, #16
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	f000 f879 	bl	800b2e0 <_printf_i>
 800b1ee:	e7ed      	b.n	800b1cc <_svfiprintf_r+0x1c0>
 800b1f0:	0800dd3b 	.word	0x0800dd3b
 800b1f4:	0800dd45 	.word	0x0800dd45
 800b1f8:	00000000 	.word	0x00000000
 800b1fc:	0800af55 	.word	0x0800af55
 800b200:	0800dd41 	.word	0x0800dd41

0800b204 <_printf_common>:
 800b204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b208:	4616      	mov	r6, r2
 800b20a:	4698      	mov	r8, r3
 800b20c:	688a      	ldr	r2, [r1, #8]
 800b20e:	690b      	ldr	r3, [r1, #16]
 800b210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b214:	4293      	cmp	r3, r2
 800b216:	bfb8      	it	lt
 800b218:	4613      	movlt	r3, r2
 800b21a:	6033      	str	r3, [r6, #0]
 800b21c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b220:	4607      	mov	r7, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b10a      	cbz	r2, 800b22a <_printf_common+0x26>
 800b226:	3301      	adds	r3, #1
 800b228:	6033      	str	r3, [r6, #0]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	0699      	lsls	r1, r3, #26
 800b22e:	bf42      	ittt	mi
 800b230:	6833      	ldrmi	r3, [r6, #0]
 800b232:	3302      	addmi	r3, #2
 800b234:	6033      	strmi	r3, [r6, #0]
 800b236:	6825      	ldr	r5, [r4, #0]
 800b238:	f015 0506 	ands.w	r5, r5, #6
 800b23c:	d106      	bne.n	800b24c <_printf_common+0x48>
 800b23e:	f104 0a19 	add.w	sl, r4, #25
 800b242:	68e3      	ldr	r3, [r4, #12]
 800b244:	6832      	ldr	r2, [r6, #0]
 800b246:	1a9b      	subs	r3, r3, r2
 800b248:	42ab      	cmp	r3, r5
 800b24a:	dc26      	bgt.n	800b29a <_printf_common+0x96>
 800b24c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b250:	6822      	ldr	r2, [r4, #0]
 800b252:	3b00      	subs	r3, #0
 800b254:	bf18      	it	ne
 800b256:	2301      	movne	r3, #1
 800b258:	0692      	lsls	r2, r2, #26
 800b25a:	d42b      	bmi.n	800b2b4 <_printf_common+0xb0>
 800b25c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b260:	4641      	mov	r1, r8
 800b262:	4638      	mov	r0, r7
 800b264:	47c8      	blx	r9
 800b266:	3001      	adds	r0, #1
 800b268:	d01e      	beq.n	800b2a8 <_printf_common+0xa4>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	6922      	ldr	r2, [r4, #16]
 800b26e:	f003 0306 	and.w	r3, r3, #6
 800b272:	2b04      	cmp	r3, #4
 800b274:	bf02      	ittt	eq
 800b276:	68e5      	ldreq	r5, [r4, #12]
 800b278:	6833      	ldreq	r3, [r6, #0]
 800b27a:	1aed      	subeq	r5, r5, r3
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	bf0c      	ite	eq
 800b280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b284:	2500      	movne	r5, #0
 800b286:	4293      	cmp	r3, r2
 800b288:	bfc4      	itt	gt
 800b28a:	1a9b      	subgt	r3, r3, r2
 800b28c:	18ed      	addgt	r5, r5, r3
 800b28e:	2600      	movs	r6, #0
 800b290:	341a      	adds	r4, #26
 800b292:	42b5      	cmp	r5, r6
 800b294:	d11a      	bne.n	800b2cc <_printf_common+0xc8>
 800b296:	2000      	movs	r0, #0
 800b298:	e008      	b.n	800b2ac <_printf_common+0xa8>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4652      	mov	r2, sl
 800b29e:	4641      	mov	r1, r8
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	47c8      	blx	r9
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d103      	bne.n	800b2b0 <_printf_common+0xac>
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	e7c6      	b.n	800b242 <_printf_common+0x3e>
 800b2b4:	18e1      	adds	r1, r4, r3
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	2030      	movs	r0, #48	@ 0x30
 800b2ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2be:	4422      	add	r2, r4
 800b2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	e7c7      	b.n	800b25c <_printf_common+0x58>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	47c8      	blx	r9
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d0e6      	beq.n	800b2a8 <_printf_common+0xa4>
 800b2da:	3601      	adds	r6, #1
 800b2dc:	e7d9      	b.n	800b292 <_printf_common+0x8e>
	...

0800b2e0 <_printf_i>:
 800b2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e4:	7e0f      	ldrb	r7, [r1, #24]
 800b2e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2e8:	2f78      	cmp	r7, #120	@ 0x78
 800b2ea:	4691      	mov	r9, r2
 800b2ec:	4680      	mov	r8, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	469a      	mov	sl, r3
 800b2f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2f6:	d807      	bhi.n	800b308 <_printf_i+0x28>
 800b2f8:	2f62      	cmp	r7, #98	@ 0x62
 800b2fa:	d80a      	bhi.n	800b312 <_printf_i+0x32>
 800b2fc:	2f00      	cmp	r7, #0
 800b2fe:	f000 80d2 	beq.w	800b4a6 <_printf_i+0x1c6>
 800b302:	2f58      	cmp	r7, #88	@ 0x58
 800b304:	f000 80b9 	beq.w	800b47a <_printf_i+0x19a>
 800b308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b30c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b310:	e03a      	b.n	800b388 <_printf_i+0xa8>
 800b312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b316:	2b15      	cmp	r3, #21
 800b318:	d8f6      	bhi.n	800b308 <_printf_i+0x28>
 800b31a:	a101      	add	r1, pc, #4	@ (adr r1, 800b320 <_printf_i+0x40>)
 800b31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b320:	0800b379 	.word	0x0800b379
 800b324:	0800b38d 	.word	0x0800b38d
 800b328:	0800b309 	.word	0x0800b309
 800b32c:	0800b309 	.word	0x0800b309
 800b330:	0800b309 	.word	0x0800b309
 800b334:	0800b309 	.word	0x0800b309
 800b338:	0800b38d 	.word	0x0800b38d
 800b33c:	0800b309 	.word	0x0800b309
 800b340:	0800b309 	.word	0x0800b309
 800b344:	0800b309 	.word	0x0800b309
 800b348:	0800b309 	.word	0x0800b309
 800b34c:	0800b48d 	.word	0x0800b48d
 800b350:	0800b3b7 	.word	0x0800b3b7
 800b354:	0800b447 	.word	0x0800b447
 800b358:	0800b309 	.word	0x0800b309
 800b35c:	0800b309 	.word	0x0800b309
 800b360:	0800b4af 	.word	0x0800b4af
 800b364:	0800b309 	.word	0x0800b309
 800b368:	0800b3b7 	.word	0x0800b3b7
 800b36c:	0800b309 	.word	0x0800b309
 800b370:	0800b309 	.word	0x0800b309
 800b374:	0800b44f 	.word	0x0800b44f
 800b378:	6833      	ldr	r3, [r6, #0]
 800b37a:	1d1a      	adds	r2, r3, #4
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6032      	str	r2, [r6, #0]
 800b380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b388:	2301      	movs	r3, #1
 800b38a:	e09d      	b.n	800b4c8 <_printf_i+0x1e8>
 800b38c:	6833      	ldr	r3, [r6, #0]
 800b38e:	6820      	ldr	r0, [r4, #0]
 800b390:	1d19      	adds	r1, r3, #4
 800b392:	6031      	str	r1, [r6, #0]
 800b394:	0606      	lsls	r6, r0, #24
 800b396:	d501      	bpl.n	800b39c <_printf_i+0xbc>
 800b398:	681d      	ldr	r5, [r3, #0]
 800b39a:	e003      	b.n	800b3a4 <_printf_i+0xc4>
 800b39c:	0645      	lsls	r5, r0, #25
 800b39e:	d5fb      	bpl.n	800b398 <_printf_i+0xb8>
 800b3a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3a4:	2d00      	cmp	r5, #0
 800b3a6:	da03      	bge.n	800b3b0 <_printf_i+0xd0>
 800b3a8:	232d      	movs	r3, #45	@ 0x2d
 800b3aa:	426d      	negs	r5, r5
 800b3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3b0:	4859      	ldr	r0, [pc, #356]	@ (800b518 <_printf_i+0x238>)
 800b3b2:	230a      	movs	r3, #10
 800b3b4:	e011      	b.n	800b3da <_printf_i+0xfa>
 800b3b6:	6821      	ldr	r1, [r4, #0]
 800b3b8:	6833      	ldr	r3, [r6, #0]
 800b3ba:	0608      	lsls	r0, r1, #24
 800b3bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3c0:	d402      	bmi.n	800b3c8 <_printf_i+0xe8>
 800b3c2:	0649      	lsls	r1, r1, #25
 800b3c4:	bf48      	it	mi
 800b3c6:	b2ad      	uxthmi	r5, r5
 800b3c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3ca:	4853      	ldr	r0, [pc, #332]	@ (800b518 <_printf_i+0x238>)
 800b3cc:	6033      	str	r3, [r6, #0]
 800b3ce:	bf14      	ite	ne
 800b3d0:	230a      	movne	r3, #10
 800b3d2:	2308      	moveq	r3, #8
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3da:	6866      	ldr	r6, [r4, #4]
 800b3dc:	60a6      	str	r6, [r4, #8]
 800b3de:	2e00      	cmp	r6, #0
 800b3e0:	bfa2      	ittt	ge
 800b3e2:	6821      	ldrge	r1, [r4, #0]
 800b3e4:	f021 0104 	bicge.w	r1, r1, #4
 800b3e8:	6021      	strge	r1, [r4, #0]
 800b3ea:	b90d      	cbnz	r5, 800b3f0 <_printf_i+0x110>
 800b3ec:	2e00      	cmp	r6, #0
 800b3ee:	d04b      	beq.n	800b488 <_printf_i+0x1a8>
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3f6:	fb03 5711 	mls	r7, r3, r1, r5
 800b3fa:	5dc7      	ldrb	r7, [r0, r7]
 800b3fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b400:	462f      	mov	r7, r5
 800b402:	42bb      	cmp	r3, r7
 800b404:	460d      	mov	r5, r1
 800b406:	d9f4      	bls.n	800b3f2 <_printf_i+0x112>
 800b408:	2b08      	cmp	r3, #8
 800b40a:	d10b      	bne.n	800b424 <_printf_i+0x144>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	07df      	lsls	r7, r3, #31
 800b410:	d508      	bpl.n	800b424 <_printf_i+0x144>
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	6861      	ldr	r1, [r4, #4]
 800b416:	4299      	cmp	r1, r3
 800b418:	bfde      	ittt	le
 800b41a:	2330      	movle	r3, #48	@ 0x30
 800b41c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b420:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b424:	1b92      	subs	r2, r2, r6
 800b426:	6122      	str	r2, [r4, #16]
 800b428:	f8cd a000 	str.w	sl, [sp]
 800b42c:	464b      	mov	r3, r9
 800b42e:	aa03      	add	r2, sp, #12
 800b430:	4621      	mov	r1, r4
 800b432:	4640      	mov	r0, r8
 800b434:	f7ff fee6 	bl	800b204 <_printf_common>
 800b438:	3001      	adds	r0, #1
 800b43a:	d14a      	bne.n	800b4d2 <_printf_i+0x1f2>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	b004      	add	sp, #16
 800b442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	f043 0320 	orr.w	r3, r3, #32
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	4833      	ldr	r0, [pc, #204]	@ (800b51c <_printf_i+0x23c>)
 800b450:	2778      	movs	r7, #120	@ 0x78
 800b452:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	6831      	ldr	r1, [r6, #0]
 800b45a:	061f      	lsls	r7, r3, #24
 800b45c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b460:	d402      	bmi.n	800b468 <_printf_i+0x188>
 800b462:	065f      	lsls	r7, r3, #25
 800b464:	bf48      	it	mi
 800b466:	b2ad      	uxthmi	r5, r5
 800b468:	6031      	str	r1, [r6, #0]
 800b46a:	07d9      	lsls	r1, r3, #31
 800b46c:	bf44      	itt	mi
 800b46e:	f043 0320 	orrmi.w	r3, r3, #32
 800b472:	6023      	strmi	r3, [r4, #0]
 800b474:	b11d      	cbz	r5, 800b47e <_printf_i+0x19e>
 800b476:	2310      	movs	r3, #16
 800b478:	e7ac      	b.n	800b3d4 <_printf_i+0xf4>
 800b47a:	4827      	ldr	r0, [pc, #156]	@ (800b518 <_printf_i+0x238>)
 800b47c:	e7e9      	b.n	800b452 <_printf_i+0x172>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	f023 0320 	bic.w	r3, r3, #32
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	e7f6      	b.n	800b476 <_printf_i+0x196>
 800b488:	4616      	mov	r6, r2
 800b48a:	e7bd      	b.n	800b408 <_printf_i+0x128>
 800b48c:	6833      	ldr	r3, [r6, #0]
 800b48e:	6825      	ldr	r5, [r4, #0]
 800b490:	6961      	ldr	r1, [r4, #20]
 800b492:	1d18      	adds	r0, r3, #4
 800b494:	6030      	str	r0, [r6, #0]
 800b496:	062e      	lsls	r6, r5, #24
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	d501      	bpl.n	800b4a0 <_printf_i+0x1c0>
 800b49c:	6019      	str	r1, [r3, #0]
 800b49e:	e002      	b.n	800b4a6 <_printf_i+0x1c6>
 800b4a0:	0668      	lsls	r0, r5, #25
 800b4a2:	d5fb      	bpl.n	800b49c <_printf_i+0x1bc>
 800b4a4:	8019      	strh	r1, [r3, #0]
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	4616      	mov	r6, r2
 800b4ac:	e7bc      	b.n	800b428 <_printf_i+0x148>
 800b4ae:	6833      	ldr	r3, [r6, #0]
 800b4b0:	1d1a      	adds	r2, r3, #4
 800b4b2:	6032      	str	r2, [r6, #0]
 800b4b4:	681e      	ldr	r6, [r3, #0]
 800b4b6:	6862      	ldr	r2, [r4, #4]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7f4 fea8 	bl	8000210 <memchr>
 800b4c0:	b108      	cbz	r0, 800b4c6 <_printf_i+0x1e6>
 800b4c2:	1b80      	subs	r0, r0, r6
 800b4c4:	6060      	str	r0, [r4, #4]
 800b4c6:	6863      	ldr	r3, [r4, #4]
 800b4c8:	6123      	str	r3, [r4, #16]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4d0:	e7aa      	b.n	800b428 <_printf_i+0x148>
 800b4d2:	6923      	ldr	r3, [r4, #16]
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	4640      	mov	r0, r8
 800b4da:	47d0      	blx	sl
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d0ad      	beq.n	800b43c <_printf_i+0x15c>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	079b      	lsls	r3, r3, #30
 800b4e4:	d413      	bmi.n	800b50e <_printf_i+0x22e>
 800b4e6:	68e0      	ldr	r0, [r4, #12]
 800b4e8:	9b03      	ldr	r3, [sp, #12]
 800b4ea:	4298      	cmp	r0, r3
 800b4ec:	bfb8      	it	lt
 800b4ee:	4618      	movlt	r0, r3
 800b4f0:	e7a6      	b.n	800b440 <_printf_i+0x160>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	47d0      	blx	sl
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d09d      	beq.n	800b43c <_printf_i+0x15c>
 800b500:	3501      	adds	r5, #1
 800b502:	68e3      	ldr	r3, [r4, #12]
 800b504:	9903      	ldr	r1, [sp, #12]
 800b506:	1a5b      	subs	r3, r3, r1
 800b508:	42ab      	cmp	r3, r5
 800b50a:	dcf2      	bgt.n	800b4f2 <_printf_i+0x212>
 800b50c:	e7eb      	b.n	800b4e6 <_printf_i+0x206>
 800b50e:	2500      	movs	r5, #0
 800b510:	f104 0619 	add.w	r6, r4, #25
 800b514:	e7f5      	b.n	800b502 <_printf_i+0x222>
 800b516:	bf00      	nop
 800b518:	0800dd4c 	.word	0x0800dd4c
 800b51c:	0800dd5d 	.word	0x0800dd5d

0800b520 <__sflush_r>:
 800b520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b528:	0716      	lsls	r6, r2, #28
 800b52a:	4605      	mov	r5, r0
 800b52c:	460c      	mov	r4, r1
 800b52e:	d454      	bmi.n	800b5da <__sflush_r+0xba>
 800b530:	684b      	ldr	r3, [r1, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	dc02      	bgt.n	800b53c <__sflush_r+0x1c>
 800b536:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b538:	2b00      	cmp	r3, #0
 800b53a:	dd48      	ble.n	800b5ce <__sflush_r+0xae>
 800b53c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b53e:	2e00      	cmp	r6, #0
 800b540:	d045      	beq.n	800b5ce <__sflush_r+0xae>
 800b542:	2300      	movs	r3, #0
 800b544:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b548:	682f      	ldr	r7, [r5, #0]
 800b54a:	6a21      	ldr	r1, [r4, #32]
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	d030      	beq.n	800b5b2 <__sflush_r+0x92>
 800b550:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	0759      	lsls	r1, r3, #29
 800b556:	d505      	bpl.n	800b564 <__sflush_r+0x44>
 800b558:	6863      	ldr	r3, [r4, #4]
 800b55a:	1ad2      	subs	r2, r2, r3
 800b55c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b55e:	b10b      	cbz	r3, 800b564 <__sflush_r+0x44>
 800b560:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b562:	1ad2      	subs	r2, r2, r3
 800b564:	2300      	movs	r3, #0
 800b566:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b568:	6a21      	ldr	r1, [r4, #32]
 800b56a:	4628      	mov	r0, r5
 800b56c:	47b0      	blx	r6
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	d106      	bne.n	800b582 <__sflush_r+0x62>
 800b574:	6829      	ldr	r1, [r5, #0]
 800b576:	291d      	cmp	r1, #29
 800b578:	d82b      	bhi.n	800b5d2 <__sflush_r+0xb2>
 800b57a:	4a2a      	ldr	r2, [pc, #168]	@ (800b624 <__sflush_r+0x104>)
 800b57c:	410a      	asrs	r2, r1
 800b57e:	07d6      	lsls	r6, r2, #31
 800b580:	d427      	bmi.n	800b5d2 <__sflush_r+0xb2>
 800b582:	2200      	movs	r2, #0
 800b584:	6062      	str	r2, [r4, #4]
 800b586:	04d9      	lsls	r1, r3, #19
 800b588:	6922      	ldr	r2, [r4, #16]
 800b58a:	6022      	str	r2, [r4, #0]
 800b58c:	d504      	bpl.n	800b598 <__sflush_r+0x78>
 800b58e:	1c42      	adds	r2, r0, #1
 800b590:	d101      	bne.n	800b596 <__sflush_r+0x76>
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	b903      	cbnz	r3, 800b598 <__sflush_r+0x78>
 800b596:	6560      	str	r0, [r4, #84]	@ 0x54
 800b598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b59a:	602f      	str	r7, [r5, #0]
 800b59c:	b1b9      	cbz	r1, 800b5ce <__sflush_r+0xae>
 800b59e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5a2:	4299      	cmp	r1, r3
 800b5a4:	d002      	beq.n	800b5ac <__sflush_r+0x8c>
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f7ff fc8a 	bl	800aec0 <_free_r>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5b0:	e00d      	b.n	800b5ce <__sflush_r+0xae>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	47b0      	blx	r6
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	1c50      	adds	r0, r2, #1
 800b5bc:	d1c9      	bne.n	800b552 <__sflush_r+0x32>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0c6      	beq.n	800b552 <__sflush_r+0x32>
 800b5c4:	2b1d      	cmp	r3, #29
 800b5c6:	d001      	beq.n	800b5cc <__sflush_r+0xac>
 800b5c8:	2b16      	cmp	r3, #22
 800b5ca:	d11e      	bne.n	800b60a <__sflush_r+0xea>
 800b5cc:	602f      	str	r7, [r5, #0]
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e022      	b.n	800b618 <__sflush_r+0xf8>
 800b5d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5d6:	b21b      	sxth	r3, r3
 800b5d8:	e01b      	b.n	800b612 <__sflush_r+0xf2>
 800b5da:	690f      	ldr	r7, [r1, #16]
 800b5dc:	2f00      	cmp	r7, #0
 800b5de:	d0f6      	beq.n	800b5ce <__sflush_r+0xae>
 800b5e0:	0793      	lsls	r3, r2, #30
 800b5e2:	680e      	ldr	r6, [r1, #0]
 800b5e4:	bf08      	it	eq
 800b5e6:	694b      	ldreq	r3, [r1, #20]
 800b5e8:	600f      	str	r7, [r1, #0]
 800b5ea:	bf18      	it	ne
 800b5ec:	2300      	movne	r3, #0
 800b5ee:	eba6 0807 	sub.w	r8, r6, r7
 800b5f2:	608b      	str	r3, [r1, #8]
 800b5f4:	f1b8 0f00 	cmp.w	r8, #0
 800b5f8:	dde9      	ble.n	800b5ce <__sflush_r+0xae>
 800b5fa:	6a21      	ldr	r1, [r4, #32]
 800b5fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b5fe:	4643      	mov	r3, r8
 800b600:	463a      	mov	r2, r7
 800b602:	4628      	mov	r0, r5
 800b604:	47b0      	blx	r6
 800b606:	2800      	cmp	r0, #0
 800b608:	dc08      	bgt.n	800b61c <__sflush_r+0xfc>
 800b60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	f04f 30ff 	mov.w	r0, #4294967295
 800b618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b61c:	4407      	add	r7, r0
 800b61e:	eba8 0800 	sub.w	r8, r8, r0
 800b622:	e7e7      	b.n	800b5f4 <__sflush_r+0xd4>
 800b624:	dfbffffe 	.word	0xdfbffffe

0800b628 <_fflush_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	690b      	ldr	r3, [r1, #16]
 800b62c:	4605      	mov	r5, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	b913      	cbnz	r3, 800b638 <_fflush_r+0x10>
 800b632:	2500      	movs	r5, #0
 800b634:	4628      	mov	r0, r5
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	b118      	cbz	r0, 800b642 <_fflush_r+0x1a>
 800b63a:	6a03      	ldr	r3, [r0, #32]
 800b63c:	b90b      	cbnz	r3, 800b642 <_fflush_r+0x1a>
 800b63e:	f7ff fafb 	bl	800ac38 <__sinit>
 800b642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d0f3      	beq.n	800b632 <_fflush_r+0xa>
 800b64a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b64c:	07d0      	lsls	r0, r2, #31
 800b64e:	d404      	bmi.n	800b65a <_fflush_r+0x32>
 800b650:	0599      	lsls	r1, r3, #22
 800b652:	d402      	bmi.n	800b65a <_fflush_r+0x32>
 800b654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b656:	f7ff fc12 	bl	800ae7e <__retarget_lock_acquire_recursive>
 800b65a:	4628      	mov	r0, r5
 800b65c:	4621      	mov	r1, r4
 800b65e:	f7ff ff5f 	bl	800b520 <__sflush_r>
 800b662:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b664:	07da      	lsls	r2, r3, #31
 800b666:	4605      	mov	r5, r0
 800b668:	d4e4      	bmi.n	800b634 <_fflush_r+0xc>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	059b      	lsls	r3, r3, #22
 800b66e:	d4e1      	bmi.n	800b634 <_fflush_r+0xc>
 800b670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b672:	f7ff fc05 	bl	800ae80 <__retarget_lock_release_recursive>
 800b676:	e7dd      	b.n	800b634 <_fflush_r+0xc>

0800b678 <fiprintf>:
 800b678:	b40e      	push	{r1, r2, r3}
 800b67a:	b503      	push	{r0, r1, lr}
 800b67c:	4601      	mov	r1, r0
 800b67e:	ab03      	add	r3, sp, #12
 800b680:	4805      	ldr	r0, [pc, #20]	@ (800b698 <fiprintf+0x20>)
 800b682:	f853 2b04 	ldr.w	r2, [r3], #4
 800b686:	6800      	ldr	r0, [r0, #0]
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	f000 f88d 	bl	800b7a8 <_vfiprintf_r>
 800b68e:	b002      	add	sp, #8
 800b690:	f85d eb04 	ldr.w	lr, [sp], #4
 800b694:	b003      	add	sp, #12
 800b696:	4770      	bx	lr
 800b698:	200000b4 	.word	0x200000b4

0800b69c <memmove>:
 800b69c:	4288      	cmp	r0, r1
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	eb01 0402 	add.w	r4, r1, r2
 800b6a4:	d902      	bls.n	800b6ac <memmove+0x10>
 800b6a6:	4284      	cmp	r4, r0
 800b6a8:	4623      	mov	r3, r4
 800b6aa:	d807      	bhi.n	800b6bc <memmove+0x20>
 800b6ac:	1e43      	subs	r3, r0, #1
 800b6ae:	42a1      	cmp	r1, r4
 800b6b0:	d008      	beq.n	800b6c4 <memmove+0x28>
 800b6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ba:	e7f8      	b.n	800b6ae <memmove+0x12>
 800b6bc:	4402      	add	r2, r0
 800b6be:	4601      	mov	r1, r0
 800b6c0:	428a      	cmp	r2, r1
 800b6c2:	d100      	bne.n	800b6c6 <memmove+0x2a>
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ce:	e7f7      	b.n	800b6c0 <memmove+0x24>

0800b6d0 <memcpy>:
 800b6d0:	440a      	add	r2, r1
 800b6d2:	4291      	cmp	r1, r2
 800b6d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6d8:	d100      	bne.n	800b6dc <memcpy+0xc>
 800b6da:	4770      	bx	lr
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6e6:	4291      	cmp	r1, r2
 800b6e8:	d1f9      	bne.n	800b6de <memcpy+0xe>
 800b6ea:	bd10      	pop	{r4, pc}

0800b6ec <abort>:
 800b6ec:	b508      	push	{r3, lr}
 800b6ee:	2006      	movs	r0, #6
 800b6f0:	f000 fa2e 	bl	800bb50 <raise>
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	f7f5 fee9 	bl	80014cc <_exit>

0800b6fa <_realloc_r>:
 800b6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fe:	4680      	mov	r8, r0
 800b700:	4615      	mov	r5, r2
 800b702:	460c      	mov	r4, r1
 800b704:	b921      	cbnz	r1, 800b710 <_realloc_r+0x16>
 800b706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b70a:	4611      	mov	r1, r2
 800b70c:	f7ff b93e 	b.w	800a98c <_malloc_r>
 800b710:	b92a      	cbnz	r2, 800b71e <_realloc_r+0x24>
 800b712:	f7ff fbd5 	bl	800aec0 <_free_r>
 800b716:	2400      	movs	r4, #0
 800b718:	4620      	mov	r0, r4
 800b71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71e:	f000 fa33 	bl	800bb88 <_malloc_usable_size_r>
 800b722:	4285      	cmp	r5, r0
 800b724:	4606      	mov	r6, r0
 800b726:	d802      	bhi.n	800b72e <_realloc_r+0x34>
 800b728:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b72c:	d8f4      	bhi.n	800b718 <_realloc_r+0x1e>
 800b72e:	4629      	mov	r1, r5
 800b730:	4640      	mov	r0, r8
 800b732:	f7ff f92b 	bl	800a98c <_malloc_r>
 800b736:	4607      	mov	r7, r0
 800b738:	2800      	cmp	r0, #0
 800b73a:	d0ec      	beq.n	800b716 <_realloc_r+0x1c>
 800b73c:	42b5      	cmp	r5, r6
 800b73e:	462a      	mov	r2, r5
 800b740:	4621      	mov	r1, r4
 800b742:	bf28      	it	cs
 800b744:	4632      	movcs	r2, r6
 800b746:	f7ff ffc3 	bl	800b6d0 <memcpy>
 800b74a:	4621      	mov	r1, r4
 800b74c:	4640      	mov	r0, r8
 800b74e:	f7ff fbb7 	bl	800aec0 <_free_r>
 800b752:	463c      	mov	r4, r7
 800b754:	e7e0      	b.n	800b718 <_realloc_r+0x1e>

0800b756 <__sfputc_r>:
 800b756:	6893      	ldr	r3, [r2, #8]
 800b758:	3b01      	subs	r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	b410      	push	{r4}
 800b75e:	6093      	str	r3, [r2, #8]
 800b760:	da08      	bge.n	800b774 <__sfputc_r+0x1e>
 800b762:	6994      	ldr	r4, [r2, #24]
 800b764:	42a3      	cmp	r3, r4
 800b766:	db01      	blt.n	800b76c <__sfputc_r+0x16>
 800b768:	290a      	cmp	r1, #10
 800b76a:	d103      	bne.n	800b774 <__sfputc_r+0x1e>
 800b76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b770:	f000 b932 	b.w	800b9d8 <__swbuf_r>
 800b774:	6813      	ldr	r3, [r2, #0]
 800b776:	1c58      	adds	r0, r3, #1
 800b778:	6010      	str	r0, [r2, #0]
 800b77a:	7019      	strb	r1, [r3, #0]
 800b77c:	4608      	mov	r0, r1
 800b77e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <__sfputs_r>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	4606      	mov	r6, r0
 800b788:	460f      	mov	r7, r1
 800b78a:	4614      	mov	r4, r2
 800b78c:	18d5      	adds	r5, r2, r3
 800b78e:	42ac      	cmp	r4, r5
 800b790:	d101      	bne.n	800b796 <__sfputs_r+0x12>
 800b792:	2000      	movs	r0, #0
 800b794:	e007      	b.n	800b7a6 <__sfputs_r+0x22>
 800b796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79a:	463a      	mov	r2, r7
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff ffda 	bl	800b756 <__sfputc_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	d1f3      	bne.n	800b78e <__sfputs_r+0xa>
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7a8 <_vfiprintf_r>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	460d      	mov	r5, r1
 800b7ae:	b09d      	sub	sp, #116	@ 0x74
 800b7b0:	4614      	mov	r4, r2
 800b7b2:	4698      	mov	r8, r3
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	b118      	cbz	r0, 800b7c0 <_vfiprintf_r+0x18>
 800b7b8:	6a03      	ldr	r3, [r0, #32]
 800b7ba:	b90b      	cbnz	r3, 800b7c0 <_vfiprintf_r+0x18>
 800b7bc:	f7ff fa3c 	bl	800ac38 <__sinit>
 800b7c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7c2:	07d9      	lsls	r1, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_vfiprintf_r+0x2a>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	059a      	lsls	r2, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_vfiprintf_r+0x2a>
 800b7cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7ce:	f7ff fb56 	bl	800ae7e <__retarget_lock_acquire_recursive>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	071b      	lsls	r3, r3, #28
 800b7d6:	d501      	bpl.n	800b7dc <_vfiprintf_r+0x34>
 800b7d8:	692b      	ldr	r3, [r5, #16]
 800b7da:	b99b      	cbnz	r3, 800b804 <_vfiprintf_r+0x5c>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f000 f938 	bl	800ba54 <__swsetup_r>
 800b7e4:	b170      	cbz	r0, 800b804 <_vfiprintf_r+0x5c>
 800b7e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7e8:	07dc      	lsls	r4, r3, #31
 800b7ea:	d504      	bpl.n	800b7f6 <_vfiprintf_r+0x4e>
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	b01d      	add	sp, #116	@ 0x74
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	89ab      	ldrh	r3, [r5, #12]
 800b7f8:	0598      	lsls	r0, r3, #22
 800b7fa:	d4f7      	bmi.n	800b7ec <_vfiprintf_r+0x44>
 800b7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7fe:	f7ff fb3f 	bl	800ae80 <__retarget_lock_release_recursive>
 800b802:	e7f3      	b.n	800b7ec <_vfiprintf_r+0x44>
 800b804:	2300      	movs	r3, #0
 800b806:	9309      	str	r3, [sp, #36]	@ 0x24
 800b808:	2320      	movs	r3, #32
 800b80a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b812:	2330      	movs	r3, #48	@ 0x30
 800b814:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9c4 <_vfiprintf_r+0x21c>
 800b818:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b81c:	f04f 0901 	mov.w	r9, #1
 800b820:	4623      	mov	r3, r4
 800b822:	469a      	mov	sl, r3
 800b824:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b828:	b10a      	cbz	r2, 800b82e <_vfiprintf_r+0x86>
 800b82a:	2a25      	cmp	r2, #37	@ 0x25
 800b82c:	d1f9      	bne.n	800b822 <_vfiprintf_r+0x7a>
 800b82e:	ebba 0b04 	subs.w	fp, sl, r4
 800b832:	d00b      	beq.n	800b84c <_vfiprintf_r+0xa4>
 800b834:	465b      	mov	r3, fp
 800b836:	4622      	mov	r2, r4
 800b838:	4629      	mov	r1, r5
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7ff ffa2 	bl	800b784 <__sfputs_r>
 800b840:	3001      	adds	r0, #1
 800b842:	f000 80a7 	beq.w	800b994 <_vfiprintf_r+0x1ec>
 800b846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b848:	445a      	add	r2, fp
 800b84a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b84c:	f89a 3000 	ldrb.w	r3, [sl]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 809f 	beq.w	800b994 <_vfiprintf_r+0x1ec>
 800b856:	2300      	movs	r3, #0
 800b858:	f04f 32ff 	mov.w	r2, #4294967295
 800b85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b860:	f10a 0a01 	add.w	sl, sl, #1
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	9307      	str	r3, [sp, #28]
 800b868:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b86c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b86e:	4654      	mov	r4, sl
 800b870:	2205      	movs	r2, #5
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	4853      	ldr	r0, [pc, #332]	@ (800b9c4 <_vfiprintf_r+0x21c>)
 800b878:	f7f4 fcca 	bl	8000210 <memchr>
 800b87c:	9a04      	ldr	r2, [sp, #16]
 800b87e:	b9d8      	cbnz	r0, 800b8b8 <_vfiprintf_r+0x110>
 800b880:	06d1      	lsls	r1, r2, #27
 800b882:	bf44      	itt	mi
 800b884:	2320      	movmi	r3, #32
 800b886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b88a:	0713      	lsls	r3, r2, #28
 800b88c:	bf44      	itt	mi
 800b88e:	232b      	movmi	r3, #43	@ 0x2b
 800b890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b894:	f89a 3000 	ldrb.w	r3, [sl]
 800b898:	2b2a      	cmp	r3, #42	@ 0x2a
 800b89a:	d015      	beq.n	800b8c8 <_vfiprintf_r+0x120>
 800b89c:	9a07      	ldr	r2, [sp, #28]
 800b89e:	4654      	mov	r4, sl
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	f04f 0c0a 	mov.w	ip, #10
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ac:	3b30      	subs	r3, #48	@ 0x30
 800b8ae:	2b09      	cmp	r3, #9
 800b8b0:	d94b      	bls.n	800b94a <_vfiprintf_r+0x1a2>
 800b8b2:	b1b0      	cbz	r0, 800b8e2 <_vfiprintf_r+0x13a>
 800b8b4:	9207      	str	r2, [sp, #28]
 800b8b6:	e014      	b.n	800b8e2 <_vfiprintf_r+0x13a>
 800b8b8:	eba0 0308 	sub.w	r3, r0, r8
 800b8bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	46a2      	mov	sl, r4
 800b8c6:	e7d2      	b.n	800b86e <_vfiprintf_r+0xc6>
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	1d19      	adds	r1, r3, #4
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	9103      	str	r1, [sp, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bfbb      	ittet	lt
 800b8d4:	425b      	neglt	r3, r3
 800b8d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8da:	9307      	strge	r3, [sp, #28]
 800b8dc:	9307      	strlt	r3, [sp, #28]
 800b8de:	bfb8      	it	lt
 800b8e0:	9204      	strlt	r2, [sp, #16]
 800b8e2:	7823      	ldrb	r3, [r4, #0]
 800b8e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8e6:	d10a      	bne.n	800b8fe <_vfiprintf_r+0x156>
 800b8e8:	7863      	ldrb	r3, [r4, #1]
 800b8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ec:	d132      	bne.n	800b954 <_vfiprintf_r+0x1ac>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	1d1a      	adds	r2, r3, #4
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	9203      	str	r2, [sp, #12]
 800b8f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8fa:	3402      	adds	r4, #2
 800b8fc:	9305      	str	r3, [sp, #20]
 800b8fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9d4 <_vfiprintf_r+0x22c>
 800b902:	7821      	ldrb	r1, [r4, #0]
 800b904:	2203      	movs	r2, #3
 800b906:	4650      	mov	r0, sl
 800b908:	f7f4 fc82 	bl	8000210 <memchr>
 800b90c:	b138      	cbz	r0, 800b91e <_vfiprintf_r+0x176>
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	eba0 000a 	sub.w	r0, r0, sl
 800b914:	2240      	movs	r2, #64	@ 0x40
 800b916:	4082      	lsls	r2, r0
 800b918:	4313      	orrs	r3, r2
 800b91a:	3401      	adds	r4, #1
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b922:	4829      	ldr	r0, [pc, #164]	@ (800b9c8 <_vfiprintf_r+0x220>)
 800b924:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b928:	2206      	movs	r2, #6
 800b92a:	f7f4 fc71 	bl	8000210 <memchr>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d03f      	beq.n	800b9b2 <_vfiprintf_r+0x20a>
 800b932:	4b26      	ldr	r3, [pc, #152]	@ (800b9cc <_vfiprintf_r+0x224>)
 800b934:	bb1b      	cbnz	r3, 800b97e <_vfiprintf_r+0x1d6>
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	3307      	adds	r3, #7
 800b93a:	f023 0307 	bic.w	r3, r3, #7
 800b93e:	3308      	adds	r3, #8
 800b940:	9303      	str	r3, [sp, #12]
 800b942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b944:	443b      	add	r3, r7
 800b946:	9309      	str	r3, [sp, #36]	@ 0x24
 800b948:	e76a      	b.n	800b820 <_vfiprintf_r+0x78>
 800b94a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b94e:	460c      	mov	r4, r1
 800b950:	2001      	movs	r0, #1
 800b952:	e7a8      	b.n	800b8a6 <_vfiprintf_r+0xfe>
 800b954:	2300      	movs	r3, #0
 800b956:	3401      	adds	r4, #1
 800b958:	9305      	str	r3, [sp, #20]
 800b95a:	4619      	mov	r1, r3
 800b95c:	f04f 0c0a 	mov.w	ip, #10
 800b960:	4620      	mov	r0, r4
 800b962:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b966:	3a30      	subs	r2, #48	@ 0x30
 800b968:	2a09      	cmp	r2, #9
 800b96a:	d903      	bls.n	800b974 <_vfiprintf_r+0x1cc>
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0c6      	beq.n	800b8fe <_vfiprintf_r+0x156>
 800b970:	9105      	str	r1, [sp, #20]
 800b972:	e7c4      	b.n	800b8fe <_vfiprintf_r+0x156>
 800b974:	fb0c 2101 	mla	r1, ip, r1, r2
 800b978:	4604      	mov	r4, r0
 800b97a:	2301      	movs	r3, #1
 800b97c:	e7f0      	b.n	800b960 <_vfiprintf_r+0x1b8>
 800b97e:	ab03      	add	r3, sp, #12
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	462a      	mov	r2, r5
 800b984:	4b12      	ldr	r3, [pc, #72]	@ (800b9d0 <_vfiprintf_r+0x228>)
 800b986:	a904      	add	r1, sp, #16
 800b988:	4630      	mov	r0, r6
 800b98a:	f3af 8000 	nop.w
 800b98e:	4607      	mov	r7, r0
 800b990:	1c78      	adds	r0, r7, #1
 800b992:	d1d6      	bne.n	800b942 <_vfiprintf_r+0x19a>
 800b994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b996:	07d9      	lsls	r1, r3, #31
 800b998:	d405      	bmi.n	800b9a6 <_vfiprintf_r+0x1fe>
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	059a      	lsls	r2, r3, #22
 800b99e:	d402      	bmi.n	800b9a6 <_vfiprintf_r+0x1fe>
 800b9a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9a2:	f7ff fa6d 	bl	800ae80 <__retarget_lock_release_recursive>
 800b9a6:	89ab      	ldrh	r3, [r5, #12]
 800b9a8:	065b      	lsls	r3, r3, #25
 800b9aa:	f53f af1f 	bmi.w	800b7ec <_vfiprintf_r+0x44>
 800b9ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9b0:	e71e      	b.n	800b7f0 <_vfiprintf_r+0x48>
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	4b05      	ldr	r3, [pc, #20]	@ (800b9d0 <_vfiprintf_r+0x228>)
 800b9ba:	a904      	add	r1, sp, #16
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7ff fc8f 	bl	800b2e0 <_printf_i>
 800b9c2:	e7e4      	b.n	800b98e <_vfiprintf_r+0x1e6>
 800b9c4:	0800dd3b 	.word	0x0800dd3b
 800b9c8:	0800dd45 	.word	0x0800dd45
 800b9cc:	00000000 	.word	0x00000000
 800b9d0:	0800b785 	.word	0x0800b785
 800b9d4:	0800dd41 	.word	0x0800dd41

0800b9d8 <__swbuf_r>:
 800b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9da:	460e      	mov	r6, r1
 800b9dc:	4614      	mov	r4, r2
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b118      	cbz	r0, 800b9ea <__swbuf_r+0x12>
 800b9e2:	6a03      	ldr	r3, [r0, #32]
 800b9e4:	b90b      	cbnz	r3, 800b9ea <__swbuf_r+0x12>
 800b9e6:	f7ff f927 	bl	800ac38 <__sinit>
 800b9ea:	69a3      	ldr	r3, [r4, #24]
 800b9ec:	60a3      	str	r3, [r4, #8]
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	071a      	lsls	r2, r3, #28
 800b9f2:	d501      	bpl.n	800b9f8 <__swbuf_r+0x20>
 800b9f4:	6923      	ldr	r3, [r4, #16]
 800b9f6:	b943      	cbnz	r3, 800ba0a <__swbuf_r+0x32>
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f82a 	bl	800ba54 <__swsetup_r>
 800ba00:	b118      	cbz	r0, 800ba0a <__swbuf_r+0x32>
 800ba02:	f04f 37ff 	mov.w	r7, #4294967295
 800ba06:	4638      	mov	r0, r7
 800ba08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	6922      	ldr	r2, [r4, #16]
 800ba0e:	1a98      	subs	r0, r3, r2
 800ba10:	6963      	ldr	r3, [r4, #20]
 800ba12:	b2f6      	uxtb	r6, r6
 800ba14:	4283      	cmp	r3, r0
 800ba16:	4637      	mov	r7, r6
 800ba18:	dc05      	bgt.n	800ba26 <__swbuf_r+0x4e>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f7ff fe03 	bl	800b628 <_fflush_r>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d1ed      	bne.n	800ba02 <__swbuf_r+0x2a>
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	60a3      	str	r3, [r4, #8]
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	6022      	str	r2, [r4, #0]
 800ba32:	701e      	strb	r6, [r3, #0]
 800ba34:	6962      	ldr	r2, [r4, #20]
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d004      	beq.n	800ba46 <__swbuf_r+0x6e>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	07db      	lsls	r3, r3, #31
 800ba40:	d5e1      	bpl.n	800ba06 <__swbuf_r+0x2e>
 800ba42:	2e0a      	cmp	r6, #10
 800ba44:	d1df      	bne.n	800ba06 <__swbuf_r+0x2e>
 800ba46:	4621      	mov	r1, r4
 800ba48:	4628      	mov	r0, r5
 800ba4a:	f7ff fded 	bl	800b628 <_fflush_r>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d0d9      	beq.n	800ba06 <__swbuf_r+0x2e>
 800ba52:	e7d6      	b.n	800ba02 <__swbuf_r+0x2a>

0800ba54 <__swsetup_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4b29      	ldr	r3, [pc, #164]	@ (800bafc <__swsetup_r+0xa8>)
 800ba58:	4605      	mov	r5, r0
 800ba5a:	6818      	ldr	r0, [r3, #0]
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	b118      	cbz	r0, 800ba68 <__swsetup_r+0x14>
 800ba60:	6a03      	ldr	r3, [r0, #32]
 800ba62:	b90b      	cbnz	r3, 800ba68 <__swsetup_r+0x14>
 800ba64:	f7ff f8e8 	bl	800ac38 <__sinit>
 800ba68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba6c:	0719      	lsls	r1, r3, #28
 800ba6e:	d422      	bmi.n	800bab6 <__swsetup_r+0x62>
 800ba70:	06da      	lsls	r2, r3, #27
 800ba72:	d407      	bmi.n	800ba84 <__swsetup_r+0x30>
 800ba74:	2209      	movs	r2, #9
 800ba76:	602a      	str	r2, [r5, #0]
 800ba78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba82:	e033      	b.n	800baec <__swsetup_r+0x98>
 800ba84:	0758      	lsls	r0, r3, #29
 800ba86:	d512      	bpl.n	800baae <__swsetup_r+0x5a>
 800ba88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba8a:	b141      	cbz	r1, 800ba9e <__swsetup_r+0x4a>
 800ba8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba90:	4299      	cmp	r1, r3
 800ba92:	d002      	beq.n	800ba9a <__swsetup_r+0x46>
 800ba94:	4628      	mov	r0, r5
 800ba96:	f7ff fa13 	bl	800aec0 <_free_r>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800baa4:	81a3      	strh	r3, [r4, #12]
 800baa6:	2300      	movs	r3, #0
 800baa8:	6063      	str	r3, [r4, #4]
 800baaa:	6923      	ldr	r3, [r4, #16]
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	f043 0308 	orr.w	r3, r3, #8
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	6923      	ldr	r3, [r4, #16]
 800bab8:	b94b      	cbnz	r3, 800bace <__swsetup_r+0x7a>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bac4:	d003      	beq.n	800bace <__swsetup_r+0x7a>
 800bac6:	4621      	mov	r1, r4
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 f88b 	bl	800bbe4 <__smakebuf_r>
 800bace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bad2:	f013 0201 	ands.w	r2, r3, #1
 800bad6:	d00a      	beq.n	800baee <__swsetup_r+0x9a>
 800bad8:	2200      	movs	r2, #0
 800bada:	60a2      	str	r2, [r4, #8]
 800badc:	6962      	ldr	r2, [r4, #20]
 800bade:	4252      	negs	r2, r2
 800bae0:	61a2      	str	r2, [r4, #24]
 800bae2:	6922      	ldr	r2, [r4, #16]
 800bae4:	b942      	cbnz	r2, 800baf8 <__swsetup_r+0xa4>
 800bae6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800baea:	d1c5      	bne.n	800ba78 <__swsetup_r+0x24>
 800baec:	bd38      	pop	{r3, r4, r5, pc}
 800baee:	0799      	lsls	r1, r3, #30
 800baf0:	bf58      	it	pl
 800baf2:	6962      	ldrpl	r2, [r4, #20]
 800baf4:	60a2      	str	r2, [r4, #8]
 800baf6:	e7f4      	b.n	800bae2 <__swsetup_r+0x8e>
 800baf8:	2000      	movs	r0, #0
 800bafa:	e7f7      	b.n	800baec <__swsetup_r+0x98>
 800bafc:	200000b4 	.word	0x200000b4

0800bb00 <_raise_r>:
 800bb00:	291f      	cmp	r1, #31
 800bb02:	b538      	push	{r3, r4, r5, lr}
 800bb04:	4605      	mov	r5, r0
 800bb06:	460c      	mov	r4, r1
 800bb08:	d904      	bls.n	800bb14 <_raise_r+0x14>
 800bb0a:	2316      	movs	r3, #22
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bb16:	b112      	cbz	r2, 800bb1e <_raise_r+0x1e>
 800bb18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb1c:	b94b      	cbnz	r3, 800bb32 <_raise_r+0x32>
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 f830 	bl	800bb84 <_getpid_r>
 800bb24:	4622      	mov	r2, r4
 800bb26:	4601      	mov	r1, r0
 800bb28:	4628      	mov	r0, r5
 800bb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb2e:	f000 b817 	b.w	800bb60 <_kill_r>
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d00a      	beq.n	800bb4c <_raise_r+0x4c>
 800bb36:	1c59      	adds	r1, r3, #1
 800bb38:	d103      	bne.n	800bb42 <_raise_r+0x42>
 800bb3a:	2316      	movs	r3, #22
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	2001      	movs	r0, #1
 800bb40:	e7e7      	b.n	800bb12 <_raise_r+0x12>
 800bb42:	2100      	movs	r1, #0
 800bb44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb48:	4620      	mov	r0, r4
 800bb4a:	4798      	blx	r3
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	e7e0      	b.n	800bb12 <_raise_r+0x12>

0800bb50 <raise>:
 800bb50:	4b02      	ldr	r3, [pc, #8]	@ (800bb5c <raise+0xc>)
 800bb52:	4601      	mov	r1, r0
 800bb54:	6818      	ldr	r0, [r3, #0]
 800bb56:	f7ff bfd3 	b.w	800bb00 <_raise_r>
 800bb5a:	bf00      	nop
 800bb5c:	200000b4 	.word	0x200000b4

0800bb60 <_kill_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d07      	ldr	r5, [pc, #28]	@ (800bb80 <_kill_r+0x20>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	602b      	str	r3, [r5, #0]
 800bb6e:	f7f5 fc9d 	bl	80014ac <_kill>
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	d102      	bne.n	800bb7c <_kill_r+0x1c>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	b103      	cbz	r3, 800bb7c <_kill_r+0x1c>
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	bd38      	pop	{r3, r4, r5, pc}
 800bb7e:	bf00      	nop
 800bb80:	20000aa0 	.word	0x20000aa0

0800bb84 <_getpid_r>:
 800bb84:	f7f5 bc8a 	b.w	800149c <_getpid>

0800bb88 <_malloc_usable_size_r>:
 800bb88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb8c:	1f18      	subs	r0, r3, #4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	bfbc      	itt	lt
 800bb92:	580b      	ldrlt	r3, [r1, r0]
 800bb94:	18c0      	addlt	r0, r0, r3
 800bb96:	4770      	bx	lr

0800bb98 <__swhatbuf_r>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba0:	2900      	cmp	r1, #0
 800bba2:	b096      	sub	sp, #88	@ 0x58
 800bba4:	4615      	mov	r5, r2
 800bba6:	461e      	mov	r6, r3
 800bba8:	da0d      	bge.n	800bbc6 <__swhatbuf_r+0x2e>
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bbb0:	f04f 0100 	mov.w	r1, #0
 800bbb4:	bf14      	ite	ne
 800bbb6:	2340      	movne	r3, #64	@ 0x40
 800bbb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	6031      	str	r1, [r6, #0]
 800bbc0:	602b      	str	r3, [r5, #0]
 800bbc2:	b016      	add	sp, #88	@ 0x58
 800bbc4:	bd70      	pop	{r4, r5, r6, pc}
 800bbc6:	466a      	mov	r2, sp
 800bbc8:	f000 f848 	bl	800bc5c <_fstat_r>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	dbec      	blt.n	800bbaa <__swhatbuf_r+0x12>
 800bbd0:	9901      	ldr	r1, [sp, #4]
 800bbd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bbd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bbda:	4259      	negs	r1, r3
 800bbdc:	4159      	adcs	r1, r3
 800bbde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbe2:	e7eb      	b.n	800bbbc <__swhatbuf_r+0x24>

0800bbe4 <__smakebuf_r>:
 800bbe4:	898b      	ldrh	r3, [r1, #12]
 800bbe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbe8:	079d      	lsls	r5, r3, #30
 800bbea:	4606      	mov	r6, r0
 800bbec:	460c      	mov	r4, r1
 800bbee:	d507      	bpl.n	800bc00 <__smakebuf_r+0x1c>
 800bbf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	6123      	str	r3, [r4, #16]
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	6163      	str	r3, [r4, #20]
 800bbfc:	b003      	add	sp, #12
 800bbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc00:	ab01      	add	r3, sp, #4
 800bc02:	466a      	mov	r2, sp
 800bc04:	f7ff ffc8 	bl	800bb98 <__swhatbuf_r>
 800bc08:	9f00      	ldr	r7, [sp, #0]
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f7fe febc 	bl	800a98c <_malloc_r>
 800bc14:	b948      	cbnz	r0, 800bc2a <__smakebuf_r+0x46>
 800bc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc1a:	059a      	lsls	r2, r3, #22
 800bc1c:	d4ee      	bmi.n	800bbfc <__smakebuf_r+0x18>
 800bc1e:	f023 0303 	bic.w	r3, r3, #3
 800bc22:	f043 0302 	orr.w	r3, r3, #2
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	e7e2      	b.n	800bbf0 <__smakebuf_r+0xc>
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	6020      	str	r0, [r4, #0]
 800bc2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc32:	81a3      	strh	r3, [r4, #12]
 800bc34:	9b01      	ldr	r3, [sp, #4]
 800bc36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc3a:	b15b      	cbz	r3, 800bc54 <__smakebuf_r+0x70>
 800bc3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc40:	4630      	mov	r0, r6
 800bc42:	f000 f81d 	bl	800bc80 <_isatty_r>
 800bc46:	b128      	cbz	r0, 800bc54 <__smakebuf_r+0x70>
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	f023 0303 	bic.w	r3, r3, #3
 800bc4e:	f043 0301 	orr.w	r3, r3, #1
 800bc52:	81a3      	strh	r3, [r4, #12]
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	431d      	orrs	r5, r3
 800bc58:	81a5      	strh	r5, [r4, #12]
 800bc5a:	e7cf      	b.n	800bbfc <__smakebuf_r+0x18>

0800bc5c <_fstat_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	4d07      	ldr	r5, [pc, #28]	@ (800bc7c <_fstat_r+0x20>)
 800bc60:	2300      	movs	r3, #0
 800bc62:	4604      	mov	r4, r0
 800bc64:	4608      	mov	r0, r1
 800bc66:	4611      	mov	r1, r2
 800bc68:	602b      	str	r3, [r5, #0]
 800bc6a:	f7f5 fc7f 	bl	800156c <_fstat>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	d102      	bne.n	800bc78 <_fstat_r+0x1c>
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	b103      	cbz	r3, 800bc78 <_fstat_r+0x1c>
 800bc76:	6023      	str	r3, [r4, #0]
 800bc78:	bd38      	pop	{r3, r4, r5, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20000aa0 	.word	0x20000aa0

0800bc80 <_isatty_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d06      	ldr	r5, [pc, #24]	@ (800bc9c <_isatty_r+0x1c>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	602b      	str	r3, [r5, #0]
 800bc8c:	f7f5 fc7e 	bl	800158c <_isatty>
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d102      	bne.n	800bc9a <_isatty_r+0x1a>
 800bc94:	682b      	ldr	r3, [r5, #0]
 800bc96:	b103      	cbz	r3, 800bc9a <_isatty_r+0x1a>
 800bc98:	6023      	str	r3, [r4, #0]
 800bc9a:	bd38      	pop	{r3, r4, r5, pc}
 800bc9c:	20000aa0 	.word	0x20000aa0

0800bca0 <_init>:
 800bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca2:	bf00      	nop
 800bca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca6:	bc08      	pop	{r3}
 800bca8:	469e      	mov	lr, r3
 800bcaa:	4770      	bx	lr

0800bcac <_fini>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	bf00      	nop
 800bcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb2:	bc08      	pop	{r3}
 800bcb4:	469e      	mov	lr, r3
 800bcb6:	4770      	bx	lr
